package com.pb2
{
	// PB2Works.
	import com.pb2works.lua.*;
	import com.pb2works.net.NativeDatagramSocket;

	// Third party
	import com.adobe.crypto.MD5;
	import com.adobe.images.*;
	import com.hurlant.util.*;
	import com.jac.mouse.*;
	import com.pb2works.*;
	import com.pb2.renderer.*;
	import com.pb2.LuaEvents;

	// Flash
	import fl.motion.*;
	import flash.display.*;
	import flash.events.*;
	import flash.external.*;
	import flash.filters.*;
	import flash.geom.*;
	import flash.media.*;
	import flash.net.*;
	import flash.system.*;
	import flash.text.*;
	import flash.ui.*;
	import flash.utils.*;
	import com.pb2.renderer.rendergroup.Particles.PB2Particle;

	// AIR
	import flash.desktop.NativeApplication;
	import flash.filesystem.File;
	import flash.filesystem.FileStream;
	import flash.filesystem.FileMode;

	import com.pb2.renderer.rendergroup.RenderParticles;

	public class PB2Game extends MovieClip
	{
		// Custom servers.
		public var customServers: Vector.<Vector.<String>>;

		// Hell mode.
		// Super fucking easy mode.
		// HELL.
		public var maxTimeWarps: int;
		public var usedTimeWarps: int;
		public var maxTimewarpHitTrigger: int;

		// #triggers <#1131286062161993788> "On synchronize and get synchronizer slot" + More.
		public var varSynchronizer:int;
		public var varSyncListeners:Object = {};
		public var varSyncHooks:Object     = {};
		public var varSyncApproved:Boolean = true;
		// #plans 1080037442222034964 "Protocol Change"
		public var receiving_length:int;
		// packet encoding/decoding
		public var packet_replacements:Array = new Array(
			new Array("#", "[ht]"),
			new Array("?", "[qm]"),
			new Array("|", "[^I]")
		);

		// UDP
		public var match_token:String;
		public var GAME_STARTED:Boolean = false;
		public var UDP_socket:NativeDatagramSocket = null;

		// Others
		public var EXT:PB2E;
		public var acceleratedRenderer:AcceleratedRenderer;
		public var workingDirectory:File;
		public var launchArguments:Object;
		public var action_draw:Object;
		public var current_draw:Sprite;
		public var total_rasterized:int = 0;
		public var uploading_rasters:Boolean = false;
		public var on_variable_change:Object = {};
		public var lock_lag_controls:Boolean;
		public var MP_map_preview_server:String;
		public var DRAW_EARTH:Boolean;
		public var REFRESHING_MAP:Boolean;
		public var TO_SEND_REFRESH:Boolean;
		public var IN_GAME:Boolean;
		public static var GAME:PB2Game;
		public var KINETIC_IN_WALLS:Boolean = false;

		// Lua
		public var LUA:LuaState = null;
		public var LAPI:LuaAPI = null;
		public var LUA_API_CODE:String;
		public var luaChatListeners:LuaEvents    = new LuaEvents();
		public var luaFrameListeners:LuaEvents   = new LuaEvents();
		public var luaKeyDownListeners:LuaEvents = new LuaEvents();
		public var luaKeyUpListeners:LuaEvents   = new LuaEvents();

		// (Runtime-linked) Flash objects
		public var bg_custom:MovieClip;
		public var intro_mpdb:SimpleButton;
		public var intro_ftb:SimpleButton;
		public var debug_times:MovieClip;
		public var ad:DisplayObject;
		public var pb2:MovieClip;
		public var e_1:MovieClip;
		public var sc_up1:SimpleButton;
		public var curserv2:SimpleButton;
		public var body1_prev:SimpleButton;
		public var menu_start2:SimpleButton;
		public var errmenu:MovieClip;
		public var cmid:TextField;
		public var gamemenu:MovieClip;
		public var pcg:MovieClip;
		public var pb3:MovieClip;
		public var ggg:MovieClip;
		public var map_preview_big_lobby:MovieClip;
		public var hf_1:MovieClip;
		public var e_2:MovieClip;
		public var sc_scrool:SimpleButton;
		public var sc_up2:SimpleButton;
		public var hit_1:MovieClip;
		public var v_1x:MovieClip;
		public var mp_auto_con_1:MovieClip;
		public var nologin_start:SimpleButton;
		public var body1_next:SimpleButton;
		public var legs0_prev:SimpleButton;
		public var body0_prev:SimpleButton;
		public var menu_back2:SimpleButton;
		public var game_state_text:TextField;
		public var dif_extreme_text:TextField;
		public var dif_hell_text:TextField;
		public var pb4:MovieClip;
		public var hf_2:MovieClip;
		public var ch_n:TextField;
		public var hit_2:MovieClip;
		public var v_1:MovieClip;
		public var camp_score:MovieClip;
		public var legs1_prev:SimpleButton;
		public var body0_next:SimpleButton;
		public var menu_noback:SimpleButton;
		public var txt:TextField;
		public var earth:MovieClip;
		public var mdialog:MovieClip;
		public var error_game_state:TextField;
		public var cmap_pl:SimpleButton;
		public var nodif_cancel:SimpleButton;
		public var conmenu:MovieClip;
		public var graphics_3d_front:MovieClip;
		public var gupd_mid:TextField;
		public var f_1:MovieClip;
		public var frr_1:MovieClip;
		public var ph_1:MovieClip;
		public var q_1:MovieClip;
		public var it_is_beta:MovieClip;
		public var login_guest:SimpleButton;
		public var curserv1:SimpleButton;
		public var arms0_prev:SimpleButton;
		public var menu_buttons2:MovieClip;
		public var exp_bar_shadow:MovieClip;
		public var weps:MovieClip;
		public var simplegui:MovieClip;
		public var a_1:MovieClip;
		public var f_2:MovieClip;
		public var p_1:MovieClip;
		public var mw_1:MovieClip;
		public var frr_2:MovieClip;
		public var ph_2:MovieClip;
		public var q_2:MovieClip;
		public var arms1_prev:SimpleButton;
		public var skin0:MovieClip;
		public var menu_pb1:SimpleButton;
		public var pauze:MovieClip;
		public var qmenu:MovieClip;
		public var a_2:MovieClip;
		public var p_2:MovieClip;
		public var rrefresh:SimpleButton;
		public var mw_2:MovieClip;
		public var m2_1:MovieClip;
		public var frr_3:MovieClip;
		public var s_1:MovieClip;
		public var mpcoverup:MovieClip;
		public var runner:MovieClip;
		public var cust_m:SimpleButton;
		public var no_proxy:MovieClip;
		public var head0_prev:SimpleButton;
		public var skin1:MovieClip;
		public var menu_fail_mp:SimpleButton;
		public var loa2:TextField;
		public var adBox:MovieClip;
		public var conmenu_set:MovieClip;
		public var hintf:MovieClip;
		public var lags:MovieClip;
		public var nrg:MovieClip;
		public var vehhp:MovieClip;
		public var mapname_lobby:TextField;
		public var a_3:MovieClip;
		public var list2:MovieClip;
		public var rec_1:MovieClip;
		public var s_2:MovieClip;
		public var c_1:MovieClip;
		public var cont_back1:SimpleButton;
		public var game:MovieClip;
		public var char1_prev:SimpleButton;
		public var head1_prev:SimpleButton;
		public var equipment:SimpleButton;
		public var back1:SimpleButton;
		public var conti:SimpleButton;
		public var intro_graph:MovieClip;
		public var tooltip_dif2:TextField;
		public var click_reg:MovieClip;
		public var chat_win:MovieClip;
		public var list3:MovieClip;
		public var ran_1:MovieClip;
		public var a_4:MovieClip;
		public var back2:SimpleButton;
		public var rec_2:MovieClip;
		public var opt_controls:SimpleButton;
		public var c_2:MovieClip;
		public var flogin:TextField;
		public var back1e1:SimpleButton;
		public var char0:TextField;
		public var char0_prev:SimpleButton;
		public var menu_fail_faq:SimpleButton;
		public var tooltip_dif3:TextField;
		public var hp_box:MovieClip;
		public var tinted_hp_prog:MovieClip;
		public var back3:SimpleButton;
		public var errmenu_mp:MovieClip;
		public var ran_2:MovieClip;
		public var opt_export_progress:SimpleButton;
		public var se_1:MovieClip;
		public var vi_1:MovieClip;
		public var m_1:MovieClip;
		public var server_list_box:MovieClip;
		public var login_cancel:SimpleButton;
		public var back1e2:SimpleButton;
		public var eq_pcg:SimpleButton;
		public var bt_1:MovieClip;
		public var flike:SimpleButton;
		public var darkness:MovieClip;
		public var dif_hard:SimpleButton;
		public var tooltip_dif:TextField;
		public var a_6:MovieClip;
		public var exp_1:MovieClip;
		public var se_2:MovieClip;
		public var dch_0:MovieClip;
		public var cur_1:MovieClip;
		public var vi_2:MovieClip;
		public var nologin_cancel:SimpleButton;
		public var bt_2:MovieClip;
		public var char1_next:SimpleButton;
		public var intro_vers:TextField;
		public var ach_txt:TextField;
		public var cmap_canc:SimpleButton;
		public var need_heal:MovieClip;
		public var graphics_3d:MovieClip;
		public var map_preview_big:MovieClip;
		public var match_lobby:TextField;
		public var gupd_gname:TextField;
		public var list:MovieClip;
		public var os_1:MovieClip;
		public var exp_2:MovieClip;
		public var dch_1:MovieClip;
		public var hi_1:MovieClip;
		public var cur_2:MovieClip;
		public var fpassword:TextField;
		public var equipment2:SimpleButton;
		public var char0_next:SimpleButton;
		public var camp_list:MovieClip;
		public var flike2:SimpleButton;
		public var cap:TextField;
		public var new_active:MovieClip;
		public var ap_1:MovieClip;
		public var nnew:SimpleButton;
		public var os_2:MovieClip;
		public var dch_2:MovieClip;
		public var exp_3:MovieClip;
		public var hi_2:MovieClip;
		public var tt_1:MovieClip;
		public var n_1:MovieClip;
		public var head0_next:SimpleButton;
		public var exp_bar:MovieClip;
		public var conti_loading:SimpleButton;
		public var dif_extreme:SimpleButton;
		public var dif_hell:SimpleButton;
		public var flike4:SimpleButton;
		public var dif_normal:SimpleButton;
		public var herolist:MovieClip;
		public var debug1:MovieClip;
		public var sky:MovieClip;
		public var server_lobby:TextField;
		public var ap_2:MovieClip;
		public var screenfade_2:MovieClip;
		public var csh_1:MovieClip;
		public var m_1x:MovieClip;
		public var tt_2:MovieClip;
		public var n_2:MovieClip;
		public var head1_next:SimpleButton;
		public var menu_buttons:MovieClip;
		public var map_quickpick:MovieClip;
		public var whitness:MovieClip;
		public var intro_btcb:SimpleButton;
		public var flike5:SimpleButton;
		public var ach_done:SimpleButton;
		public var whitesimple:MovieClip;
		public var screenf:MovieClip;
		public var sc_down2:SimpleButton;
		public var screenfade_1:MovieClip;
		public var csh_2:MovieClip;
		public var cust_back1:SimpleButton;
		public var next_lev:SimpleButton;
		public var errtxt:TextField;
		public var mupd:MovieClip;
		public var loa:TextField;
		public var cont_back_progress:SimpleButton;
		public var cmap_crt:SimpleButton;
		public var sc_down1:SimpleButton;
		public var beep_1:MovieClip;
		public var curserver:TextField;
		public var login_login:SimpleButton;
		public var eq_pcg2:SimpleButton;
		public var achives:SimpleButton;
		public var creds:TextField;
		public var myCursor:MovieClip;
		public var load_error_field:TextField;
		public var intro_base:MovieClip;
		public var team_red:MovieClip;
		public var team_blue:MovieClip;
		public var pb0:MovieClip;
		public var ggpp:MovieClip;
		public var beep_2:MovieClip;
		public var m2_1x:MovieClip;
		public var cm_1:MovieClip;
		public var mp_auto_con_2:MovieClip;
		public var legs0_next:SimpleButton;
		public var arms0_next:SimpleButton;
		public var cont_apply_state:SimpleButton;
		public var sc_scroolBBB:MovieClip;
		public var dif_easy:SimpleButton;
		public var gamechatbox2:MovieClip;
		public var pb1:MovieClip;
		public var need_slot:SimpleButton;
		public var rready:MovieClip;
		public var cm_2:MovieClip;
		public var legs1_next:SimpleButton;
		public var arms1_next:SimpleButton;
		public var menu_mold:SimpleButton;

		// Sounds
		public var s_t_switch1:PB2Sound;
		public var s_t_switch2:PB2Sound;
		public var s_t_switch_denied:PB2Sound;
		public var s_t_door1_start:PB2Sound;
		public var s_t_door1_stop:PB2Sound;
		public var s_step1:PB2Sound;
		public var s_step2:PB2Sound;
		public var s_step3:PB2Sound;
		public var s_step4:PB2Sound;
		public var s_robo_step1:PB2Sound;
		public var s_robo_step2:PB2Sound;
		public var s_robo_step3:PB2Sound;
		public var s_robo_step4:PB2Sound;
		public var s_body0:PB2Sound;
		public var s_body1:PB2Sound;
		public var s_body2:PB2Sound;
		public var s_body3:PB2Sound;
		public var s_metal0:PB2Sound;
		public var s_metal1:PB2Sound;
		public var s_metal2:PB2Sound;
		public var s_metal3:PB2Sound;
		public var s_metal_gib:PB2Sound;
		public var s_steel_low:PB2Sound;
		public var s_steel_med:PB2Sound;
		public var s_steel_hor:PB2Sound;
		public var s_steel_hard:PB2Sound;
		public var s_glass1:PB2Sound;
		public var s_glass2:PB2Sound;
		public var s_barrel:PB2Sound;
		public var s_barrel2:PB2Sound;
		public var s_enemy_hurt1:PB2Sound;
		public var s_enemy_hurt_1:PB2Sound;
		public var s_enemy_hurt_2:PB2Sound;
		public var s_enemy_hurt_3:PB2Sound;
		public var s_enemy_die1:PB2Sound;
		public var s_enemy_die_1:PB2Sound;
		public var s_enemy_die_2:PB2Sound;
		public var s_enemy_die_3:PB2Sound;
		public var s_enemy_die_4:PB2Sound;
		public var s_enemy_alert:PB2Sound;
		public var s_usurpation_hurt:PB2Sound;
		public var s_usurpation_death2:PB2Sound;
		public var s_usurpation_death3:PB2Sound;
		public var s_usurpation_alert:PB2Sound;
		public var s_usurpation_dying:PB2Sound;
		public var s_noir_die:PB2Sound;
		public var s_noir_hurt1:PB2Sound;
		public var s_noir_hurt2:PB2Sound;
		public var s_teleport:PB2Sound;
		public var s_portnade_explode:PB2Sound;
		public var s_portnade_act2:PB2Sound;
		public var s_shnade_act:PB2Sound;
		public var s_shnade_explode:PB2Sound;
		public var s_shnade_hit:PB2Sound;
		public var s_shnade_hit_low:PB2Sound;
		public var s_shnade_offline:PB2Sound;
		public var s_bounce_bullet:PB2Sound;
		public var s_wea_rail_alt2:PB2Sound;
		public var s_wea_android_sniper:PB2Sound;
		public var s_wea_crossfire2:PB2Sound;
		public var s_wea_incompetence_archetype_27xx_fire:PB2Sound;
		public var s_wea_thetoppestkek_shotgun_nxs25:PB2Sound;
		public var s_wea_moonhawk_railgun:PB2Sound;
		public var s_dart4:PB2Sound;
		public var s_wea_glhf:PB2Sound;
		public var s_wea_lazyrain_gravy_rl:PB2Sound;
		public var s_wea_m202:PB2Sound;
		public var s_wea_android_shotgun:PB2Sound;
		public var s_wea_plasma_shotgun:PB2Sound;
		public var s_wea_ditzy_cs_ik:PB2Sound;
		public var s_wea_ditzy_cs_ik2:PB2Sound;
		public var s_wea_ph01:PB2Sound;
		public var s_wea_rail_toxic2:PB2Sound;
		public var s_wea_auto_sg2:PB2Sound;
		public var s_wea_darkstar_rl3:PB2Sound;
		public var s_wea_alien_rail_sg:PB2Sound;
		public var s_wea_bison:PB2Sound;
		public var s_wea_phanx:PB2Sound;
		public var s_wea_ditzy_energy_rifle:PB2Sound;
		public var s_wea_rifle_nade:PB2Sound;
		public var s_wea_revolver5:PB2Sound;
		public var s_wea_android_railgun:PB2Sound;
		public var s_wea_plasma_smg:PB2Sound;
		public var s_wea_acid_gl3:PB2Sound;
		public var s_grenade_wet:PB2Sound;
		public var s_hit_dmg:PB2Sound;
		public var s_hit_dmg2:PB2Sound;
		public var s_hit_dmg3:PB2Sound;
		public var s_hit_frag:PB2Sound;
		public var s_sd_death:PB2Sound;
		public var s_sd_hurt1:PB2Sound;
		public var s_sd_hurt2:PB2Sound;
		public var s_sd_welcome2:PB2Sound;
		public var s_wea_lmg:PB2Sound;
		public var s_exp_level:PB2Sound;
		public var s_exp_tick:PB2Sound;
		public var s_exp_event_stop:PB2Sound;
		public var s_android_miner_die:PB2Sound;
		public var s_android_miner_enemy_down:PB2Sound;
		public var s_android_miner_welcome2:PB2Sound;
		public var s_android_miner_hurt:PB2Sound;
		public var s_reakhohsha_welcome1:PB2Sound;
		public var s_reakhohsha_welcome2:PB2Sound;
		public var s_reakhohsha_hurt1:PB2Sound;
		public var s_reakhohsha_hurt2:PB2Sound;
		public var s_reakhohsha_hurt3:PB2Sound;
		public var s_reakhohsha_death3:PB2Sound;
		public var s_hexagon_welcome1:PB2Sound;
		public var s_hexagon_welcome2:PB2Sound;
		public var s_hexagon_welcome3:PB2Sound;
		public var s_hexagon_death1:PB2Sound;
		public var s_hexagon_death2:PB2Sound;
		public var s_hexagon_pain1:PB2Sound;
		public var s_hexagon_pain2:PB2Sound;
		public var s_hexagon_pain3:PB2Sound;
		public var s_hexagon_pain4:PB2Sound;
		public var s_beam1:PB2Sound;
		public var s_beam5:PB2Sound;
		public var s_beam1_recharge:PB2Sound;
		public var s_beam1_rechargeB:PB2Sound;
		public var s_beam5_recharge:PB2Sound;
		public var s_beam5_rechargeB:PB2Sound;
		public var s_wea_roxxar_rifle:PB2Sound;
		public var s_wea_moonhawk_smg2:PB2Sound;
		public var s_fail_shot:PB2Sound;
		public var s_psi1:PB2Sound;
		public var s_psi2:PB2Sound;
		public var s_psi3:PB2Sound;
		public var s_water_splash1:PB2Sound;
		public var s_water_splash2:PB2Sound;
		public var s_water_splash3:PB2Sound;
		public var s_blood_hit:PB2Sound;
		public var s_blood_hit_sword:PB2Sound;
		public var s_blood_head:PB2Sound;
		public var s_blood_head2:PB2Sound;
		public var s_blood_body:PB2Sound;
		public var s_blood_body2:PB2Sound;
		public var s_blood_leg_arm:PB2Sound;
		public var s_body_fall:PB2Sound;
		public var s_metal_hit:PB2Sound;
		public var s_wea1:PB2Sound;
		public var s_wea2:PB2Sound;
		public var s_wea_pickup:PB2Sound;
		public var s_charged_explosion:PB2Sound;
		public var s_silenced:PB2Sound;
		public var s_wea_sniper:PB2Sound;
		public var s_wea_minigun2:PB2Sound;
		public var s_wea_plasmagun:PB2Sound;
		public var s_wea_apistol:PB2Sound;
		public var s_wea_pistol:PB2Sound;
		public var s_wea_pistol2:PB2Sound;
		public var s_wea_shotgun:PB2Sound;
		public var s_wea_rifle:PB2Sound;
		public var s_wea_rocket:PB2Sound;
		public var s_wea_railgun:PB2Sound;
		public var s_wea_railgun2:PB2Sound;
		public var s_wea_mingun:PB2Sound;
		public var s_wea_gl:PB2Sound;
		public var s_wea_vehcannon:PB2Sound;
		public var s_wea_impulse:PB2Sound;
		public var s_wea_rail_alt:PB2Sound;
		public var s_wea_energy:PB2Sound;
		public var s_wea_evil_shot:PB2Sound;
		public var s_wea_rifle_alt:PB2Sound;
		public var s_wea_shotgun_alt:PB2Sound;
		public var s_wea_defibrillator:PB2Sound;
		public var s_wea_vehminigun:PB2Sound;
		public var s_wea_real_shotgun:PB2Sound;
		public var s_wea_real_shotgun_r:PB2Sound;
		public var s_wea_real_rifle:PB2Sound;
		public var s_walker_step:PB2Sound;
		public var s_walker_phase1:PB2Sound;
		public var s_walker_phase2:PB2Sound;
		public var s_walker_die:PB2Sound;
		public var s_capsule_hit1:PB2Sound;
		public var s_capsule_hit2:PB2Sound;
		public var s_explode1:PB2Sound;
		public var s_explode2:PB2Sound;
		public var s_explode_bfg:PB2Sound;
		public var s_reload:PB2Sound;
		public var s_rl_reload:PB2Sound;
		public var s_hero_death1:PB2Sound;
		public var s_hero_death2:PB2Sound;
		public var s_hero_pain1:PB2Sound;
		public var s_hero_pain2:PB2Sound;
		public var s_hero_pain3:PB2Sound;
		public var s_hero_pain4:PB2Sound;
		public var s_android2_die:PB2Sound;
		public var s_android2_hurt:PB2Sound;
		public var s_android2_welcome2:PB2Sound;
		public var s_android_die:PB2Sound;
		public var s_android_welcome1:PB2Sound;
		public var s_android_welcome2:PB2Sound;
		public var s_android_welcome3:PB2Sound;
		public var s_android_hurt:PB2Sound;
		public var s_android_enemy_down1:PB2Sound;
		public var s_f_death1:PB2Sound;
		public var s_f_death2:PB2Sound;
		public var s_f_death3:PB2Sound;
		public var s_f_pain2:PB2Sound;
		public var s_f_pain3:PB2Sound;
		public var s_f_pain4:PB2Sound;
		public var s_f_welcome1:PB2Sound;
		public var s_g_death1:PB2Sound;
		public var s_g_death2:PB2Sound;
		public var s_g_death3:PB2Sound;
		public var s_g_pain1:PB2Sound;
		public var s_g_pain2:PB2Sound;
		public var s_g_pain3:PB2Sound;
		public var s_g_welcome1:PB2Sound;
		public var s_fp_death1:PB2Sound;
		public var s_fp_death2:PB2Sound;
		public var s_fp_death3:PB2Sound;
		public var s_fp_pain2:PB2Sound;
		public var s_fp_pain3:PB2Sound;
		public var s_fp_pain4:PB2Sound;
		public var s_fp_welcome1:PB2Sound;
		public var s_marine_death1:PB2Sound;
		public var s_marine_death2:PB2Sound;
		public var s_marine_death3:PB2Sound;
		public var s_marine_pain1:PB2Sound;
		public var s_marine_pain2:PB2Sound;
		public var s_marine_pain3:PB2Sound;
		public var s_marine_alert:PB2Sound;
		public var s_marine_alert2:PB2Sound;
		public var s_marine_alert3:PB2Sound;
		public var s_marine_alert4:PB2Sound;
		public var s_marine_dying:PB2Sound;
		public var s_slicer_alert:PB2Sound;
		public var s_slicer_die:PB2Sound;
		public var s_hero_welcome1:PB2Sound;
		public var s_hero_welcome2:PB2Sound;
		public var s_hero_welcome3:PB2Sound;
		public var s_grenade:PB2Sound;
		public var s_grenade_act:PB2Sound;
		public var s_nade_throw:PB2Sound;
		public var s_explode_underwater:PB2Sound;
		public var s_plasma_explosion:PB2Sound;
		public var s_box_low:PB2Sound;
		public var s_box_med:PB2Sound;
		public var s_box_hor:PB2Sound;
		public var s_box_hard:PB2Sound;
		public var s_box_die:PB2Sound;
		public var s_drone_die:PB2Sound;
		public var s_drone_hurt:PB2Sound;

		// Sound
		public var NONMUTE:Boolean;
		public var s_channel:Array;
		public var vol3d:Array;
		public var max_channels:int;
		public var last_channel:int;
		public var vol:SoundTransform;
		public var vol2:SoundTransform;
		public var vol2Custom:SoundTransform;
		public var smod:Number;
		public var smod2:Number;
		public var dist_to_face:Number;
		public var s_chat:PB2Sound;
		public var s_badge_earned:PB2Sound;
		public var s_coolbuddy2:PB2Sound;
		public var s_mission_done:PB2Sound;
		public var s_team_switch:PB2Sound;
		public var s_corvett_die:PB2Sound;
		public var s_test_sound:PB2Sound;
		public var s_hint_appear:PB2Sound;
		public var s_hint_disappear:PB2Sound;
		public var s_ship_incoming:PB2Sound;
		public var s_ship_explosion:PB2Sound;
		public var s_robo_bug_jump:PB2Sound;
		public var s_robo_bug_launch:PB2Sound;
		public var s_robo_bug_hit:PB2Sound;
		public var s_s_gun_rayrifle:PB2Sound;
		public var s_hp_warn:PB2Sound;
		public var s_hp_dead:PB2Sound;
		public var s_gravitator:PB2Sound;
		public var s_gameplay_song:PB2Sound;
		public var s_main_song_f:PB2Sound;
		public var s_extra_song_f:PB2Sound;
		public var s_main_song:PB2Sound;
		public var s_am_base:PB2Sound;
		public var s_am_wind:PB2Sound;
		public var s_slow_down:PB2Sound;
		public var s_slow_up:PB2Sound;
		public var ss_info:PB2Sound;
		public var ss_info_off:PB2Sound;
		public var ss_info_act:PB2Sound;
		public var musch:SoundChannel;
		public var hpbeepch:SoundChannel;
		public var gravitatorch:SoundChannel;
		public var main_song_ch:SoundChannel;
		public var am_base_ch:SoundChannel;
		public var am_wind_ch:SoundChannel;
		public var timeshiftch:SoundChannel;
		public var talkerch:SoundChannel;
		public var gravitatorTransform:SoundTransform;
		public var musTransform:SoundTransform;
		public var am_base_Transform:SoundTransform;
		public var am_wind_Transform:SoundTransform;
		public var main_song_Transform:SoundTransform;
		public var grav_working:Boolean;
		public var mus_working:Boolean;
		public var am_base_working:Boolean;
		public var am_wind_working:Boolean;
		public var main_song_working:Boolean;

		public var GAME_VERSION:String;
		public var GAME_VERSION_SIMPLE:String;
		public var proper_scale_mode:String;
		public var proper_stage_align:String;
		public var only_global_loader;
		public var http_probability:int;
		public var https_probability:int;
		public var myRequest:URLRequest;
		public var myRequest_parallel:URLRequest;
		public var myLoader;
		public var myRateLoader;
		public var myDeRateLoader;
		public var myLoader2;
		public var myLoader2noserver;
		public var mySaveLoadLoader;
		public var myVariables:URLVariables;
		public var myVariables_parallel:URLVariables;
		public var myReportLoader;
		public var NetworkLoad_triesleft:int;
		public var NetworkLoad_complete:Boolean;
		public var NetworkLoad_failed:Boolean;
		public var NetworkSave_triesleft:int;
		public var NetworkSave_data:String;
		public var my_so;
		public var edidumb:int;
		public var _flash_version:Number;
		public var _fullInfo:String;
		public var _osSplitArr:Array;
		public var _versionSplitArr:Array;
		public var _versionInfo:String;
		public var intro_first:Boolean;
		public var mapdata:String;
		public var myMenu:ContextMenu;
		public var theDate:Date;
		public var spec_debug:Boolean;
		public var loaded:Number;
		public var total:Number;
		public var ldd:Boolean;
		public var percent:Number;
		public var lastperc:Number;
		public var times:Number;
		public var totalseconds:Number;
		public var waitfor:Number;
		public var pass:Boolean;
		public var death_cam:int;
		public var fir:int;
		public var pType:String;
		public var CPMStarContentSpotID:String;
		public var intro_glowings:Array;
		public var rifle_glow:MovieClip;
		public var intro_speculars:Array;
		public var sinus:Number;
		public var main_y:Number;
		public var USE_HTML_WHEEL_EVENTS:Boolean;
		public var mh:String;
		public var map_quick_picks_max:int;
		public var map_qp_ani;
		public var map_qp_sp:String;
		public var map_qp_mp:String;
		public var override_login_password:Boolean;
		public var def_login:String;
		public var def_password:String; 
		public var autostart_mp:Boolean; 
		public var autostart_mp_server:String; 
		public var autostart_mp_create:Object;
		public var autostart_mp_join:String;
		public var autostart_bot:Boolean;
		public var menu_hue:Number;
		public var LAST_ERROR:String;
		public var gamechatbox_text:String;
		public var normal_spine_length:Number;
		public var normal_shoulder_length:Number;
		public var TRIGGER_PLAYER_INITIATOR:int;
		public var TRIGGER_PLAYER_KILLER:int;
		public var TRIGGER_PROJECTILE_POWER:Number;
		public var GAMEPLAY_MODIFICATIONS:String;
		public var SHOW_DEBUG:Boolean;
		public var ANONYMOUS_MODE:Boolean;
		public var RENDERING_3D:Boolean;
		public var ALLOW_VAR_SYNC:Boolean;
		public var ALLOW_LIGHT_BREAK:Boolean;
		public var NAIVE_HIT_CONFIRMATION:Boolean;
		public var GLOBAL_REGEN_SPEED:Number;
		public var GLOBAL_REGEN_DELAY:Number;
		public var FREEZE_OFFSCREEN_ENTITIES:Boolean;
		public var GLOBAL_FALL_DAMAGE_MULT:Number;
		public var GLOBAL_FALL_SENSITIVITY_MULT:Number;
		public var GLOBAL_FALL_DAMAGE_MULT_LIMBS:Number;
		public var BOOST_MULT:Number;
		public var BOOST_HIGH_PHYSICS:Number;
		public var BOOST_LOW_PHYSICS:Number;
		public var gametim:uint;
		public var gtlt:int;
		public var gtrec:int;
		public var gtwi:int;
		public var _mp_ping_rl:int;
		public var a_int:int;
		public var allow_unlag_fps:Boolean;
		public var spawn_text_for:int;
		public var GUEST_ACCESS:Boolean;

		// Network assets
		public var custom_songs:Vector.<PB2CustomSong>;
		public var custom_images:Vector.<PB2CustomImage>;
		public var allow_screenshoting:Boolean;
		public var images_expected:int;
		public var images_loaded:int;
		public var images_data_loaded:int;
		public var images_ready_to_render:int;
		public var images_finished_loading:int;
		public var song_with_callback_allowed:PB2CustomSong;

		// MP__
		public var MP_default_set:int;
		public var MP_enc_deaths:int;
		public var MP_real_deaths:int;
		public var MP_enc_restarts:int;
		public var MP_gbd:int;
		public var MP_last_message_patience:int;
		public var MP_last_message:int;
		public var MP_BAD_WORDS_SAID:int;
		public var MP_last_linked:int;
		public var MP_myspecials:Array;
		public var MP_myspecials_total:int;
		public var MP_assigning_special:int;
		public var MP_specials:Array;
		public var MP_start_grenades_count:int;
		public var MP_start_grenades_port_count:int;
		public var MP_start_grenades_sh_count:int;
		public var MP_SERVER_IP:String;
		public var MP_SERVER_NAME:String;
		public var MP_login_auto_try:Boolean;
		public var MP_SERVER_PORT:int;
		public var MP_SERVER_GOT:String;
		public var MP_spectator:Boolean;
		public var MP_room:String;
		public var MP_room_name:String;
		public var MP_room_test:String;
		public var MP_map_name:String;
		public var MP_pass:String;
		public var MP_channel:String;
		public var MP_channel_name:String;
		public var MP_myid:int;
		public var MP_team:int;
		public var MP_total:int;
		public var MP_mode:Boolean;
		public var MP_clan:String;
		public var MP_last_clear_shot_time:int;
		public var MP_server:String;
		public var MP_mrate_server:String;
		public var MP_screenshot_server:String;
		public var MP_image_server:String;
		public var MP_song_server:String;
		public var MP_exp_server:String;
		public var MP_public_stat_server:String;
		public var MP_token_server:String;
		public var MP_socket:Socket;
		public var MP_fps:Number;
		public var MP_pl:Number;
		public var MP_pbug:int;
		public var MP_send:String;
		public var MP_waiting_for_answer:Boolean;
		public var MP_get_done_STR:String;
		public var MP_get_done_HAP:Boolean;
		public var MP_login_name:String;
		public var MP_startbarrels:Array;
		public var MP_last_chat:String;
		public var MP_ping1:int;
		public var MP_ping2:int;
		public var MP_pwarn:Boolean;
		public var MP_ping_last:int;
		public var MP_ready:Boolean;
		public var MP_type:int;
		public var MP_half_bot:Boolean;
		public var MP_let_alive_players_hear_dead:Boolean;
		public var MP_allow_leaderboard_details:Boolean;
		public var MP_kills_in_a_row:int;
		public var MP_kills_in_a_row_top:int;
		public var MP_errored_out:Boolean;
		public var MP_SERVER_GOT_CUR:String;
		public var MP_last_received_packet:int;
		public var MP_favor_the_shooter:Boolean;
		public var MP_allow_client_side_kills:Boolean;
		public var MP_teamkills:int;
		public var MP_round:int;
		public var MP_gamestate:int;
		public var MP_playerstotal:int;
		public var MP_start_x:Number;
		public var MP_start_y:Number;
		public var MP_force_disconnect:Boolean;
		public var MP_chat_input:Boolean;
		public var MP_chat_input_for:String;
		public var MP_custom_events:String;
		public var MP_deaths:int;
		public var MP_kills:int;
		public var MPLIST_GAMENAME:String;
		public var MPLIST_MAPID:String;
		public var MPLIST_MODE:int;
		public var MPLIST_PUBLIC:int;
		public var MPLIST_APPROVED:int;
		public var MPLIST_RANKED:int;
		public var MPLIST_WITH_FRIENDS:int;
		public var MPLIST_NO_ENEMIES:int;
		public var MPLIST_HIDE_FULL:int;
		public var MP_AUTO_LOGIN:Boolean;
		public var MP_app:Boolean;
		public var MP_start_guns_total:int;
		public var MP_slot_reset:Boolean;
		public var MP_slot_try:int;
		public var MP_nick:String;
		public var server_cur:int;
		public var servers_uid:Array;
		public var CUR_SERVER_NAME:String;
		public var last_loaded_sever_uid;
		public var login_warned:Boolean;
		public var auto_proceed:Boolean;
		public var servers_name:Array;
		public var servers_ip:Array;
		public var servers_port:Array;
		public var gm_ranked:String;
		public var gm_type:int;
		public var gm_max:int;
		public var got_map_data:Boolean;

		public var ENEMY_SENDER_i:int;
		public var ENEMY_SENDER_last:int;
		public var ENEMY_SENDER_master:int;
		public var ENTER_TICKED:Boolean;
		public var SP_unlimit_framerate:Boolean;
		public var PSYCHOBLOOD_MODE:int;
		public var FRAMERATE:int;
		public var PREDEF_TEAMS:Array;
		public var PREDEF_COLORS:Array;
		public var PREDEF_COLORS_ALT:Array;
		public var WATER_NAME:String;
		public var ACID_NAME:String;
		public var c_str:String;
		public var c_i:int;
		public var c_i2:int;
		public var pres_left:Boolean;
		public var pres_right:Boolean;
		public var pres_top:Boolean;
		public var pres_bottom:Boolean;
		public var pres_ok:Boolean;
		public var BAD_WORDS_PATTERN:String;
		public var BAD_WORDS:Array;
		public var LAST_VOTE:int;
		public var CREDITS_BY_GAME_END:Boolean;
		public var LAST_BADGE:int;
		public var BADGES_ENABLED:Boolean;
		public var BADGES_TOTAL:int;
		public var BADGE_STAT:Array;
		public var BADGE_STAT_MAX:Array;
		public var BADGE_TITLE:Array;
		public var BADGE_REACHED:Array;
		public var CURRENT_HINT:String;
		public var THIS_HINT:String;
		public var PITIMER:Number;
		public var SHAKEAMMOUT:Number;
		public var LAST_SERVER_UID:int;
		public var received_packets:Object;
		public var spawn:Boolean;
		public var allowedText:String;
		public var FIRST_TIME:Boolean;
		public var game_scale:Number;
		public var lgame_scale:Number;
		public var hscreenX:Number;
		public var hscreenY:Number;
		public var screenX:Number;
		public var screenY:Number;
		public var lock_camera_region:Object;
		public var lock_camera_intensity:Number;
		public var temp_ignore_gun_pick:Vector.<Object>;
		public var temp_keep_dmg_belows:Vector.<Object>;
		public var CASUAL_MODE:Boolean;
		public var NOBASE:Boolean;
		public var PLAZMA_GAME:Boolean;
		public var AUTO_REVIVE:Boolean;
		public var STRICT_MODE:Boolean;
		public var MEAT_MODE:Boolean;
		public var PRO_BOTS:Boolean;
		public var HELL_MODE:Boolean;
		public var ARCADE_GAME_MODE:Boolean;
		public var KINETIC_MODULE_ENABLED:Boolean;
		public var LEVELS_TOTAL:int;
		public var LEVELS_PASSED:int;
		public var CMPG_THIS_LEVEL:int;
		public var AWARD:Boolean;
		public var INLAG:Boolean;
		public var LEVEL_END_FORCE:String;
		public var CMPG_name:String;
		public var EXOS_NAME:String;
		public var NOIR_NAME:String;
		public var PROXY_NAME:String;
		public var CMPG_money:int;
		public var SUPER_COMPUTER:Boolean;
		public var RAGDOLL_COLLIDE:Boolean;
		public var IM_A_CHEATER:Boolean;
		public var LITE_PHYS:Boolean;
		public var AUTO_PICK_NEW_WEPS:Boolean;
		public var SOFT_SCREEN:Boolean;
		public var SCREEN_EFFECTS:Boolean;
		public var VIOLENCE:Boolean;
		public var ALTCUR:Boolean;
		public var CENSORESHIP:Boolean;
		public var DISPLAY_CHAT:int;
		public var FX_VOLUME:Number;
		public var MUSIC_VOLUME:Number;
		public var CUSTOM_MUSIC_VOLUME:Number;
		public var CUR_MUSIC_VOLUME:Number;
		public var MUSIC_COLDDOWN:int;
		public var HQ:Boolean;
		public var MOUSE_WHEEL:Boolean;
		public var OVERSCROLL:Boolean;
		public var EASY_MODE:Boolean;
		public var LOW_HPS:Boolean;
		public var RECONNECT_ON_LOST_CONNECTION:Boolean;
		public var BEEP_ON_DEATH:Boolean;
		public var HIT_SOUNDS:Boolean;
		public var SCREEN_FADE_EFFECTS:Boolean;
		public var SHOW_EXP_BAR:int;
		public var RASTERIZE_GRAPHICS:Boolean;
		public var CUSTOM_BACKGROUND:Boolean;
		public var DRAW_3D:Boolean;
		
		public var GSPEED:Number;
		public var GSPEED2:Number;
		public var WSPEED:Number;
		public var DEFAULT_FPS:Number;
		public var max_after_impact_speed:Number;
		public var temp2:Array;
		public var temp;
		public var ch_total:int;
		public var ch_links:Array;
		public var ch_names:Array;
		public var ch_pass:Array;
		public var ch_app:Array;
		public var ch_map:Array;
		public var ch_test:Array;
		public var chat_lastid:int;
		public var skin_model:Array;
		public var skin_color_head:Array;
		public var skin_color_body:Array;
		public var skin_color_arms:Array;
		public var skin_color_legs:Array;
		public var clrs:Array;
		public var matrix:Array;
		public var inventoryA:Array;
		public var inventoryB:Array;
		public var inventoryC:Array;
		public var inventoryD:Array;
		public var curA:String;
		public var curB:String;
		public var armorA:int;
		public var armorB:int;
		public var MPclr:Array;
		public var FIRST_RUN:Boolean;
		public var save_i:int;
		public var m_dist:int;
		public var momove:Boolean;
		public var debug_screen:Shape;
		public var BLUR_FRACTION:Number = 2;
		public var screen_blur_mc:MovieClip;
		public var screen_blur:Bitmap;
		public var screen_blur_draw:BitmapData;
		public var blur_filter:BlurFilter;
		public var line_screen:Sprite;
		public var DEBUG_MODE:Boolean;
		public var DRAW_TRACE_LINES:Boolean;
		public var SCREEN_BLUR:Boolean;
		public var lastcurx:int;
		public var lastcury:int;
		public var lastcurmove:int;
		public var str3:String;
		public var str4:String;
		public var str5:String;
		public var last_psi:int;
		public var shadowbmp:Bitmap;
		public var dying_after:Number;
		public var HUNT_LOST:int;
		public var tooltip_updated:Boolean;
		public var TOOLTIPS:Boolean;
		public var HINTS:Boolean;
		public var gamechat_input_text:String;
		public var PLAYER_WIDTH:Number;
		public var hero:Array;
		public var hpwarning:Boolean;
		public var hp_warn_max:Number;
		public var wind_base:Number;
		public var grenades_total:int;
		public var grenades_port_total:int;
		public var grenades_sh_total:int;
		public var cwp:Number;
		public var cwp_d:Number;
		public var c_sim_rt:int;
		public var c_sim_rt2:int;
		public var c_sim_stress:Boolean;
		public var g_minx:int;
		public var g_miny:int;
		public var g_maxx:int;
		public var g_maxy:int;
		public var OpenTop:Boolean;
		public var system_non_stop:Boolean;
		public var stoped_by_focus:Boolean;
		public var last_gun_b4_psi:int;
		public var mini_scenario_cur:int;
		public var mini_scenario_phase:Number;
		public var fps_last:uint;
		public var fps_ticks:uint;
		public var fps_now:uint;
		public var fps_delta:uint;
		public var fps_fps:Number;
		public var color_player:uint;
		public var color_friendly:uint;
		public var color_enemy:uint;
		public var color_player_over:String;
		public var color_friendly_over:String;
		public var color_enemy_over:String;
		public var firstframe:Boolean;
		public var g_scale_outcar:Number;
		public var voices:Object;
		public var hit_frame_damage:Number;
		public var hit_frags:Vector.<Object>;
		public var hit_frags_timer:Number;
		public var expl_hurt_full:Boolean;
		public var joint_cycle:int;
		public var hpmax:Number;
		public var maxbulletlife:Number;
		public var bg_cast:Array;

		// Physics
			// Atoms
		public var ax:Array;
		public var ay:Array;
		public var lax:Array;
		public var lay:Array;
		public var atox:Array;
		public var atoy:Array;
		public var aio:Array;
		public var aof:Array;
		public var arad:Array;
		public var around:Array;
		public var amat:Array;
		public var atim:Array;
		public var acollided:Array;
		public var ainwater:Array;
		public var ablood:Array;
		public var aactive:Array;
		public var ainwater_shape:Array;
		public var atotal:int;
		public var startatotal:int;
		public var atom_first_position_corrections:Vector.<Object>;
			// Chains
		public var chtypa:Array;
		public var chP:Array;
		public var chC:Array;
		public var chdef:Array;
		public var chdamp:Array;
		public var chio:Array;
		public var chtotal:int;
		public var startchtotal:int;

		// Map objects
		public var mens:Vector.<player>;
		public var guns:Vector.<MovieClip>;
		public var barrels:Array;
		public var vehicles:Array;
		public var doors:Vector.<PB2Door>;
		public var decors:Array;
		public var triggers:Vector.<PB2Trigger>;
		public var timers:Array;
		public var regions:Vector.<PB2Region>;
		public var waters:Array;
		public var waterList:Vector.<PB2Water>;
		public var attachments:Array;
		public var puls:Array;
		public var pulscur:int;
		public var pulsmax:int;
		public var lamps_x:Array;
		public var lamps_y:Array;
		public var lamps_power:Array;
		public var lamps_power2:Array;
		public var lamps_skips:int;
		public var lamps_sprites:Array;
		public var flare:Array;
		public var flare_power:Array;
		public var flarestotal:int;
		public var luas:Array;

		public var boxx:Array;
		public var boxy:Array;
		public var boxw:Array;
		public var boxh:Array;
		public var boxes:Vector.<PB2Wall>;

		public var boxmat:Array;
		public var bgs:Array;
		public var bgx:Array;
		public var bgy:Array;
		public var bgw:Array;
		public var bgh:Array;
		public var bgm:Array;
		public var bgu:Array;
		public var bgv:Array;
		public var pushx:Array;
		public var pushy:Array;
		public var pushtox:Array;
		public var pushtoy:Array;
		public var pushstab:Array;
		public var pushdamage:Array;
		public var pushw:Array;
		public var pushh:Array;
		public var wax:Array;
		public var way:Array;
		public var waw:Array;
		public var wah:Array;
		public var wadamage:Array;
		public var wa_friction:Array;
		// Effects init
		public var effects:Vector.<PB2Particle>;
		public var ef:Array;
		public var nextef:int;
		public var maxef:int;
		public var eftemp:Number;
		public var effcolor:int;

		public var shnades:Array;
		public var shnades_next:int;
		public var regionstotal:int;
		public var triggerstotal:int;
		public var timerstotal:int;
		public var doorstotal:int;
		public var bgstotal:int;
		public var playerstotal:int;
		public var boxestotal:int;
		public var lampstotal:int;
		public var waterstotal:int;
		public var gunstotal:int;
		public var pushstotal:int;
		public var luasTotal:int;
		public var vehiclestotal:int;
		public var barrelstotal:int;
		public var decorstotal:int;
		public var shnades_total:int;

		// Wall BSP
		public var NearBoxBSP_stepsize:int;
		public var NearBoxBSP:Vector.<Vector.<Vector.<int>>>;
		public var NearBoxBSP_empty:Vector.<int>;
		public var NearBoxBSP_width:int;
		public var NearBoxBSP_height:int;
		public var NearBoxBSP_left:Number;
		public var NearBoxBSP_right:Number;
		public var NearBoxBSP_top:Number;
		public var NearBoxBSP_bottom:Number;

		public var flakes_total:int;
		public var flakes:Vector.<MovieClip>;
		public var flakes_spreadout:Number;
		public var flakes_letitsnow:Boolean;
		public var synonym_uid:Array;
		public var synonym_id:Array;
		public var step_size:int;
		public var bmpData:BitmapData;
		public var bmpData_backed:BitmapData;
		public var lightmap_ma:Matrix;


		// Gameplay modifiers
		public var pspeed:Number;
		public var weapon_penetration_factor:Number;
		public var rocket_speed_mult:Number;
		public var grenade_speed_mult:Number;
		public var plasma_speed_mult:Number;
		public var bounce:Number;
		public var friction:Number;
		public var gravity:Number;

		public var _root:MovieClip;

		// Working memory
		public var mc:MovieClip;
		public var mcc:MovieClip;
		public var i:int;
		public var i2:int;
		public var i3:int;
		public var i4:int;
		public var i5:int;
		public var i6:int;
		public var i7:int;
		public var str:String;
		public var cx:Number;
		public var cy:Number;
		public var xx:Number;
		public var yy:Number;
		public var xx2:Number;
		public var yy2:Number;
		public var x3:Number;
		public var y3:Number;
		public var x4:Number;
		public var y4:Number;
		public var u:Number;
		public var v:Number;
		public var u2:Number;
		public var v2:Number;
		public var mc2:MovieClip;
		public var mc3:MovieClip;
		public var ok:Boolean;
		public var ok2:Boolean;
		public var ok3:Boolean;
		public var vtr_i2:int;
		public var nextsh_i:int;
		public var nextsh_i2:int;
		public var cr_i4:int;
		public var array:Array;
		public var param:Array;
		public var array2:Array;
		public var array3:Array;
		public var tr:int;
		public var tr2:int;
		public var tr3:int;
		public var hurt_x4:Number;
		public var hurt_y4:Number;
		public var hurt_xx2:Number;
		public var hurt_yy2:Number;
		public var n2:int;
		public var chat_i:int;
		public var chat_i2:int;
		public var chat_i3:int;
		public var chat_xx:Number;
		public var ef_xx:Number;
		public var ef_yy:Number;
		public var nextpuli:int;
		public var nextpulf:Boolean;
		public var alert_i5:int;
		public var hurt_i4:int;
		public var tracer_i4:int;
		public var tracer_i5:int;
		public var upd_weps_i:int;
		public var upd_weps_i2:int;

		// Input
		public var key_left:Boolean;
		public var key_right:Boolean;
		public var key_up:Boolean;
		public var key_down:Boolean;
		public var key_grenade:Boolean;
		public var key_pick:Boolean;
		public var key_alt:Boolean;
		public var key_grab:Boolean;
		public var key_kinetic:Boolean;
		public var key_fall:Boolean;
		public var key_ctrl:Boolean;

		public var hup:Boolean;
		public var bugs:Boolean;
		public var injured:Boolean;
		public var fire:Boolean;
		public var sitmax:Number;
		public var cinetic_target:int;
		public var timeshift:int; 
		public var is_firing:Boolean;
		public var energy_max:Number;
		public var energy:Number;
		public var ALLOW_TIMESHIFT:Boolean;
		public var joint_align:int;
		public var retux:Number;
		public var retuy:Number;
		public var rx:Number;
		public var ry:Number;
		public var surf_lnk:Array;
		public var surf_lnk_to:Array;
		public var alert_tes:Number;
		public var minX:Number;
		public var maxX:Number;
		public var minY:Number;
		public var maxY:Number;
		public var a_rectangleMinX:Number;
		public var a_rectangleMinY:Number;
		public var a_rectangleMaxX:Number;
		public var a_rectangleMaxY:Number;
		public var b:Number;
		public var dx:Number;
		public var tmp2:Number;
		public var thispulspeed:Number;
		public var a_p1x:Number;
		public var a_p1y:Number;
		public var a_p2x:Number;
		public var a_p2y:Number;
		public var tracer_ok:Boolean;
		public var NextMapTemp:String;
		public var render_minX:int;
		public var render_minY:int;
		public var render_maxX:int;
		public var render_maxY:int;
		public var rnd:Number;
		public var Disable_next_click:Boolean;
		public var FORCE_SNOW:Boolean;
		public var crjoint_cycle:int;
		public var mShape:Sprite;
		public var optimalupd:Boolean;

		public var user_says_id:int;
		public var user_says_text:String;
		public var user_says_trigger:int;
		public var SHOW_FRAG_MESSAGES:Boolean;
		public var trigger_to_key_binds_down:Object;
		public var trigger_to_key_binds_up:Object;
		public var on_user_connected_trigger:int;
		public var on_user_disconnected_trigger:int;
		public var last_user_join: int;
		public var last_user_left: int;
		public var mxnds1:int;
		public var mxnds2:int;
		public var mxnds3:int;
		public var tnds:int;
		public var stable:Boolean;
		public var unstable:int;
		public var unstable_m:String;
		public var qpack_pattern:Array;
		public var qpack_pattern_length:int;
		public var qpack_pattern_simcalc:int;
		public var qpack_base:String;
		public var ENABLE_LEVEL_LOGIC_ERRORS:Boolean;
		public var trigger_loops:int;
		public var level_variables:Object;
		public var dm_slots_on_spawn:Array;
		public var dm_max_guns_on_spawn:int;
		public var session_variables:Object;
		public var session_variables_source_id:Object;
		
		public var is2:int;
		public var allow:Boolean;
		public var explx:Number;
		public var exply:Number;
		public var temp_tb:Number;
		
		public var pb2Bullet:Object;
		public var atom_pos_buffer:Array;
		public var TraceLine_lasttime:uint;
		public var tracep:int;
		public var NO_PSI:Boolean;
		public var DEFAULT_MAP:String;
		public var START_CUSTOM_MAP:Boolean;
		public var MAP_TESTING:Boolean;
		public var CUR_CUSTOM_MAP:String;
		public var CACHED_MAPS:Array;
		public var CUR_LOADING:String;
		public var GET_TRIES:int;
		public var trans:Number;
		public var minus_trans:Number;
		public var players_online:int;
		public var temp_str:String;
		public var connection_lost_ping:int;
		public var last_mp_param:Array;
		public var LITE_PHYS_tim:Boolean;
		public var LITE_PHYS_from:int;
		public var LITE_PHYS_notfrom:int;
		public var LITE_PHYS_size:int;
		public var extra_low_mult:Number;
		public var offset_balance:Number;
		public var temp_coef:Number;
		public var f_ok:Boolean;
		public var near_atom:Vector.<int>;
		public var f_min:Number;
		public var phys_stress:int;
		public var phys_got_stress:Boolean;
		public var last_key_code:int;
		public var keys_are_being_pressed:Boolean;
		public var let_scroll_last:int;
		public var game_focus_ever_lost:Boolean;
		public var maximum_hit_delay_time:int;
		public var hit_retry_time:int;
		public var possible_bullet_data:Vector.<Object>;
		public var vc_cache:Array;
		public var vc_fresh:Boolean;
		public var vs_salt:int;
		public var mouse_x:Number;
		public var mouse_y:Number;
		public var mouse_last_x:Number;
		public var mouse_last_y:Number;
		public var set_timeouts:Vector.<Object>;
		public var respawn_logic_last_addr:int;
		public var multiplayer_repsawn_timer_speed:Number;
		public var dti:int;
		public var voice_pressure:Number;
		public var FUN_NICE_BULLETS:int;
		public var FUN_SPENT_BULLETS:int;
		public var FUN_DAMAGE_MADE:Number;
		public var FUN_HEADSHOTS_MADE:int;
		public var FUN_DAMAGE_TAKEN:Number;
		public var FUN_TIME_SPEND:Number;
		public var FUN_ELEMINATED:Number;
		public var FORCE_CUSTOM_MAP:Boolean;

		// Experience system
		public var EXP_TYPE_DEATH_IN_APPROVED:int;
		public var EXP_TYPE_SYNC_SKILL_POINTS:int;
		public var EXP_TYPE_PLAYING_CAMPAIGN:int;
		public var EXP_TYPE_PLAYING_CUSTOM:int;
		public var EXP_TYPE_PLAYING_CUSTOM_MP:int;
		public var EXP_TYPE_PLAYING_IN_APPROVED:int;
		public var EXP_TYPE_BEAT_CUSTOM:int;
		public var EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED:int;
		public var EXP_TYPE_KILL_IN_APPROVED:int;
		public var EXP_TYPE_KILL_ENEMY_NON_PLAYER:int;
		public var EXP_TYPE_BEAT_CAMPAIGN_LEVEL:int;
		public var EXP_TYPE_KILL_TEAMMATE_MP:int;
		public var EXP_TYPE_CHECK_OUT_MULTIPLAYER:int;
		public var EXP_TYPE_SYNC:int;
		public var EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED:int;
		public var EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED:int;
		public var EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED:int;
		public var EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED:int;
		public var EXP_TYPE_TRY_CUSTOM:int;
		public var EXP_TYPE_STREAK:int;
		public var EXP_TYPE_LEGEND:int;
		public var EXP_TYPE_AFK_KILL:int;
		public var exp_titles:Vector.<String>;
		public var exp_tried_custom_maps:Object;
		public var exp_points:Number;
		public var exp_points_target:Number;
		public var exp_timer:uint;
		public var SKILL_POINTS_SCALE:Number;
		public var exp_first_sync_await:Boolean;
		public var exp_last_level:Number;
		public var exp_points_per_level:Number;
		public var exp_min_level:int;
		public var exp_max_level:int;
		public var exp_max_level_this_time:int;
		public var myExpLoader;
		public var exp_alive:Boolean;
		public var exp_mp_enter_once:Boolean;
		public var exp_scheduled:Vector.<Object>;
		public var exp_busy:Boolean;
		public var skill_points_tim:uint;
		public var skill_points_change_expect_tries:int;
		public var can_get_exp_for_level:Boolean;
		public var exp_heal_tracked_players:Array;
		public var exp_legens:Object;

		public var myMPlayerInfoLoader;
		public var player_info_busy:Boolean;
		public var last_server_list_str:String;
		public var menu_buttons_tot:int;
		public var allow_mp_connect:Boolean;
		public var m:int;
		public var lm_active:int;
		public var m_active:int;
		public var m_time:Number;
		public var m_hold:int;
		public var earth_pos1:Number;
		public var new_nick;
		public var new_nick2:String;
		public var newString:String;
		public var pattern_no_nix:String;
		public var blink_main:int;
		public var MUSIC_START:int;
		public var TROOPS_GONE:Boolean;
		public var menu_hue_timeout;
		public var camp_btn:Array;
		public var gunsA;
		public var gunsAt;
		public var gunsAl;
		public var gunsB;
		public var gunsBt;
		public var gunsBl;
		public var STOP_SCROLL:Boolean;
		public var credits_low_limit:Number;
		public var credits_high_limit:Number;
		public var credits_stop_frames:Number;
		public var credits_target_offset:Number;
		public var coverup_active:Boolean;
		public var rech_started;
		public var myTimer_loading:Timer;
		public var hero_list_frame_offset:int;
		public var hero_list_scale;
		public var format:TextFormat;
		public var TIME_PLAYED_MULTI:int;
		public var nonblockrate:Boolean;
		public var TakeScreenShot_allow:Boolean;
		public var TakeScreenShot_delay:int;
		public var uncncld:Boolean;
		public var achive_obj;
		public var INTRO_DONE:Boolean;
		public var test;
		public var inter_progress;
		public var game_state_timer;

		// Main menu 3D effects
		public var __animFactory_menu_buttonsaf1:AnimatorFactory3D;
		public var __animArray_menu_buttonsaf1:Array;
		public var ____motion_menu_buttonsaf1_mat3DVec__:Vector.<Number>;
		public var ____motion_menu_buttonsaf1_matArray__:Array;
		public var __motion_menu_buttonsaf1:MotionBase;
		public var __animFactory_menu_buttons2af1:AnimatorFactory3D;
		public var __animArray_menu_buttons2af1:Array;
		public var ____motion_menu_buttons2af1_mat3DVec__:Vector.<Number>;
		public var ____motion_menu_buttons2af1_matArray__:Array;
		public var __motion_menu_buttons2af1:MotionBase;

		private function loadLuaCodebase() : void {
			LAPI = new LuaAPI();
			LAPI.addFunction("print", function(state:LuaState, ...args) : LuaObject {
				var text:String;
				text = args[0].toString();
				text = text.split("&0").join("</font>")
				text = text.split("&1").join('<font color="#ff0000">')
				text = text.split("&2").join('<font color="#00ff00">')
				text = text.split("&3").join('<font color="#0000ff">')
				text = text.split("&4").join('<font color="#ffff00">')
				text = text.split("&5").join('<font color="#00ffff">')
				ChatNewMsg(text);
				return null;
			});
			LAPI.addFunction("exec", function(state:LuaState, ...args) : LuaObject {
				EXEC_TRIGGER_ACTION(
					LuaObject.asNumber(args[0]), 
					new <String>[LuaObject.asString(args[1]), LuaObject.asString(args[2])], 
					null
				);
				return null;
			});
			LAPI.addFunction("setHint", function(state: LuaState, ...args): LuaObject {
				EXEC_TRIGGER_ACTION(43, new <String>[LuaObject.asString(args[0]), ""], null);
				return null;
			});
			LAPI.addFunction("setTimeout", function(state: LuaState, ...args): LuaObject {
				var ms = LuaObject.asNumber(args[0]);
				var func = args[1] as LuaFunction;
				func.register()
				setTimeout(func.run, ms);
				return null;
			});
			LAPI.addFunction("timeMS", function(state: LuaState, ...args): LuaObject {
				return state.toNumber(getTimer())
			});

			// Objects
			LAPI.defineObject("Character");
			LAPI.defineMethod("Character", "clone", function(state:LuaState, id:int, ...args) : LuaObject {
				var newid:int = cloneCharacter(id, LuaObject.asNumber(args[0]), LuaObject.asNumber(args[1]), false);
				return state.newObject("Character", newid);
			});
			LAPI.defineMethod("Character", "kick", function(state:LuaState, id:int, ...args) : LuaObject {
				ChatNewMsg("KICK PLAYER " + id);
				return null;
			});
			LAPI.defineProperty("Character", "id", 
				function(state:LuaState, id:int) : LuaNumber {
					return state.toInteger(id);
				}
			);
			LAPI.defineProperty("Character", "x", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(mens[id].x);
				},
				function(state:LuaState, id:int, ...args) : void {
					mens[id].x = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "y", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(mens[id].y);
				},
				function(state:LuaState, id:int, ...args) : void {
					mens[id].y = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "health", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(mens[id].hea);
				},
				function(state:LuaState, id:int, ...args) : void {
					mens[id].hea = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "maxHealth", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(mens[id].hmax);
				},
				function(state:LuaState, id:int, ...args) : void {
					mens[id].hmax = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "isPlayer", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toBool(mens[id].isplayer);
				}
			);
			LAPI.defineProperty("Character", "login", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.makeString(mens[id].login_name);
				}
			);
			LAPI.defineProperty("Character", "nick", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.makeString(mens[id].nick);
				}
			);
			LAPI.defineProperty("Character", "weapon",
				function(state:LuaState, id:int, ...args) : LuaObject {
					if (mens[id].curwea == -1) return null;
					return state.newObject("Weapon", mens[id].curwea);
				}
			);
			LAPI.defineProperty("Character", "whlx", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[mens[id].curwea].xpos1);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[mens[id].curwea].xpos1 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "whrx", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[mens[id].curwea].xpos2);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[mens[id].curwea].xpos2 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "whly", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[mens[id].curwea].ypos1);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[mens[id].curwea].ypos1 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Character", "whry", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[mens[id].curwea].ypos2);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[mens[id].curwea].ypos2 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.addFunction("getPlayerFromUID", function(state:LuaState, ...args) : LuaObject {
				var id:int = DecodeUID(args[0].toString());
				return state.newObject("Character", id);
			});
			LAPI.addFunction("getLocalPlayer", function(state:LuaState, ...args) : LuaObject {
				return state.newObject("Character", MP_myid);
			});

			LAPI.addFunction("chatRegister", function(state:LuaState, ...args) : LuaObject {
				var func:LuaFunction = args[0] as LuaFunction;
				func.register();
				luaChatListeners.register(func);
				return null;
			});
			LAPI.addFunction("frameRegister", function(state:LuaState, ...args) : LuaObject {
				var func:LuaFunction = args[0] as LuaFunction;
				func.register();
				luaFrameListeners.register(func);
				return null;
			});
			LAPI.addFunction("keyDownRegister", function(state:LuaState, ...args) : LuaObject {
				var func:LuaFunction = args[0] as LuaFunction;
				func.register();
				luaKeyDownListeners.register(func);
				return null;
			});
			LAPI.addFunction("keyUpRegister", function(state:LuaState, ...args) : LuaObject {
				var func:LuaFunction = args[0] as LuaFunction;
				func.register();
				luaKeyUpListeners.register(func);
				return null;
			});
			LAPI.addFunction("_getLevelVar", function(state: LuaState, ...args): LuaObject {
				return state.makeString(level_variables[LuaObject.asString(args[0])]);
			});
			LAPI.addFunction("traceable", function(state: LuaState, ...args): LuaObject {
				var regionAx:Number = LuaObject.asNumber(args[0])
				var regionAy:Number = LuaObject.asNumber(args[1])
				var regionBx:Number = LuaObject.asNumber(args[2])
				var regionBy:Number = LuaObject.asNumber(args[3])
				
				return state.toBool(TraceLineF_nopushers(regionAx, regionAy, regionBx, regionBy));
			});

			LAPI.defineObject("Movable");
			LAPI.defineProperty("Movable", "speed",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(doors[id].maxspeed);
				}, function(state: LuaState, id: int, ...args): void {
					doors[id].maxspeed = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Movable", "x",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(doors[id].x);
				}, function(state: LuaState, id: int, ...args): void {
					doors[id].x = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Movable", "y",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(doors[id].y);
				}, function(state: LuaState, id: int, ...args): void {
					doors[id].y = LuaObject.asNumber(args[0]); 
				}
			);
			LAPI.defineProperty("Movable", "color",
				function(state: LuaState, id: int): LuaObject {
					return state.makeString(doors[id].getColorAsHex());
				},
				function(state: LuaState, id: int, ...args): void {
					var color = LuaObject.asString(args[0]);
					EXEC_TRIGGER_ACTION(71, new <String>[String(id), color], null);
				}

			);

			LAPI.defineObject("Weapon");
			LAPI.defineProperty("Weapon", "x",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(guns[id].x);
				}, function(state: LuaState, id: int, ...args): void {
					guns[id].maxspeed = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "y",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(guns[id].y);
				}, function(state: LuaState, id: int, ...args): void {
					guns[id].maxspeed = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "alpha",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(guns[id].alpha);
				}, function(state: LuaState, id: int, ...args): void {
					guns[id].alpha = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "xpos1", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[id].xpos1);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[id].xpos1 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "ypos1", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[id].ypos1);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[id].ypos1 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "xpos2", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[id].xpos2);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[id].xpos2 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Weapon", "ypos2", 
				function(state:LuaState, id:int, ...args) : LuaObject {
					return state.toNumber(guns[id].ypos2);
				},
				function(state:LuaState, id:int, ...args) : void {
					guns[id].ypos2 = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.addFunction("getWeaponFromUID", function(state:LuaState, ...args) : LuaObject {
				var id:int = DecodeUID(args[0].toString());
				return state.newObject("Weapon", id);
			});

			LAPI.defineMethod("Movable", "move", function(state:LuaState, id:int, ...args) : LuaObject {
				doors[id].moveToward(LuaObject.asNumber(args[0]), LuaObject.asNumber(args[1]));
				return null;
			});
			LAPI.addFunction("getMovableFromUID", function(state:LuaState, ...args) : LuaObject {
				var id:int = DecodeUID(args[0].toString());
				return state.newObject("Movable", id);
			});
			
			LAPI.defineObject("Region");
			LAPI.defineProperty("Region", "id", 
				function(state:LuaState, id:int) : LuaNumber {
					return state.toInteger(id);
				}
			);
			LAPI.defineProperty("Region", "x",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(regions[id].x);
				}, function(state: LuaState, id: int, ...args): void {
					regions[id].x = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.defineProperty("Region", "y",
				function(state: LuaState, id: int): LuaObject {
					return state.toNumber(regions[id].y);
				}, function(state: LuaState, id: int, ...args): void {
					regions[id].y = LuaObject.asNumber(args[0]);
				}
			);
			LAPI.addFunction("getRegionFromUID", function(state:LuaState, ...args) : LuaObject {
				var id:int = DecodeUID(args[0].toString());
				return state.newObject("Region", id);
			});
				
			LAPI.make();
		}

		public function PB2Game()
		{
			super();
			GAME = this;
			DRAW_EARTH = true;
			init3DMenu();
			EXT = new PB2E(this);
			acceleratedRenderer = new AcceleratedRenderer(this);
			loadLuaCodebase();
		}
	
		public function init3DMenu() : void {
			addEventListener(Event.ADDED_TO_STAGE,__setPerspectiveProjection_);
			if(__animFactory_menu_buttonsaf1 == null)
			{
				__animArray_menu_buttonsaf1 = new Array();
				__motion_menu_buttonsaf1 = new MotionBase();
				__motion_menu_buttonsaf1.duration = 1;
				__motion_menu_buttonsaf1.overrideTargetTransform();
				__motion_menu_buttonsaf1.addPropertyArray("visible",[true]);
				__motion_menu_buttonsaf1.addPropertyArray("cacheAsBitmap",[false]);
				__motion_menu_buttonsaf1.addPropertyArray("blendMode",["normal"]);
				__motion_menu_buttonsaf1.addPropertyArray("opaqueBackground",[null]);
				__motion_menu_buttonsaf1.is3D = true;
				__motion_menu_buttonsaf1.motion_internal::spanStart = 3;
				____motion_menu_buttonsaf1_matArray__ = new Array();
				____motion_menu_buttonsaf1_mat3DVec__ = new Vector.<Number>(16);
				____motion_menu_buttonsaf1_mat3DVec__[0] = 0.604228;
				____motion_menu_buttonsaf1_mat3DVec__[1] = 0.010887;
				____motion_menu_buttonsaf1_mat3DVec__[2] = 0.796737;
				____motion_menu_buttonsaf1_mat3DVec__[3] = 0;
				____motion_menu_buttonsaf1_mat3DVec__[4] = -0.021959;
				____motion_menu_buttonsaf1_mat3DVec__[5] = 0.999754;
				____motion_menu_buttonsaf1_mat3DVec__[6] = 0.002992;
				____motion_menu_buttonsaf1_mat3DVec__[7] = 0;
				____motion_menu_buttonsaf1_mat3DVec__[8] = -0.796509;
				____motion_menu_buttonsaf1_mat3DVec__[9] = -0.019304;
				____motion_menu_buttonsaf1_mat3DVec__[10] = 0.604318;
				____motion_menu_buttonsaf1_mat3DVec__[11] = 0;
				____motion_menu_buttonsaf1_mat3DVec__[12] = -40.754143;
				____motion_menu_buttonsaf1_mat3DVec__[13] = 171.169342;
				____motion_menu_buttonsaf1_mat3DVec__[14] = 74.118401;
				____motion_menu_buttonsaf1_mat3DVec__[15] = 1;
				____motion_menu_buttonsaf1_matArray__.push(new Matrix3D(____motion_menu_buttonsaf1_mat3DVec__));
				__motion_menu_buttonsaf1.addPropertyArray("matrix3D",____motion_menu_buttonsaf1_matArray__);
				__animArray_menu_buttonsaf1.push(__motion_menu_buttonsaf1);
				__animFactory_menu_buttonsaf1 = new AnimatorFactory3D(null,__animArray_menu_buttonsaf1);
				__animFactory_menu_buttonsaf1.sceneName = "Scene 1";
				__animFactory_menu_buttonsaf1.addTargetInfo(this,"menu_buttons",0,true,0,true,null,-1);
			}
			if(__animFactory_menu_buttons2af1 == null)
			{
				__animArray_menu_buttons2af1 = new Array();
				__motion_menu_buttons2af1 = new MotionBase();
				__motion_menu_buttons2af1.duration = 1;
				__motion_menu_buttons2af1.overrideTargetTransform();
				__motion_menu_buttons2af1.addPropertyArray("visible",[true]);
				__motion_menu_buttons2af1.addPropertyArray("cacheAsBitmap",[false]);
				__motion_menu_buttons2af1.addPropertyArray("blendMode",["normal"]);
				__motion_menu_buttons2af1.addPropertyArray("opaqueBackground",[null]);
				__motion_menu_buttons2af1.is3D = true;
				__motion_menu_buttons2af1.motion_internal::spanStart = 3;
				____motion_menu_buttons2af1_matArray__ = new Array();
				____motion_menu_buttons2af1_mat3DVec__ = new Vector.<Number>(16);
				____motion_menu_buttons2af1_mat3DVec__[0] = 0.604228;
				____motion_menu_buttons2af1_mat3DVec__[1] = 0.010887;
				____motion_menu_buttons2af1_mat3DVec__[2] = 0.796737;
				____motion_menu_buttons2af1_mat3DVec__[3] = 0;
				____motion_menu_buttons2af1_mat3DVec__[4] = -0.021959;
				____motion_menu_buttons2af1_mat3DVec__[5] = 0.999754;
				____motion_menu_buttons2af1_mat3DVec__[6] = 0.002992;
				____motion_menu_buttons2af1_mat3DVec__[7] = 0;
				____motion_menu_buttons2af1_mat3DVec__[8] = -0.796509;
				____motion_menu_buttons2af1_mat3DVec__[9] = -0.019304;
				____motion_menu_buttons2af1_mat3DVec__[10] = 0.604318;
				____motion_menu_buttons2af1_mat3DVec__[11] = 0;
				____motion_menu_buttons2af1_mat3DVec__[12] = -47.500088;
				____motion_menu_buttons2af1_mat3DVec__[13] = 170.84906;
				____motion_menu_buttons2af1_mat3DVec__[14] = 72.27739;
				____motion_menu_buttons2af1_mat3DVec__[15] = 1;
				____motion_menu_buttons2af1_matArray__.push(new Matrix3D(____motion_menu_buttons2af1_mat3DVec__));
				__motion_menu_buttons2af1.addPropertyArray("matrix3D",____motion_menu_buttons2af1_matArray__);
				__animArray_menu_buttons2af1.push(__motion_menu_buttons2af1);
				__animFactory_menu_buttons2af1 = new AnimatorFactory3D(null,__animArray_menu_buttons2af1);
				__animFactory_menu_buttons2af1.sceneName = "Scene 1";
				__animFactory_menu_buttons2af1.addTargetInfo(this,"menu_buttons2",0,true,0,true,null,-1);
			}
		}

		private function makeObjectFromKeyValuePairs(str:String, equals:String, separator:String) : Object {
			var result:Object = {};
			var args:Array = str.split(separator);

			for (var i = 0; i < args.length; i++) {
				if (args[i].indexOf(equals) == -1) continue;
				var arg:Array = args[i].split(equals);
				result[arg[0]] = arg[1];
			}

			return result;
		}

		// Try to emulate flashargs
		private function parseFlashargs(invokeEvent:InvokeEvent) : Object {
			if (invokeEvent.arguments.length == 0) return {};

			var argv:String = invokeEvent.arguments[0];
			if (argv.indexOf('?') != 0) return {};

			return makeObjectFromKeyValuePairs(argv.slice(1), "=", "&");
		}

		private function handleArguments(invokeEvent:InvokeEvent) : void {
			var args:Object = parseFlashargs(invokeEvent);
			
 			autostart_mp_create = args.mp_create == undefined ? null : 
			makeObjectFromKeyValuePairs(
				replace("[eq]", "=",
				replace("[i]", "&", args.mp_create)),
				":", "|"
			);

			if (!GAME_STARTED) {
				launchArguments = args;
				override_login_password = launchArguments.l == undefined;
				def_login    = launchArguments.l == undefined ? "" : launchArguments.l;
				def_password = launchArguments.p == undefined ? "" : launchArguments.p;
				autostart_mp        = launchArguments.mp        == "1";
	 			autostart_mp_server = launchArguments.mp_server == undefined ? "" : launchArguments.mp_server;
	 			autostart_mp_join   = launchArguments.mp_join   == undefined ? "" : launchArguments.mp_join;
	 			autostart_bot       = launchArguments.bot == "1";
	 			return;
 			}

 			if (IN_GAME) {
 				TO_SEND_REFRESH =	MP_mode && 
 									autostart_mp_create.map  == CUR_CUSTOM_MAP &&
 									autostart_mp_create.test == MP_room_test;
 				autostart_mp_create = null;
 			}
		}

		///////////////////////////////////////////////////////////////////////
		//                         FRAME ACTIONS                            //
		public function frameaction_startup() : void {
			GAME_VERSION = "4.1.0-dev";
			try { fscommand("trapallkeys", "true"); }
			catch(e:Error) {}
			stop();
			MAP_TESTING = false;
			customServers = new Vector.<Vector.<String>>();
			NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, function(invokeEvent:InvokeEvent) {
				workingDirectory = invokeEvent.currentDirectory;
				handleArguments(invokeEvent);
				if (GAME_STARTED) return;
				GAME_STARTED = true;
				SoundMixer.soundTransform = new SoundTransform(0,0);
	 			proper_scale_mode = StageScaleMode.SHOW_ALL;
	 			proper_stage_align = "";
	 			stage.scaleMode = proper_scale_mode;
	 			stage.align = proper_stage_align;
	 			only_global_loader = null;
	 			http_probability = 0;
	 			https_probability = 0;
	 			// URL Loaders
	 			myLoader          = GetNewURLLoader();
	 			myRateLoader      = GetNewURLLoader();
	 			myDeRateLoader    = GetNewURLLoader();
	 			myLoader2         = GetNewURLLoader();
	 			myLoader2noserver = GetNewURLLoader();
	 			mySaveLoadLoader  = GetNewURLLoader();
	 			myReportLoader    = GetNewURLLoader();
	 			// SERVERS
	 			const modded_server:String = "http://prosuwanted.ru:36320";
	 			MP_server                = modded_server + "/server.php";
	 			MP_mrate_server          = modded_server + "/mrate.php";
	 			MP_exp_server            = modded_server + "/exp.php";
	 			MP_public_stat_server    = modded_server + "/public_stat.php";
	 			MP_token_server          = modded_server + "/token.php"
	 			MP_image_server          = "https://plazmaburst2.com/mimage_cache.php";
	 			MP_screenshot_server     =  modded_server + "/mscreenshot.php";
	 			MP_song_server           = "https://plazmaburst2.com/msong_cache.php";
	 			MP_map_preview_server    = "https://plazmaburst2.com/map_preview_by_id.php";
	 			
	 			try { Security.loadPolicyFile(modded_server + "/crossdomain.xml"); }
	 			catch(e:Error) {}
				NetworkLoad_triesleft = 0;
	 			NetworkLoad_complete = false;
	 			NetworkLoad_failed = false;
	 			NetworkSave_triesleft = 0;
	 			NetworkSave_data = "";
	 			START_CUSTOM_MAP = launchArguments.custommap != undefined;
	 			CUR_CUSTOM_MAP = "";
	 			MAP_TESTING ||= START_CUSTOM_MAP;
	 			try { 
	 				my_so = SharedObject.getLocal("fivetwelve_burst2");
	 			} catch(e:Error) {
					my_so = {
				   		"data": {},
				   		"flush": function():void {}
					};
					load_error_field.text = "SharedObject support error, fallback will be used";
	 			}
	 			try { NetworkLoad(); }
	 			catch(e:Error) { load_error_field.text = "NetworkLoad error"; }
				bg_custom.visible = CUSTOM_BACKGROUND;
				edidumb = -1;
				edidumb = setInterval(edumb,500);
				try { MouseWheelEnabler.init(stage); }
				catch(error:Error) { }
				_flash_version = 404;
				try {
					_fullInfo = Capabilities.version;
					_osSplitArr = _fullInfo.split(" ");
					_versionSplitArr = _osSplitArr[1].split(",");
					_versionInfo = _versionSplitArr[0] + "." + _versionSplitArr[1];
					_flash_version = Number(_versionInfo);
				}
				catch(e2:*) {}
				intro_first = true;
	 			conti.visible = false;
	 			if (conti_loading != null) {
	 				conti_loading.visible = false;
	 			}
	 			myMenu = new ContextMenu();
	 			myMenu.hideBuiltInItems();
	 			contextMenu = myMenu;
	 			theDate = new Date();
	 			stage.frameRate = 30;
	 			stage.quality = "HIGH";
	 			intro_vers.text = intro_vers.text.split("%version%").join(GAME_VERSION);
	 			spec_debug = false;
	 			whitness.alpha = 0;
	 			whitness.visible = false;
	 			loaded = 0;
	 			total = 100;
	 			ldd = false;
				total = stage.loaderInfo.bytesTotal == 0 ? 7632588: stage.loaderInfo.bytesTotal;
				percent = 0;
	 			lastperc = 0;
	 			times = 0;
	 			totalseconds = 0;
	 			waitfor = 0;
	 			pass = false;
	 			death_cam = -1;
	 			fir = setInterval(firtim,1000);
				addEventListener(Event.ENTER_FRAME,handleProgress);
	 			// handleProgress(null); (seems to break because some symbols aren't loaded)
	 			firtim();
	 			pType = String(Capabilities.playerType);
	 			myLoader2.addEventListener(IOErrorEvent.IO_ERROR,function():* {});
	 			myLoader2noserver.addEventListener(IOErrorEvent.IO_ERROR,function():* {});
				try { ExternalInterface.addCallback("sendTextToFlash", getTextFromJavaScript); }
	 			catch(e:Error) {}
	 			intro_btcb.addEventListener(MouseEvent.CLICK,function():* {
					try {
						navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank"); 
					}
					catch(e:Error) {}
	 			});
	 			intro_mpdb.addEventListener(MouseEvent.CLICK,function():* {
					 try {
					 	navigateToURL(new URLRequest("https://discord.gg/wBsHD7yFDj"), "_blank");
					 } catch (e:Error) {}
	 			});
				intro_ftb.addEventListener(MouseEvent.CLICK,function():* {
					 try {
						 navigateToURL(new URLRequest("https://discord.gg/A4wGYuAa5r"), "_blank");
					 } catch (e:Error) {}
	 			});
				intro_base.mouseEnabled = false;
	 			intro_base.mouseChildren = false;
	 			USE_HTML_WHEEL_EVENTS = false;
	 			conti.addEventListener(MouseEvent.MOUSE_DOWN,function():* {
					if(conti.visible && !pass) {
					   pass = true;
					   // conti.alpha = 0.5;
					}
	 			});

	 			if (conti_loading != null) {
					 conti_loading.addEventListener(MouseEvent.MOUSE_DOWN,function():* {
						NetworkLoad_complete = true;
					 });
	 			}
			});
		}
		
		private function LoadMaps() : void {
			var dir:File = File.applicationDirectory.resolvePath('app:/data/maps/');
			var files:Array = dir.getDirectoryListing();
			var stream:FileStream = new FileStream();
			for each (var file:File in files) {
				if (file.isDirectory) continue;
				if (file.name.slice(-4) != '.xml') continue;
				stream.open(file, FileMode.READ);
				CACHED_MAPS[file.name.slice(0, -4)] = stream.readUTFBytes(file.size);
				stream.close();
			}
		}
		
		public function frameaction_intro() : void {
			acceleratedRenderer.init();
			mh = "";
			map_quickpick.visible = false;
			IN_GAME = false;
			map_quick_picks_max = 7;
			map_qp_ani = -1;
			map_qp_sp = "";
			map_qp_mp = "";
			REFRESHING_MAP = false;
			menu_hue = 0;
			LAST_ERROR = "";
			normal_spine_length = 23;
			normal_shoulder_length = 4;
			TRIGGER_PLAYER_INITIATOR = -1;
			TRIGGER_PLAYER_KILLER = -1;
			TRIGGER_PROJECTILE_POWER = -1;
			GAMEPLAY_MODIFICATIONS = "";
			ANONYMOUS_MODE = false;
			ALLOW_VAR_SYNC = false;
			ALLOW_LIGHT_BREAK = true;
			NAIVE_HIT_CONFIRMATION = false;
			GLOBAL_REGEN_SPEED = 1;
			GLOBAL_REGEN_DELAY = 1;
			FREEZE_OFFSCREEN_ENTITIES = true;
			GLOBAL_FALL_DAMAGE_MULT = 1;
			GLOBAL_FALL_SENSITIVITY_MULT = 1;
			GLOBAL_FALL_DAMAGE_MULT_LIMBS = 0.5;
			BOOST_MULT = 1;
			BOOST_HIGH_PHYSICS = 0;
			BOOST_LOW_PHYSICS = 0;
			custom_songs = new Vector.<PB2CustomSong>();
			custom_images = new Vector.<PB2CustomImage>();
			allow_screenshoting = true;
			images_expected = 0;
			images_loaded = 0;
			images_data_loaded = 0;
			images_ready_to_render = 0;
			images_finished_loading = 0;
			song_with_callback_allowed = null;
			Mouse.show();
			gtlt = getTimer();
			gtrec = 40;
			gtwi = gtrec;
			_mp_ping_rl = 0;
			allow_unlag_fps = true;
			mupd.visible = false;
			mupd.ttt.gotoAndStop(1);
			stage.scaleMode = proper_scale_mode;
			stage.align = proper_stage_align;
			GUEST_ACCESS = false;
			MP_default_set = 1;
			MP_enc_deaths = 0;
			MP_real_deaths = 0;
			MP_enc_restarts = 0;
			MP_gbd = -1;
			MP_last_message_patience = 0;
			MP_last_message = 0;
			MP_BAD_WORDS_SAID = 0;
			MP_last_linked = -1;
			MP_myspecials = new Array();
			MP_myspecials_total = 0;
			MP_assigning_special = -1;
			MP_specials = new Array();
			MP_start_grenades_count = 0;
			MP_start_grenades_port_count = 0;
			MP_start_grenades_sh_count = 0;
			ENEMY_SENDER_i = 0;
			ENEMY_SENDER_last = getTimer();
			ENEMY_SENDER_master = -1;
			ENTER_TICKED = true;
			SP_unlimit_framerate = false;
			MP_startbarrels = new Array();
			PSYCHOBLOOD_MODE = 1;
			FRAMERATE = 1;
			PREDEF_TEAMS = new Array();
			PREDEF_COLORS = new Array();
			PREDEF_COLORS_ALT = new Array();
			PREDEF_TEAMS[0] = "Alpha";
			PREDEF_COLORS_ALT[0] = "#b0ff7b";
			PREDEF_TEAMS[1] = "Beta";
			PREDEF_COLORS_ALT[1] = "#7eb0fa";
			PREDEF_TEAMS[2] = "Gamma";
			PREDEF_COLORS_ALT[2] = "#dbbb28";
			PREDEF_TEAMS[3] = "Delta";
			PREDEF_COLORS_ALT[3] = "#7a7a7a";
			PREDEF_TEAMS[4] = "Zeta";
			PREDEF_COLORS_ALT[4] = "#3fa042";
			PREDEF_TEAMS[5] = "Lambda";
			PREDEF_COLORS_ALT[5] = "#bc5d00";
			PREDEF_TEAMS[6] = "Sigma";
			PREDEF_COLORS_ALT[6] = "#8d95ff";
			PREDEF_TEAMS[7] = "Omega";
			PREDEF_COLORS_ALT[7] = "#e1ddba";
			PREDEF_TEAMS[8] = "Counter-Terrorists";
			PREDEF_COLORS[8] = "#b2d6ea";
			PREDEF_TEAMS[9] = "Terrorists";
			PREDEF_COLORS[9] = "#5d160b";
			PREDEF_TEAMS[10] = "Usurpation Forces";
			PREDEF_COLORS[10] = "#efe66c";
			PREDEF_TEAMS[11] = "Civil Security";
			PREDEF_COLORS[11] = "#eacf98";
			PREDEF_TEAMS[12] = "Red Team";
			PREDEF_COLORS[12] = "#fe0000";
			PREDEF_TEAMS[13] = "Blue Team";
			PREDEF_COLORS[13] = "#5dc6fd";
			PREDEF_TEAMS[14] = "Green Team";
			PREDEF_COLORS[14] = "#80fc9a";
			PREDEF_TEAMS[15] = "White Team";
			PREDEF_COLORS[15] = "#ededed";
			PREDEF_TEAMS[16] = "Black Team";
			PREDEF_COLORS[16] = "#3d3d3d";
			BAD_WORDS_PATTERN = decode("bipmf;bovt;bti1mf;bti1mft;btipmft;!btt!;g!v!d!l;g/v/d/l;g/v/l;g!v!l;vs!npn;vs!npuif;Btt!Npolfz;Bttgbdf;btti1mf;btti1mf{;bttipmf;bttipmft;bttipm{;bttxjqf;b{{ipmf;cbttufset;Cjbudi;cjudi;cjudift;Cmpx!Kpc;cpggjoh;cvuuipmf;cvuuxjqf;d1dl;d1dlt;d1l;Dbsqfu!Nvodifs;dbxl;dbxlt;Dmju;dout;dou{;dpdl;dpdlifbe;dpdl.ifbe;dpdlt;DpdlTvdlfs;dpdl.tvdlfs;tvdlt!dpdl;tvdlt!qfojt;dvou;dvout;dvou{;ejdl;ejme1;ejme1t;ejmep;ejmept;ejmme1;ejmme1t;epnjobusjdlt;epnjobusjdt;epnjobusjy;fofnb;g!v!d!l;g!v!d!l!f!s;gbh;gbh2u;gbhfu;gbhh2u;gbhhju;gbhhpu;gbhju;gbht;gbh{;gbjh;gbjht;gbsu;gmjqqjoh!uif!cjse;gvdl;gvdlfs;gvdljo;gvdljoh;gvdlt;Gvehf!Qbdlfs;gvl;Gvlbi;Gvlfo;gvlfs;Gvljo;Gvll;Gvllbi;Gvllfo;Gvllfs;Gvlljo;h11l;hbz;hbzcpz;hbzhjsm;hbzt;hbz{;Hpe.ebnofe;i11s;i1bs;i1sf;ifmmt;ipbs;ipps;ippsf;kbdlpgg;kbqt;kfsl.pgg;kjtjn;kjtt;kj{n;kj{{;lopc;lopct;lopc{;lvou;lvout;lvou{;Mftcjbo;Mf{{jbo;Mjqtijut;Mjqtiju{;nbtpdijtu;nbtpljtu;nbttufscbju;nbttuscbju;nbttuscbuf;nbtufscbjufs;nbtufscbuf;nbtufscbuft;Npuib!Gvdlfs;Npuib!Gvlfs;Npuib!Gvllbi;Npuib!Gvllfs;Npuifs!Gvdlfs;Npuifs!Gvlbi;Npuifs!Gvlfs;Npuifs!Gvllbi;Npuifs!Gvllfs;npuifs.gvdlfs;Nvuib!Gvdlfs;Nvuib!Gvlbi;Nvuib!Gvlfs;Nvuib!Gvllbi;Nvuib!Gvllfs;o2hs;obtuu;ojhhfs;ojhvs;ojjhfs;ojjhs;psbgjt;pshbtjn;pshbtn;pshbtvn;psjgbdf;psjgjdf;psjgjtt;qbdlj;qbdljf;qbdlz;qblj;qbljf;qblz;qfdlfs;qfffovt;qfffovttt;qffovt;qfjovt;qfo2t;qfobt;qfojt;qfojt.csfbui;qfovt;qfovvt;Qivd;Qivdl;Qivl;Qivlfs;Qivllfs;qpmbd;qpmbdl;qpmbl;Qppoboj;qs2d;qs2dl;qs2l;qvttf;qvttff;qvttz;qvvlf;qvvlfs;rvffs;rvffst;rvffs{;rxffst;rxffs{;rxfjs;sfdluvn;sfduvn;sfubse;tbejtu;tdbol;tdimpoh;tdsfxjoh;tfnfo;tfy;tfyz;Ti\"u;ti2u;ti2ufs;ti2ut;ti2uufs;ti2u{;tiju;tijut;tijuufs;Tijuuz;Tijuz;tiju{;Tizu;Tizuf;Tizuuz;Tizuz;tlbodl;tlbol;tlbolff;tlbolfz;tlbolt;Tlbolz;tmvu;tmvut;Tmvuuz;tmvu{;tpo.pg.b.cjudi;uju;uvse;wb2kjob;wbh2ob;wbhjjob;wbhjob;wbk2ob;wbkjob;wvmmwb;wvmwb;x1q;xi11s;xi1sf;xipsf;ysbufe;c\",di;cjudi;cmpxkpc;dmju;bstdimpdi;gvdl;tiju;bttipmf;c\"udi;c28di;c2udi;cj,di;cpjpmbt;cvdfub;d1dl;dbxl;dijol;djqb;dmjut;dpdl;dvn;dvou;ejmep;ejstb;fkblvmbuf;gbubtt;gdvl;gvl;gvy1s;ipfs;ipsf;kjtn;lbxl;m4judi;m4j,di;mftcjbo;nbtuvscbuf;nbtufscbu+;nbtufscbu4;npuifsgvdlfs;t/p/c/;npgp;ob{j;ojhhb;ojhhfs;ovutbdl;qivdl;qjnqjt;qvttf;qvttz;tdspuvn;ti\"u;tifnbmf;tij,;ti\",;tmvu;tnvu;uffut;ujut;cppct;c11ct;uff{;uftujdbm;uftujdmf;ujuu;x11tf;kbdlpgg;xbol;xipbs;xipsf;+ebno;+ezlf;+gvdl+;+tiju+;A%%;bndjl;boetlpub;bstf+;bttsbnnfs;bzjs;cj8di;cjudi+;cpmmpdl+;csfbtut;cvuu.qjsbuf;dbcspo;db{{p;disbb;divk;Dpdl+;dvou+;e5no;ebzhp;efhp;ejdl+;ejlf+;evqb;e{jxlb;fkbdlvmbuf;Flsfn+;Flup;fodvmfs;gbfo;gbh+;gbodvmp;gbooz;gfdft;gfh;Gfmdifs;gjdlfo;Gmjllfs;gpsftljo;Gpu{f;gvulsfu{o;hbz;hppl;hvjfob;i1s;i5y1s;ifmwfuf;ipfs+;ipolfz;Ivfwpo;ivj;jokvo;kj{{;lbolfs+;ljlf;lmppu{bl;lsbvu;lovmmf;lvl;lvltvhfs;Lvsbd;lvsxb;mftcp;nbnippo;nbtuvscbu;njcvo;npolmfjhi;npvmjfxpq;nvjf;nvmllv;nvtdij;ob{jt;ofqftbvsjp;ojhhfs;psptqv;qfstf;qjdlb;qjfsepm;qjnnfm;qjtt;qj{eb;qppoutff;qpso;q1so;qs1o;qsfuffo;qvub;qvup;rbicfi;sbvufocfsh;tdibggfs;tdifjtt;tdimbnqf;tdinvdl;tdsfx;ti\"u;tibsnvub;tibsnvuf;tijqbm;tij{;tlsjc{;tlvsxztzo;tqifodufs;tqjd;tqjfsebmbk;tqmpphf;tvlb;uxbu;wjuuv;xjditfs;{bcpvsbi;zpvs!npuifs;zp!npuifs;vs!npuifs;zpvs!npn;zp!npn;vs!npn;sbqf;cjdift;cjdif{;ojhb;tptj;zfcpl;dimfo;timzvyb;tvlb");
			BAD_WORDS = new Array();
			BAD_WORDS = BAD_WORDS_PATTERN.split("|");
			BAD_WORDS_PATTERN = "";
			LAST_VOTE = 0;
			MP_login_name = "";
			LAST_BADGE = 0;
			CREDITS_BY_GAME_END = false;
			BADGES_ENABLED = true;
			BADGES_TOTAL = 0;
			BADGE_STAT = new Array();
			BADGE_STAT_MAX = new Array();
			BADGE_TITLE = new Array();
			BADGE_REACHED = new Array();
			addBadge(0,"Kill 100 enemies",100);
			addBadge(1,"Kill 30 enemies using swords",30);
			addBadge(2,"Make 40 headshots",40);
			addBadge(3,"Kill an enemy when you are dead",1);
			addBadge(4,"Kill an enemy when you are dying",1);
			addBadge(5,"Kill 10 enemies while you are not standing on your feet",10);
			addBadge(6,"Destroy all barrels at any 3 levels that have at least 5 barrels",3);
			addBadge(7,"Kill 20 dying enemies using swords",20);
			addBadge(8,"Kill an enemy with help of elevator or door",1);
			addBadge(9,"Mirror 20 projectiles",20);
			addBadge(10,"Pass a mission without kills",1);
			addBadge(11,"Beat all campaign levels at any level of difficultly",1);
			addBadge(12,"Beat level 42 on at least Normal level of difficultly",1);
			addBadge(13,"Beat level 41 on at least Normal level of difficultly",1);
			addBadge(14,"Beat level 41 on at least Hard level of difficultly",1);
			addBadge(15,"Break 50 enemies in two parts",50);
			addBadge(16,"Pass at least 10 levels at Hard level of difficultly",10);
			addBadge(17,"Destroy a vehicle using swords",1);
			addBadge(18,"Kill 5 invisible enemies using swords",5);
			addBadge(19,"Kill 40 enemies on at least Hard level of difficultly",40);
			addBadge(20,"Do a wall jump",1);
			addBadge(21,"Pass a mission with no shots on at least Normal level of difficultly",1);
			addBadge(22,"Make x5 times more damage than receive during any mission (do at least 100 damage)",1);
			BADGES_TOTAL = 23;
			MP_socket = new Socket();
			ss_info = new s_info();
			ss_info_off = new s_info_off();
			ss_info_act = new s_info_act();
			MP_SERVER_IP = "174.36.149.120";
			MP_SERVER_PORT = 10015;
			CURRENT_HINT = "";
			THIS_HINT = "";
			PITIMER = 0;
			SHAKEAMMOUT = 0;
			LAST_SERVER_UID = 0;
			MP_errored_out = false;
			MP_SERVER_GOT = "";
			MP_SERVER_GOT_CUR = "";
			received_packets = {};
			MP_last_received_packet = -1;
			MP_socket.addEventListener(Event.CLOSE,MP_s_closeHandler);
			MP_socket.addEventListener(Event.CONNECT,MP_s_connectHandler);
			MP_socket.addEventListener(IOErrorEvent.IO_ERROR,MP_s_ioErrorHandler);
			MP_socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR,MP_s_securityErrorHandler);
			MP_socket.addEventListener(ProgressEvent.SOCKET_DATA,MP_s_socketDataHandler);
			spawn = true;
			stage.quality = "HIGH";
			allowedText = " ,.\'][{}:?!@#$%^*()_-+=1234567890qwertyuiopasdfghjklzxcvbnmQAZWSXEDCRFVBGTYHNMJUIKLOP;<>\"/\\|";
			allowedText += "йцукенгшщзхъфывапролджэячсмитьбюёЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ";
			FIRST_TIME = false;
			game_scale = 1;
			lgame_scale = 1;
			hscreenX = 400;
			hscreenY = 200;
			screenX = 800;
			screenY = 400;
			lock_camera_region = null;
			lock_camera_intensity = 0;
			MP_spectator = false;
			MP_room = "plazma_playerz";
			MP_room_name = "";
			MP_map_name = "";
			MP_room_test = "";
			MP_pass = "";
			MP_channel = "-";
			MP_channel_name = "-";
			MP_myid = 0;
			MP_team = 0;
			MP_total = 0;
			MP_mode = true;
			MP_clan = "";
			MP_last_clear_shot_time = 0;
			temp_ignore_gun_pick = new Vector.<Object>();
			MP_favor_the_shooter = true;
			MP_allow_client_side_kills = true;
			temp_keep_dmg_belows = new Vector.<Object>();
			CASUAL_MODE = false;
			NOBASE = false;
			PLAZMA_GAME = true;
			AUTO_REVIVE = true;
			STRICT_MODE = false;
			KINETIC_IN_WALLS = false;
			MEAT_MODE = false;
			PRO_BOTS = false;
			ARCADE_GAME_MODE = true;
			KINETIC_MODULE_ENABLED = false;
			LEVELS_TOTAL = 42;
			LEVELS_PASSED = 0;
			CMPG_THIS_LEVEL = -1;
			AWARD = false;
			MP_last_chat = "";
			MP_pwarn = false;
			INLAG = false;
			MP_ready = false;
			MP_type = 1;
			MP_half_bot = false;
			MP_let_alive_players_hear_dead = true;
			MP_allow_leaderboard_details = true;
			MP_kills_in_a_row = 0;
			MP_kills_in_a_row_top = 1;
			LEVEL_END_FORCE = "exit";
			CMPG_name = "";
			EXOS_NAME = "Battlesuit AI Module";
			NOIR_NAME = "Noir Lime";
			PROXY_NAME = "Proxy";
			CMPG_money = 0;
			MP_nick = "TCO";
			SUPER_COMPUTER = false;
			RAGDOLL_COLLIDE = false;
			IM_A_CHEATER = false;
			LITE_PHYS = false;
			AUTO_PICK_NEW_WEPS = true;
			SOFT_SCREEN = true;
			SCREEN_EFFECTS = true;
			VIOLENCE = true;
			ALTCUR = true;
			CENSORESHIP = false;
			DISPLAY_CHAT = 2;
			FX_VOLUME = 0.5;
			MUSIC_VOLUME = 0.5;
			CUSTOM_MUSIC_VOLUME = 0.5;
			CUR_MUSIC_VOLUME = 0;
			MUSIC_COLDDOWN = 100;
			HQ = true;
			MOUSE_WHEEL = true;
			OVERSCROLL = true;
			EASY_MODE = false;
			LOW_HPS = false;
			RECONNECT_ON_LOST_CONNECTION = true;
			BEEP_ON_DEATH = true;
			HIT_SOUNDS = false;
			RASTERIZE_GRAPHICS = false;
			CUSTOM_BACKGROUND = false;
			DRAW_3D = false;
			SCREEN_FADE_EFFECTS = true;
			SHOW_EXP_BAR = 2;
			MP_AUTO_LOGIN = false;
			GSPEED = 0.5;
			GSPEED2 = 0.5;
			WSPEED = 0.5;
			DEFAULT_FPS = 30;
			MP_fps = 30;
			MP_pbug = 0;
			max_after_impact_speed = 15;
			MP_app = false;
			temp2 = new Array();
			ch_total = 0;
			ch_links = new Array();
			ch_names = new Array();
			ch_pass = new Array();
			ch_app = new Array();
			ch_map = new Array();
			ch_test = new Array();
			chat_lastid = -1;
			skin_model = new Array();
			skin_color_head = new Array();
			skin_color_body = new Array();
			skin_color_arms = new Array();
			skin_color_legs = new Array();
			clrs = new Array();
			inventoryA = new Array();
			inventoryB = new Array();
			inventoryC = new Array();
			inventoryD = new Array();
			armorA = 0;
			armorB = 0;
			AddItemToHero3("gun_pistol",3);
			AddItemToHero3("gun_pistol2",3);
			AddItemToHero3("gun_apistol",3);
			AddItemToHero3("gun_rifle",3);
			AddItemToHero3("gun_real_rifle",3);
			AddItemToHero3("gun_arifle",3);
			AddItemToHero3("gun_shotgun",3);
			AddItemToHero3("gun_arifle2",3);
			AddItemToHero3("gun_rl",3);
			AddItemToHero3("gun_raygun",3);
			AddItemToHero3("gun_plasmagun",3);
			AddItemToHero3("gun_railgun",3);
			AddItemToHero3("gun_bfg",3);
			AddItemToHero3("gun_defibrillator",3);
			AddItemToHero3("item_grenade",3);
			AddItemToHero4("gun_pistol2",3);
			AddItemToHero4("gun_apistol",3);
			AddItemToHero4("gun_real_rifle",3);
			AddItemToHero4("gun_arifle",3);
			AddItemToHero4("gun_real_shotgun",3);
			AddItemToHero4("gun_arifle2",3);
			AddItemToHero4("gun_rl",3);
			AddItemToHero4("gun_plasmagun",3);
			AddItemToHero4("gun_railgun",3);
			AddItemToHero4("gun_railgun2",3);
			AddItemToHero4("gun_defibrillator",3);
			AddItemToHero4("item_grenade",3);
			clrs[0] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[0].matrix = matrix;
			clrs[1] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0.3,0.2,0.2,0,0]);
			matrix = matrix.concat([0.2,0.3,0.2,0,0]);
			matrix = matrix.concat([0.2,0.2,0.3,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[1].matrix = matrix;
			clrs[2] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([1.1,0.3,0.3,0,0]);
			matrix = matrix.concat([0.3,1.1,0.3,0,0]);
			matrix = matrix.concat([0.3,0.3,1.1,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[2].matrix = matrix;
			clrs[3] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[3].matrix = matrix;
			clrs[4] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[4].matrix = matrix;
			clrs[5] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[5].matrix = matrix;
			clrs[6] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[6].matrix = matrix;
			clrs[7] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0,1,0,0,0]);
			matrix = matrix.concat([1,0,0,0,0]);
			matrix = matrix.concat([0,0,1,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[7].matrix = matrix;
			clrs[8] = new ColorMatrixFilter();
			matrix = new Array();
			matrix = matrix.concat([0.3,0.3,0.3,0,0]);
			matrix = matrix.concat([0.3,0.3,0.3,0,0]);
			matrix = matrix.concat([0.3,0.3,0.3,0,0]);
			matrix = matrix.concat([0,0,0,1,0]);
			clrs[8].matrix = matrix;
			MPclr = new Array();
			MPclr["r"] = [1,0,0];
			MPclr["g"] = [0,1,0];
			MPclr["b"] = [0,0,1];
			MPclr["d"] = [0.6,0.6,0.6];
			MPclr["k"] = [0.1,0.1,0.1];
			MPclr["p"] = [0.608,0.188,1];
			MPclr["w"] = [1,1,1];
			MPclr["c"] = [0,1,1];
			MPclr["m"] = [1,0,1];
			MPclr["y"] = [1,1,0];
			MPclr["n"] = [1,0.87,0.678];
			MPclr["s"] = [0.8,0.882,1];
			MPclr["o"] = [0.702,0.933,0.227];
			MPclr["e"] = [1,0.647,0];
			MPclr["a"] = [0.596,0.984,0.596];
			MPclr["h"] = [1,0.965,0.561];
			MPclr["v"] = [0.51 * 1.3,0.78 * 1.3,1 * 1.3];
			MPclr["B"] = [0.31 * 1.3,0.58 * 1.3,1 * 1.3];
			MPclr["R"] = [0.7 * 1.3,0.1 * 1.3,0.1 * 1.3];
			//MPclr["z"] = [];
			FIRST_RUN = true;
			try
			{
			   my_so.flush();
			}
			catch(e:Error)
			{
			   if(launchArguments.l == "" || launchArguments.l == undefined)
			   {
			      LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
			   }
			}
			LoadGame();
			if(launchArguments.l != undefined && launchArguments.l != "")
			{
			   mdialog.nickname.text = launchArguments.l;
			}
			else
			{
			   mdialog.nickname.text = CMPG_name;
			}
			mdialog.back1e2.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
			   PlaySound_full(ss_info);
			});
			mdialog.back1e2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
			   PlaySound_full(ss_info_off);
			});
			mdialog.back1e2.addEventListener(MouseEvent.CLICK,function():*
			{
			   PlaySound_full(ss_info_act);
			   nicknameproceed();
			});
			NONMUTE = true;
			s_channel = new Array();
			vol3d = new Array();
			max_channels = 32 - 10;
			last_channel = 0;
			i = 0;
			while(i < max_channels)
			{
			   s_channel[i] = new SoundChannel();
			   if(s_channel[i] == null)
			   {
			      NONMUTE = false;
			   }
			   vol3d[i] = new SoundTransform(1);
			   ++i;
			}
			vol = new SoundTransform(FX_VOLUME);
			vol2 = new SoundTransform(MUSIC_VOLUME);
			vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
			DEFAULT_MAP = "<player x=\"-340\" y=\"1\" uid=\"#hero\" tox=\"0\" toy=\"0\" hea=\"100\" hmax=\"100\" team=\"0\" side=\"1\" char=\"1\" incar=\"-1\" botaction=\"0\" ondeath=\"-1\" /><box x=\"-400\" y=\"100\" w=\"400\" h=\"100\" m=\"1\" /><lua x=\"0\" y=\"0\" uid=\"#lua*1\" src=\"print('hello world')\">";
			dist_to_face = 600;
			s_chat = new chat();
			s_badge_earned = new badge_earned();
			s_coolbuddy2 = new coolbuddy2();
			s_mission_done = new mission_done();
			s_team_switch = new team_switch();
			s_corvett_die = new corvett_die();
			s_test_sound = new test_sound();
			s_hint_appear = new hint_appear();
			s_hint_disappear = new hint_disappear();
			s_ship_incoming = new ship_incoming();
			s_ship_explosion = new ship_explosion();
			s_robo_bug_jump = new robo_bug_jump();
			s_robo_bug_launch = new robo_bug_launch();
			s_robo_bug_hit = new robo_bug_hit();
			s_s_gun_rayrifle = new s_gun_rayrifle();
			myCursor.gotoAndPlay(1);
			myCursor.mouseEnabled = false;
			myCursor.mouseChildren = false;
			darkness.alpha = 0;
			darkness.mouseEnabled = false;
			darkness.mouseChildren = false;
			m_dist = 0;
			// momove = false;
			// stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			stage.addEventListener(Event.ENTER_FRAME,function():*
			{
				EXT.pollMouse();
				mouse_x = EXT.mouseX;
				mouse_y = EXT.mouseY;
				if(mouse_x != mouse_last_x || mouse_y != mouse_last_y /*momove*/)
				{
					mouse_last_x = mouse_x;
					mouse_last_y = mouse_y;
					// momove = false;
					if(ALTCUR)
					{
						if(myCursor.currentLabel != "loading")
						{
							if(currentFrame > 3)
							{
								if(currentLabel != "gaming" || currentLabel == "gaming" && (gamemenu.visible && !system_non_stop && !mens[MP_myid].dead))
								{
									myCursor.gotoAndPlay(1);
								}
								else if(myCursor.currentFrame != 7)
								{
									myCursor.gotoAndStop(7);
								}
								if(!MP_spectator)
								{
									if(true || mouseX != 0 || mouseY != 0)
									{
										myCursor.x = EXT.mouseX; // mouseX;
										myCursor.y = EXT.mouseY; // mouseY;
									}
								}
								++m_dist;
								if(m_dist > 200)
								{
									m_dist = 0;
									if(!MP_spectator)
									{
										Mouse.hide();
									}
									else
									{
										Mouse.show();
									}
								}
							}
						}
						if(!myCursor.visible)
						{
							myCursor.visible = true;
						}
					}
					else
					{
						Mouse.show();
						if(myCursor.visible)
						{
							myCursor.visible = false;
						}
					}
				}
			});
			debug_screen = new Shape();
			line_screen = new Sprite();
			blur_filter = new BlurFilter(3.5, 3.5, 2);
			screen_blur_draw = new BitmapData(800 / BLUR_FRACTION, 400 / BLUR_FRACTION);
			screen_blur = new Bitmap(new BitmapData(800 / BLUR_FRACTION, 400 / BLUR_FRACTION));
			screen_blur.smoothing = true;
			screen_blur.scaleX = BLUR_FRACTION;
			screen_blur.scaleY = BLUR_FRACTION;
			DEBUG_MODE = false;
			DRAW_TRACE_LINES = false;
			lastcurmove = 0;
			last_psi = 1;
			dying_after = 30;
			HUNT_LOST = 220;
			MP_teamkills = 0;
			MP_round = 0;
			MP_gamestate = 0;
			tooltip_updated = false;
			TOOLTIPS = true;
			HINTS = true;
			gamechat_input_text = "";
			MP_playerstotal = 0;
			PLAYER_WIDTH = 10;
			MP_start_x = 0;
			MP_start_y = 0;
			MP_force_disconnect = false;
			MP_chat_input = false;
			MP_chat_input_for = "all";
			MP_custom_events = "";
			MP_deaths = 0;
			MP_kills = 0;
			hero = new Array();
			hpwarning = false;
			hpbeepch = new SoundChannel();
			hp_warn_max = 0.5;
			s_hp_warn = new hp_warn();
			s_hp_dead = new hp_dead();
			gravitatorch = new SoundChannel();
			s_gravitator = new gravitator2();
			wind_base = 0;
			musch = new SoundChannel();
			s_gameplay_song = new gameplay_song();
			main_song_ch = new SoundChannel();
			s_main_song_f = new main_song();
			s_extra_song_f = new mus_engineer();
			if (CUSTOM_BACKGROUND) s_main_song = s_extra_song_f;
			else s_main_song = s_main_song_f;
			am_base_ch = new SoundChannel();
			s_am_base = new am_base();
			am_wind_ch = new SoundChannel();
			s_am_wind = new am_wind();
			timeshiftch = new SoundChannel();
			s_slow_down = new slow_down();
			s_slow_up = new slow_up();
			grenades_total = 0;
			grenades_port_total = 0;
			grenades_sh_total = 0;
			c_sim_rt = 0;
			c_sim_rt2 = 0;
			c_sim_stress = false;
			OpenTop = true;
			system_non_stop = true;
			stoped_by_focus = false;
			last_gun_b4_psi = -1;
			mini_scenario_cur = -1;
			mini_scenario_phase = 0;
			fps_last = getTimer();
			fps_ticks = 0;
			color_player = 11206570;
			color_friendly = 16776994;
			color_enemy = 16746632;
			color_player_over = "#EAFFEA";
			color_friendly_over = "#FFFF92";
			color_enemy_over = "#FFC8C8";
			firstframe = true;
			g_scale_outcar = 1;
			s_t_switch1 = new t_switch1();
			s_t_switch2 = new t_switch2();
			s_t_switch_denied = new t_switch_denied();
			s_t_door1_start = new t_door1_start();
			s_t_door1_stop = new t_door1_stop();
			s_step1 = new step1();
			s_step2 = new step2();
			s_step3 = new step3();
			s_step4 = new step4();
			s_robo_step1 = new robo_step1();
			s_robo_step2 = new robo_step2();
			s_robo_step3 = new robo_step3();
			s_robo_step4 = new robo_step4();
			s_body0 = new body0();
			s_body1 = new body1();
			s_body2 = new body2();
			s_body3 = new body3();
			s_metal0 = new metal_hor();
			s_metal1 = new metal_ver1();
			s_metal2 = new metal_ver2();
			s_metal3 = new metal_ver3();
			s_metal_gib = new metal_gib();
			s_steel_low = new steel_low();
			s_steel_med = new steel_med();
			s_steel_hor = new steel_hor();
			s_steel_hard = new steel_hard();
			s_glass1 = new glass1();
			s_glass2 = new glass2();
			s_barrel = new barrel();
			s_barrel2 = new barrel2();
			s_enemy_hurt1 = new enemy_hurt1();
			s_enemy_hurt_1 = new enemy_hurt_1();
			s_enemy_hurt_2 = new enemy_hurt_2();
			s_enemy_hurt_3 = new enemy_hurt_3();
			s_enemy_die1 = new enemy_die1();
			s_enemy_die_1 = new enemy_die_1();
			s_enemy_die_2 = new enemy_die_2();
			s_enemy_die_3 = new enemy_die_3();
			s_enemy_die_4 = new enemy_die_4();
			s_enemy_alert = new enemy_alert();
			s_usurpation_hurt = new usurpation_hurt();
			s_usurpation_death2 = new usurpation_death2();
			s_usurpation_death3 = new usurpation_death3();
			s_usurpation_alert = new usurpation_alert();
			s_usurpation_dying = new usurpation_dying();
			s_noir_die = new noir_die();
			s_noir_hurt1 = new noir_hurt1();
			s_noir_hurt2 = new noir_hurt2();
			s_teleport = new teleport_spawn();
			s_portnade_explode = new portnade_explode();
			s_portnade_act2 = new portnade_act2();
			s_shnade_act = new shnade_act();
			s_shnade_explode = new shnade_explode();
			s_shnade_hit = new shnade_hit();
			s_shnade_hit_low = new shnade_hit_low();
			s_shnade_offline = new shnade_offline();
			s_bounce_bullet = new bounce_bullet();
			s_wea_rail_alt2 = new wea_rail_alt2();
			s_wea_android_sniper = new wea_android_sniper();
			s_wea_crossfire2 = new wea_crossfire2();
			s_wea_incompetence_archetype_27xx_fire = new wea_incompetence_archetype_27xx_fire();
			s_wea_thetoppestkek_shotgun_nxs25 = new wea_thetoppestkek_shotgun_nxs25();
			s_wea_moonhawk_railgun = new wea_moonhawk_railgun();
			s_dart4 = new dart4();
			s_wea_glhf = new wea_glhf();
			s_wea_lazyrain_gravy_rl = new wea_lazyrain_gravy_rl();
			s_wea_m202 = new wea_m202();
			s_wea_android_shotgun = new wea_android_shotgun();
			s_wea_plasma_shotgun = new wea_plasma_shotgun();
			s_wea_ditzy_cs_ik = new wea_ditzy_cs_ik();
			s_wea_ditzy_cs_ik2 = new wea_ditzy_cs_ik2();
			s_wea_ph01 = new wea_ph01();
			s_wea_rail_toxic2 = new wea_rail_toxic2();
			s_wea_auto_sg2 = new wea_auto_sg2();
			s_wea_darkstar_rl3 = new wea_darkstar_rl3();
			s_wea_alien_rail_sg = new wea_alien_rail_sg();
			s_wea_bison = new wea_bison();
			s_wea_phanx = new wea_phanx();
			s_wea_ditzy_energy_rifle = new wea_ditzy_energy_rifle();
			s_wea_rifle_nade = new wea_rifle_nade();
			s_wea_revolver5 = new wea_revolver5();
			s_wea_android_railgun = new wea_android_railgun();
			s_wea_plasma_smg = new wea_plasma_smg();
			s_wea_acid_gl3 = new wea_acid_gl3();
			s_grenade_wet = new grenade_wet();
			s_hit_dmg = new hit_dmg();
			s_hit_dmg2 = new hit_dmg2();
			s_hit_dmg3 = new hit_dmg3();
			s_hit_frag = new hit_frag();
			s_sd_death = new sd_death();
			s_sd_hurt1 = new sd_hurt1();
			s_sd_hurt2 = new sd_hurt2();
			s_sd_welcome2 = new sd_welcome2();
			s_wea_lmg = new wea_lmg();
			s_exp_level = new exp_level();
			s_exp_tick = new exp_tick();
			s_exp_event_stop = new exp_event_stop();
			s_android_miner_die = new android_miner_die();
			s_android_miner_enemy_down = new android_miner_enemy_down();
			s_android_miner_welcome2 = new android_miner_welcome2();
			s_android_miner_hurt = new android_miner_hurt();
			s_reakhohsha_welcome1 = new reakhohsha_welcome1();
			s_reakhohsha_welcome2 = new reakhohsha_welcome2();
			s_reakhohsha_hurt1 = new reakhohsha_hurt1();
			s_reakhohsha_hurt2 = new reakhohsha_hurt2();
			s_reakhohsha_hurt3 = new reakhohsha_hurt3();
			s_reakhohsha_death3 = new reakhohsha_death3();
			s_hexagon_welcome1 = new hexagon_welcome1();
			s_hexagon_welcome2 = new hexagon_welcome2();
			s_hexagon_welcome3 = new hexagon_welcome3();
			s_hexagon_death1 = new hexagon_death1();
			s_hexagon_death2 = new hexagon_death2();
			s_hexagon_pain1 = new hexagon_pain1();
			s_hexagon_pain2 = new hexagon_pain2();
			s_hexagon_pain3 = new hexagon_pain3();
			s_hexagon_pain4 = new hexagon_pain4();
			s_beam1 = new beam1();
			s_beam5 = new beam5();
			s_beam1_recharge = new beam1_recharge();
			s_beam1_rechargeB = new beam1_rechargeB();
			s_beam5_recharge = new beam5_recharge();
			s_beam5_rechargeB = new beam5_rechargeB();
			s_wea_roxxar_rifle = new wea_roxxar_rifle();
			s_wea_moonhawk_smg2 = new wea_moonhawk_smg2();
			s_wea_moonhawk_smg2.custom_volume = 1;
			s_wea_roxxar_rifle.custom_volume = 4;
			s_beam1.custom_volume = 2;
			s_beam5.custom_volume = 2;
			s_beam1_recharge.custom_volume = 2;
			s_beam1_rechargeB.custom_volume = 2;
			s_beam5_recharge.custom_volume = 2;
			s_beam5_rechargeB.custom_volume = 2;
			s_hexagon_welcome1.custom_volume = 4;
			s_hexagon_welcome2.custom_volume = 4;
			s_hexagon_welcome3.custom_volume = 4;
			s_hexagon_death1.custom_volume = 4;
			s_hexagon_death2.custom_volume = 4;
			s_hexagon_pain1.custom_volume = 4;
			s_hexagon_pain2.custom_volume = 4;
			s_hexagon_pain3.custom_volume = 4;
			s_hexagon_pain4.custom_volume = 4;
			s_android_miner_die.custom_volume = 2 * 0.5;
			s_android_miner_enemy_down.custom_volume = 2 * 0.5;
			s_android_miner_welcome2.custom_volume = 2 * 0.5;
			s_android_miner_hurt.custom_volume = 2 * 0.5;
			s_reakhohsha_welcome1.custom_volume = 2;
			s_reakhohsha_welcome2.custom_volume = 2;
			s_reakhohsha_hurt1.custom_volume = 2;
			s_reakhohsha_hurt2.custom_volume = 2;
			s_reakhohsha_hurt3.custom_volume = 2;
			s_reakhohsha_death3.custom_volume = 2;
			s_exp_level.custom_volume = 4;
			s_exp_tick.custom_volume = 1;
			s_exp_event_stop.custom_volume = 4;
			s_bounce_bullet.custom_volume = 1.5;
			s_wea_rail_alt2.custom_volume = 4;
			s_wea_android_sniper.custom_volume = 2.5;
			s_wea_android_shotgun.custom_volume = 4;
			s_wea_crossfire2.custom_volume = 2;
			s_wea_incompetence_archetype_27xx_fire.custom_volume = 3;
			s_wea_thetoppestkek_shotgun_nxs25.custom_volume = 2;
			s_wea_moonhawk_railgun.custom_volume = 8;
			s_dart4.custom_volume = 5;
			s_wea_glhf.custom_volume = 4;
			s_wea_lazyrain_gravy_rl.custom_volume = 8;
			s_wea_m202.custom_volume = 2.75;
			s_wea_plasma_shotgun.custom_volume = 3;
			s_wea_ph01.custom_volume = 5;
			s_wea_rail_toxic2.custom_volume = 2;
			s_wea_auto_sg2.custom_volume = 2;
			s_wea_darkstar_rl3.custom_volume = 3;
			s_wea_alien_rail_sg.custom_volume = 2;
			s_wea_bison.custom_volume = 2;
			s_wea_phanx.custom_volume = 2;
			s_wea_rifle_nade.custom_volume = 3;
			s_wea_revolver5.custom_volume = 2;
			s_wea_android_railgun.custom_volume = 4;
			s_wea_plasma_smg.custom_volume = 1.5;
			s_wea_acid_gl3.custom_volume = 3.5;
			s_grenade_wet.custom_volume = 3;
			s_hit_dmg.custom_volume = 3;
			s_hit_dmg2.custom_volume = 5;
			s_hit_dmg3.custom_volume = 7;
			s_hit_frag.custom_volume = 6;
			s_wea_lmg.custom_volume = 3;
			s_wea_ditzy_energy_rifle.custom_volume = 4;
			s_wea_ditzy_cs_ik2.custom_volume = 1.5;
			s_sd_death.custom_volume = 2;
			s_sd_hurt1.custom_volume = 2;
			s_sd_hurt2.custom_volume = 2;
			s_sd_welcome2.custom_volume = 2;
			s_fail_shot = new fail_shot();
			s_psi1 = new sou_blade_swing1();
			s_psi2 = new sou_blade_swing2();
			s_psi3 = new sou_blade_swing3();
			s_water_splash1 = new water_splash1();
			s_water_splash2 = new water_splash2();
			s_water_splash3 = new water_splash3();
			s_blood_hit = new blood_hit();
			s_blood_hit_sword = new blood_hit_sword();
			s_blood_head = new blood_head();
			s_blood_head2 = new blood_head2();
			s_blood_body = new blood_body();
			s_blood_body2 = new blood_body2();
			s_blood_leg_arm = new blood_leg_arm();
			s_body_fall = new body_fall();
			s_metal_hit = new metal_hit();
			s_wea1 = new wea1();
			s_wea2 = new wea2();
			s_wea_pickup = new wea_pickup();
			s_charged_explosion = new charged_explosion();
			s_silenced = new silenced();
			s_wea_sniper = new wea_sniper();
			s_wea_minigun2 = new wea_mingun2();
			s_wea_plasmagun = new wea_plasmagun();
			s_wea_apistol = new wea_apistol();
			s_wea_pistol = new wea_pistol();
			s_wea_pistol2 = new wea_pistol2();
			s_wea_shotgun = new wea_shotgun();
			s_wea_rifle = new wea_rifle();
			s_wea_rocket = new wea_rocket_launch();
			s_wea_railgun = new wea_railgun();
			s_wea_railgun2 = new wea_rail_alt();
			s_wea_mingun = new wea_mingun();
			s_wea_gl = new wea_gl();
			s_wea_vehcannon = new wea_vehcannon();
			s_wea_impulse = new wea_impulse();
			s_wea_rail_alt = new wea_rail_alt();
			s_wea_energy = new wea_energy();
			s_wea_evil_shot = new wea_evil_shot();
			s_wea_rifle_alt = new wea_rifle_alt();
			s_wea_shotgun_alt = new wea_shotgun_alt();
			s_wea_defibrillator = new wea_defibrillator();
			s_wea_vehminigun = new wea_vehminigun();
			s_wea_real_shotgun = new wea_real_shotgun();
			s_wea_real_shotgun_r = new wea_real_shotgun_r();
			s_wea_real_rifle = new wea_real_rifle();
			s_walker_step = new walker_step();
			s_walker_phase1 = new walker_phase1();
			s_walker_phase2 = new walker_phase2();
			s_walker_die = new walker_die();
			s_capsule_hit1 = new capsule_hit1();
			s_capsule_hit2 = new capsule_hit2();
			s_explode1 = new explode1();
			s_explode2 = new explode2();
			s_explode_bfg = new explode_bfg();
			s_reload = new reload();
			s_rl_reload = new rl_reload();
			s_hero_death1 = new hero_death1();
			s_hero_death2 = new hero_death2();
			s_hero_pain1 = new hero_pain1();
			s_hero_pain2 = new hero_pain2();
			s_hero_pain3 = new hero_pain3();
			s_hero_pain4 = new hero_pain4();
			s_android2_die = new android2_die();
			s_android2_hurt = new android2_hurt();
			s_android2_welcome2 = new android2_welcome2();
			s_android2_die.custom_volume = 2;
			s_android2_hurt.custom_volume = 2;
			s_android2_welcome2.custom_volume = 4;
			s_android_die = new android_die_1();
			s_android_welcome1 = new android_welcome1();
			s_android_welcome2 = new android_welcome2();
			s_android_welcome3 = new android_welcome3();
			s_android_hurt = new android_hurt();
			s_android_enemy_down1 = new android_enemy_down1();
			s_f_death1 = new f_death1();
			s_f_death2 = new f_death2();
			s_f_death3 = new f_death3();
			s_f_pain2 = new f_pain2();
			s_f_pain3 = new f_pain3();
			s_f_pain4 = new f_pain4();
			s_f_welcome1 = new f_welcome1();
			s_g_death1 = new g_death1();
			s_g_death2 = new g_death2();
			s_g_death3 = new g_death3();
			s_g_pain1 = new g_pain1();
			s_g_pain2 = new g_pain2();
			s_g_pain3 = new g_pain3();
			s_g_welcome1 = new g_welcome1();
			s_fp_death1 = new fp_death1();
			s_fp_death2 = new fp_death2();
			s_fp_death3 = new fp_death3();
			s_fp_pain2 = new fp_pain2();
			s_fp_pain3 = new fp_pain3();
			s_fp_pain4 = new fp_pain4();
			s_fp_welcome1 = new fp_welcome1();
			s_marine_death1 = new marine_death1();
			s_marine_death2 = new marine_death2();
			s_marine_death3 = new marine_death3();
			s_marine_pain1 = new marine_hurt1();
			s_marine_pain2 = new marine_hurt2();
			s_marine_pain3 = new marine_hurt3();
			s_marine_alert = new marine_alert();
			s_marine_alert2 = new marine_alert2();
			s_marine_alert3 = new marine_alert3();
			s_marine_alert4 = new marine_alert4();
			s_marine_dying = new marine_dying();
			s_slicer_alert = new slicer_alert();
			s_slicer_die = new slicer_die();
			s_hero_welcome1 = new hero_welcome1();
			s_hero_welcome2 = new hero_welcome2();
			s_hero_welcome3 = new hero_welcome3();
			s_grenade = new grenade();
			s_grenade_act = new grenade_act();
			s_nade_throw = new nade_throw();
			s_explode_underwater = new explode_underwater();
			s_plasma_explosion = new plasma_explosion();
			s_box_low = new box_ver1();
			s_box_med = new box_ver2();
			s_box_hor = new box_hor();
			s_box_hard = new box_ver3();

			s_box_die = new box_die();
			s_drone_die = new drone_die();
			s_drone_hurt = new drone_hurt();

			/*for ( var i = 0; i <= sky.totalFrames; i++ )
			{
				sky.gotoAndStop( i );
				bitmapSprites[0][ i ] = new BitmapData(800,400, false).draw(sky, null, null, null, null, false);
			}*/

			voices = {
			   "mute":{
			      "death":[],
			      "enemy_down":[],
			      "enemy_spotted":[],
			      "hurt":[],
			      "dying":[]
			   },
			   "marine":{
			      "death":[s_hero_death1,s_hero_death2],
			      "enemy_down":[],
			      "enemy_spotted":[s_hero_welcome1,s_hero_welcome2,s_hero_welcome3],
			      "hurt":[s_hero_pain1,s_hero_pain2,s_hero_pain3,s_hero_pain4],
			      "dying":[]
			   },
			   "cs":{
			      "death":[s_marine_death1,s_marine_death2,s_marine_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_marine_alert,s_marine_alert2,s_marine_alert3,s_marine_alert4],
			      "hurt":[s_marine_pain1,s_marine_pain2,s_marine_pain3],
			      "dying":[s_marine_dying]
			   },
			   "ghost":{
			      "death":[s_slicer_die],
			      "enemy_down":[],
			      "enemy_spotted":[s_slicer_alert],
			      "hurt":[],
			      "dying":[]
			   },
			   "usurpation":{
			      "death":[s_enemy_die_4,s_enemy_die1,s_enemy_die_1,s_enemy_die_2,s_enemy_die_3],
			      "enemy_down":[],
			      "enemy_spotted":[s_enemy_alert],
			      "hurt":[s_enemy_hurt1,s_enemy_hurt_1,s_enemy_hurt_2,s_enemy_hurt_3],
			      "dying":[]
			   },
			   "usurpation_destroyer":{
			      "death":[s_usurpation_death2,s_usurpation_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_usurpation_alert],
			      "hurt":[s_usurpation_hurt],
			      "dying":[s_usurpation_dying]
			   },
			   "android":{
			      "death":[s_android_die],
			      "enemy_down":[s_android_enemy_down1],
			      "enemy_spotted":[s_android_welcome1,s_android_welcome2,s_android_welcome3],
			      "hurt":[s_android_hurt],
			      "dying":[],
			      "enemy_down_sp_chance":0.333
			   },
			   "hum_droid":{
			      "death":[s_android2_die],
			      "enemy_down":[],
			      "enemy_spotted":[s_android2_welcome2],
			      "hurt":[s_android2_hurt],
			      "dying":[]
			   },
			   "proxy":{
			      "death":LibSoundStringArray(2,["helm_proxy_death6","helm_proxy_death5","helm_proxy_death4","helm_proxy_death3"]),
			      "enemy_down":LibSoundStringArray(2,["helm_proxy_enemy_down_niceC","helm_proxy_enemy_down_niceA","helm_proxy_enemy_down_got_oneD","helm_proxy_enemy_down_fantasticA"]),
			      "enemy_spotted":LibSoundStringArray(2,["helm_proxy_alert_up_thereA","helm_proxy_alert_take_coverB","helm_proxy_alert_over_hereB"]),
			      "hurt":LibSoundStringArray(2,["helm_proxy_hurt9","helm_proxy_hurt8","helm_proxy_hurt5","helm_proxy_hurt4","helm_proxy_hurt17","helm_proxy_hurt15","helm_proxy_hurt14","helm_proxy_hurt13","helm_proxy_hurt12","helm_proxy_hurt11"]),
			      "dying":LibSoundStringArray(2,["helm_proxy_dyingF","helm_proxy_dyingC"])
			   },
			   "proxy_helmetless":{
			      "death":LibSoundStringArray(2,["proxy_death6","proxy_death5","proxy_death4","proxy_death3"]),
			      "enemy_down":LibSoundStringArray(2,["proxy_enemy_down_niceC","proxy_enemy_down_niceA","proxy_enemy_down_got_oneD","proxy_enemy_down_fantasticA"]),
			      "enemy_spotted":LibSoundStringArray(2,["proxy_alert_up_thereA","proxy_alert_take_coverB","proxy_alert_over_hereB"]),
			      "hurt":LibSoundStringArray(2,["proxy_hurt9","proxy_hurt8","proxy_hurt5","proxy_hurt4","proxy_hurt17","proxy_hurt15","proxy_hurt14","proxy_hurt13","proxy_hurt12","proxy_hurt11"]),
			      "dying":LibSoundStringArray(2,["proxy_dyingF","proxy_dyingC"])
			   },
			   "silk":{
			      "death":LibSoundStringArray(2,["silk_death1B","silk_death2B"]),
			      "enemy_down":LibSoundStringArray(2,["silk_enemy_down_minus_oneB","silk_enemy_down_brilliantC","silk_enemy_down_eliminatedB","silk_enemy_down_hell_yeahB","silk_enemy_down_ive_got_oneB","silk_enemy_down_no_kicking_for_youB"]),
			      "enemy_spotted":LibSoundStringArray(2,["silk_alert_contactA","silk_alert_i_see_oneA","silk_alert_there_is_oneA"]),
			      "hurt":LibSoundStringArray(2,["silk_hurt1B","silk_hurt2B","silk_hurt5","silk_hurt6","silk_hurt9B"]),
			      "dying":LibSoundStringArray(2,["silk_dyingB"])
			   },
			   "noir_lime":{
			      "death":[s_noir_die],
			      "enemy_down":[],
			      "enemy_spotted":[],
			      "hurt":[s_noir_hurt1,s_noir_hurt2],
			      "dying":[]
			   },
			   "grub":{
			      "death":[s_g_death1,s_g_death2,s_g_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_g_welcome1],
			      "hurt":[s_g_pain1,s_g_pain2,s_g_pain3],
			      "dying":[]
			   },
			   "falkok":{
			      "death":[s_f_death1,s_f_death2,s_f_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_f_welcome1],
			      "hurt":[s_f_pain2,s_f_pain3,s_f_pain4],
			      "dying":[]
			   },
			   "falkok_phoenix":{
			      "death":[s_fp_death1,s_fp_death2,s_fp_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_fp_welcome1],
			      "hurt":[s_fp_pain2,s_fp_pain3,s_fp_pain4],
			      "dying":[]
			   },
			   "star_defender":{
			      "death":[s_sd_death],
			      "enemy_down":[],
			      "enemy_spotted":[s_sd_welcome2],
			      "hurt":[s_sd_hurt1,s_sd_hurt2],
			      "dying":[]
			   },
			   "mine_droid":{
			      "death":[s_android_miner_die],
			      "enemy_down":[s_android_miner_enemy_down],
			      "enemy_spotted":[s_android_miner_welcome2],
			      "hurt":[s_android_miner_hurt],
			      "dying":[]
			   },
			   "reakhohsha":{
			      "death":[s_reakhohsha_death3],
			      "enemy_down":[],
			      "enemy_spotted":[s_reakhohsha_welcome1,s_reakhohsha_welcome2],
			      "hurt":[s_reakhohsha_hurt1,s_reakhohsha_hurt2,s_reakhohsha_hurt3],
			      "dying":[]
			   },
			   "hexagon":{
			      "death":[s_hexagon_death1,s_hexagon_death2],
			      "enemy_down":[],
			      "enemy_spotted":[s_hexagon_welcome1,s_hexagon_welcome2,s_hexagon_welcome3],
			      "hurt":[s_hexagon_pain1,s_hexagon_pain2,s_hexagon_pain3,s_hexagon_pain4],
			      "dying":[]
			   },
			   "civilian_male":{
			      "death":LibSoundStringArray(2.2 * 0.75,["civilian_male_death1","civilian_male_death2"]),
			      "enemy_down":LibSoundStringArray(2 * 0.75,["civilian_male_celebrate1","civilian_male_celebrate2"]),
			      "enemy_spotted":LibSoundStringArray(2 * 0.75,["civilian_male_welcome1","civilian_male_welcome2"]),
			      "hurt":LibSoundStringArray(2.2 * 0.75,["civilian_male_hurt1","civilian_male_hurt2","civilian_male_hurt3","civilian_male_hurt4"]),
			      "dying":LibSoundStringArray(2 * 0.75,["civilian_male_dying2"])
			   },
			   "vulture":{
			      "death":LibSoundStringArray(2 * 0.66,["vulture_death1","vulture_death2"]),
			      "enemy_down":LibSoundStringArray(2 * 0.66,["vulture_celebrate1","vulture_celebrate2","vulture_celebrate3"]),
			      "enemy_spotted":LibSoundStringArray(2 * 0.66,["vulture_welcome1","vulture_welcome2","vulture_welcome3"]),
			      "hurt":LibSoundStringArray(2 * 0.66,["vulture_hurt1","vulture_hurt2","vulture_hurt3","vulture_hurt4"]),
			      "dying":LibSoundStringArray(2 * 0.66,["vulture_dying"])
			   },
			   "crossfire_sentinel":{
			      "death":LibSoundStringArray(2,["crossfire_sentinel_death1","crossfire_sentinel_death2","crossfire_sentinel_death3"]),
			      "enemy_down":LibSoundStringArray(2,["crossfire_sentinel_celebrate1","crossfire_sentinel_celebrate2"]),
			      "enemy_spotted":LibSoundStringArray(2,["crossfire_sentinel_welcome1","crossfire_sentinel_welcome2","crossfire_sentinel_welcome3"]),
			      "hurt":LibSoundStringArray(2,["crossfire_sentinel_hurt1","crossfire_sentinel_hurt2","crossfire_sentinel_hurt3"]),
			      "dying":LibSoundStringArray(2,["crossfire_sentinel_dying"])
			   },
			   "xin":{
			       "death":LibSoundStringArray(1,["xin_death"]),
			       "enemy_down":LibSoundStringArray(1,["xin_celebrate"]),
			       "enemy_spotted":LibSoundStringArray(1,["xin_enemy_spotted"]),
			       "hurt":LibSoundStringArray(2,["xin_hit"]),
			       "dying":[]
			   }
			};
			hit_frame_damage = 0;
			hit_frags = new Vector.<Object>();
			hit_frags_timer = 0;
			expl_hurt_full = false;
			joint_cycle = 0;
			hpmax = 200;
			maxbulletlife = 0;
			boxx = new Array();
			boxy = new Array();
			boxw = new Array();
			boxh = new Array();
			boxmat = new Array();
			boxes = new Vector.<PB2Wall>();

			bgs = new Array();
			bgx = new Array();
			bgy = new Array();
			bgw = new Array();
			bgh = new Array();
			bgm = new Array();
			bgu = new Array();
			bgv = new Array();
			bg_cast = new Array();
			pushx = new Array();
			pushy = new Array();
			pushtox = new Array();
			pushtoy = new Array();
			pushstab = new Array();
			pushdamage = new Array();
			pushw = new Array();
			pushh = new Array();
			flare = new Array();
			flare_power = new Array();
			flarestotal = 0;
			wax = new Array();
			way = new Array();
			waw = new Array();
			wah = new Array();
			wadamage = new Array();
			wa_friction = new Array();
			ax = new Array();
			ay = new Array();
			lax = new Array();
			lay = new Array();
			atox = new Array();
			atoy = new Array();
			aio = new Array();
			aof = new Array();
			arad = new Array();
			around = new Array();
			amat = new Array();
			atim = new Array();
			acollided = new Array();
			ainwater = new Array();
			ablood = new Array();
			aactive = new Array();
			ainwater_shape = new Array();
			atom_first_position_corrections = new Vector.<Object>();
			pspeed = 0;
			weapon_penetration_factor = 0;
			rocket_speed_mult = 1;
			grenade_speed_mult = 1;
			plasma_speed_mult = 1;
			chtypa = new Array();
			chP = new Array();
			chC = new Array();
			chdef = new Array();
			chdamp = new Array();
			chio = new Array();
			atotal = 0;
			chtotal = 0;
			startatotal = 0;
			startchtotal = 0;
			bounce = 0.2;
			friction = 0.3;
			gravity = 0.5;
			barrels = new Array();
			guns = new Vector.<MovieClip>();
			mens = new Vector.<player>();
			vehicles = new Array();
			doors = new Vector.<PB2Door>();
			decors = new Array();
			triggers = new Vector.<PB2Trigger>();
			timers = new Array();
			regions = new Vector.<PB2Region>();
			waters = new Array();
			waterList = new Vector.<PB2Water>();
			boxes = new Vector.<PB2Wall>();
			attachments = new Array();
			luas = new Array();
			_root = root as MovieClip;
			regionstotal = 0;
			triggerstotal = 0;
			timerstotal = 0;
			doorstotal = 0;
			bgstotal = 0;
			playerstotal = 0;
			boxestotal = 0;
			lampstotal = 0;
			waterstotal = 0;
			gunstotal = 0;
			pushstotal = 0;
			vehiclestotal = 0;
			barrelstotal = 0;
			decorstotal = 0;
			luasTotal = 0;
			fire = false;
			sitmax = 14;
			key_left = false;
			key_right = false;
			key_up = false;
			key_down = false;
			key_grenade = false;
			key_pick = false;
			key_alt = false;
			key_grab = false;
			key_kinetic = false;
			key_fall = false;
			key_ctrl = false;
			cinetic_target = -1;
			timeshift = 0;
			energy_max = 100;
			energy = 100;
			ALLOW_TIMESHIFT = true;
			joint_align = -1;
			puls = new Array();
			pulscur = 0;
			pulsmax = 64;
			surf_lnk = new Array();
			surf_lnk_to = new Array();
			ef = new Array();
			nextef = 0;
			shnades = new Array();
			shnades_total = 0;
			shnades_next = 0;
			lamps_x = new Array();
			lamps_y = new Array();
			lamps_power = new Array();
			lamps_power2 = new Array();
			lamps_skips = 1;
			lamps_sprites = new Array();
			render_minX = 0;
			render_minY = 0;
			render_maxX = 0;
			render_maxY = 0;
			rnd = 1;
			Disable_next_click = false;
			FORCE_SNOW = false;
			flakes_spreadout = 150;
			flakes_letitsnow = true;
			mShape = new Sprite();
			optimalupd = true;
			NearBoxBSP_stepsize = 100;
			NearBoxBSP_empty = new Vector.<int>(0,true);
			synonym_uid = new Array();
			synonym_id = new Array();
			SHOW_FRAG_MESSAGES = true;
			trigger_to_key_binds_down = {};
			trigger_to_key_binds_up = {};
			mxnds1 = 0;
			mxnds2 = 0;
			mxnds3 = 0;
			tnds = 10;
			stable = true;
			unstable = -1;
			unstable_m = "none";
			MP_start_guns_total = 0;
			qpack_pattern = new Array();
			qpack_pattern_length = 0;
			qpack_pattern_simcalc = 0;
			qpack_base = "0123456789abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ_()$@~!.,*-+;:?<>/#%&";
			qpack_rule_2param("^","[^]");
			qpack_rule("\" /><player x=\"");
			qpack_rule("\" /><enemy x=\"");
			qpack_rule("\" /><door x=\"");
			qpack_rule("\" /><box x=\"");
			qpack_rule("\" /><gun x=\"");
			qpack_rule("\" /><pushf x=\"");
			qpack_rule("\" /><decor x=\"");
			qpack_rule("\" /><trigger enabled=\"true");
			qpack_rule("\" /><trigger enabled=\"false");
			qpack_rule("\" /><timer enabled=\"true");
			qpack_rule("\" /><timer enabled=\"false");
			qpack_rule("\" /><inf mark=\"");
			qpack_rule(" /><bg x=\"");
			qpack_rule(" /><lamp x=\"");
			qpack_rule(" /><region x=\"");
			qpack_rule("<player x=\"");
			qpack_rule("\" damage=\"");
			qpack_rule("\" maxspeed=\"");
			qpack_rule("\" model=\"gun_");
			qpack_rule("\" model=\"");
			qpack_rule("\" botaction=\"");
			qpack_rule("\" ondeath=\"");
			qpack_rule("\" actions_");
			qpack_rule("_targetB=\"");
			qpack_rule("_type=\"");
			qpack_rule("_targetA=\"");
			qpack_rule("\" team=\"");
			qpack_rule("\" side=\"");
			qpack_rule("\" command=\"");
			qpack_rule("\" flare=\"");
			qpack_rule("\" power=\"");
			qpack_rule("\" moving=\"true");
			qpack_rule("\" moving=\"false");
			qpack_rule("\" tarx=\"");
			qpack_rule("\" tary=\"");
			qpack_rule("\" tox=\"");
			qpack_rule("\" toy=\"");
			qpack_rule("\" hea=\"");
			qpack_rule("\" hmax=\"");
			qpack_rule("\" incar=\"");
			qpack_rule("\" char=\"");
			qpack_rule("\" maxcalls=\"");
			qpack_rule("\" vis=\"false");
			qpack_rule("\" vis=\"true");
			qpack_rule("\" use_on=\"");
			qpack_rule("\" use_target=\"");
			qpack_rule("\" upg=\"0^");
			qpack_rule("\" upg=\"");
			qpack_rule("^fgun_");
			qpack_rule("\" addx=\"");
			qpack_rule("\" addy=\"");
			qpack_rule("\" y=\"");
			qpack_rule("\" w=\"");
			qpack_rule("\" h=\"");
			qpack_rule("\" m=\"");
			qpack_rule("\" at=\"");
			qpack_rule("\" delay=\"");
			qpack_rule("\" target=\"");
			qpack_rule("\" stab=\"");
			qpack_rule("\" mark=\"");
			qpack_rule("0^T0^3");
			qpack_rule("0^x^y0^z0^h1^");
			qpack_rule("^m3^o-1^m3^p0^m3^n0^m4^o-1^m4^p0^m4^n0^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
			qpack_rule("^m5^o-1^m5^p0^m5^n0^m6^o-1^m6^p0^m6^n0^m7^o-1^m7^p0^m7^n0^m8^o-1^m8^p0^m8^n0^m9^o-1^m9^p0^m9^n0^m10^o-1^m10^p0^m10^n0");
			qpack_rule("^A0^B0^C130^D130^q");
			qpack_rule("0^u0.4^t1\"^");
			qpack_rule("0^Q1");
			qpack_rule("0^R");
			qpack_rule("0^S");
			qpack_rule("0^Q-");
			qpack_rule("0^Q");
			qpack_rule("\" /><water x=\"");
			qpack_rule("\" forteam=\"");
			qpack_rule("^Ttrue");
			qpack_rule("true");
			qpack_rule("false");
			qpack_rule("^m2^o-1^m2^p0^m2^n0^)");
			qpack_rule("pistol");
			qpack_rule("rifle");
			qpack_rule("shotgun");
			qpack_rule("real_");
			qpack_rule_2param("","<q.");
			ENABLE_LEVEL_LOGIC_ERRORS = false;
			trigger_loops = 0;
			level_variables = null;
			dm_slots_on_spawn = null;
			dm_max_guns_on_spawn = 0;
			session_variables = {};
			session_variables_source_id = {};
			pb2Bullet = {
			   "csolver_GSPEED_atoms_from":0,
			   "csolver_GSPEED_for_atoms_scale":1
			};
			pb2Bullet._DistanceFunctionPower2 = function(param1:*):*
			{
			   var _loc2_:* = undefined;
			   var _loc3_:* = undefined;
			   _loc2_ = pb2Bullet.csolver_a + Number(pb2Bullet.csolver_b) * param1;
			   _loc3_ = pb2Bullet.csolver_e + Number(pb2Bullet.csolver_c) * param1;
			   return _loc2_ * _loc2_ + _loc3_ * _loc3_;
			};
			pb2Bullet._MovingSphereIntersection = function(param1:*, param2:*, param3:*, param4:*, param5:*):Boolean
			{
			   var _loc6_:* = undefined;
			   var _loc7_:* = undefined;
			   var _loc8_:* = undefined;
			   var _loc9_:* = undefined;
			   pb2Bullet.csolver_arad_2 = param5 * param5;
			   pb2Bullet.csolver_xx2 = param3 + (param1 - param3) * Number(pb2Bullet.csolver_GSPEED_atoms_from);
			   pb2Bullet.csolver_yy2 = param4 + (param2 - param4) * Number(pb2Bullet.csolver_GSPEED_atoms_from);
			   pb2Bullet.csolver_tox2 = (param1 - param3) * Number(pb2Bullet.csolver_GSPEED_for_atoms_scale);
			   pb2Bullet.csolver_toy2 = (param2 - param4) * Number(pb2Bullet.csolver_GSPEED_for_atoms_scale);
			   pb2Bullet.csolver_a = Number(pb2Bullet.csolver_lx) - Number(pb2Bullet.csolver_xx2);
			   pb2Bullet.csolver_e = Number(pb2Bullet.csolver_ly) - Number(pb2Bullet.csolver_yy2);
			   pb2Bullet.csolver_b = Number(pb2Bullet.csolver_tox1) - Number(pb2Bullet.csolver_tox2);
			   pb2Bullet.csolver_c = Number(pb2Bullet.csolver_toy1) - Number(pb2Bullet.csolver_toy2);
			   _loc6_ = pb2Bullet._DistanceFunctionPower2(0);
			   if(pb2Bullet.csolver_b !== 0 || pb2Bullet.csolver_c !== 0)
			   {
			      _loc7_ = pb2Bullet._DistanceFunctionPower2(1);
			      if((_loc8_ = (-2 * Number(pb2Bullet.csolver_a) * Number(pb2Bullet.csolver_b) - 2 * Number(pb2Bullet.csolver_e) * Number(pb2Bullet.csolver_c)) / (2 * Number(pb2Bullet.csolver_b) * Number(pb2Bullet.csolver_b) + 2 * Number(pb2Bullet.csolver_c) * Number(pb2Bullet.csolver_c))) > 0 && _loc8_ < 1)
			      {
			         if((_loc9_ = pb2Bullet._DistanceFunctionPower2(_loc8_)) <= _loc6_ && _loc9_ <= _loc7_)
			         {
			            return pb2Bullet._GenerateResult(_loc8_,_loc9_);
			         }
			      }
			      if(_loc7_ < _loc6_)
			      {
			         return pb2Bullet._GenerateResult(1,_loc7_);
			      }
			   }
			   return pb2Bullet._GenerateResult(0,_loc6_);
			};
			pb2Bullet._GenerateResult = function(param1:*, param2:*):Boolean
			{
			   return param2 <= pb2Bullet.csolver_arad_2;
			};
			atom_pos_buffer = [];
			TraceLine_lasttime = 0;
			tracep = 0;
			NO_PSI = false;
			if (CACHED_MAPS == null)
				CACHED_MAPS = new Array();
			LoadMaps();
			CUR_LOADING = "";
			GET_TRIES = 0;
			MP_waiting_for_answer = true;
			players_online = 0;
			connection_lost_ping = 0;
			MP_get_done_STR = "";
			MP_get_done_HAP = false;
			last_mp_param = new Array();
			MeasuresReset();
			LITE_PHYS_tim = true;
			phys_stress = 0;
			last_key_code = -1;
			keys_are_being_pressed = false;
			let_scroll_last = 0;
			game_focus_ever_lost = false;
			maximum_hit_delay_time = 125;
			hit_retry_time = 16;
			possible_bullet_data = new Vector.<Object>();
			vc_cache = new Array();
			vc_fresh = true;
			vs_salt = Math.floor(Math.random() * 10);
			mouse_x = 0;
			mouse_y = 0;
			mouse_last_x = 0;
			mouse_last_y = 0;
			set_timeouts = new Vector.<Object>();
			respawn_logic_last_addr = 0;
			gravitatorTransform = new SoundTransform(0);
			musTransform = new SoundTransform(0);
			am_base_Transform = new SoundTransform(0);
			am_wind_Transform = new SoundTransform(0);
			main_song_Transform = new SoundTransform(0);
			grav_working = true;
			mus_working = true;
			am_base_working = true;
			am_wind_working = true;
			main_song_working = true;
			CreateRestoreLoopSounds();
			multiplayer_repsawn_timer_speed = 1;
			voice_pressure = 0.2;
			FUN_NICE_BULLETS = 0;
			FUN_SPENT_BULLETS = 0;
			FUN_DAMAGE_MADE = 0;
			FUN_HEADSHOTS_MADE = 0;
			FUN_DAMAGE_TAKEN = 0;
			FUN_TIME_SPEND = 0;
			FUN_ELEMINATED = 0;
			last_gun_b4_psi = -1;
			FORCE_CUSTOM_MAP = false;
			EXP_TYPE_DEATH_IN_APPROVED = -1;
			EXP_TYPE_SYNC_SKILL_POINTS = -2;
			EXP_TYPE_PLAYING_CAMPAIGN = 0;
			EXP_TYPE_PLAYING_CUSTOM = 1;
			EXP_TYPE_PLAYING_CUSTOM_MP = 2;
			EXP_TYPE_PLAYING_IN_APPROVED = 3;
			EXP_TYPE_BEAT_CUSTOM = 4;
			EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED = 5;
			EXP_TYPE_KILL_IN_APPROVED = 6;
			EXP_TYPE_KILL_ENEMY_NON_PLAYER = 7;
			EXP_TYPE_BEAT_CAMPAIGN_LEVEL = 8;
			EXP_TYPE_KILL_TEAMMATE_MP = 9;
			EXP_TYPE_CHECK_OUT_MULTIPLAYER = 10;
			EXP_TYPE_SYNC = 11;
			EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED = 12;
			EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED = 13;
			EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED = 14;
			EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED = 15;
			EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED = 16;
			EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED = 17;
			EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED = 18;
			EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED = 19;
			EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED = 20;
			EXP_TYPE_TRY_CUSTOM = 21;
			EXP_TYPE_STREAK = 22;
			EXP_TYPE_LEGEND = 23;
			EXP_TYPE_AFK_KILL = 24;
			exp_titles = new Vector.<String>();
			exp_titles[EXP_TYPE_PLAYING_CAMPAIGN] = "";
			exp_titles[EXP_TYPE_PLAYING_CUSTOM] = "";
			exp_titles[EXP_TYPE_PLAYING_CUSTOM_MP] = "";
			exp_titles[EXP_TYPE_PLAYING_IN_APPROVED] = "";
			exp_titles[EXP_TYPE_BEAT_CUSTOM] = "Level complete";
			exp_titles[EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED] = "6";
			exp_titles[EXP_TYPE_KILL_IN_APPROVED] = "Elimination";
			exp_titles[EXP_TYPE_KILL_ENEMY_NON_PLAYER] = "Elimination";
			exp_titles[EXP_TYPE_BEAT_CAMPAIGN_LEVEL] = "Level complete";
			exp_titles[EXP_TYPE_KILL_TEAMMATE_MP] = "Teamkills are not so welcome";
			exp_titles[EXP_TYPE_CHECK_OUT_MULTIPLAYER] = "";
			exp_titles[EXP_TYPE_SYNC] = "";
			exp_titles[EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED] = "Grenade elimination";
			exp_titles[EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED] = "Headshot";
			exp_titles[EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED] = "Let environment do the job";
			exp_titles[EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED] = "Sword elimination";
			exp_titles[EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED] = "Still kicking";
			exp_titles[EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED] = "The unnecessary ways";
			exp_titles[EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED] = "No arms";
			exp_titles[EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED] = "Not going anywhere";
			exp_titles[EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED] = "Mid-air kill";
			exp_titles[EXP_TYPE_TRY_CUSTOM] = "";
			exp_titles[EXP_TYPE_STREAK] = "# kills in a row!";
			exp_titles[EXP_TYPE_LEGEND] = "Hey, a real # is in this match";
			exp_titles[EXP_TYPE_AFK_KILL] = "Not a threat";
			exp_tried_custom_maps = {};
			exp_points = 0;
			exp_points_target = 0;
			exp_timer = uint.MAX_VALUE;
			NoMouse(exp_bar);
			NoMouse(exp_bar_shadow);
			SKILL_POINTS_SCALE = 100;
			exp_bar.levelup.visible = false;
			exp_bar.visible = false;
			exp_bar_shadow.visible = false;
			exp_bar.alpha = 0;
			exp_bar.glow.alpha = 0;
			exp_first_sync_await = true;
			exp_last_level = 0;
			exp_points_per_level = 100;
			exp_min_level = 0;
			exp_max_level = 0;
			exp_bar.exp_min.x = -100;
			exp_bar.exp_max.x = -100;
			exp_max_level_this_time = 0;
			myExpLoader = GetNewURLLoader();
			exp_alive = false;
			exp_mp_enter_once = true;
			exp_scheduled = new Vector.<Object>();
			exp_busy = false;
			skill_points_tim = uint.MAX_VALUE;
			skill_points_change_expect_tries = 0;
			can_get_exp_for_level = false;
			exp_heal_tracked_players = [];
			if(launchArguments.l != undefined || loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34.swf") != -1 || loaderInfo.url.split("%5F").join("_").indexOf("pb2_re34_alt.swf") != -1)
			{
			   var anonf6:Function = function():*
			   {
			      var ten_second_counter:* = undefined;
			      exp_alive = true;
			      ten_second_counter = 0;
			      setInterval(function():*
			      {
			         if(currentFrameLabel == "gaming")
			         {
			            if(system_non_stop)
			            {
			               if(keys_are_being_pressed)
			               {
			                  keys_are_being_pressed = false;
			                  ++ten_second_counter;
			                  if(ten_second_counter >= 6)
			                  {
			                     ten_second_counter = 0;
			                     if(MP_mode)
			                     {
			                        if(MP_app)
			                        {
			                           ExpTask(EXP_TYPE_PLAYING_IN_APPROVED,ten_second_counter);
			                        }
			                        else
			                        {
			                           ExpTask(EXP_TYPE_PLAYING_CUSTOM_MP,ten_second_counter);
			                        }
			                     }
			                     else if(FORCE_CUSTOM_MAP)
			                     {
			                        ExpTask(EXP_TYPE_PLAYING_CUSTOM,ten_second_counter);
			                     }
			                     else
			                     {
			                        ExpTask(EXP_TYPE_PLAYING_CAMPAIGN,ten_second_counter);
			                     }
			                  }
			               }
			            }
			         }
			      },1000 * 10);
			   };
			   anonf6();
			}
			ExpTask(EXP_TYPE_SYNC, getTimer().toString());
			myMPlayerInfoLoader = GetNewURLLoader();
			player_info_busy = false;
			exp_legens = {};
			last_server_list_str = "1. FiveTwelve MP|prosuwanted.ru|36322|0|;2. Localhost|127.0.0.1|36324|1|";
			EXT.addEventListener(KeyboardEvent.KEY_DOWN,k_down);
			EXT.addEventListener(KeyboardEvent.KEY_UP,k_up);
			if(mdialog.nickname.text != "")
			{
			   nicknameproceed();
			}
		}

		private function cloneCharacter(char_id:int, u:Number, v:Number, silent:Boolean=false) : int {
			if(!mens[char_id].io) return -1;
			var mc:MovieClip = mens[char_id];
			var new_mc:MovieClip = game.addChildAt(new player(),game.numChildren) as MovieClip;
			NoMouse(new_mc);
			new_mc.x = new Number(u);
			new_mc.y = new Number(v);
			create_player(new_mc as player,mc.hea,mc.hmax);
			SetPlayerScale(new_mc as player, mc.scale);
			new_mc.tox = new Number(0);
			new_mc.toy = new Number(0);
			new_mc.mobility = mc.mobility;
			new_mc.antigravity = mc.antigravity;
			new_mc.antigravity_radius = mc.antigravity_radius;
			new_mc.can_be_hit = mc.can_be_hit;
			new_mc.can_drop_guns = mc.can_drop_guns;
			new_mc.voice = mc.voice;
			new_mc.isGhost = mc.isGhost;
			new_mc.gui.txt1.text = mc.gui.txt1.text;
			new_mc.nick = mc.nick;
			new_mc.textcolorchanged = mc.textcolorchanged; // Just in case if someone switches to an ally - Molis
			new_mc.nick_color = mc.nick_color;
			new_mc.team = new Number(mc.team);
			if(new_mc.team != mens[MP_myid].team)
			{
				new_mc.gui.visible = false;
			}
			UpdateTeamColor(new_mc);
			new_mc.palette = mc.palette;
			new_mc.side = new Number(mc.side);
			new_mc.tarx = new_mc.x + Number(new_mc.side) * 100;
			new_mc.tary = new_mc.y;
			new_mc.armored = new Number(mc.armored);
			new_mc.incar = new Number(-1);
			new_mc.char = new Number(mc.char);
			new_mc.mdl_leg1_upper = new Number(mc.mdl_leg1_upper);
			new_mc.mdl_leg1_middle = new Number(mc.mdl_leg1_middle);
			new_mc.mdl_leg1_lower = new Number(mc.mdl_leg1_lower);
			new_mc.mdl_leg2_upper = new Number(mc.mdl_leg2_upper);
			new_mc.mdl_leg2_middle = new Number(mc.mdl_leg2_middle);
			new_mc.mdl_leg2_lower = new Number(mc.mdl_leg2_lower);
			new_mc.mdl_arm1_upper = new Number(mc.mdl_arm1_upper);
			new_mc.mdl_arm1_lower = new Number(mc.mdl_arm1_lower);
			new_mc.mdl_arm2_upper = new Number(mc.mdl_arm2_upper);
			new_mc.mdl_arm2_lower = new Number(mc.mdl_arm2_lower);
			new_mc.mdl_toe = new Number(mc.mdl_toe);
			new_mc.mdl_body = new Number(mc.mdl_body);
			new_mc.mdl_head = new Number(mc.mdl_head);
			new_mc.mdl_psi1 = new Number(mc.mdl_psi1);
			new_mc.mdl_psi2 = new Number(mc.mdl_psi2);
			if(mc.arm1.lower.psi != null)
			{
				new_mc.arm1.lower.psi.visible = mc.arm1.lower.psi.visible;
			}
			if(mc.arm2.lower.psi != null)
			{
				new_mc.arm2.lower.psi.visible = mc.arm2.lower.psi.visible;
			}
			new_mc.blood_red = mc.blood_red;
			new_mc.blood_green = mc.blood_green;
			new_mc.blood_blue = mc.blood_blue;
			new_mc.botaction = mc.botaction;
			new_mc.ondeath = mc.ondeath;
			new_mc.onalert = mc.onalert;

			if(!silent) Effect(new_mc.x,new_mc.y - 41,14,0,0);
			SpawnPlayerImmediately(new_mc as player);
			var newid:int = new_mc.idd;
			if(mc.curwea != -1)
			{
				mc = guns[mc.curwea];
				new_mc = MakeGunByClass(mc.model,mc);
				mens[new_mc.idd].curwea = new_mc.idd;
				new_mc.picken_by = new_mc.idd;
				mens[new_mc.idd].arm1.lower.psi.visible = false;
				mens[new_mc.idd].arm2.lower.psi.visible = false;
				new_mc.stat_bullets = mc.stat_bullets;
				new_mc.recoil_multiplier = mc.recoil_multiplier;
				new_mc.speed_multiplier = mc.speed_multiplier;
				new_mc.projectile_scale = mc.projectile_scale;
				new_mc.knockback_multiplier = mc.knockback_multiplier;
				new_mc.stat_power = mc.stat_power;
				new_mc.stat_averange = mc.stat_averange;
				new_mc.stat_count = mc.stat_count;
				new_mc.forcars = mc.forcars;
				new_mc.stat_class = mc.stat_class;
			}

			return newid;
		}

		public function frameaction_gaming() : void {
			try
			{
				kedumb();
				if(ExternalInterface.available)
				{
					ExternalInterface.call("L1(" + MP_mode + ")");
				}
				/*if(AdLoader.cpmstar_loaded_object != null)
				{
					AdLoader.cpmstar_loaded_object.parent.removeChild(AdLoader.cpmstar_loaded_object);
				}*/
			}
			catch(e:Error)
			{
			}
			vc_fresh = true;
			KINETIC_MODULE_ENABLED = !MP_mode;
			MP_let_alive_players_hear_dead = true;
			MP_allow_leaderboard_details = true;
			ALLOW_TIMESHIFT = true;
			pspeed = 60;
			weapon_penetration_factor = 1;
			maxbulletlife = 30;
			rocket_speed_mult = 1;
			grenade_speed_mult = 1;
			plasma_speed_mult = 1;
			FREEZE_OFFSCREEN_ENTITIES = true;
			lock_camera_region = null;
			lock_camera_intensity = 0;
			trigger_to_key_binds_down = {};
			trigger_to_key_binds_up = {};
			on_variable_change = {};
			maxTimeWarps = -1;
			usedTimeWarps = 0;
			maxTimewarpHitTrigger = -1;
			varSyncListeners = {};
			varSyncHooks = {};
			varSyncApproved = true;
			SHOW_DEBUG = false;
			RENDERING_3D = DRAW_3D;
			ANONYMOUS_MODE = false;
			ALLOW_VAR_SYNC = false;
			ALLOW_LIGHT_BREAK = true;
			NAIVE_HIT_CONFIRMATION = false;
			GLOBAL_REGEN_SPEED = 1;
			GLOBAL_REGEN_DELAY = MP_mode && MP_app ? 2 : 1;
			GLOBAL_FALL_DAMAGE_MULT = MP_mode && MP_app ? 1 : 1;
			GLOBAL_FALL_SENSITIVITY_MULT = MP_mode && MP_app ? 0.9 : 1;
			BOOST_MULT = 1;
			BOOST_HIGH_PHYSICS = MP_mode && MP_app ? 2.8 : 1;
			BOOST_LOW_PHYSICS = 1;
			custom_songs = new Vector.<PB2CustomSong>();
			custom_images = new Vector.<PB2CustomImage>();
			temp_keep_dmg_belows = new Vector.<Object>();
			temp_ignore_gun_pick = new Vector.<Object>();
			possible_bullet_data = new Vector.<Object>();
			set_timeouts = new Vector.<Object>();
			images_expected = 0;
			images_loaded = 0;
			images_data_loaded = 0;
			images_ready_to_render = 0;
			images_finished_loading = 0;
			allow_screenshoting = true;
			WATER_NAME = "Water";
			ACID_NAME = "Acid";
			hintf.visible = false;
			hintf.alpha = 1;
			CURRENT_HINT = "";
			THIS_HINT = "";
			MP_BAD_WORDS_SAID = Math.max(0,MP_BAD_WORDS_SAID - 1);
			MP_last_linked = -1;
			synonym_uid = new Array();
			synonym_id = new Array();
			ENEMY_SENDER_i = 0;
			team_blue.visible = false;
			team_red.visible = false;
			MP_last_message_patience = 0;
			mupd.visible = false;
			mupd.ttt.gotoAndStop(1);
			new_active.visible = false;
			new_active.gotoAndStop(1);
			PLAZMA_GAME = true;
			NOBASE = false;
			MP_startbarrels = new Array();
			MP_pbug = 0;
			MP_pwarn = false;
			death_cam = -1;
			shnades = new Array();
			shnades_total = 0;
			shnades_next = 0;
			boxx = new Array();
			boxy = new Array();
			boxw = new Array();
			boxh = new Array();
			boxmat = new Array();
			boxes = new Vector.<PB2Wall>();
			
			bgs = new Array();
			bgx = new Array();
			bgy = new Array();
			bgw = new Array();
			bgh = new Array();
			bgm = new Array();
			bgu = new Array();
			bgv = new Array();
			bg_cast = new Array();
			// Pushers.
			pushx = new Array();
			pushy = new Array();
			pushtox = new Array();
			pushtoy = new Array();
			pushstab = new Array();
			pushdamage = new Array();
			pushw = new Array();
			pushh = new Array();
			// Lights.
			flare = new Array();
			flare_power = new Array();
			// Water properties
			wax = new Array();
			way = new Array();
			waw = new Array();
			wah = new Array();
			wadamage = new Array();
			wa_friction = new Array();
			// Atom properties
			ax = new Array();
			ay = new Array();
			atox = new Array();
			atoy = new Array();
			aio = new Array();
			aof = new Array();
			arad = new Array();
			around = new Array();
			amat = new Array();
			atim = new Array();
			acollided = new Array();
			ainwater = new Array();
			ainwater_shape = new Array();
			ablood = new Array();
			aactive = new Array();
			// 
			chtypa = new Array();
			chP = new Array();
			chC = new Array();
			chdef = new Array();
			chdamp = new Array();
			chio = new Array();
			barrels = new Array();
			guns = new Vector.<MovieClip>();
			mens = new Vector.<player>();
			vehicles = new Array();
			doors = new Vector.<PB2Door>();
			decors = new Array();
			triggers = new Vector.<PB2Trigger>();
			timers = new Array();
			regions = new Vector.<PB2Region>();
			waters = new Array();
			puls = new Array();
			surf_lnk = new Array();
			surf_lnk_to = new Array();
			ef = new Array();
			lamps_x = new Array();
			lamps_y = new Array();
			lamps_power = new Array();
			lamps_power2 = new Array();
			addChild(debug_screen);
			addChild(line_screen);
			screen_blur_mc.addChild(screen_blur);
			SCREEN_BLUR = false;
			updateBlur();
			CASUAL_MODE = false;
			STRICT_MODE = false;
			AUTO_REVIVE = true;
			MEAT_MODE = false;
			NO_PSI = false;
			step_size = 20;
			flarestotal = 0;
			Disable_next_click = false;
			rnd = 1;
			render_minX = 0;
			render_minY = 0;
			render_maxX = 0;
			render_maxY = 0;
			lastcurx = lastcury = lastcurmove = 0;
			last_psi = 1;
			MP_teamkills = 0;
			FORCE_SNOW = false;
			MP_gamestate = 0;
			tooltip_updated = false;
			gamechat_input_text = "";
			MP_playerstotal = 0;
			MP_force_disconnect = false;
			MP_chat_input = false;
			MP_custom_events = "";
			MP_deaths = 0;
			MP_kills = 0;
			hpwarning = false;
			grenades_total = 0;
			grenades_port_total = 0;
			grenades_sh_total = 0;
			MP_enc_deaths = 0;
			MP_real_deaths = 0;
			MP_enc_restarts = 0;
			MP_gbd = -1;
			mini_scenario_cur = -1;
			mini_scenario_phase = 0;
			system_non_stop = true;
			stoped_by_focus = false;
			OpenTop = true;
			firstframe = true;
			gravity = 0.5;
			regionstotal = 0;
			triggerstotal = 0;
			timerstotal = 0;
			doorstotal = 0;
			attachments = new Array();
			decorstotal = 0;
			bgstotal = 0;
			playerstotal = 0;
			boxestotal = 0;
			lampstotal = 0;
			waterstotal = 0;
			gunstotal = 0;
			pushstotal = 0;
			vehiclestotal = 0;
			barrelstotal = 0;
			key_left = false;
			key_right = false;
			key_up = false;
			key_down = false;
			key_grenade = false;
			key_pick = false;
			key_alt = false;
			key_grab = false;
			key_kinetic = false;
			key_fall = false;
			key_ctrl = false;
			cinetic_target = -1;
			is_firing = false;
			timeshift = 0;
			if (HELL_MODE) {
				energy       = (skin_model[0] == 49) ? 75 : 50;
				maxTimeWarps = (skin_model[0] == 49) ? 7  : 5;
			}else {
				energy = 100;
			}
			energy_max = energy;
			joint_align = -1;
			pulscur = 0;
			nextef = 0;
			lamps_skips = 1;
			atotal = 0;
			chtotal = 0;
			tracer_i4 = 0;
			tracer_i5 = 0;
			myCursor.gotoAndStop("gaming");
			if(!MP_mode)
			{
				MP_fps = DEFAULT_FPS;
				MP_myid = 0;
			}
			gamemenu.visible = false;
			herolist.visible = false;
			chat_win.visible = false;
			gamechatbox_text = "";
			if(LEVEL_END_FORCE == "" && MP_mode)
			{
				LEVEL_END_FORCE = "exit";
			}
			else
			{
				LEVEL_END_FORCE = "";
			}
			upd_weps_i = 0;
			while(upd_weps_i < 10)
			{
				weps["gi" + upd_weps_i].gotoAndStop(1);
				++upd_weps_i;
			}
			if(MP_mode)
			{
				EASY_MODE = false;
				nrg.visible = false;
			}
			expl_hurt_full = false;
			vehhp.visible = false;
			pauze.visible = false;
			lags.visible = false;
			NoMouse(lags);
			NoMouse(pauze);
			if(HQ)
			{
				conmenu_set.q_2.gotoAndStop(2);
				maxef = 224;
				stage.quality = "MEDIUM";
				effects = new Vector.<PB2Particle>(224);
			}
			else
			{
				conmenu_set.q_1.gotoAndStop(2);
				stage.quality = "LOW";
				maxef = 128;
				effects = new Vector.<PB2Particle>(224);
			}
			game_scale = 1;
			lgame_scale = 1;
			darkness.visible = !REFRESHING_MAP;
			darkness.alpha = 1;
			REFRESHING_MAP = false;
			TO_SEND_REFRESH = false;
			darkness.scaleX = 1;
			darkness.scaleY = 1;
			whitness.visible = false;
			whitness.alpha = 0;
			game.joint.visible = false;
			rx = undefined;
			ry = undefined;
			i4 = 0;
			while(i4 < 4)
			{
				_root["pb" + i4].alpha = 0;
				_root["pb" + i4].visible = false;
				++i4;
			}
			i = 0;
			while(i < 11)
			{
				gamechatbox2["item" + i].alpha = 0;
				gamechatbox2["item" + i].visible = false;
				gamechatbox2["item" + i].timer = 0;
				++i;
			}
			stage.focus = stage;
			EXT.addEventListener(MouseEvent.MOUSE_DOWN, m_press);
			EXT.addEventListener(MouseEvent.MOUSE_UP, m_release);
			// click_reg.addEventListener(MouseEvent.MOUSE_DOWN,m_press);
			// click_reg.addEventListener(MouseEvent.MOUSE_UP,m_release);
			if(!USE_HTML_WHEEL_EVENTS)
			{
				click_reg.addEventListener(MouseEvent.MOUSE_WHEEL,onMouseWheelEvent);
			}
			click_reg.addEventListener(MouseEvent.MOUSE_OVER,mov2);
			stage.addEventListener(Event.ACTIVATE,mouseMoveListener);
			stage.addEventListener(Event.DEACTIVATE,mouseLeaveListener);
			gamemenu.b_exit.addEventListener(MouseEvent.CLICK,function():*
			{
				VarChangePreventStart();
				PlaySound_full(ss_info_act);
				if(MP_myid < playerstotal)
				{
					MP_force_disconnect = true;
					MP_type = 0;
					mens[MP_myid].dead = true;
					darkness.visible = true;
					darkness.alpha = 1;
					LEVEL_END_FORCE = "exit";
					gamemenu.visible = false;
					SCREEN_BLUR = false;
					updateBlur();
				}
				else
				{
					talkerch.stop();
					DropGameTimer();
					LAST_ERROR = "Error: Player does not exists at this map";
					FUN_TIME_SPEND = 0;
					if(MP_mode)
					{
						MP_mode = false;
						gotoAndStop("channel");
					}
					else
					{
						gotoAndStop("menu");
					}
				}
				VarChangePreventEnd();
			});
			gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			gamemenu.b_exit.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			gamemenu.b_restart.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			gamemenu.b_close.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			gamemenu.b_close.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			gamemenu.b_close.addEventListener(MouseEvent.CLICK,function():*
			{
				if(!MP_mode)
				{
					system_non_stop = true;
					if(!mens[MP_myid].dead)
					{
						pauze.visible = false;
					}
				}
				gamemenu.visible = false;
				SCREEN_BLUR = false;
				updateBlur();
			});
			conmenu.visible = false;
			conmenu_set.visible = false;
			conmenu_set.mw_1.gotoAndStop(1);
			conmenu_set.mw_2.gotoAndStop(1);
			if(MOUSE_WHEEL)
			{
				conmenu_set.mw_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.mw_1.gotoAndStop(2);
			}
			conmenu_set.mw_2.addEventListener(MouseEvent.CLICK,function():*
			{
				MOUSE_WHEEL = true;
				conmenu_set.mw_2.gotoAndStop(2);
				conmenu_set.mw_1.gotoAndStop(1);
			});
			conmenu_set.mw_1.addEventListener(MouseEvent.CLICK,function():*
			{
				MOUSE_WHEEL = false;
				conmenu_set.mw_1.gotoAndStop(2);
				conmenu_set.mw_2.gotoAndStop(1);
			});
			conmenu_set.os_1.gotoAndStop(1);
			conmenu_set.os_2.gotoAndStop(1);
			if(OVERSCROLL)
			{
				conmenu_set.os_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.os_1.gotoAndStop(2);
			}
			conmenu_set.os_2.addEventListener(MouseEvent.CLICK,function():*
			{
				OVERSCROLL = true;
				conmenu_set.os_2.gotoAndStop(2);
				conmenu_set.os_1.gotoAndStop(1);
			});
			conmenu_set.os_1.addEventListener(MouseEvent.CLICK,function():*
			{
				OVERSCROLL = false;
				conmenu_set.os_1.gotoAndStop(2);
				conmenu_set.os_2.gotoAndStop(1);
			});
			conmenu.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			conmenu.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			conmenu.b_close2.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu.visible = false;
			});
			conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			conmenu_set.b_close2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			conmenu_set.b_close2.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu_set.visible = false;
				SaveGame();
			});
			conmenu_set.q_1.gotoAndStop(1);
			conmenu_set.c_1.gotoAndStop(1);
			conmenu_set.q_2.gotoAndStop(1);
			conmenu_set.c_2.gotoAndStop(1);
			conmenu_set.se_1.gotoAndStop(1);
			conmenu_set.se_2.gotoAndStop(1);
			if(PSYCHOBLOOD_MODE == 1)
			{
				conmenu_set.se_1.gotoAndStop(2);
			}
			else
			{
				conmenu_set.se_2.gotoAndStop(2);
			}
			conmenu_set.exp_1.gotoAndStop(1);
			conmenu_set.exp_2.gotoAndStop(1);
			conmenu_set.exp_3.gotoAndStop(1);
			switch(SHOW_EXP_BAR)
			{
				case 3:
					conmenu_set.exp_3.gotoAndStop(2);
					break;
				case 2:
					conmenu_set.exp_2.gotoAndStop(2);
					break;
				case 1:
					conmenu_set.exp_1.gotoAndStop(2);
			}
			conmenu_set.exp_1.addEventListener(MouseEvent.CLICK,function():*
			{
				SHOW_EXP_BAR = 1;
				exp_first_sync_await = true;
				conmenu_set.exp_1.gotoAndStop(2);
				conmenu_set.exp_2.gotoAndStop(1);
				conmenu_set.exp_3.gotoAndStop(1);
			});
			conmenu_set.exp_2.addEventListener(MouseEvent.CLICK,function():*
			{
				SHOW_EXP_BAR = 2;
				exp_first_sync_await = true;
				conmenu_set.exp_1.gotoAndStop(1);
				conmenu_set.exp_2.gotoAndStop(2);
				conmenu_set.exp_3.gotoAndStop(1);
			});
			conmenu_set.exp_3.addEventListener(MouseEvent.CLICK,function():*
			{
				SHOW_EXP_BAR = 3;
				exp_first_sync_await = true;
				conmenu_set.exp_1.gotoAndStop(1);
				conmenu_set.exp_2.gotoAndStop(1);
				conmenu_set.exp_3.gotoAndStop(2);
			});
			conmenu_set.frr_1.gotoAndStop(1);
			conmenu_set.frr_2.gotoAndStop(1);
			conmenu_set.frr_3.gotoAndStop(1);
			conmenu_set.frr_4.gotoAndStop(1);
			if(FRAMERATE == 1)
			{
				conmenu_set.frr_1.gotoAndStop(2);
			}
			else if(FRAMERATE == 2)
			{
				conmenu_set.frr_2.gotoAndStop(2);
			}
			else if(FRAMERATE == 3)
			{
				conmenu_set.frr_3.gotoAndStop(2);
			}
			else
			{
				conmenu_set.frr_4.gotoAndStop(2);
			}
			conmenu_set.frr_1.addEventListener(MouseEvent.CLICK,function():*
			{
				FRAMERATE = 1;
				conmenu_set.frr_1.gotoAndStop(2);
				conmenu_set.frr_2.gotoAndStop(1);
				conmenu_set.frr_3.gotoAndStop(1);
				conmenu_set.frr_4.gotoAndStop(1);
				UpdateFramerate();
			});
			conmenu_set.frr_2.addEventListener(MouseEvent.CLICK,function():*
			{
				FRAMERATE = 2;
				conmenu_set.frr_2.gotoAndStop(2);
				conmenu_set.frr_1.gotoAndStop(1);
				conmenu_set.frr_3.gotoAndStop(1);
				conmenu_set.frr_4.gotoAndStop(1);
				UpdateFramerate();
			});
			conmenu_set.frr_3.addEventListener(MouseEvent.CLICK,function():*
			{
				FRAMERATE = 3;
				conmenu_set.frr_3.gotoAndStop(2);
				conmenu_set.frr_1.gotoAndStop(1);
				conmenu_set.frr_2.gotoAndStop(1);
				conmenu_set.frr_4.gotoAndStop(1);
				UpdateFramerate();
			});
			conmenu_set.frr_4.addEventListener(MouseEvent.CLICK,function():*
			{
				FRAMERATE = 4;
				conmenu_set.frr_3.gotoAndStop(1);
				conmenu_set.frr_1.gotoAndStop(1);
				conmenu_set.frr_2.gotoAndStop(1);
				conmenu_set.frr_4.gotoAndStop(2);
				UpdateFramerate();
			});
			if(SUPER_COMPUTER)
			{
				conmenu_set.c_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.c_1.gotoAndStop(2);
			}
			conmenu_set.c_2.addEventListener(MouseEvent.CLICK,function():*
			{
				SUPER_COMPUTER = true;
				RAGDOLL_COLLIDE = true;
				conmenu_set.c_2.gotoAndStop(2);
				conmenu_set.c_1.gotoAndStop(1);
			});
			conmenu_set.c_1.addEventListener(MouseEvent.CLICK,function():*
			{
				SUPER_COMPUTER = false;
				RAGDOLL_COLLIDE = false;
				conmenu_set.c_1.gotoAndStop(2);
				conmenu_set.c_2.gotoAndStop(1);
			});
			conmenu_set.tt_1.gotoAndStop(1);
			conmenu_set.tt_2.gotoAndStop(1);
			if(TOOLTIPS)
			{
				conmenu_set.tt_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.tt_1.gotoAndStop(2);
			}
			conmenu_set.tt_2.addEventListener(MouseEvent.CLICK,function():*
			{
				TOOLTIPS = true;
				conmenu_set.tt_2.gotoAndStop(2);
				conmenu_set.tt_1.gotoAndStop(1);
			});
			conmenu_set.tt_1.addEventListener(MouseEvent.CLICK,function():*
			{
				TOOLTIPS = false;
				conmenu_set.tt_1.gotoAndStop(2);
				conmenu_set.tt_2.gotoAndStop(1);
			});
			conmenu_set.hi_1.gotoAndStop(1);
			conmenu_set.hi_2.gotoAndStop(1);
			if(HINTS)
			{
				conmenu_set.hi_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.hi_1.gotoAndStop(2);
			}
			conmenu_set.hi_2.addEventListener(MouseEvent.CLICK,function():*
			{
				HINTS = true;
				conmenu_set.hi_2.gotoAndStop(2);
				conmenu_set.hi_1.gotoAndStop(1);
			});
			conmenu_set.hi_1.addEventListener(MouseEvent.CLICK,function():*
			{
				HINTS = false;
				conmenu_set.hi_2.gotoAndStop(1);
				conmenu_set.hi_1.gotoAndStop(2);
			});
			conmenu_set.n_1.gotoAndStop(1);
			conmenu_set.s_1.gotoAndStop(1);
			conmenu_set.cm_1.gotoAndStop(1);
			conmenu_set.n_2.gotoAndStop(1);
			conmenu_set.s_2.gotoAndStop(1);
			conmenu_set.cm_2.gotoAndStop(1);
			conmenu_set.cur_2.gotoAndStop(1);
			conmenu_set.cur_1.gotoAndStop(1);
			conmenu_set.vi_1.gotoAndStop(1);
			conmenu_set.vi_2.gotoAndStop(1);
			conmenu_set.ph_1.gotoAndStop(1);
			conmenu_set.ph_2.gotoAndStop(1);
			if(AUTO_PICK_NEW_WEPS)
			{
				conmenu_set.n_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.n_1.gotoAndStop(2);
			}
			if(SOFT_SCREEN)
			{
				conmenu_set.cm_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.cm_1.gotoAndStop(2);
			}
			if(SCREEN_EFFECTS)
			{
				conmenu_set.s_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.s_1.gotoAndStop(2);
			}
			if(VIOLENCE)
			{
				conmenu_set.vi_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.vi_1.gotoAndStop(2);
			}
			if(ALTCUR)
			{
				conmenu_set.cur_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.cur_1.gotoAndStop(2);
			}
			if(!LITE_PHYS)
			{
				conmenu_set.ph_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.ph_1.gotoAndStop(2);
			}
			conmenu_set.n_2.addEventListener(MouseEvent.CLICK,function():*
			{
				AUTO_PICK_NEW_WEPS = true;
				conmenu_set.n_2.gotoAndStop(2);
				conmenu_set.n_1.gotoAndStop(1);
			});
			conmenu_set.n_1.addEventListener(MouseEvent.CLICK,function():*
			{
				AUTO_PICK_NEW_WEPS = false;
				conmenu_set.n_1.gotoAndStop(2);
				conmenu_set.n_2.gotoAndStop(1);
			});
			conmenu_set.s_2.addEventListener(MouseEvent.CLICK,function():*
			{
				SCREEN_EFFECTS = true;
				conmenu_set.s_2.gotoAndStop(2);
				conmenu_set.s_1.gotoAndStop(1);
			});
			conmenu_set.s_1.addEventListener(MouseEvent.CLICK,function():*
			{
				SCREEN_EFFECTS = false;
				conmenu_set.s_1.gotoAndStop(2);
				conmenu_set.s_2.gotoAndStop(1);
			});
			conmenu_set.cm_2.addEventListener(MouseEvent.CLICK,function():*
			{
				SOFT_SCREEN = true;
				conmenu_set.cm_2.gotoAndStop(2);
				conmenu_set.cm_1.gotoAndStop(1);
			});
			conmenu_set.cm_1.addEventListener(MouseEvent.CLICK,function():*
			{
				SOFT_SCREEN = false;
				conmenu_set.cm_1.gotoAndStop(2);
				conmenu_set.cm_2.gotoAndStop(1);
			});
			conmenu_set.vi_2.addEventListener(MouseEvent.CLICK,function():*
			{
				VIOLENCE = true;
				conmenu_set.vi_2.gotoAndStop(2);
				conmenu_set.vi_1.gotoAndStop(1);
			});
			conmenu_set.vi_1.addEventListener(MouseEvent.CLICK,function():*
			{
				VIOLENCE = false;
				conmenu_set.vi_1.gotoAndStop(2);
				conmenu_set.vi_2.gotoAndStop(1);
			});
			conmenu_set.ph_2.addEventListener(MouseEvent.CLICK,function():*
			{
				LITE_PHYS = false;
				conmenu_set.ph_2.gotoAndStop(2);
				conmenu_set.ph_1.gotoAndStop(1);
			});
			conmenu_set.ph_1.addEventListener(MouseEvent.CLICK,function():*
			{
				LITE_PHYS = true;
				conmenu_set.ph_1.gotoAndStop(2);
				conmenu_set.ph_2.gotoAndStop(1);
				i = 0;
				while(i < atotal)
				{
					if(aio[i] != -1)
					{
						lax[i] = ax[i];
						lay[i] = ay[i];
					}
					++i;
				}
			});
			conmenu_set.cur_2.addEventListener(MouseEvent.CLICK,function():*
			{
				ALTCUR = true;
				conmenu_set.cur_2.gotoAndStop(2);
				conmenu_set.cur_1.gotoAndStop(1);
			});
			conmenu_set.cur_1.addEventListener(MouseEvent.CLICK,function():*
			{
				ALTCUR = false;
				conmenu_set.cur_1.gotoAndStop(2);
				conmenu_set.cur_2.gotoAndStop(1);
			});
			conmenu_set.rec_1.gotoAndStop(1);
			conmenu_set.rec_2.gotoAndStop(1);
			if(RECONNECT_ON_LOST_CONNECTION)
			{
				conmenu_set.rec_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.rec_1.gotoAndStop(2);
			}
			conmenu_set.rec_2.addEventListener(MouseEvent.CLICK,function():*
			{
				RECONNECT_ON_LOST_CONNECTION = true;
				conmenu_set.rec_2.gotoAndStop(2);
				conmenu_set.rec_1.gotoAndStop(1);
			});
			conmenu_set.rec_1.addEventListener(MouseEvent.CLICK,function():*
			{
				RECONNECT_ON_LOST_CONNECTION = false;
				conmenu_set.rec_1.gotoAndStop(2);
				conmenu_set.rec_2.gotoAndStop(1);
			});
			conmenu_set.beep_1.gotoAndStop(1);
			conmenu_set.beep_2.gotoAndStop(1);
			if(BEEP_ON_DEATH)
			{
				conmenu_set.beep_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.beep_1.gotoAndStop(2);
			}
			conmenu_set.beep_2.addEventListener(MouseEvent.CLICK,function():*
			{
				BEEP_ON_DEATH = true;
				conmenu_set.beep_2.gotoAndStop(2);
				conmenu_set.beep_1.gotoAndStop(1);
			});
			conmenu_set.beep_1.addEventListener(MouseEvent.CLICK,function():*
			{
				BEEP_ON_DEATH = false;
				conmenu_set.beep_1.gotoAndStop(2);
				conmenu_set.beep_2.gotoAndStop(1);
			});
			conmenu_set.hit_1.gotoAndStop(1);
			conmenu_set.hit_2.gotoAndStop(1);
			if(HIT_SOUNDS)
			{
				conmenu_set.hit_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.hit_1.gotoAndStop(2);
			}
			conmenu_set.hit_2.addEventListener(MouseEvent.CLICK,function():*
			{
				HIT_SOUNDS = true;
				conmenu_set.hit_2.gotoAndStop(2);
				conmenu_set.hit_1.gotoAndStop(1);
			});
			conmenu_set.hit_1.addEventListener(MouseEvent.CLICK,function():*
			{
				HIT_SOUNDS = false;
				conmenu_set.hit_1.gotoAndStop(2);
				conmenu_set.hit_2.gotoAndStop(1);
			});
			conmenu_set.screenfade_1.gotoAndStop(1);
			conmenu_set.screenfade_2.gotoAndStop(1);
			if(SCREEN_FADE_EFFECTS)
			{
				conmenu_set.screenfade_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.screenfade_1.gotoAndStop(2);
			}
			conmenu_set.screenfade_2.addEventListener(MouseEvent.CLICK,function():*
			{
				SCREEN_FADE_EFFECTS = true;
				conmenu_set.screenfade_2.gotoAndStop(2);
				conmenu_set.screenfade_1.gotoAndStop(1);
				darkness.scaleX = 1;
				darkness.scaleY = 1;
			});
			conmenu_set.screenfade_1.addEventListener(MouseEvent.CLICK,function():*
			{
				SCREEN_FADE_EFFECTS = false;
				conmenu_set.screenfade_1.gotoAndStop(2);
				conmenu_set.screenfade_2.gotoAndStop(1);
				darkness.scaleX = 0;
				darkness.scaleY = 0;
			});
			conmenu_set.csh_1.gotoAndStop(1);
			conmenu_set.csh_2.gotoAndStop(1);
			conmenu_set.dch_2.gotoAndStop(1);
			conmenu_set.dch_1.gotoAndStop(1);
			conmenu_set.dch_0.gotoAndStop(1);
			if(CENSORESHIP)
			{
				conmenu_set.csh_2.gotoAndStop(2);
			}
			else
			{
				conmenu_set.csh_1.gotoAndStop(2);
			}
			if(DISPLAY_CHAT == 2)
			{
				conmenu_set.dch_2.gotoAndStop(2);
			}
			else if(DISPLAY_CHAT == 1)
			{
				conmenu_set.dch_1.gotoAndStop(2);
			}
			else
			{
				conmenu_set.dch_0.gotoAndStop(2);
			}
			conmenu_set.csh_2.addEventListener(MouseEvent.CLICK,function():*
			{
				CENSORESHIP = true;
				conmenu_set.csh_2.gotoAndStop(2);
				conmenu_set.csh_1.gotoAndStop(1);
			});
			conmenu_set.csh_1.addEventListener(MouseEvent.CLICK,function():*
			{
				CENSORESHIP = false;
				conmenu_set.csh_1.gotoAndStop(2);
				conmenu_set.csh_2.gotoAndStop(1);
			});
			conmenu_set.dch_2.addEventListener(MouseEvent.CLICK,function():*
			{
				DISPLAY_CHAT = 2;
				conmenu_set.dch_2.gotoAndStop(2);
				conmenu_set.dch_1.gotoAndStop(1);
				conmenu_set.dch_0.gotoAndStop(1);
			});
			conmenu_set.dch_1.addEventListener(MouseEvent.CLICK,function():*
			{
				DISPLAY_CHAT = 1;
				conmenu_set.dch_1.gotoAndStop(2);
				conmenu_set.dch_2.gotoAndStop(1);
				conmenu_set.dch_0.gotoAndStop(1);
			});
			conmenu_set.dch_0.addEventListener(MouseEvent.CLICK,function():*
			{
				DISPLAY_CHAT = 0;
				conmenu_set.dch_0.gotoAndStop(2);
				conmenu_set.dch_2.gotoAndStop(1);
				conmenu_set.dch_1.gotoAndStop(1);
			});
			conmenu_set.v_1.vv.x = (FX_VOLUME - 1) * 104;
			conmenu_set.m_1.vv.x = (MUSIC_VOLUME - 1) * 104;
			conmenu_set.m2_1.vv.x = (CUSTOM_MUSIC_VOLUME - 1) * 104;
			conmenu_set.v_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				conmenu_set.v_1.vv.x = mouseX - (Number(conmenu_set.v_1.x) - 36.3) - 104;
				FX_VOLUME = Math.round(Math.max(Math.min((mouseX - (Number(conmenu_set.v_1.x) - 36.3)) / 104,1),0) * 100) / 100;
				vol = new SoundTransform(FX_VOLUME);
				PlaySound_full(s_test_sound);
				if(FX_VOLUME > 0)
				{
					conmenu_set.v_1x.gotoAndStop(1);
				}
				else
				{
					conmenu_set.v_1x.gotoAndStop(2);
				}
			});
			conmenu_set.m_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				conmenu_set.m_1.vv.x = mouseX - (Number(conmenu_set.m_1.x) - 36.3) - 104;
				MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (Number(conmenu_set.m_1.x) - 36.3)) / 104,1),0) * 100) / 100;
				vol2 = new SoundTransform(MUSIC_VOLUME);
				UpdateGravitatorVol();
				if(MUSIC_VOLUME > 0)
				{
					conmenu_set.m_1x.gotoAndStop(1);
				}
				else
				{
					conmenu_set.m_1x.gotoAndStop(2);
				}
				CustomSongUpdateVolumes();
			});
			conmenu_set.m2_1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				conmenu_set.m2_1.vv.x = mouseX - (Number(conmenu_set.m2_1.x) - 36.3) - 104;
				CUSTOM_MUSIC_VOLUME = Math.round(Math.max(Math.min((mouseX - (Number(conmenu_set.m2_1.x) - 36.3)) / 104,1),0) * 100) / 100;
				vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
				UpdateGravitatorVol();
				if(CUSTOM_MUSIC_VOLUME > 0)
				{
					conmenu_set.m2_1x.gotoAndStop(1);
				}
				else
				{
					conmenu_set.m2_1x.gotoAndStop(2);
				}
				CustomSongUpdateVolumes();
			});
			if(FX_VOLUME > 0)
			{
				conmenu_set.v_1x.gotoAndStop(1);
			}
			else
			{
				conmenu_set.v_1x.gotoAndStop(2);
			}
			if(MUSIC_VOLUME > 0)
			{
				conmenu_set.m_1x.gotoAndStop(1);
			}
			else
			{
				conmenu_set.m_1x.gotoAndStop(2);
			}
			if(CUSTOM_MUSIC_VOLUME > 0)
			{
				conmenu_set.m2_1x.gotoAndStop(1);
			}
			else
			{
				conmenu_set.m2_1x.gotoAndStop(2);
			}
			conmenu_set.v_1x.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu_set.v_1.vv.x = -104;
				FX_VOLUME = 0;
				vol = new SoundTransform(FX_VOLUME);
				UpdateGravitatorVol();
				conmenu_set.v_1x.gotoAndStop(2);
			});
			conmenu_set.m_1x.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu_set.m_1.vv.x = -104;
				MUSIC_VOLUME = 0;
				vol2 = new SoundTransform(MUSIC_VOLUME);
				UpdateGravitatorVol();
				conmenu_set.m_1x.gotoAndStop(2);
				CustomSongUpdateVolumes();
			});
			conmenu_set.m2_1x.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu_set.m2_1.vv.x = -104;
				CUSTOM_MUSIC_VOLUME = 0;
				vol2Custom = new SoundTransform(CUSTOM_MUSIC_VOLUME);
				UpdateGravitatorVol();
				conmenu_set.m2_1x.gotoAndStop(2);
				CustomSongUpdateVolumes();
			});
			gamemenu.b_con.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			gamemenu.b_con.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			gamemenu.b_con.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu.visible = true;
			});
			gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_OVER,function():*
			{
				PlaySound_full(ss_info);
			});
			gamemenu.b_settings.addEventListener(MouseEvent.MOUSE_DOWN,function():*
			{
				PlaySound_full(ss_info_off);
			});
			gamemenu.b_settings.addEventListener(MouseEvent.CLICK,function():*
			{
				conmenu_set.visible = true;
			});
			gamemenu.b_restart.addEventListener(MouseEvent.CLICK,function():*
			{
				VarChangePreventStart();
				PlaySound_full(ss_info_act);
				if(MP_mode)
				{
					mens[MP_myid].hea = 0;
				}
				else if(MAP_TESTING || (def_login && CUR_LOADING.toLowerCase().indexOf(def_login.toLowerCase() + "-") == 0))
				{
					GotoMap(CUR_LOADING);
				}
				else
				{
					MP_force_disconnect = true;
					mens[MP_myid].dead = true;
					darkness.visible = true;
					darkness.alpha = 1;
					LEVEL_END_FORCE = "restart";
				}
				gamemenu.visible = false;
				VarChangePreventEnd();
				SCREEN_BLUR = false;
				updateBlur();
			});
			vol.volume = FX_VOLUME;
			vol2.volume = MUSIC_VOLUME;
			SHAKEAMMOUT = 0;
			if(!TOOLTIPS)
			{
				myCursor.txt.htmlText = "";
			}
			FUN_NICE_BULLETS = 0;
			FUN_SPENT_BULLETS = 0;
			FUN_DAMAGE_MADE = 0;
			FUN_HEADSHOTS_MADE = 0;
			FUN_DAMAGE_TAKEN = 0;
			FUN_TIME_SPEND = 0;
			FUN_ELEMINATED = 0;
			whitesimple.visible = false;
			whitesimple.alpha = 0;
			BADGES_ENABLED = true;
			MP_start_grenades_count = 0;
			MP_start_grenades_port_count = 0;
			MP_start_grenades_sh_count = 0;
			MP_myspecials = new Array();
			MP_myspecials_total = 0;
			MP_assigning_special = -1;
			MP_specials = new Array();
			pcg.gotoAndStop(1);
			qmenu.gotoAndStop(1);
			team_blue.visible = false;
			team_red.visible = false;
			team_blue.txtscore.text = "0";
			team_red.txtscore.text = "0";
			LoadMap();
			MP_ping1 = getTimer();
			if(!SCREEN_FADE_EFFECTS)
			{
				setTimeout(function():*
				{
					darkness.scaleX = 0;
					darkness.scaleY = 0;
				},100);
			}
			hero_list_frame_offset = 0;
			if(MP_mode)
			{
				MP_get();
				hero_list_scale = 1;
				if(MP_playerstotal > 8)
				{
					hero_list_scale = 0.5;
					hero_list_frame_offset = 3;
				}
				i = 0;
				while(i < MP_playerstotal)
				{
					if(i == 0)
					{
						temp = herolist.p0;
					}
					else
					{
						temp = herolist.addChild(new hero_list());
					}
					if(i == MP_myid)
					{
						temp.gotoAndStop(2 + hero_list_frame_offset);
					}
					else
					{
						temp.gotoAndStop(1 + hero_list_frame_offset);
					}
					hero[i] = temp;
					temp.y = herolist.p0.y + i * 20 * hero_list_scale;
					temp.x = herolist.p0.x;
					temp.f1.text = "";
					temp.f2.text = "";
					temp.f3.text = "";
					temp.f4.text = "";
					temp.f5.text = "";
					temp.vbtn1.tabEnabled = false;
					temp.vbtn2.tabEnabled = false;
					temp.vbtn3.tabEnabled = false;
					format = new TextFormat();
					format.size = 10 * hero_list_scale;
					temp.f1.setTextFormat(format);
					temp.f2.setTextFormat(format);
					temp.f3.setTextFormat(format);
					temp.f4.setTextFormat(format);
					temp.f5.setTextFormat(format);
					if(i == MP_myid)
					{
						temp.f1.text = MP_nick;
						str = "Team " + String(MP_team + 1);
						if(MP_team == 0)
						{
						 str = "Alpha";
						}
						if(MP_team == 1)
						{
						 str = "Beta";
						}
						if(MP_team == 2)
						{
						 str = "Gamma";
						}
						if(MP_team == 3)
						{
						 str = "Delta";
						}
						if(MP_team == 4)
						{
						 str = "Zeta";
						}
						if(MP_team == 5)
						{
						 str = "Lambda";
						}
						if(MP_team == 6)
						{
						 str = "Sigma";
						}
						if(MP_team == 7)
						{
						 str = "Omega";
						}
						temp.f2.text = str;
						temp.f3.text = 0;
						temp.f4.text = 0;
					}
					++i;
				}
			}
			death_cam = MP_myid;
			spawn = true;
			TIME_PLAYED_MULTI = getTimer();
			if(MP_mode)
			{
				herolist.f1.text = MP_room_name;
				herolist.f2.text = MP_map_name;
				herolist.f3.text = CUR_SERVER_NAME;
				herolist.f4.text = "";
				herolist.f5.text = "";
				herolist.f6.text = "00:00:00";
			}
			gamemenu.lvli.text = MP_map_name;
			need_heal.visible = false;
			nonblockrate = true;
			if(FORCE_CUSTOM_MAP || MP_mode)
			{
				gamemenu.mapinfos.visible = true;
				gamemenu.mapinfos.rate1.gotoAndStop(1);
				gamemenu.mapinfos.rate2.gotoAndStop(1);
				gamemenu.mapinfos.rate3.gotoAndStop(1);
				gamemenu.mapinfos.rate4.gotoAndStop(1);
				gamemenu.mapinfos.rate5.gotoAndStop(1);
				gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(2);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_OUT,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(1);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate1.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
					RateMap(1);
				});
				gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(2);
					gamemenu.mapinfos.rate2.gotoAndStop(2);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_OUT,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(1);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate2.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
					RateMap(2);
				});
				gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(2);
					gamemenu.mapinfos.rate2.gotoAndStop(2);
					gamemenu.mapinfos.rate3.gotoAndStop(2);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_OUT,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(1);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate3.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
					RateMap(3);
				});
				gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(2);
					gamemenu.mapinfos.rate2.gotoAndStop(2);
					gamemenu.mapinfos.rate3.gotoAndStop(2);
					gamemenu.mapinfos.rate4.gotoAndStop(2);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_OUT,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(1);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate4.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
					RateMap(4);
				});
				gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(2);
					gamemenu.mapinfos.rate2.gotoAndStop(2);
					gamemenu.mapinfos.rate3.gotoAndStop(2);
					gamemenu.mapinfos.rate4.gotoAndStop(2);
					gamemenu.mapinfos.rate5.gotoAndStop(2);
				});
				gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_OUT,function():*
				{
					PlaySound_full(ss_info);
					gamemenu.mapinfos.rate1.gotoAndStop(1);
					gamemenu.mapinfos.rate2.gotoAndStop(1);
					gamemenu.mapinfos.rate3.gotoAndStop(1);
					gamemenu.mapinfos.rate4.gotoAndStop(1);
					gamemenu.mapinfos.rate5.gotoAndStop(1);
				});
				gamemenu.mapinfos.rate5.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
					RateMap(5);
				});
				gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_OVER,function():*
				{
					PlaySound_full(ss_info);
				});
				gamemenu.mapinfos.mappage.addEventListener(MouseEvent.MOUSE_DOWN,function():*
				{
					PlaySound_full(ss_info_off);
				});
				gamemenu.mapinfos.mappage.addEventListener(MouseEvent.CLICK,function():*
				{
					try
					{
						DialogSay("Visiting page of map \'\'" + CUR_CUSTOM_MAP + "\'\'...","#FFFF00");
						navigateToURL(new URLRequest("https://www.plazmaburst2.com/index.php?s=9&m=" + CUR_CUSTOM_MAP),"_blank");
					}
					catch(e:Error)
					{
					}
				});
			}
			else
			{
				gamemenu.mapinfos.visible = false;
			}
			NoMouse(game);
			NoMouse(graphics_3d_front);
			TakeScreenShot_allow = true;
			TakeScreenShot_delay = 1000;
			can_get_exp_for_level = true;
			if(FORCE_CUSTOM_MAP)
			{
				if(!MP_mode)
				{
					if(exp_tried_custom_maps[CUR_CUSTOM_MAP] == undefined || CUR_CUSTOM_MAP == "dm0")
					{
						exp_tried_custom_maps[CUR_CUSTOM_MAP] = true;
						ExpTask(EXP_TYPE_TRY_CUSTOM);
					}
				}
			}
		}

		public function updateBlur() : void {
			screen_blur.visible = SCREEN_BLUR && !RENDERING_3D;
			if (RENDERING_3D) return;
			sky.visible = true;
			graphics_3d.visible = true;
			game.alpha = 1;
			graphics_3d_front.visible = true;
		}
		
		public function GetNewURLLoader() : *
		{
			var r:* = undefined;
			var loader:* = undefined;
			var my_last_url_request:* = undefined;
			var DataUpdater:* = undefined;
			var errorHandler:* = undefined;
			DataUpdater = function():*
			{
				if(loader.bytesLoaded > 0)
				{
					if(my_last_url_request.url.indexOf("https://") !== -1)
					{
						++https_probability;
					}
					else
					{
						++http_probability;
					}
				}
				r.data = loader.data;
				r.bytesLoaded = loader.bytesLoaded;
				r.bytesTotal = loader.bytesTotal;
				r.dataFormat = loader.dataFormat;
			};
			errorHandler = function(param1:*):*
			{
				var e:* = param1;
				setTimeout(function():*
				{
					var _loc1_:* = my_last_url_request.url.split("https://").join("http://");
					if(_loc1_ != my_last_url_request.url)
					{
						my_last_url_request.url = my_last_url_request.url.split("https://").join("http://");
						r.load(my_last_url_request);
					}
				},1000);
			};
			r = new Object();
			loader = new URLLoader();
			my_last_url_request = null;
			r.load = function(param1:*):*
			{
				var url_request:* = param1;
				my_last_url_request = url_request;
				try
				{
					loader.load(url_request);
				}
				catch(e:Error)
				{
					errorHandler();
				}
			};
			r.close = function():*
			{
				loader.close();
			};
			r.addEventListener = function(param1:*, param2:*):*
			{
				loader.addEventListener(param1,param2);
			};
			r.removeEventListener = function(param1:*, param2:*):*
			{
				loader.removeEventListener(param1,param2);
			};
			r.addEventListener(Event.COMPLETE,DataUpdater);
			r.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);
			r.addEventListener(SecurityErrorEvent.SECURITY_ERROR,errorHandler);
			return r;
		}
		
		public function NetworkLoad() : void
		{
			if(launchArguments.l != undefined && launchArguments.l != "")
			{
				NetworkLoad_triesleft = 10;
				NetworkLoad_complete = false;
				NetworkLoad_failed = false;
				NetworkLoadNow();
			}
			else
			{
				NetworkLoad_complete = true;
			}
		}
		
		public function NetworkLoadNow() : void
		{
			if(NetworkLoad_triesleft > 0)
			{
				myRequest = new URLRequest(MP_server);
				myVariables = new URLVariables();
				myVariables.rq = "load";
				myVariables.l = launchArguments.l;
				myVariables.p = launchArguments.p;
				myRequest.method = URLRequestMethod.POST;
				myRequest.data = myVariables;
				mySaveLoadLoader.addEventListener(Event.COMPLETE,NetworkLoadOk);
				mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,NetworkLoadError);
				mySaveLoadLoader.load(myRequest);
			}
		}
		
		public function LoadSaveDataFromString(mySaveLoadLoader_data:String, with_history:Boolean = true) : void
		{
			var vars:Array = null;
			var i:int = 0;
			var pair:Array = null;
			var n:String = null;
			var v:* = undefined;
			if(mySaveLoadLoader_data != "x" && mySaveLoadLoader_data.indexOf("Error: ") != 0)
			{
				if(mySaveLoadLoader_data != ".")
				{
					vars = String(mySaveLoadLoader_data).split(";");
					i = 0;
					for(; i < vars.length; i++)
					{
						pair = vars[i].split("=");
						n = String(pair[0]).split("^1").join(";").split("^2").join("=");
						v = String(pair[1]).split("^1").join(";").split("^2").join("=");
						if(v == "undefined" || v == "NaN")
						{
							if(my_so.data[n] + "" != "undefined")
							{
								if(my_so.data[n] + "" != "NaN")
								{
									continue;
								}
							}
							v = 0;
						}
						else if(v == "true")
						{
							v = true;
						}
						else if(v == "false")
						{
							v = false;
						}
						else if(Number(v) + "" != "NaN")
						{
							v = Number(v);
						}
						if(!(!with_history && (n == "first_uid" || n == "first_login")))
						{
							if(n.indexOf("skin_allowed") != 0)
							{
								my_so.data[n] = v;
							}
						}
					}
					try
					{
						my_so.flush();
					}
					catch(e:Error)
					{
						LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
					}
				}
				else
				{
					load_error_field.text = "Response: " + mySaveLoadLoader_data;
				}
			}
			else
			{
				load_error_field.text = "Response: " + mySaveLoadLoader_data;
			}
		}
		
		public function NetworkLoadOk(param1:Event) : void
		{
			var e:Event = param1;
			mySaveLoadLoader.removeEventListener(Event.COMPLETE,NetworkLoadOk);
			mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,NetworkLoadError);
			try
			{
				if(!NetworkLoad_complete)
				{
					LoadSaveDataFromString(mySaveLoadLoader.data);
				}
				NetworkLoad_complete = true;
			}
			catch(err:Error)
			{
				load_error_field.text = "LoadSaveDataFromString decode error (" + NetworkLoad_triesleft + "): " + err;
			}
		}
		
		public function NetworkLoadError(param1:IOErrorEvent) : void
		{
			mySaveLoadLoader.removeEventListener(Event.COMPLETE,NetworkLoadOk);
			mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,NetworkLoadError);
			NetworkLoad_triesleft = NetworkLoad_triesleft - 1;
			NetworkLoad_failed = true;
			NetworkLoadNow();
			load_error_field.text = "IOErrorEvent (" + NetworkLoad_triesleft + "," + myVariables.l + "): " + param1;
		}
		
		public function ProduceSaveString(param1:Boolean = true) : String
		{
			var _loc3_:* = undefined;
			var _loc4_:String = null;
			var _loc5_:* = undefined;
			var _loc2_:* = "";
			for(_loc3_ in my_so.data)
			{
				_loc4_ = _loc3_.split(";").join("^1").split("=").join("^2");
				_loc5_ = String(my_so.data[_loc3_]).split(";").join("^1").split("=").join("^2");
				if(!(!param1 && (_loc4_ == "first_uid" || _loc4_ == "first_login")))
				{
					if(!(_loc4_.indexOf("skin_allowed") == 0 || _loc5_ == "NaN" || _loc5_ == "undefined"))
					{
						_loc2_ += _loc4_;
						_loc2_ += "=";
						_loc2_ += _loc5_;
						_loc2_ += ";";
					}
				}
			}
			return _loc2_;
		}
		
		public function NetworkSave() : void
		{
			var _loc1_:String = null;
			if(launchArguments.l != undefined && launchArguments.l != "")
			{
				NetworkSave_triesleft = 10;
				_loc1_ = ProduceSaveString();
				NetworkSave_data = _loc1_;
				NetworkSaveNow();
			}
		}
		
		public function NetworkSaveNow() : void
		{
			if(NetworkSave_triesleft > 0)
			{
				myRequest = new URLRequest(MP_server);
				myVariables = new URLVariables();
				myVariables.rq = "save";
				myVariables.l = launchArguments.l;
				myVariables.p = launchArguments.p;
				myVariables.str = NetworkSave_data;
				myRequest.method = URLRequestMethod.POST;
				myRequest.data = myVariables;
				mySaveLoadLoader.addEventListener(Event.COMPLETE,NetworkSaveOk);
				mySaveLoadLoader.addEventListener(IOErrorEvent.IO_ERROR,NetworkSaveError);
				mySaveLoadLoader.load(myRequest);
			}
		}
		
		public function NetworkSaveOk(param1:Event) : void
		{
			mySaveLoadLoader.removeEventListener(Event.COMPLETE,NetworkSaveOk);
			mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,NetworkSaveError);
		}
		
		public function NetworkSaveError(param1:IOErrorEvent) : void
		{
			mySaveLoadLoader.removeEventListener(Event.COMPLETE,NetworkSaveOk);
			mySaveLoadLoader.removeEventListener(IOErrorEvent.IO_ERROR,NetworkSaveError);
			NetworkSave_triesleft = NetworkSave_triesleft - 1;
			NetworkSaveNow();
		}
		
		public function edumb() : void
		{
			if(stage.numChildren > 1)
			{
				stage.removeChildAt(1);
				SoundMixer.stopAll();
				if(currentFrame > 1)
				{
					CreateRestoreLoopSounds();
				}
			}
		}
		
		public function kedumb() : void
		{
			if(edidumb != -1)
			{
				clearInterval(edidumb);
				edidumb = -1;
			}
		}
		
		public function version_hash(param1:String) : String
		{
			var _loc2_:ByteArray = new ByteArray();
			_loc2_.writeMultiByte(param1,"iso-8859-1");
			var _loc3_:ByteArray = stage.loaderInfo.bytes;
			var _loc4_:uint = 0;
			var _loc5_:uint = _loc3_.length - 2;
			var _loc6_:uint = 3;
			while(_loc6_ < _loc5_)
			{
				_loc2_[_loc4_] = (_loc2_[_loc4_] + 3540 + (Number(_loc2_[_loc4_]) % 4 + 1) * (Number(_loc3_[_loc6_]) - Number(_loc3_[_loc6_ - 1]) + _loc3_[_loc6_ + 2] - Number(_loc3_[_loc6_ + 1]))) % 256;
				if(++_loc4_ >= _loc2_.length)
				{
					_loc4_ = 0;
				}
				_loc6_ += 4;
			}
			var _loc7_:String = "";
			_loc4_ = 0;
			while(_loc4_ < _loc2_.length)
			{
				_loc7_ += _loc2_[_loc4_] + ".";
				_loc4_++;
			}
			return _loc7_;
		}
		
		public function firtim() : *
		{
			if(currentFrame == 1)
			{
				totalseconds = Number(getTimer()) / 1000;
				if(loaded < 1)
				{
					loaded = 1;
				}
				waitfor = Math.round(totalseconds / loaded * (total - loaded));
				if(waitfor < 0)
				{
					waitfor = 0;
				}
				if(waitfor < 60)
				{
					loa2.htmlText = waitfor + " seconds";
				}
				else if(waitfor / 60 < 60)
				{
					loa2.htmlText = Math.floor(waitfor / 60) + " minutes " + (waitfor - Math.floor(waitfor / 60) * 60) + " seconds";
				}
			}
		}
		
		public function handleProgress(param1:Event) : void
		{
			if(currentFrame == 1)
			{
				loaded = stage.loaderInfo.bytesLoaded;
				percent = Math.round(loaded / total * 100);
				if(percent > 100)
				{
					percent = 100;
				}
				if(percent < 0)
				{
					percent = 0;
				}
				if(lastperc != percent)
				{
					times = 10;
				}
				else
				{
					--times;
				}
				if(times > 0)
				{
					loa.htmlText = "<B><FONT COLOR=\"#FFFFFF\">.:</FONT></B> " + percent + " <B><FONT COLOR=\"#FFFFFF\">:.</FONT></B>";
				}
				else if(times > -5)
				{
					loa.htmlText = "<B><FONT COLOR=\"#AAAAAA\">.:</FONT></B> " + percent + " <B><FONT COLOR=\"#AAAAAA\">:.</FONT></B>";
				}
				else if(times > -40)
				{
					loa.htmlText = "<B><FONT>.:</FONT></B> " + percent + " <B><FONT>:.<FONT></B>";
				}
				else
				{
					loa.htmlText = "<B><FONT COLOR=\"#FF0000\">.:</FONT></B> " + percent + " <B><FONT COLOR=\"#FF0000\">:.</FONT></B>";
				}
				Mouse.show();
				if(framesLoaded == totalFrames)
				{
					if(pass || autostart_mp || MAP_TESTING)
					{
						if(adBox.alpha > 0)
						{
							adBox.alpha -= 0.1 * 30 / stage.frameRate;
							intro_btcb.alpha -= 0.1 * 30 / stage.frameRate;
							intro_mpdb.alpha -= 0.1 * 30 / stage.frameRate;
							intro_ftb.alpha -= 0.1 * 30 / stage.frameRate;
							conti.alpha -= 0.1 * 30 / stage.frameRate;
						}
						else
						{
							/* if(AdLoader.cpmstar_loaded_object != null)
							{
								AdLoader.cpmstar_loaded_object.unloadAndStop();
							} */
							removeChild(adBox);
							/* AdLoader.cpmstar_loaded_object = null;
							AdLoader.context = null; */ 
							clearInterval(fir);
							SoundMixer.stopAll();
							SoundMixer.soundTransform = new SoundTransform(1,0);
							gotoAndStop("intro");
						}
					}
					else
					{
						loa.visible = false;
						loa2.visible = false;
						if(NetworkLoad_complete)
						{
							if (conti_loading != null) {
								conti_loading.visible = false;
							}
							conti.visible = true;
						}
						else
						{
							if (conti_loading != null) {
								conti_loading.visible = true;
							}
							conti.visible = false;
						}
						darkness.visible = false;
						darkness.alpha = 0;
					}
				}
				else if(darkness.alpha > 0)
				{
					darkness.alpha -= 0.05;
				}
				else
				{
					darkness.visible = false;
				}
				lastperc = percent;
			}
			if(currentFrame <= 2)
			{
				IntroThink();
			}
			else
			{
				removeEventListener(Event.ENTER_FRAME,handleProgress);
			}
		}
		
		public function IntroThink() : void
		{
			var _loc1_:MovieClip = null;
			var _loc2_:Number = NaN;
			var _loc3_:MovieClip = null;
			if(intro_first)
			{
				main_y = intro_base.hero.y;
				intro_first = false;
				sinus = 0;
			}
			else
			{
				intro_base.hero.rotationZ = -0.2 + Math.sin(sinus) * 0.2;
				intro_base.hero.y = main_y + 0.2 + Math.cos(sinus) * 0.2;
				sinus += 0.08 * 30 / stage.frameRate;
				intro_base.hero.intro_head.rotationZ = -Number(intro_base.hero.rotationZ);
				intro_base.hero.intro_arm1.rotationZ = intro_base.hero.intro_arm2.rotationZ = -Number(intro_base.hero.rotationZ);
				intro_base.hero.intro_gun.rotationZ = -Number(intro_base.hero.rotationZ) * 0.5;
				if(intro_glowings != null && intro_glowings.length > 0)
				{
					for each(_loc1_ in intro_glowings)
					{
						_loc2_ = 0.3;
						_loc2_ -= _loc1_.y * 0.005;
						_loc1_.alpha = (_loc1_.alpha * 2 + Math.random() * _loc2_) * 0.33;
						if(_loc1_.parent == intro_base.hero)
						{
							_loc1_.rotationZ = -Number(intro_base.hero.rotationZ);
						}
						else
						{
							_loc1_.rotationZ = -Number(intro_base.hero.rotationZ) - _loc1_.parent.rotationZ;
						}
					}
				}
				if(rifle_glow != null)
				{
					rifle_glow.alpha = (rifle_glow.alpha + Math.pow(Math.sin(sinus) * 0.3 + 0.3 + Math.random() * 0.4,4)) * 0.5;
					rifle_glow.rotationZ = -Number(intro_base.hero.rotationZ) - rifle_glow.parent.rotationZ;
				}
				if(intro_speculars != null && intro_speculars.length > 0)
				{
					for each(_loc3_ in intro_speculars)
					{
						_loc3_.alpha = Math.pow(Math.sin(sinus) * 0.5 + 0.5,1);
					}
				}
			}
		}
		
		public function register_glow(param1:MovieClip) : void
		{
			if(intro_glowings == null)
			{
				intro_glowings = new Array();
			}
			intro_glowings.push(param1);
		}
		
		public function register_glow2(param1:MovieClip) : void
		{
			rifle_glow = param1;
		}
		
		public function register_specular(param1:MovieClip) : void
		{
			if(intro_speculars == null)
			{
				intro_speculars = new Array();
			}
			intro_speculars.push(param1);
		}
		
		public function getTextFromJavaScript(param1:*) : void
		{
			var _loc2_:Array = null;
			var _loc3_:MouseEvent = null;
			if(param1 != "term")
			{
				if(param1 == "html_wheel_events")
				{
					USE_HTML_WHEEL_EVENTS = true;
				}
				else
				{
					_loc2_ = param1.split(":");
					if(_loc2_[0] == "rt")
					{
						if(_loc2_[2] == "sp")
						{
							if(currentFrameLabel == "menu")
							{
								removeEventListener(Event.ENTER_FRAME,onEnterFrame2);
							}
							gotoAndStop("custom");
							FORCE_CUSTOM_MAP = true;
							CUR_CUSTOM_MAP = _loc2_[1];
							gotoAndStop("difch");
						}
						else if(_loc2_[2] == "mp")
						{
						}
					}
					else if(_loc2_[0] == "w")
					{
						if(USE_HTML_WHEEL_EVENTS)
						{
							_loc3_ = new MouseEvent(MouseEvent.MOUSE_WHEEL);
							_loc3_.delta = int(_loc2_[1]);
							onMouseWheelEvent(_loc3_);
						}
					}
				}
			}
		}
		
		public function RememberMapID(param1:*, param2:*) : void
		{
			var _loc3_:* = undefined;
			param1 = param1.split("&").join("");
			param1 = param1.split(",").join("+");
			param1 = param1.split("=").join("");
			param1 = param1.toLowerCase();
			if(param2 == 1)
			{
				_loc3_ = map_qp_sp.split(",");
			}
			if(param2 == 2)
			{
				_loc3_ = map_qp_mp.split(",");
			}
			if(_loc3_.indexOf(param1) != -1)
			{
				_loc3_.splice(_loc3_.indexOf(param1),1);
			}
			_loc3_.unshift(param1);
			if(_loc3_.length > 20)
			{
				_loc3_ = _loc3_.slice(0,20);
			}
			if(param2 == 1)
			{
				map_qp_sp = _loc3_.join(",");
			}
			if(param2 == 2)
			{
				map_qp_mp = _loc3_.join(",");
			}
			SaveGame();
		}
		
		public function CallQuickPick(x:Number, y:Number, map_group:int, paste_target:TextField) : void
		{
			var flip:Boolean;
			var maps:*;
			var appear:Boolean;
			var SaveBack:Function = function():void
			{
				if(map_group == 1) map_qp_sp = maps.join(",");
				if(map_group == 2) map_qp_mp = maps.join(",");
				SaveGame();
			};
			if(map_quickpick.visible) return;
			map_quickpick.gotoAndStop(2);
			map_quickpick.gotoAndStop(1);
			map_quickpick.visible = true;
			map_quickpick.alpha = 0;
			map_quickpick.x = x;
			map_quickpick.y = y;
			flip = map_group == 1;
			if(flip) map_quickpick.scaleY = -1;
			else map_quickpick.scaleY = 1;
			maps = null;
			if(map_group == 1) maps = map_qp_sp.split(",");
			if(map_group == 2) maps = map_qp_mp.split(",");
			appear = true;
			while(maps.indexOf("") != -1) maps.splice(maps.indexOf(""),1);
			for (var i:int=0; i < map_quick_picks_max; i++)
			{
				if(i < maps.length)
				{
					var tf:Function = function(list_element:MovieClip):void
					{
						list_element.visible = true;
						list_element.txt.text = maps[i].split("+").join(",");
						if(flip)
						{
							list_element.scaleY = -1;
							list_element.y = i * 18 + 5 + 18;
						}
						else
						{
							list_element.scaleY = 1;
							list_element.y = i * 18 + 5;
						}
						list_element.map_id = maps[i];
						NoMouse2(list_element.txt);
						list_element.btn.addEventListener(MouseEvent.CLICK,function():void
						{
							paste_target.text = list_element.map_id.split("+").join(",");
							appear = false;
						});
						list_element.del.addEventListener(MouseEvent.CLICK,function():void
						{
							maps.splice(maps.indexOf(list_element.map_id),1);
							SaveBack();
							var _loc1_:* = map_quickpick.alpha;
							map_quickpick.visible = false;
							CallQuickPick(x,y,map_group,paste_target);
							map_quickpick.alpha = _loc1_;
							stage.stageFocusRect = false;
							stage.focus = map_quickpick;
						});
					};
					tf(map_quickpick["qp" + i]);
				}
				else map_quickpick["qp" + i].visible = false;
			}
			map_quickpick.bg.scaleY = (Number(maps.length) * 18 + 10) / 136;
			if(map_qp_ani != -1)
			{
				clearInterval(map_qp_ani);
				map_qp_ani = -1;
			}
			map_qp_ani = setInterval(function():*
			{
				if(appear)
				{
					if(map_quickpick.alpha < 1) map_quickpick.alpha = Math.min(1,map_quickpick.alpha + 0.2);
					if (stage.focus == null || stage.focus.parent == null || (
						(((stage.focus != map_quickpick) && (stage.focus != paste_target))
						 && ((stage.focus.parent != map_quickpick) && (stage.focus.parent.parent != map_quickpick))))) appear = false;
				}
				else if(map_quickpick.alpha > 0) map_quickpick.alpha = Math.max(0,map_quickpick.alpha - 0.2);
				else
				{
					clearInterval(map_qp_ani);
					map_qp_ani = -1;
					map_quickpick.visible = false;
					stage.stageFocusRect = true;
				}
			}, 16);
		}
		
		public function cet(str:String, hash:String, len:int) : String
		{
			var n:Vector.<int> = null;
			try
			{
				if(str.length != len || hash != MD5.hash(str))
				{
					unstable = 9;
					unstable_m = CUR_SERVER_NAME + "." + MP_room_name + "." + MP_map_name + " :: che(" + str + ", " + hash + ", " + len + ")";
					if(Math.random() > 0.8)
					{
						return "";
					}
					if(Math.random() > 0.8)
					{
						n = new Vector.<int>(-1);
					}
				}
				return str;
			}
			catch(e:Error)
			{
				n = new Vector.<int>(-1);
				return "";
			}
			return "";
		}
		
		public function GET_LITE_PHYS() : Boolean {
			return LITE_PHYS && !(MP_mode && MP_app);
		}
		
		public function SetMCFrame(param1:MovieClip, param2:int, param3:int = 0) : void
		{
			if(param1.isPlaying || param3 == 0 && param1.currentFrame != param2 || param3 > 0 && Math.abs(param1.currentFrame - param2) >= param3)
			{
				param1.gotoAndStop(param2);
			}
		}
		
		public function GCTime() : void
		{
			System.pauseForGCIfCollectionImminent(0.1);
		}
		
		public function CustomImageRegister(id:int, width:int, height:int) : void
		{
			var loader:Loader;
			var img_req_vars:URLVariables;
			var request:URLRequest;
			var variables:*;
			var img:PB2CustomImage;
			var img_req:URLRequest = null;
			var completeHandler:* = undefined;
			completeHandler = function(param1:Event):void
			{
				var html:String = null;
				var event:Event = param1;
				try
				{
					html = event.target.data;
					if(html == "no")
					{
						allow_screenshoting = false;
					}
					++images_loaded;
				}
				catch(e:Error)
				{
					SpawnLevelLogicErrorIfNeeded(e,"CustomImageApprovalStatus");
				}
			};
			if(custom_images.length > 200)
			{
				throw new Error("No more than 200 custom images are allowed per level.");
			}
			++images_expected;
			img = new PB2CustomImage(id, width, height);
			loader = new Loader();
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
			{
				var i:int = 0;
				var event:Event = param1;
				++images_finished_loading;
				try
				{
					images_data_loaded += LoaderInfo(event.target).bytesTotal;
					if(images_data_loaded > PB2CustomImage.MAX_SIZE)
					{
						throw new Error("Attempted to download too much image data (" + images_data_loaded + " out of allowed " + PB2CustomImage.MAX_SIZE + " bytes)");
					}
					img.bitmap = LoaderInfo(event.target).content as Bitmap;
					img.bitmap_data = img.bitmap.bitmapData;
					i = 0;
					while(i < img.load_callbacks.length)
					{
						img.load_callbacks[i](img.load_callback_params[i]);
						i++;
					}
					img.load_callback_params = null;
					img.load_callbacks = null;
					++images_ready_to_render;
				}
				catch(e:Error)
				{
					SpawnLevelLogicErrorIfNeeded(e,"CustomImageData");
				}
			});
			if(https_probability >= http_probability)
			{
				img_req = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
			}
			else
			{
				img_req = new URLRequest("http://www.plazmaburst2.com/mimage_cache.php?image_id=" + id);
			}
			img_req_vars = new URLVariables();
			if(def_login != "")
			{
				img_req_vars.l = def_login;
				img_req_vars.p = def_password;
			}
			img_req.data = img_req_vars;
			loader.load(img_req);
			request = new URLRequest("https://www.plazmaburst2.com/mimage_cache.php?image_id=" + id + "&approved_status_only=1");
			variables = GetNewURLLoader();
			variables.addEventListener(Event.COMPLETE,completeHandler);
			try
			{
				variables.load(request);
			}
			catch(error:Error)
			{
				throw new Error("Unable to load URL: " + error);
			}
			custom_images.push(img);
		}
		
		public function FindCustomImageObject(id:int) : PB2CustomImage
		{
			for (var i:int = 0; i < custom_images.length; i++) {
				if(custom_images[i].id == id) return custom_images[i];
			}
			return null;
		}
		
		public function CustomSongRegister(url:String, volume_scale:Number, loop:Boolean = false, callback:* = undefined) : void
		{
			var completeHandler:*;
			var s:PB2CustomSong;
			var request:URLRequest = null;
			var variables:* = undefined;
			var parts:Array = null;
			var url_cache:String = null;
			url = url.split("http://").join("https://");
			if(custom_songs.length >= 8)
			{
				throw new Error("Too many songs (you can\'t have more than 8 on one map)");
			}
			
			if (callback == undefined) callback = -1;
			s = new PB2CustomSong(url, volume_scale, callback as int, loop, getTimer());

			if(!(url.length == 0 || url == "0"))
			{
				if(url.indexOf("https://freemusicarchive.org") == 0)
				{
					completeHandler = function(param1:Event):void
					{
						var html:String = null;
						var title_download:int = 0;
						var href:int = 0;
						var last_quote:* = undefined;
						var final_url:String = null;
						var event:Event = param1;
						try
						{
							html = event.target.data;
							title_download = html.indexOf("\" title=\"Download\"");
							if(title_download === -1)
							{
								throw new Error("Song does not appear available right now (" + url + ").");
							}
							href = html.lastIndexOf("href=\"",title_download);
							last_quote = html.indexOf("\"",href + 6);
							final_url = html.slice(href + 6,last_quote);
							if(https_probability >= http_probability)
							{
								s.sound.load(new URLRequest(final_url));
							}
							else
							{
								s.sound.load(new URLRequest(final_url.split("https://").join("http://")));
							}
						}
						catch(e:Error)
						{
							SpawnLevelLogicErrorIfNeeded(e,"Song");
						}
					};
					request = new URLRequest(url);
					variables = GetNewURLLoader();
					variables.addEventListener(Event.COMPLETE,completeHandler);
					try
					{
						variables.load(request);
					}
					catch(error:Error)
					{
						throw new Error("Unable to load URL: " + error);
					}
				}
				else
				{
					if(url.indexOf("https://www.newgrounds.com/audio/") != 0)
					{
						throw new Error("Unknown song source");
					}
					completeHandler = function(param1:Event):void
					{
						var html:String = null;
						var parts:Array = null;
						var cache_version:String = null;
						var event:Event = param1;
						try
						{
							html = event.target.data;
							if(html != "ok")
							{
								throw new Error(html);
							}
							parts = url.split("/");
							cache_version = "&2";
							if(https_probability >= http_probability)
							{
								s.sound.load(new URLRequest(MP_song_server + "?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
							}
							else
							{
								s.sound.load(new URLRequest(MP_song_server + "?verify=0&resource=newgrounds&song_id=" + parts[parts.length - 1] + cache_version));
							}
						}
						catch(e:Error)
						{
							SpawnLevelLogicErrorIfNeeded(e,"Song");
						}
					};
					parts = url.split("/");
					url_cache = MP_song_server + "?verify=1&resource=newgrounds&song_id=" + parts[parts.length - 1] + "&" + Math.random();
					request = new URLRequest(url_cache);
					variables = GetNewURLLoader();
					variables.addEventListener(Event.COMPLETE,completeHandler);
					try
					{
						variables.load(request);
					}
					catch(error:Error)
					{
						throw new Error("Unable to load URL: " + error);
					}
				}
			}
			custom_songs.push(s);
		}
		
		public function CustomSongPlay(id:int) : void
		{
			var inter:uint = 0;
			var fade_mode:Boolean = false;
			var SongSwitch:Function = function():void
			{
				if(custom_songs.length == 0)
				{
					clearInterval(inter);
					return;
				}
				if(fade_mode)
				{
					ok = true;
					for (var i:int = 0; i < custom_songs.length; i++) {
						if(custom_songs[i].volume > 0)
						{
							custom_songs[i].volume -= 0.02;
							ok = false;
						}
					}
					if(ok) fade_mode = false;
				}
				else
				{
					if(id >= 0)
					{
						custom_songs[id].volume = 1;
						if(custom_songs[id].channel)
						{
							custom_songs[id].channel.stop();
						}
						var new_ch:SoundChannel = null;
						if(custom_songs[id].sound.bytesTotal > 0 || custom_songs[id].sound.bytesTotal == 0 && custom_songs[id].sound.bytesLoaded > 0 && custom_songs[id].sound.bytesLoaded >= custom_songs[id].sound.bytesTotal)
						{
							new_ch = custom_songs[id].sound.play(0,!!custom_songs[id].loop ? 999 : 0);
						}
						else if(custom_songs[id].sound.bytesTotal == 0)
						{
							SpawnLevelLogicErrorIfNeeded(new Error("Song file size is 0 bytes, connection error saved to server cache instead of actual song? Or not loaded yet?"),"Song");
						}
						if(new_ch == null)
						{
							if(custom_songs[id].sound.bytesTotal != 0 || getTimer() < custom_songs[id].loadingSince + 15000)
								return;
						}
						else
						{
							var that:PB2CustomSong;
							var SongCallback:Function = function(ev:Event):void
							{
								that.channel.removeEventListener(Event.SOUND_COMPLETE,SongCallback);
								if(that == song_with_callback_allowed && that.callback != -1) 
									EXEC_TRIGGER(that.callback);
							};
							custom_songs[id].channel = new_ch;
							that = custom_songs[id];
							that.channel.addEventListener(Event.SOUND_COMPLETE,SongCallback);
						}
					}
					clearInterval(inter);
				}
				CustomSongUpdateVolumes();
			};
			song_with_callback_allowed = custom_songs[id];
			fade_mode = true;
			inter = setInterval(SongSwitch, 16);
		}
		
		public function CustomSongUpdateVolumes() : void
		{
			for (var i:int = 0; i < custom_songs.length; i++) {
				var soundTransform:SoundTransform = new SoundTransform();
				soundTransform.volume = Number(custom_songs[i].volume) * CUSTOM_MUSIC_VOLUME * Number(custom_songs[i].volume_scale);
				custom_songs[i].channel.soundTransform = soundTransform;
			}
		}

		public function measure_renderStart(ev:Event) {
			EXT.startMeasure(0);
		}

		/*
			0 - Render time
			1 - onEnterFrame time
			2 - Physics time
			3 - Physics2 time
			4 - PlayerLogic time
			5 - BulletLogic time
			6 - EffectsLogic time
			7 - Render3D time
		*/
		public function measure_renderEnd(ev:Event) {
			EXT.stopMeasure(0);
			if (SHOW_DEBUG) {
				var t0:Number = EXT.getTime(0);
				var t1:Number = EXT.getTime(1); 
				var t2:Number = EXT.getTime(2); 
				var t3:Number = EXT.getTime(3); 
				var t4:Number = EXT.getTime(4); 
				var t5:Number = EXT.getTime(5); 
				var t6:Number = EXT.getTime(6);
				var t7:Number = EXT.getTime(7);  
				debug_times.tg.text   = int(t0 + t7) + "us";
				debug_times.t0.text   = int(t0) + "us";
				debug_times.t1.text   = int(t1 - t7) + "us";
				debug_times.t2.text   = int(t2) + "us";
				debug_times.t3.text   = int(t3) + "us";
				debug_times.t4.text   = int(t4) + "us";
				debug_times.t5.text   = int(t5) + "us";
				debug_times.t6.text   = int(t6) + "us";
				debug_times.t7.text   = int(t7) + "us";
				debug_times.tol.text  = int(t1 - t2 - t3 - t4 - t5 - t6 - t7) + "us";
				debug_times.tft.text  = int(t0 + t1) + "us";
				debug_times.tfps.text = int(1000000.0 / (t0 + t1)) + "/s";
			}
		}

		public function DropGameTimer() : void
		{
			stage.removeEventListener(Event.EXIT_FRAME, measure_renderStart);
			stage.removeEventListener(Event.ENTER_FRAME, measure_renderEnd);

			MP_spectator = false;
			for (var i:int = 0; i < custom_songs.length; i++) {
				if(!custom_songs[i] || !custom_songs[i].channel) return;
				custom_songs[i].channel.stop();
			}
			custom_songs.length = 0;
			removeEventListener(Event.ENTER_FRAME,onEnterFrame);
			if(MP_mode)
			{
				clearInterval(gametim);
			}
			stage.removeEventListener(MouseEvent.RIGHT_MOUSE_DOWN,r_down);
			
			IN_GAME = false;

			if (acceleratedRenderer.LEVEL_LOADED) { 
				acceleratedRenderer.unloadLevel();
			}
		}
		
		public function StartGameTimer() : void
		{
			stage.addEventListener(Event.EXIT_FRAME, measure_renderStart);
			stage.addEventListener(Event.ENTER_FRAME, measure_renderEnd);

			addEventListener(Event.ENTER_FRAME,onEnterFrame);
			if(MP_mode)
			{
				gametim = setInterval(onEnterFrame_alt,gtwi);
				gtlt = getTimer();
			}
			stage.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,r_down);

			IN_GAME = true;
		}
		
		public function UnlagFPS() : void
		{
			if(allow_unlag_fps)
			{
				allow_unlag_fps = false;
				removeEventListener(Event.ENTER_FRAME,onEnterFrame);
				stage.frameRate = stage.frameRate;
				addEventListener(Event.ENTER_FRAME,onEnterFrame);
			}
		}
		
		public function onEnterFrame_alt() : void
		{
			UnlagFPS();
			if(getTimer() > gtlt + 40)
			{
				if(MP_mode)
				{
					onEnterFrame(null);
				}
			}
		}
		
		public function ManageGameTimer() : void
		{
			gtlt = getTimer();
		}
		
		public function UpdateFramerate() : void
		{
			stage.frameRate = FRAMERATE == 1 ? 20 : (FRAMERATE == 2 ? 30 : (FRAMERATE == 3 ? 60 : 120));
		}
		
		public function AskForCache(param1:MovieClip) : void
		{
		}
		
		public function decode(param1:String) : String
		{
			var _loc2_:* = "";
			i = 0;
			while(i < param1.length)
			{
				if(param1.charAt(i) == ";")
				{
					_loc2_ += "|";
				}
				else
				{
					_loc2_ += String.fromCharCode(param1.charCodeAt(i) - 1);
				}
				++i;
			}
			return _loc2_;
		}
		
		public function Censored(text:String, force:Boolean = false) : String
		{
			if(CENSORESHIP || force)
			{
				ok2 = true;
				while(ok2)
				{
					ok2 = false;
					c_i = 0;
					while(c_i < BAD_WORDS.length)
					{
						c_str = text.toLowerCase();
						c_i2 = c_str.indexOf(BAD_WORDS[c_i]);
						if(c_i2 != -1)
						{
							text = text.substr(0,c_i2) + " [ censored ] " + text.substr(c_i2 + BAD_WORDS[c_i].length,text.length - c_i2 - Number(BAD_WORDS[c_i].length));
							ok2 = true;
						}
						++c_i;
					}
				}
			}
			return text;
		}
		
		public function UpdateTeamTable() : *
		{
			if(MP_type == 3)
			{
				team_blue.visible = true;
				team_red.visible = true;
				team_blue.gotoAndStop(1);
				team_red.gotoAndStop(1);
				if(mens[MP_myid].team == 13)
				{
					team_blue.gotoAndStop(3);
				}
				else
				{
					team_red.gotoAndStop(3);
				}
			}
			else
			{
				team_blue.visible = false;
				team_red.visible = false;
			}
		}
		
		public function addBadge(badge_id:int, title:String, stat_max:int) : void
		{
			BADGE_STAT[badge_id] = 0;
			BADGE_STAT_MAX[badge_id] = stat_max;
			BADGE_TITLE[badge_id] = title;
			BADGE_REACHED[badge_id] = false;
		}
		
		public function incBadge(badge_id:int) : void
		{
			if (!BADGES_ENABLED || FORCE_CUSTOM_MAP || MP_mode || BADGE_REACHED[badge_id]) return;
			if(++BADGE_STAT[badge_id] >= BADGE_STAT_MAX[badge_id])
			{
				BADGE_STAT[badge_id] = BADGE_STAT_MAX[badge_id];
				BADGE_REACHED[badge_id] = true;
				PlaySound_full(s_badge_earned);
				DialogSay("Achievement unlocked \'\'" + BADGE_TITLE[badge_id] + "\'\'","#00FF00");
				LAST_BADGE = getTimer();
			}
			SaveGame();
		}
		
		public function MP_s_closeHandler(event1:Event) : void
		{
			MP_socket.close();
			if(currentLabel == "loginform")
			{
				LAST_ERROR = "Connection lost during connection";
				errtxt.text = "CONNECTION LOST DURING CONNECTION";
			}
		}
		
		public function MP_s_connectHandler(event2:Event) : void
		{
			MP_errored_out = false;
			MP_socket_send("Glad to meet you! :D");
			if(currentLabel == "loginform")
			{
				login_login.alpha = 1;
				login_login.enabled = true;
				login_guest.alpha = 1;
				login_guest.enabled = true;
				receiving_length = 0;
				if(auto_proceed)
				{
					setTimeout(function():*
					{
						proceed();
					},20);
				}
			}
		}

		public function openMatchCreationWindow() : void {
			PlaySound_full(ss_info_act);
			MP_spectator = false;
			errmenu_mp.visible = false;
			ggg.visible = true;
			ggg.gtitle.text = "Game by " + MP_nick;
			if(GUEST_ACCESS)
			{
				ggg.gjoin1.gotoAndStop(1);
				ggg.gjoin2.gotoAndStop(2);
				gm_ranked = "false";
			}
			else
			{
				ggg.gjoin1.gotoAndStop(2);
				ggg.gjoin2.gotoAndStop(1);
				gm_ranked = "true";
			}
			ggg.gtype1.gotoAndStop(2);
			ggg.gtype2.gotoAndStop(1);
			ggg.gtype3.gotoAndStop(1);
			gm_type = 1;
			ggg.gmax2.gotoAndStop(1);
			ggg.gmax3.gotoAndStop(1);
			ggg.gmax4.gotoAndStop(1);
			ggg.gmax5.gotoAndStop(1);
			ggg.gmax6.gotoAndStop(1);
			ggg.gmax8.gotoAndStop(2);
			ggg.gmax16.gotoAndStop(1);
			gm_max = 4;
			ggg.gmap.text = "random approved in rotation";
			ggg.gatt.text = "";
			ggg.gfps.text = "1000";
			ggg.gm_mods.text = "";
			ggg.but_oldnet.gotoAndStop(1);
			ggg.but_newnet.gotoAndStop(2);
		}
		
		public function MP_s_ioErrorHandler(event3:IOErrorEvent) : void
		{
			if(currentLabel == "loginform")
			{
				errtxt.text = "CONNECTION ERROR";
			}
		}
		
		public function UDP_socket_send(param1:String) : void {
			var sending = new ByteArray();
			sending.writeUTFBytes(param1);
			UDP_socket.send(sending, 0, 0, MP_SERVER_IP, MP_SERVER_PORT);
		}
	
		public function MP_socket_send(param1:String) : void
		{
			MP_socket.writeInt(param1.length);
			MP_socket.writeUTFBytes(param1);
			MP_socket.flush();
		}
	
		public function UDP_socketDataHandler(event:DatagramSocketDataEvent) : void
		{
			MP_get_done_STR = String(event.data);
			MP_get_done_HAP = true;
		}
		
		public function MP_s_socketDataHandler(event4:ProgressEvent) : void
		{
			var last_slash:int = 0;
			var sign:int = 0;
			var first_tilda:int = 0;
			var second_tilda:int = 0;
			var last_tilda:int = 0;
			var replace_info:String = null;
			var parts:Array = null;
			var packet_id:int = 0;
			var key:* = undefined;
			var a:* = undefined;
			var xml:XML = null;
			var b:* = undefined;
			var c:* = undefined;
			var bookInfo:XML = null;
			var bookInfo2:XML = null;
			var firsttag:Boolean = false;
			try
			{
				if (receiving_length == 0) { // Integer part
					receiving_length = MP_socket.readInt();
				}
				
				MP_SERVER_GOT_CUR = MP_socket.readUTFBytes(receiving_length - MP_SERVER_GOT.length);
				MP_SERVER_GOT += MP_SERVER_GOT_CUR;
				if(MP_SERVER_GOT.charAt(MP_SERVER_GOT.length - 1) == "@")
				{
					receiving_length = 0;
					MP_SERVER_GOT = MP_SERVER_GOT.slice(0,-1);
					if(DEBUG_MODE)
					{
					}
					while(true)
					{
						sign = MP_SERVER_GOT.lastIndexOf("~");
						if(sign == -1)
						{
							break;
						}
						first_tilda = MP_SERVER_GOT.indexOf("`",sign + 1);
						if(first_tilda == -1)
						{
							throw new Error("Error: Message is incomplete");
						}
						second_tilda = MP_SERVER_GOT.indexOf("`",first_tilda + 1);
						if(second_tilda == -1)
						{
							throw new Error("Error: Message is incomplete");
						}
						last_tilda = MP_SERVER_GOT.indexOf("`",second_tilda + 1);
						if(last_tilda == -1)
						{
							throw new Error("Error: Message is incomplete");
						}
						replace_info = MP_SERVER_GOT.substring(sign + 1,last_tilda);
						parts = replace_info.split("`");
						if(received_packets[parts[0]] == undefined)
						{
							throw new Error("Packet " + parts[0] + " has been forgotten too early. New packet ID is: " + packet_id);
						}
						MP_SERVER_GOT = MP_SERVER_GOT.slice(0,sign) + received_packets[parts[0]].substr(parts[1],parts[2]) + MP_SERVER_GOT.slice(last_tilda + 1);
					}
					if(DEBUG_MODE)
					{
					}
					last_slash = MP_SERVER_GOT.lastIndexOf("/");
					if(last_slash == -1)
					{
						throw new Error("Network protocol requires slash at the end right before packet ID");
					}
					packet_id = Number(MP_SERVER_GOT.slice(last_slash + 1));
					if(DEBUG_MODE)
					{
					}
					MP_last_received_packet = packet_id;
					received_packets[packet_id] = MP_SERVER_GOT;
					MP_SERVER_GOT = MP_SERVER_GOT.substring(0,last_slash);
					MP_SERVER_GOT = MP_SERVER_GOT.split("[^\']").join("`");
					MP_SERVER_GOT = MP_SERVER_GOT.split("[^sw]").join("~");
					MP_SERVER_GOT = MP_SERVER_GOT.split("[^at]").join("@");
					for each(key in received_packets)
					{
						if(Number(key) < packet_id - 4)
						{
							delete received_packets[key];
						}
					}
					if(DEBUG_MODE)
					{
					}
					if(MP_SERVER_GOT.charAt(0) == "$")
					{
						if(currentLabel == "channel")
						{
							if (UDP_socket != null) UDP_socket.close();
							UDP_socket = new NativeDatagramSocket(EXT);
							UDP_socket.addEventListener(DatagramSocketDataEvent.DATA, UDP_socketDataHandler);
							UDP_socket.receive();
							MP_SERVER_GOT = MP_SERVER_GOT.slice(1,MP_SERVER_GOT.length);
						}
						else
						{
							MP_SERVER_GOT = "";
						}
					}
					if(currentLabel == "loginform")
					{
						a = MP_SERVER_GOT.split("|");
						if(a[0] == "ok")
						{
							MP_login_auto_try = false;
							MP_nick = replace("[^I]","|",a[1]);
							skin_model[2] = new int(a[2]);
							skin_model[3] = new int(a[3]);
							MP_clan = a[4];
							if(MP_favor_the_shooter)
							{
								MP_channel = "1";
							}
							else
							{
								MP_channel = "0";
							}
							MP_channel_name = "Match browser";
							gotoAndStop("channel");
						}
						else if(a[0] == "badlogin")
						{
							errtxt.text = "LOGIN IS INCORRECT";
							MP_login_auto_try = false;
							login_login.alpha = 1;
							login_login.enabled = true;
							login_guest.alpha = 1;
							login_guest.enabled = true;
							MP_errored_out = true;
							setTimeout(function():*
							{
								if(MP_errored_out)
								{
									MP_ReconnectToServer();
								}
							},2000);
						}
						else if(a[0] == "badpassword")
						{
							errtxt.text = "WRONG PASSWORD";
							MP_login_auto_try = false;
							login_login.alpha = 1;
							login_login.enabled = true;
							login_guest.alpha = 1;
							login_guest.enabled = true;
							MP_errored_out = true;
							setTimeout(function():*
							{
								if(MP_errored_out)
								{
									MP_ReconnectToServer();
								}
							},2000);
						}
						else if(a[0] == "badversion")
						{
							errtxt.text = "GAME VERSION MISMATCH. RESTART GAME OR DOWNLOAD NEW GAME VERSION FROM WEBSITE";
							MP_login_auto_try = false;
						}
						else if(a[0] == "banaccount")
						{
							errtxt.text = "YOUR ACCOUNT DISABLED FOR SOME REASON. VISIT YOUR PROFILE FOR MORE INFORMATION";
							MP_login_auto_try = false;
						}
						else if(a[0] == "banip")
						{
							errtxt.text = "YOU HAVE NO PERMISSION FOR MULTIPLAYER MODE";
							MP_login_auto_try = false;
						}
						else if(a[0] == "verification")
						{
							errtxt.text = "YOUR ACCOUNT IS NOT VERIFICATED VIA E-MAIL";
							MP_login_auto_try = false;
							login_login.alpha = 1;
							login_login.enabled = true;
							login_guest.alpha = 1;
							login_guest.enabled = true;
						}
						else if(a[0] == "full")
						{
							errtxt.text = "THIS SERVER IS FULL. TRY TO CONNECT TO ANOTHER SERVER OR MAKE ANOTHER ATTEMPT LATER";
							MP_login_auto_try = false;
							login_login.alpha = 1;
							login_login.enabled = true;
							login_guest.alpha = 1;
							login_guest.enabled = true;
						}
						else if(a[0] == "chcking")
						{
							errtxt.text = "PENDING VERIFICATION, PLEASE WAIT...";
							setTimeout(function():*
							{
								if(MP_socket.connected)
								{
									if(Boolean(flogin) && Boolean(fpassword))
									{
										MP_login_auto_try = true;
										if(!GUEST_ACCESS)
										{
											MP_socket_send("l=" + flogin.text + "&p=" + fpassword.text + "&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
										}
										else
										{
											MP_socket_send("l=.guest&p=.guest&v=" + GAME_VERSION + "&h=" + mh + "&rq=login");
										}
									}
									else if(errtxt)
									{
										errtxt.text = "COULD NOT FIND LOGIN FORM? OK THIS SHOULD NOT HAPPEN...";
									}
								}
								else
								{
									MP_login_auto_try = false;
								}
							},100);
						}
						else
						{
							errtxt.text = a[0];
							MP_login_auto_try = false;
							login_login.alpha = 1;
							login_login.enabled = true;
							login_guest.alpha = 1;
							login_guest.enabled = true;
						}
					}
					else if(currentLabel == "mp_root")
					{
						list.visible = true;
						xml = new XML("<r>" + MP_SERVER_GOT + "</r>");
						for each(bookInfo in xml.children())
						{
							a = bookInfo.name();
							b = new Array();
							for each(bookInfo2 in bookInfo.attributes())
							{
								b["#" + bookInfo2.name()] = bookInfo2;
							}
							if(a == "o2")
							{
								if(ch_total == 0)
								{
									temp = list.ch0;
								}
								else
								{
									temp = list.addChild(new mp_room_list());
								}
								temp.y = 23 * ch_total;
								temp.txt.text = b["#n"];
								NoMouse2(temp.txt);
								temp.gotoAndStop(1);
								temp.addEventListener(MouseEvent.CLICK,ch_clk);
								ch_links[ch_total] = b["#f"];
								ch_names[ch_total] = b["#n"];
								++ch_total;
							}
						}
					}
					else if(currentLabel == "channel" && MP_SERVER_GOT.charAt(0) == "<")
					{
						list2.addEventListener(MouseEvent.CLICK,gl_clk);
						firsttag = true;
						xml = new XML("<r>" + MP_SERVER_GOT + "</r>");
						for each(bookInfo in xml.children())
						{
							a = bookInfo.name();
							b = new Array();
							for each(bookInfo2 in bookInfo.attributes())
							{
								b["#" + bookInfo2.name()] = bookInfo2;
							}
							if(a == "st")
							{
								i = 0;
								while(i < ch_total)
								{
									temp2[i].visible = false;
									++i;
								}
								ch_total = 0;
								list2.visible = true;
							}
							if(a == "o")
							{
								if(ch_total == 0)
								{
									temp = list2.ch0;
								}
								else
								{
									temp = list2.addChild(new mp_room_list2());
								}
								temp.visible = true;
								temp2[ch_total] = temp;
								temp.y = 32 * ch_total;
								temp.gotoAndStop(1);
								if(b["#a"] == "2")
								{
									temp.gotoAndStop(2);
								}
								temp.txt.text = Censored(b["#n"]);
								temp.txt2.text = Censored(b["#t"]);
								if(b["#p"] == "yes")
								{
									temp.txt3.text = "private";
								}
								else
								{
									temp.txt3.text = "public";
								}
								temp.txt4.text = Censored(b["#m"]);
								NoMouse2(temp.txt);
								NoMouse2(temp.txt2);
								NoMouse2(temp.txt3);
								NoMouse2(temp.txt4);
								NoMouse2(temp.txt5);
								NoMouse2(temp.txt6);
								NoMouse2(temp.txt7);
								NoMouse2(temp.txt8);
								if(b["#a"] != null)
								{
									if(b["#a"] == "0")
									{
										temp.txt5.text = "no";
									}
									else
									{
										temp.txt5.text = "yes";
									}
								}
								if(b["#g"] != null)
								{
									temp.txt6.text = "?";
									if(b["#g"] == 1)
									{
										temp.txt6.text = "DM";
									}
									if(b["#g"] == 2)
									{
										temp.txt6.text = "COOP";
									}
									if(b["#g"] == 3)
									{
										temp.txt6.text = "TDM";
									}
									if(b["#g"] == 4)
									{
										temp.txt6.text = "CTF";
									}
									if(b["#g"] == 5)
									{
										temp.txt6.text = "CTP";
									}
									if(b["#mods"] == "1")
									{
										temp.txt6.text += " *guns";
									}
								}
								if(b["#q"] != null)
								{
									temp.txt7.text = Censored(b["#q"]);
								}
								if(b["#s"] != null)
								{
									temp.txt8.text = Censored(b["#s"]);
								}
								temp.netcode.text = (int(b["#nt"]) ? "NEW": "OLD") + " Netcode"
								ch_links[ch_total] = b["#f"];
								ch_names[ch_total] = b["#n"];
								ch_pass[ch_total] = b["#p"];
								ch_map[ch_total] = b["#m"];
								ch_app[ch_total] = b["#a"] == "yes";
								ch_test[ch_total] = b["#ts"];
								var anonf2:Function = function():*
								{
									var loader:*;
									var where_to_add:* = undefined;
									where_to_add = temp.img_placeholder;
									if(where_to_add.current_animator_cancel != undefined)
									{
										where_to_add.current_animator_cancel();
									}
									while(temp.img_placeholder.numChildren > 0)
									{
										temp.img_placeholder.removeChildAt(0);
									}
									NoMouse(where_to_add);
									loader = new Loader();
									loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(param1:Event):void
									{
										var bitmap:* = undefined;
										var loc_tim:* = undefined;
										var img_inter:* = undefined;
										var event:Event = param1;
										bitmap = Bitmap(LoaderInfo(event.target).content);
										bitmap.pixelSnapping = PixelSnapping.NEVER;
										bitmap.smoothing = true;
										bitmap.scaleX = 0.25;
										bitmap.scaleY = 0.25;
										bitmap.alpha = 0.2;
										bitmap.y = -10;
										loc_tim = 0;
										where_to_add.current_animator_cancel = function():*
										{
											clearInterval(img_inter);
											where_to_add.current_animator_cancel = undefined;
										};
										img_inter = setInterval(function():*
										{
											if(currentLabel != "channel")
											{
												if(where_to_add.current_animator_cancel != undefined)
												{
													where_to_add.current_animator_cancel();
												}
												return;
											}
											if(bitmap.alpha < 0.7)
											{
												bitmap.alpha = Math.min(0.7,bitmap.alpha + 0.2);
											}
											bitmap.y = -10 + Math.sin(loc_tim) * 10;
											loc_tim += 0.0066;
										},16);
										where_to_add.addChild(bitmap);
									});
									loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,function(param1:IOErrorEvent):*
									{
									});
									if(https_probability >= http_probability)
									{
										loader.load(new URLRequest(MP_map_preview_server + "?id=" + b["#m"]));
									}
									else
									{
										loader.load(new URLRequest(MP_map_preview_server + "?id=" + b["#m"]));
									}
								};
								anonf2();
								++ch_total;
							}
							if(a == "cok")
							{
								// chat_msg.type = TextFieldType.INPUT;
								// chat_send.enabled = true;
							}
							if(a == "jrm")
							{
								list2.removeEventListener(MouseEvent.CLICK,gl_clk);
								MP_room = b["#to"];
								removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
								gotoAndStop("room");
							}
						}
						if (autostart_mp_create != null && ggg != null) {
							var asmp:Object = autostart_mp_create;
							match_create(asmp.name, asmp.map, int(asmp.max), int(asmp.gm), asmp.rnk == "1", asmp.psw, asmp.ping, asmp.mods, int(asmp.net), asmp.test);
							autostart_mp_create = null;
						}
						else if (autostart_mp_join != "" && (ch_total != 0)) {
							for (var i:int = 0; i < ch_total; i++) {
								if (ch_links[i] == autostart_mp_join) {
									match_join(i, "", false);
									break;
								}
							}
							autostart_mp_join = "";
						}
					}
					else if(currentLabel == "gaming")
					{
						MP_get_done_STR = MP_SERVER_GOT;
						MP_get_done_HAP = true;	
					}
					else if(currentLabel == "room")
					{
						if(MP_SERVER_GOT.charAt(0) != "<")
						{
							MP_get_done_pre(MP_SERVER_GOT);
						}
					}
					MP_SERVER_GOT = "";
				}
			}
			catch(e:Error)
			{
				NetCodeError("PROGRESS " + e);
			}
		}
		
		public function MP_s_securityErrorHandler(param1:SecurityErrorEvent) : void
		{
			var _loc2_:String = null;
			var _loc3_:Array = null;
			var _loc4_:Array = null;
			var _loc5_:String = null;
			var _loc6_:Number = NaN;
			if(currentLabel == "loginform")
			{
				errtxt.text = "Unable to connect to picked server, if you do not think it is your network issue, contact specific MP server hoster.";
			}
		}
		
		public function IgnoreGunPickTemp(param1:*) : void
		{
			var _loc2_:int = 0;
			while(_loc2_ < temp_ignore_gun_pick.length)
			{
				if(temp_ignore_gun_pick[_loc2_].mc == param1)
				{
					temp_ignore_gun_pick[_loc2_].timer = getTimer();
					return;
				}
				_loc2_++;
			}
			temp_ignore_gun_pick.push({
				"mc":param1,
				"timer":getTimer()
			});
		}
		
		public function IgnoreGunPickTempCanI(param1:*) : Boolean
		{
			var _loc2_:int = 0;
			while(_loc2_ < temp_ignore_gun_pick.length)
			{
				if(temp_ignore_gun_pick[_loc2_].mc == param1)
				{
					if(getTimer() < temp_ignore_gun_pick[_loc2_].timer + 1000)
					{
						return false;
					}
					temp_ignore_gun_pick.splice(_loc2_,1);
					break;
				}
				_loc2_++;
			}
			return true;
		}
		
		public function ApplyLoweredHP(param1:*, param2:*, param3:*, param4:*) : void
		{
			var _loc5_:int = 0;
			while(_loc5_ < temp_keep_dmg_belows.length)
			{
				if(temp_keep_dmg_belows[_loc5_].mc == param1)
				{
					temp_keep_dmg_belows[_loc5_].timer = getTimer();
					temp_keep_dmg_belows[_loc5_].hea = Math.min(param2,temp_keep_dmg_belows[_loc5_].hea);
					temp_keep_dmg_belows[_loc5_].min_hp = Math.max(param4,temp_keep_dmg_belows[_loc5_].min_hp);
					if(temp_keep_dmg_belows[_loc5_].min_hp > param2)
					{
						temp_keep_dmg_belows[_loc5_].min_hp = param2;
					}
					if(param3)
					{
						temp_keep_dmg_belows[_loc5_].dying = param3;
					}
					return;
				}
				_loc5_++;
			}
			temp_keep_dmg_belows.push({
				"mc":param1,
				"timer":getTimer(),
				"hea":param2,
				"min_hp":param4,
				"dying":param3
			});
		}
		
		public function GetPlayerTempAffectionObj(param1:*) : Object
		{
			var _loc2_:int = 0;
			while(_loc2_ < temp_keep_dmg_belows.length)
			{
				if(temp_keep_dmg_belows[_loc2_].mc == param1)
				{
					if(getTimer() < temp_keep_dmg_belows[_loc2_].timer + Number(param1.ping) * 3 + Number(mens[MP_myid].ping) * 3 + 150)
					{
						return temp_keep_dmg_belows[_loc2_];
					}
					temp_keep_dmg_belows.splice(_loc2_,1);
					break;
				}
				_loc2_++;
			}
			return null;
		}
		
		public function AdjustToPlayerAllowedHP(param1:*, param2:*) : Number
		{
			var _loc3_:Object = GetPlayerTempAffectionObj(param1);
			if(_loc3_ == null)
			{
				return param2;
			}
			if(param2 > _loc3_.hea)
			{
				param2 = _loc3_.hea;
			}
			if(param2 < _loc3_.min_hp)
			{
				param2 = _loc3_.min_hp;
			}
			return param2;
		}
		
		public function GetPlayerShouldBeDying(param1:*) : Boolean
		{
			var _loc2_:Object = GetPlayerTempAffectionObj(param1);
			if(_loc2_ == null)
			{
				return false;
			}
			return _loc2_.dying;
		}
		
		public function GetPlayerAllowLimbHPStabChange(param1:*) : Boolean
		{
			return GetPlayerTempAffectionObj(param1) == null;
		}
		
		public function IncludeRegenInHPLimit(param1:*, param2:*) : void
		{
			var _loc3_:Object = GetPlayerTempAffectionObj(param1);
			if(_loc3_ == null)
			{
				return;
			}
			_loc3_.hea += param2;
		}
		
		public function AllowExtraBulletClassSync(param1:MovieClip) : Boolean
		{
			return param1.cclass == 1 || param1.cclass == 4 || param1.cclass == 5 || param1.cclass == 6 && param1.nadekind != 1 && param1.nadekind != 2 && param1.nadekind != 3;
		}
		
		public function SyncBulletApprox(param1:*) : void
		{
			if(MP_mode)
			{
				if(param1.master == MP_myid)
				{
					if(AllowExtraBulletClassSync(param1))
					{
						MP_custom_events += ";t|" + [MP_myid,r2(param1.x),r2(param1.y),Number(param1.currentFrame) * (!!param1.visible ? 1 : -1)].join("#");
					}
				}
			}
import com.pb2.PB2Trigger;


		}
		
		public function AddItemToHero1(param1:String, param2:int) : void
		{
			var _loc3_:* = inventoryA.length;
			inventoryA[_loc3_] = new Object();
			inventoryA[_loc3_].mdl = param1;
			inventoryA[_loc3_].upg = param2;
		}
		
		public function AddItemToHero2(param1:String, param2:int) : void
		{
			var _loc3_:* = inventoryB.length;
			inventoryB[_loc3_] = new Object();
			inventoryB[_loc3_].mdl = param1;
			inventoryB[_loc3_].upg = param2;
		}
		
		public function AddItemToHero3(param1:String, param2:int) : void
		{
			var _loc3_:* = inventoryC.length;
			inventoryC[_loc3_] = new Object();
			inventoryC[_loc3_].mdl = param1;
			inventoryC[_loc3_].upg = param2;
		}
		
		public function AddItemToHero4(param1:String, param2:int) : void
		{
			var _loc3_:* = inventoryD.length;
			inventoryD[_loc3_] = new Object();
			inventoryD[_loc3_].mdl = param1;
			inventoryD[_loc3_].upg = param2;
		}
		
		public function RestoreLimbColor(param1:MovieClip) : void
		{
			param1.filters = new Array(clrs[0]);
		}
		
		public function UpdatePlayerColorSP(param1:MovieClip, param2:int) : void
		{
			if(!MP_mode)
			{
				if(param2 == 0 || param2 == 1)
				{
					param1.head.filters = new Array(clrs[skin_color_head[param2]]);
					param1.body.filters = new Array(clrs[skin_color_body[param2]]);
					param1.arm1.upper.filters = new Array(clrs[skin_color_arms[param2]]);
					param1.arm1.lower.filters = new Array(clrs[skin_color_arms[param2]]);
					param1.arm2.upper.filters = new Array(clrs[skin_color_arms[param2]]);
					param1.arm2.lower.filters = new Array(clrs[skin_color_arms[param2]]);
					param1.leg1.upper.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.leg1.middle.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.leg1.lower.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.leg2.upper.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.leg2.middle.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.leg2.lower.filters = new Array(clrs[skin_color_legs[param2]]);
					param1.toe.filters = new Array(clrs[skin_color_legs[param2]]);
				}
			}
		}
		
		public function BlueHue(param1:String) : ColorMatrixFilter
		{
			var _loc3_:* = undefined;
			var _loc4_:* = undefined;
			var _loc5_:Number = NaN;
			var _loc6_:* = undefined;
			var _loc2_:ColorMatrixFilter = new ColorMatrixFilter();
			if(param1 != "-")
			{
				if(!isNaN(parseInt(param1,10)) && clrs[parseInt(param1,10)] != undefined)
				{
					_loc2_ = clrs[int(param1)];
				}
				else
				{
					_loc3_ = MPclr[param1][0];
					_loc4_ = MPclr[param1][1];
					_loc5_ = Number(MPclr[param1][2]);
					_loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = (_loc6_ = new Array()).concat([_loc3_ * 0.3,_loc3_ * 0.4 + _loc4_ * 0.2,_loc3_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc4_ * 0.3 + _loc3_ * 0.2,_loc4_ * 0.4,_loc4_ * 0.6 + _loc5_ * 0.2,0,0])).concat([_loc5_ * 0.3 + _loc3_ * 0.2,_loc5_ * 0.4 + _loc4_ * 0.2,_loc5_ * 0.6,0,0])).concat([0,0,0,1,0]);
					_loc2_.matrix = _loc6_;
				}
			}
			return _loc2_;
		}
		
		public function UpdatePlayerColorMP(param1:MovieClip, param2:Boolean = false) : void
		{
			var _loc3_:ColorMatrixFilter = BlueHue(param1.palette[0]);
			var _loc4_:ColorMatrixFilter = BlueHue(param1.palette[1]);
			var _loc5_:ColorMatrixFilter = BlueHue(param1.palette[2]);
			var _loc6_:ColorMatrixFilter = BlueHue(param1.palette[3]);
			param1.head.filters = new Array(_loc3_);
			param1.body.filters = new Array(_loc6_);
			param1.arm1.upper.filters = new Array(_loc4_);
			param1.arm1.lower.filters = new Array(_loc4_);
			param1.arm2.upper.filters = new Array(_loc4_);
			param1.arm2.lower.filters = new Array(_loc4_);
			param1.leg1.upper.filters = new Array(_loc5_);
			param1.leg1.middle.filters = new Array(_loc5_);
			param1.leg1.lower.filters = new Array(_loc5_);
			param1.leg2.upper.filters = new Array(_loc5_);
			param1.leg2.middle.filters = new Array(_loc5_);
			param1.leg2.lower.filters = new Array(_loc5_);
			param1.toe.filters = new Array(_loc5_);
		}
		
		public function LoadGame() : void
		{
			if(my_so.data.plays == 0 || isNaN(my_so.data.plays))
			{
				FIRST_RUN = true;
				my_so.data.plays = 1;
				FIRST_TIME = true;
				my_so.data["skin_model" + 0] = 40;
				my_so.data["skin_model" + 1] = 60;
				my_so.data["skin_model" + 2] = 2;
				my_so.data["armorA"] = 0;
				my_so.data["armorB"] = 0;
				my_so.data["curA"] = 0;
				my_so.data["curB"] = 0;
				my_so.data["last_mp"] = launchArguments.default_server != undefined ? int(launchArguments.default_server) : 0;
				my_so.data["psychoblood_mode"] = 1;
				my_so.data["framerate"] = 3;
				i = 0;
				while(i < BADGES_TOTAL)
				{
					my_so.data["bdg" + i] = 0;
					++i;
				}
				my_so.data["cmpg_nick"] = "";
				my_so.data["lvls_passed"] = 0;
				my_so.data["money"] = 200;
				i = 0;
				while(i < 3)
				{
					my_so.data["skin_color_head" + i] = 0;
					my_so.data["skin_color_body" + i] = 0;
					my_so.data["skin_color_arms" + i] = 0;
					my_so.data["skin_color_legs" + i] = 0;
					++i;
				}
				my_so.data["inv1_len"] = 3;
				my_so.data["inv1_0mdl"] = "gun_pistol";
				my_so.data["inv1_1mdl"] = "gun_rifle";
				my_so.data["inv1_2mdl"] = "gun_shotgun";
				my_so.data["inv1_3mdl"] = "item_grenade";
				my_so.data["inv1_4mdl"] = "item_grenade";
				my_so.data["inv1_5mdl"] = "item_grenade";
				my_so.data["inv1_0upg"] = 0;
				my_so.data["inv1_1upg"] = 0;
				my_so.data["inv1_2upg"] = 0;
				my_so.data["inv1_3upg"] = 0;
				my_so.data["inv1_4upg"] = 0;
				my_so.data["inv1_5upg"] = 0;
				my_so.data["inv2_len"] = 1;
				my_so.data["inv2_0mdl"] = "gun_real_shotgun";
				my_so.data["inv2_0upg"] = 0;
				my_so.data["MP_default_set"] = 1;
				my_so.data["mouse_wheel"] = true;
				my_so.data["OVERSCROLL"] = true;
				my_so.data["RECONNECT_ON_LOST_CONNECTION"] = true;
				my_so.data["BEEP_ON_DEATH"] = true;
				my_so.data["HIT_SOUNDS"] = false;
				my_so.data["SCREEN_FADE_EFFECTS"] = true;
				my_so.data["SHOW_EXP_BAR"] = 2;
				// my_so.data["RASTERIZE_GRAPHICS"] = false;
				my_so.data["CUSTOM_BACKGROUND"] = false;
				my_so.data["DRAW_3D"] = false;
				my_so.data["MP_AUTO_LOGIN"] = false;
				my_so.data["super_computer"] = false;
				my_so.data["ragdoll_collide"] = false;
				my_so.data["im_a_cheater"] = false;
				my_so.data["lite_phys"] = false;
				my_so.data["auto_pick_new_weps"] = true;
				my_so.data["soft_screen"] = true;
				my_so.data["screen_effects"] = true;
				my_so.data["violence"] = true;
				my_so.data["altcur"] = true;
				my_so.data["censoreship"] = false;
				my_so.data["display_chat"] = 2;
				my_so.data["fx_vol"] = 0.5;
				my_so.data["music_vol"] = 0.5;
				my_so.data["CUSTOM_MUSIC_VOLUME"] = 0.5;
				my_so.data["hq"] = true;
				my_so.data["easy_mode"] = false;
				my_so.data["pro_bots"] = false;
				my_so.data["LOW_HPS"] = false;
				my_so.data["hints"] = true;
				my_so.data["tooltips"] = true;
				my_so.data["menu_hue"] = 0;
				my_so.data["map_qp_sp"] = "";
				my_so.data["map_qp_mp"] = "";
			}
			else
			{
				++my_so.data.plays;
				FIRST_RUN = false;
			}
			skin_model[0] = int(my_so.data["skin_model" + 0]);
			skin_model[1] = int(my_so.data["skin_model" + 1]);
			skin_model[2] = int(my_so.data["skin_model" + 2]);
			armorA = int(my_so.data["armorA"]);
			armorB = int(my_so.data["armorB"]);
			curA = my_so.data["curA"];
			curB = my_so.data["curB"];
			LAST_SERVER_UID = int(my_so.data["last_mp"]);
			CMPG_money = int(my_so.data["money"]);
			CMPG_name = String(my_so.data["cmpg_nick"]);
			LEVELS_PASSED = int(my_so.data["lvls_passed"]);
			i = 0;
			while(i < 3)
			{
				skin_color_head[i] = int(my_so.data["skin_color_head" + i]);
				skin_color_body[i] = int(my_so.data["skin_color_body" + i]);
				skin_color_arms[i] = int(my_so.data["skin_color_arms" + i]);
				skin_color_legs[i] = int(my_so.data["skin_color_legs" + i]);
				++i;
			}
			i = 0;
			while(i < BADGES_TOTAL)
			{
				BADGE_STAT[i] = my_so.data["bdg" + i];
				if(BADGE_STAT[i] >= BADGE_STAT_MAX[i])
				{
					BADGE_REACHED[i] = true;
				}
				else
				{
					BADGE_REACHED[i] = false;
				}
				++i;
			}
			inventoryA = new Array();
			inventoryB = new Array();
			i2 = int(my_so.data["inv1_len"]);
			i = 0;
			while(i < i2)
			{
				AddItemToHero1(my_so.data["inv1_" + i + "mdl"],int(my_so.data["inv1_" + i + "upg"]));
				++i;
			}
			i2 = int(my_so.data["inv2_len"]);
			i = 0;
			while(i < i2)
			{
				AddItemToHero2(my_so.data["inv2_" + i + "mdl"],int(my_so.data["inv2_" + i + "upg"]));
				++i;
			}
			SUPER_COMPUTER = Boolean(my_so.data["super_computer"]);
			RAGDOLL_COLLIDE = Boolean(my_so.data["ragdoll_collide"]);
			IM_A_CHEATER = my_so.data["im_a_cheater"];
			LITE_PHYS = Boolean(my_so.data["lite_phys"]);
			AUTO_PICK_NEW_WEPS = Boolean(my_so.data["auto_pick_new_weps"]);
			SOFT_SCREEN = Boolean(my_so.data["soft_screen"]);
			SCREEN_EFFECTS = Boolean(my_so.data["screen_effects"]);
			VIOLENCE = Boolean(my_so.data["violence"]);
			ALTCUR = Boolean(my_so.data["altcur"]);
			CENSORESHIP = Boolean(my_so.data["censoreship"]);
			if(my_so.data["display_chat"] == undefined)
			{
				DISPLAY_CHAT = 2;
			}
			else if(my_so.data["display_chat"] is Boolean)
			{
				DISPLAY_CHAT = !!my_so.data["display_chat"] ? 2 : 1;
			}
			else
			{
				DISPLAY_CHAT = int(my_so.data["display_chat"]);
			}
			if(my_so.data["psychoblood_mode"] == undefined)
			{
				PSYCHOBLOOD_MODE = 2;
			}
			else
			{
				PSYCHOBLOOD_MODE = int(my_so.data["psychoblood_mode"]);
			}
			if(my_so.data["framerate"] == undefined)
			{
				FRAMERATE = 3;
			}
			else
			{
				FRAMERATE = int(my_so.data["framerate"]);
			}
			UpdateFramerate();
			FX_VOLUME = Number(my_so.data["fx_vol"]);
			MUSIC_VOLUME = Number(my_so.data["music_vol"]);
			CUSTOM_MUSIC_VOLUME = Number(my_so.data["CUSTOM_MUSIC_VOLUME"]);
			HQ = Boolean(my_so.data["hq"]);
			EASY_MODE = Boolean(my_so.data["easy_mode"]);
			LOW_HPS = Boolean(my_so.data["LOW_HPS"]);
			PRO_BOTS = Boolean(my_so.data["pro_bots"]);
			HINTS = Boolean(my_so.data["hints"]);
			TOOLTIPS = Boolean(my_so.data["tooltips"]);
			if(my_so.data["mouse_wheel"] == undefined)
			{
				MOUSE_WHEEL = true;
			}
			else
			{
				MOUSE_WHEEL = Boolean(my_so.data["mouse_wheel"]);
			}
			if(my_so.data["OVERSCROLL"] == undefined)
			{
				OVERSCROLL = true;
			}
			else
			{
				OVERSCROLL = Boolean(my_so.data["OVERSCROLL"]);
			}
			if(my_so.data["RECONNECT_ON_LOST_CONNECTION"] == undefined)
			{
				RECONNECT_ON_LOST_CONNECTION = true;
			}
			else
			{
				RECONNECT_ON_LOST_CONNECTION = Boolean(my_so.data["RECONNECT_ON_LOST_CONNECTION"]);
			}
			if(my_so.data["BEEP_ON_DEATH"] == undefined)
			{
				BEEP_ON_DEATH = true;
			}
			else
			{
				BEEP_ON_DEATH = Boolean(my_so.data["BEEP_ON_DEATH"]);
			}
			if(my_so.data["HIT_SOUNDS"] == undefined)
			{
				HIT_SOUNDS = false;
			}
			else
			{
				HIT_SOUNDS = Boolean(my_so.data["HIT_SOUNDS"]);
			}
			if(my_so.data["SCREEN_FADE_EFFECTS"] == undefined)
			{
				SCREEN_FADE_EFFECTS = true;
			}
			else
			{
				SCREEN_FADE_EFFECTS = Boolean(my_so.data["SCREEN_FADE_EFFECTS"]);
			}
			if(my_so.data["SHOW_EXP_BAR"] == undefined)
			{
				SHOW_EXP_BAR = 2;
			}
			else
			{
				SHOW_EXP_BAR = int(my_so.data["SHOW_EXP_BAR"]);
			}
			if(my_so.data["MP_AUTO_LOGIN"] == undefined)
			{
				MP_AUTO_LOGIN = false;
			}
			else
			{
				MP_AUTO_LOGIN = Boolean(my_so.data["MP_AUTO_LOGIN"]);
			}
			/*if(my_so.data["RASTERIZE_GRAPHICS"] == undefined)
			{
				RASTERIZE_GRAPHICS = false;
			}
			else
			{
				RASTERIZE_GRAPHICS = Boolean(my_so.data["RASTERIZE_GRAPHICS"]);
			}*/
			if(my_so.data["CUSTOM_BACKGROUND"] == undefined)
			{
				CUSTOM_BACKGROUND = false;
			}
			else
			{
				CUSTOM_BACKGROUND = Boolean(my_so.data["CUSTOM_BACKGROUND"]);
			}
			if(my_so.data["DRAW_3D"] == undefined)
			{
				DRAW_3D = false;
			}
			else
			{
				DRAW_3D = Boolean(my_so.data["DRAW_3D"]);
			}
			if(my_so.data["MP_default_set"] == undefined)
			{
				MP_default_set = 1;
			}
			else
			{
				MP_default_set = int(my_so.data["MP_default_set"]);
			}
			if(my_so.data["menu_hue"] == undefined)
			{
				menu_hue = 0;
			}
			else
			{
				menu_hue = Number(my_so.data["menu_hue"]);
			}
			if(my_so.data["map_qp_sp"] != undefined)
			{
				map_qp_sp = my_so.data["map_qp_sp"];
			}
			if(my_so.data["map_qp_mp"] != undefined)
			{
				map_qp_mp = my_so.data["map_qp_mp"];
			}
			customServers = new Vector.<Vector.<String>>();
			if (my_so.data["addedServers"] != undefined) {
				for each (var serverString in my_so.data["addedServers"].split(";")) {
					var splt = serverString.split("|");
					customServers.push( new <String>[splt[0], splt[1], splt[2]] );
				}
			}
		}
		
		public function nicknameproceed() : void
		{
			if(mdialog.nickname.text == "")
			{
				mdialog.nickname.text = "Type Your Name Here";
			}
			else if(mdialog.nickname.text == "Type Your Name Here")
			{
				mdialog.nickname.text = "Type Your Name Here!";
			}
			else if(mdialog.nickname.text == "Type Your Name Here!")
			{
				mdialog.nickname.text = "Type Your Name Here!!";
			}
			else if(mdialog.nickname.text == "Type Your Name Here!!")
			{
				mdialog.nickname.text = "Type Your Name Here!!!";
			}
			else if(mdialog.nickname.text == "Type Your Name Here!!!")
			{
				i4 = Math.floor(Math.random() * 9.9);
				if(i4 == 0)
				{
					mdialog.nickname.text = "Shas\'O Kais";
				}
				if(i4 == 1)
				{
					mdialog.nickname.text = "O\'Shovah";
				}
				if(i4 == 2)
				{
					mdialog.nickname.text = "Warper";
				}
				if(i4 == 3)
				{
					mdialog.nickname.text = "The Chosen Twice";
				}
				if(i4 == 4)
				{
					mdialog.nickname.text = "Teddy Bear";
				}
				if(i4 == 5)
				{
					mdialog.nickname.text = "Super Butterfly";
				}
				if(i4 == 6)
				{
					mdialog.nickname.text = "Obi-1";
				}
				if(i4 == 7)
				{
					mdialog.nickname.text = "Tux";
				}
				if(i4 == 8)
				{
					mdialog.nickname.text = "Tootsie Poopsie";
				}
				if(i4 == 9)
				{
					mdialog.nickname.text = "Thomas Sorenson";
				}
			}
			else
			{
				if(FIRST_RUN)
				{
					MP_nick = mdialog.nickname.text;
				}
				if(CMPG_name != mdialog.nickname.text)
				{
					CMPG_name = mdialog.nickname.text;
					SaveGame();
				}
				mdialog.visible = false;
				removeChild(intro_base);
				removeChild(mdialog);
				removeChild(intro_vers);
				removeChild(intro_btcb);
				gotoAndStop("ads");
				if(MP_AUTO_LOGIN || MAP_TESTING)
				{
					intro_done();
				}
			}
		}
		
		public function SaveGame() : void
		{
			my_so.data["skin_model" + 0] = skin_model[0];
			my_so.data["skin_model" + 1] = skin_model[1];
			my_so.data["skin_model" + 2] = skin_model[2];
			my_so.data["armorA"] = armorA;
			my_so.data["armorB"] = armorB;
			my_so.data["curA"] = curA;
			my_so.data["curB"] = curB;
			my_so.data["money"] = CMPG_money;
			my_so.data["cmpg_nick"] = CMPG_name;
			my_so.data["lvls_passed"] = LEVELS_PASSED;
			my_so.data["last_mp"] = LAST_SERVER_UID;
			my_so.data["psychoblood_mode"] = PSYCHOBLOOD_MODE;
			my_so.data["framerate"] = FRAMERATE;
			save_i = 0;
			while(i < save_i)
			{
				my_so.data["skin_color_head" + save_i] = skin_color_head[save_i];
				my_so.data["skin_color_body" + save_i] = skin_color_body[save_i];
				my_so.data["skin_color_arms" + save_i] = skin_color_arms[save_i];
				my_so.data["skin_color_legs" + save_i] = skin_color_legs[save_i];
				++i;
			}
			save_i = 0;
			while(save_i < BADGES_TOTAL)
			{
				my_so.data["bdg" + save_i] = BADGE_STAT[save_i];
				++save_i;
			}
			my_so.data["inv1_len"] = inventoryA.length;
			save_i = 0;
			while(save_i < inventoryA.length)
			{
				my_so.data["inv1_" + save_i + "mdl"] = inventoryA[save_i].mdl;
				my_so.data["inv1_" + save_i + "upg"] = inventoryA[save_i].upg;
				++save_i;
			}
			my_so.data["inv2_len"] = inventoryB.length;
			save_i = 0;
			while(save_i < inventoryB.length)
			{
				my_so.data["inv2_" + save_i + "mdl"] = inventoryB[save_i].mdl;
				my_so.data["inv2_" + save_i + "upg"] = inventoryB[save_i].upg;
				++save_i;
			}
			my_so.data["super_computer"] = SUPER_COMPUTER;
			my_so.data["ragdoll_collide"] = RAGDOLL_COLLIDE;
			my_so.data["im_a_cheater"] = IM_A_CHEATER;
			my_so.data["lite_phys"] = LITE_PHYS;
			my_so.data["auto_pick_new_weps"] = AUTO_PICK_NEW_WEPS;
			my_so.data["soft_screen"] = SOFT_SCREEN;
			my_so.data["screen_effects"] = SCREEN_EFFECTS;
			my_so.data["violence"] = VIOLENCE;
			my_so.data["altcur"] = ALTCUR;
			my_so.data["censoreship"] = CENSORESHIP;
			my_so.data["display_chat"] = DISPLAY_CHAT;
			my_so.data["fx_vol"] = FX_VOLUME;
			my_so.data["music_vol"] = MUSIC_VOLUME;
			my_so.data["CUSTOM_MUSIC_VOLUME"] = CUSTOM_MUSIC_VOLUME;
			my_so.data["hq"] = HQ;
			my_so.data["mouse_wheel"] = MOUSE_WHEEL;
			my_so.data["OVERSCROLL"] = OVERSCROLL;
			my_so.data["RECONNECT_ON_LOST_CONNECTION"] = RECONNECT_ON_LOST_CONNECTION;
			my_so.data["BEEP_ON_DEATH"] = BEEP_ON_DEATH;
			my_so.data["HIT_SOUNDS"] = HIT_SOUNDS;
			my_so.data["SCREEN_FADE_EFFECTS"] = SCREEN_FADE_EFFECTS;
			my_so.data["SHOW_EXP_BAR"] = SHOW_EXP_BAR;
			// my_so.data["RASTERIZE_GRAPHICS"] = RASTERIZE_GRAPHICS;
			my_so.data["CUSTOM_BACKGROUND"] = CUSTOM_BACKGROUND;
			my_so.data["DRAW_3D"] = DRAW_3D;
			my_so.data["MP_AUTO_LOGIN"] = MP_AUTO_LOGIN;
			my_so.data["easy_mode"] = EASY_MODE;
			my_so.data["LOW_HPS"] = LOW_HPS;
			my_so.data["pro_bots"] = PRO_BOTS;
			my_so.data["hints"] = HINTS;
			my_so.data["tooltips"] = TOOLTIPS;
			my_so.data["MP_default_set"] = MP_default_set;
			my_so.data["menu_hue"] = menu_hue;
			my_so.data["map_qp_sp"] = map_qp_sp;
			my_so.data["map_qp_mp"] = map_qp_mp;
			var addingServers = new Vector.<String>();
			for each (var serverVector in customServers) {
				addingServers.push(serverVector.join("|"));
			}
			my_so.data["addedServers"] = addingServers.join(";");
			try
			{
				my_so.flush();
			}
			catch(e:Error)
			{
				LAST_ERROR = "Warning: Save data might be not available without account (Flash Player and/or web browser issue).";
			}
			NetworkSave();
		}
		
		public function ShowNoAch() : void
		{
			if(!FORCE_CUSTOM_MAP)
			{
				ChatNewMsg("<font color=\"#a16d4b\">WARNING: Use of cheats disables Achievements. You can clear all saved data at:</font>");
				ChatNewMsg("<font color=\"#a16d4b\">                    Main menu &gt; Settings &amp; Performance &gt; Export game state &gt; Clear all saved data.</font>");
			}
		}
		
		public function replace(param1:String, param2:String, param3:String) : String
		{
			if(param3 != null && param3 != "")
			{
				return param3.split(param1).join(param2);
			}
			return "";
		}
		
		public function Dist3Dm(x:Number, y:Number, z:Number) : Number
		{
			return Math.sqrt(x * x + y * y + z * z);
		}
		
		public function PlaySound(src:PB2Sound, x:Number, y:Number, attached_obj:SoundAttachable = null) : void {
			if (!NONMUTE) return;
			if (!(game.visible || RENDERING_3D)) return;

			if(s_channel[last_channel] != null) s_channel[last_channel].stop();
			smod = dist_to_face / Dist3Dm(x * game_scale + game.x - 400 - 300, y * game_scale + game.y - 200, dist_to_face);
			smod2 = dist_to_face / Dist3Dm(x * game_scale + game.x - 400 + 300, y * game_scale + game.y - 200, dist_to_face);
			vol3d[last_channel].volume = vol.volume * src.custom_volume;
			vol3d[last_channel].leftToLeft = smod2;
			vol3d[last_channel].leftToRight = 0;
			vol3d[last_channel].rightToRight = smod;
			vol3d[last_channel].rightToLeft = 0;
			s_channel[last_channel] = src.play(0, 0, vol3d[last_channel]);
			if(attached_obj != null) {
				var callback:Function = function():void {
					attached_obj.attached_sound.removeEventListener(Event.SOUND_COMPLETE, callback);
					attached_obj.attached_sound = null;
				};
				if(attached_obj.attached_sound != null) {
					attached_obj.attached_sound.removeEventListener(Event.SOUND_COMPLETE, callback);
					attached_obj.attached_sound.stop();
				}
				attached_obj.attached_sound = s_channel[last_channel];
				attached_obj.attached_sound.addEventListener(Event.SOUND_COMPLETE, callback);
			}
			if(++last_channel >= max_channels) last_channel = 0;
		}
		
		public function PlaySound_full(src:PB2Sound) : void
		{
			if(NONMUTE)
			{
				if(currentFrameLabel != "gaming" || (game.visible || RENDERING_3D))
				{
					if(s_channel[last_channel] != null)
					{
						s_channel[last_channel].stop();
					}
					vol3d[last_channel].volume = vol.volume * src.custom_volume;
					vol3d[last_channel].leftToLeft = 1;
					vol3d[last_channel].leftToRight = 0;
					vol3d[last_channel].rightToRight = 1;
					vol3d[last_channel].rightToLeft = 0;
					s_channel[last_channel] = src.play(0,0,vol3d[last_channel]);
					++last_channel;
					if(last_channel >= max_channels)
					{
						last_channel = 0;
					}
				}
			}
		}
		
		public function StopAllSounds() : void
		{
			last_channel = 0;
			while(last_channel < max_channels)
			{
				if(s_channel[last_channel] != null)
				{
					s_channel[last_channel].stop();
				}
				++last_channel;
			}
			last_channel = 0;
		}
		
		public function NoMouse(param1:MovieClip) : void
		{
			param1.mouseEnabled = false;
			param1.mouseChildren = false;
		}
		
		public function NoMouse2(param1:*) : void
		{
			param1.mouseEnabled = false;
		}
		
		/*
		public function mouseMoveHandler(param1:MouseEvent) : void
		{
			momove = true;
		}
		*/
		
		public function lib(soundName:String, custom_volume:Number = 1) : Sound
		{
			var soundClass:Class = getDefinitionByName(soundName) as Class;
			var sound:PB2Sound;
			(sound = new soundClass()).custom_volume = custom_volume;
			return sound;
		}
		
		public function LibSoundStringArray(param1:Number, param2:Array) : Array
		{
			var _loc3_:int = 0;
			while(_loc3_ < param2.length)
			{
				param2[_loc3_] = lib(param2[_loc3_], param1);
				_loc3_++;
			}
			return param2;
		}
		
		public function DamageReport(damage:Number) : void
		{
			if(HIT_SOUNDS)
			{
				hit_frame_damage += damage;
			}
		}
		
		public function FragReport(param1:Boolean, player_mc:player) : void
		{
			if(!param1)
			{
				if(!(MP_app && MP_mode && Boolean(player_mc.isplayer)))
				{
					if(!player_mc.isplayer)
					{
						ExpTask(EXP_TYPE_KILL_ENEMY_NON_PLAYER,player_mc.nick);
					}
				}
			}
			if(HIT_SOUNDS)
			{
				if(hit_frags.indexOf(player_mc) == -1)
				{
					hit_frags.push(player_mc);
				}
			}
		}
		
		public function DamageSoundLogic(param1:Number) : void
		{
			var GSPEED:Number = param1;
			if(HIT_SOUNDS)
			{
				// hit_last_target = null;
				if(hit_frags_timer > 0)
				{
					hit_frags_timer -= GSPEED;
				}
				else if(hit_frags.length > 0)
				{
					hit_frags.shift();
					hit_frags_timer = 15;
					setTimeout(function():void
					{
						PlaySound_full(s_hit_frag);
					},500);
				}
				if(hit_frame_damage > 0)
				{
					if(hit_frame_damage >= 100)
					{
						PlaySound_full(s_hit_dmg3);
					}
					else if(hit_frame_damage >= 50)
					{
						PlaySound_full(s_hit_dmg2);
					}
					else
					{
						PlaySound_full(s_hit_dmg);
					}
					hit_frame_damage = 0;
				}
			}
		}
		
		public function SetAtomOriginalPosition(param1:int, param2:Number, param3:Number) : void
		{
			atom_first_position_corrections.push({
				"a":param1,
				"x":param2,
				"y":param3
			});
		}
		
		public function GetAtomOriginalPosition(param1:int) : Object
		{
			var _loc3_:Object = null;
			var _loc2_:int = 0;
			while(_loc2_ < atom_first_position_corrections.length)
			{
				if(atom_first_position_corrections[_loc2_].a == param1)
				{
					_loc3_ = atom_first_position_corrections[_loc2_];
					atom_first_position_corrections.splice(_loc2_,1);
					return _loc3_;
				}
				_loc2_++;
			}
			return null;
		}
		
		public function handleHpBeep(e:Event) : void
		{
			try
			{
				hpbeepch.removeEventListener(Event.SOUND_COMPLETE,handleHpBeep);
				if(currentLabel == "gaming")
				{
					if(system_non_stop)
					{
						if(hpwarning)
						{
							if(!mens[MP_myid].dead)
							{
								if(Number(mens[MP_myid].hea) / Number(mens[MP_myid].hmax) < hp_warn_max)
								{
									if(!MP_spectator)
									{
										if(GLOBAL_REGEN_SPEED != 0)
										{
											if(GLOBAL_REGEN_DELAY < 10)
											{
												hpbeepch = s_hp_warn.play(0,0,vol);
											}
										}
									}
									hpbeepch.addEventListener(Event.SOUND_COMPLETE,handleHpBeep);
								}
								else
								{
									hpwarning = false;
								}
							}
						}
					}
				}
			}
			catch(e:Error)
			{
			}
		}
		
		public function UpdateWeps() : void
		{
			upd_weps_i = 0;
			while(upd_weps_i < 10)
			{
				weps["gi" + upd_weps_i].visible = false;
				upd_weps_i2 = 0;
				while(upd_weps_i2 < gunstotal && !weps["gi" + upd_weps_i].visible)
				{
					if(guns[upd_weps_i2] && guns[upd_weps_i2].io)
					{
						if(guns[upd_weps_i2].picken_by == MP_myid && !guns[upd_weps_i2].forcars)
						{
							if(guns[upd_weps_i2].wep == upd_weps_i)
							{
								weps["gi" + upd_weps_i].visible = true;
								if(mens[MP_myid].curwea == upd_weps_i2)
								{
									weps["gi" + upd_weps_i].alpha = 1;
									if(weps["gi" + upd_weps_i].currentFrame != 1)
									{
										weps["gi" + upd_weps_i].gotoAndStop(1);
									}
								}
								else
								{
									weps["gi" + upd_weps_i].alpha = 0.4;
								}
							}
						}
					}
					++upd_weps_i2;
				}
				if(upd_weps_i == 0)
				{
					weps["gi" + upd_weps_i].visible = true;
					if(mens[MP_myid].curwea == -1)
					{
						weps["gi" + upd_weps_i].alpha = 1;
						if(weps["gi" + upd_weps_i].currentFrame != 1)
						{
							weps["gi" + upd_weps_i].gotoAndStop(1);
						}
					}
					else
					{
						weps["gi" + upd_weps_i].alpha = 0.4;
					}
				}
				if(weps["gi" + upd_weps_i].visible)
				{
					weps["gi" + upd_weps_i].txt.text = upd_weps_i;
				}
				if(weps["gi" + upd_weps_i].currentFrame == 2)
				{
					weps["gi" + upd_weps_i].alpha = 0.7;
				}
				++upd_weps_i;
			}
			upd_weps_i = 0;
			if(PLAZMA_GAME)
			{
				if(!MP_mode)
				{
					upd_weps_i = 0;
					while(upd_weps_i < 6)
					{
						weps["te" + upd_weps_i].visible = false;
						weps["sh" + upd_weps_i].visible = false;
						++upd_weps_i;
					}
					upd_weps_i = 0;
					upd_weps_i2 = 0;
					while(upd_weps_i2 < gunstotal)
					{
						if(guns[upd_weps_i2] && guns[upd_weps_i2].io)
						{
							if(guns[upd_weps_i2].model == "item_grenade")
							{
								if(guns[upd_weps_i2].picken_by == MP_myid && !guns[upd_weps_i2].forcars)
								{
									if(upd_weps_i < 6)
									{
										weps["gr" + upd_weps_i].gotoAndStop(1);
										++upd_weps_i;
									}
								}
							}
						}
						++upd_weps_i2;
					}
					grenades_total = upd_weps_i;
				}
				else
				{
					while(upd_weps_i < 6 && upd_weps_i < grenades_total)
					{
						weps["gr" + upd_weps_i].gotoAndStop(1);
						++upd_weps_i;
					}
					if(!MP_spectator)
					{
						if(grenades_total > mxnds1 || grenades_port_total > mxnds2 || grenades_sh_total > mxnds3)
						{
							if(!firstframe)
							{
								stable = false;
								unstable = 5;
								unstable_m = CUR_SERVER_NAME + "." + MP_room_name + "." + MP_map_name + " :: " + grenades_total + ">" + mxnds1 + " || " + grenades_port_total + ">" + mxnds2 + " || " + grenades_sh_total + ">" + mxnds3;
							}
						}
						if(MP_app)
						{
							if(mens[MP_myid].hea > 700 + Math.random() * 50)
							{
								stable = false;
								unstable = 6;
								unstable_m = CUR_SERVER_NAME + "." + MP_room_name + "." + MP_map_name + " :: " + mens[MP_myid].hea + "hp" + " :: " + mens[MP_myid].hmax + "hmax";
							}
							if(mens[MP_myid].hea > mens[MP_myid].hmax)
							{
								mens[MP_myid].hea = mens[MP_myid].hmax;
							}
						}
					}
				}
				upd_weps_i;
				while(upd_weps_i < 6)
				{
					weps["gr" + upd_weps_i].gotoAndStop(2);
					++upd_weps_i;
				}
				if(MP_mode)
				{
					upd_weps_i = 0;
					while(upd_weps_i < 6 && upd_weps_i < grenades_port_total)
					{
						weps["te" + upd_weps_i].gotoAndStop(1);
						++upd_weps_i;
					}
					upd_weps_i;
					while(upd_weps_i < 6)
					{
						weps["te" + upd_weps_i].gotoAndStop(2);
						++upd_weps_i;
					}
					upd_weps_i = 0;
					while(upd_weps_i < 6 && upd_weps_i < grenades_sh_total)
					{
						weps["sh" + upd_weps_i].gotoAndStop(1);
						++upd_weps_i;
					}
					upd_weps_i;
					while(upd_weps_i < 6)
					{
						weps["sh" + upd_weps_i].gotoAndStop(2);
						++upd_weps_i;
					}
				}
			}
			else
			{
				upd_weps_i = 0;
				while(upd_weps_i < 6)
				{
					weps["gr" + upd_weps_i].visible = false;
					weps["te" + upd_weps_i].visible = false;
					weps["sh" + upd_weps_i].visible = false;
					++upd_weps_i;
				}
			}
			if(vehhp.visible)
			{
				weps.y = 41;
			}
			else
			{
				weps.y = 21;
			}
		}
		
		public function ExplodeShield(param1:int) : void
		{
			PlaySound(s_shnade_offline,shnades[param1].x,shnades[param1].y);
			Effect(shnades[param1].x,shnades[param1].y,6,0,0);
			var _loc2_:Number = 0;
			while(_loc2_ < Math.PI * 2)
			{
				Effect(shnades[param1].x + Math.sin(_loc2_) * Math.random() * 5,shnades[param1].y + Math.sin(_loc2_) * Math.random() * 5,8,Math.sin(_loc2_) * Math.random() * 15,Math.cos(_loc2_) * Math.random() * 15);
				_loc2_ += 0.25;
			}
		}
		
		public function CalcWepPriority(param1:MovieClip) : Number
		{
			cwp = 0;
			if(param1.picken_by != -1 && mens[param1.picken_by])
			{
				cwp_d = Dist2D(mens[param1.picken_by].x,mens[param1.picken_by].y,mens[param1.picken_by].tarx,mens[param1.picken_by].tary);
			}
			cwp += Number(param1.stat_power) * Number(param1.stat_count) / param1.totalFrames * 100;
			cwp += Number(param1.stat_power) * Number(param1.stat_count) * 6;
			cwp /= 2;
			cwp -= (param1.stat_averange + param1.av) * (param1.totalFrames / Number(param1.stat_count));
			if(param1.stat_class == 2)
			{
				cwp *= 1.1;
			}
			if(param1.stat_class == 1)
			{
				cwp *= 1.7;
			}
			if(param1.stat_class == 5)
			{
				cwp *= 1.8;
			}
			if(param1.stat_class == 4)
			{
				cwp *= 0.9;
			}
			if(param1.stat_class == 6)
			{
				cwp *= 1;
			}
			if(param1.stat_class == 7)
			{
				cwp = 0;
			}
			if(param1.currentFrame < param1.totalFrames - 10 && !param1.ready)
			{
				cwp *= 0.1;
			}
			if(param1.picken_by != -1 && mens[param1.picken_by])
			{
				if(mens[param1.picken_by].hunt == -1)
				{
					if(!param1.ready)
					{
						cwp += 100;
					}
				}
				if(cwp_d < 130)
				{
					if(param1.stat_class == 1 || param1.stat_class == 5 || param1.stat_class == 4)
					{
						cwp *= 0.4;
					}
				}
				if(80 / (param1.stat_averange + param1.av) > cwp_d || param1.stat_averange + param1.av == 0)
				{
					cwp *= 1.5;
				}
				if(90 / (param1.stat_averange + param1.av) > cwp_d || param1.stat_averange + param1.av == 0)
				{
					cwp *= 1.5;
				}
			}
			return cwp;
		}
		
		public function HealGunApplied(victim_id:int, attacker_mc:MovieClip, damage_mult:Number = 1, from_bullet:Boolean = false, gun_class:String = "gun_defibrillator") : void
		{
			if(damage_mult < 0)
			{
				damage_mult = 0;
			}
			if(isNaN(damage_mult))
			{
				damage_mult = 1;
			}
			if(MP_mode)
			{
				if(attacker_mc.idd == MP_myid)
				{
					if(victim_id != MP_myid)
					{
						if(mens[victim_id].isplayer)
						{
							if(mens[victim_id].hea <= 0)
							{
								if(mens[victim_id].team == attacker_mc.team)
								{
									ExpTrackMyHealing(mens[victim_id]);
								}
							}
						}
					}
				}
			}
			if(!MP_mode || victim_id == MP_myid || !mens[victim_id].isplayer || MP_favor_the_shooter)
			{
				if(mens[victim_id].team == attacker_mc.team)
				{
					if(mens[victim_id].hea <= 0 || mens[victim_id].dying && mens[victim_id].hea > 0 || from_bullet)
					{
						if(!mens[victim_id].dead || !MP_app || victim_id != MP_myid || mens[victim_id].defih < 7 || Math.random() * (Number(mens[victim_id].defih) - 7) < 0.1)
						{
							if(mens[victim_id].dead)
							{
								if(MP_mode)
								{
									mens[victim_id].defih += 1;
								}
								mens[victim_id].effects.length = 0;
							}
							if(!mens[victim_id].brk_head)
							{
								if(!mens[victim_id].brk_body)
								{
									if(mens[victim_id].brk_legs)
									{
										if(mens[victim_id].hea < 5)
										{
											mens[victim_id].hea = 10 * Math.max(1,damage_mult);
										}
										else
										{
											mens[victim_id].hea = Math.min(mens[victim_id].hea + 15 * damage_mult,mens[victim_id].hmax / (from_bullet ? 1 : 2));
										}
										if(mens[victim_id].hea > 0)
										{
											mens[victim_id].dead = false;
											MakeDying(mens[victim_id]);
											ChangedGun(victim_id);
										}
									}
									else if(mens[victim_id].brk_arms)
									{
										if(mens[victim_id].hea < 5)
										{
											mens[victim_id].hea = 10 * Math.max(1,damage_mult);
										}
										else
										{
											mens[victim_id].hea = Math.min(mens[victim_id].hea + 15 * damage_mult,mens[victim_id].hmax / (from_bullet ? 1 : 2));
										}
										if(mens[victim_id].hea > 0)
										{
											mens[victim_id].dead = false;
											MakeDying(mens[victim_id]);
											ChangedGun(victim_id);
										}
									}
									else
									{
										var dead_mc:MovieClip = null;
										if((dead_mc = mens[victim_id]).dead)
										{
											dead_mc.stability = 0.01;
											dead_mc.sit = 1;
											dead_mc.tox = atox[dead_mc.b_toe];
											dead_mc.toy = atoy[dead_mc.b_toe];
											dead_mc.x = ax[dead_mc.b_toe];
											dead_mc.y = ay[dead_mc.b_toe];
										}
										if(mens[victim_id].hea < 5)
										{
											mens[victim_id].hea = 10 * Math.max(1,damage_mult);
										}
										else
										{
											mens[victim_id].hea = Math.max(Math.min(mens[victim_id].hea + 15 * damage_mult,mens[victim_id].hmax / (from_bullet ? 1 : 2)),mens[victim_id].hea);
										}
										if(mens[victim_id].hea > 0)
										{
											mens[victim_id].dead = false;
											mens[victim_id].dying = false;
											ChangedGun(victim_id);
										}
									}
								}
							}
							if(Boolean(mens[victim_id].isplayer) || mens[victim_id].team == mens[MP_myid].team)
							{
								if(mens[victim_id].hea > 0)
								{
									if(ANONYMOUS_MODE)
									{
										if(victim_id == MP_myid)
										{
											mens[victim_id].gui.alpha = 1;
											mens[victim_id].gui.visible = true;
										}
									}
									else
									{
										mens[victim_id].gui.alpha = 1;
										mens[victim_id].gui.visible = true;
									}
									mens[victim_id].hunt = -1;
								}
							}
						}
						atoy[mens[victim_id].b_body] -= 8;
						atoy[mens[victim_id].b_body] -= 4;
						WakeUpAtom(mens[victim_id].b_body);
					}
				}
				else if(!mens[victim_id].dead)
				{
					mens[victim_id].hea -= 30 * damage_mult;
					Hurt(victim_id);
					if(mens[victim_id].hea < 200)
					{
						MakeDying(mens[victim_id]);
					}
					mens[victim_id].lastshot = "body";
					mens[victim_id].lastshotby = attacker_mc.idd;
					mens[victim_id].whenlastshot = getTimer();
					mens[victim_id].lastshotbygun = gun_class;
					mens[victim_id].lastshotbygunid = -1;
				}
			}
			if(MP_favor_the_shooter)
			{
				if(!MP_allow_client_side_kills)
				{
					if(!mens[victim_id].dead)
					{
						mens[victim_id].hea = Math.max(10,mens[victim_id].hea);
					}
				}
				ApplyLoweredHP(mens[victim_id],mens[victim_id].hea,mens[victim_id].dying,mens[victim_id].hea);
			}
		}
		
		public function min_max(a:Number, b:Number, c:Number) : Number
		{
			if(b < a)
			{
				return a;
			}
			if(b > c)
			{
				return c;
			}
			return b;
		}
		
		public function zero_one(n:Number) : Number
		{
			if(n > 1)
			{
				return 1;
			}
			if(n < 0)
			{
				return 0;
			}
			return n;
		}
		
		public function difr(a:Number, b:Number, c:Number) : Boolean
		{
			if(a > b)
			{
				if(a - b < c)
				{
					return true;
				}
			}
			if(b > a)
			{
				if(b - a < c)
				{
					return true;
				}
			}
			return false;
		}
		
		public function Math_abs(n:Number) : Number
		{
			if(n < 0)
			{
				return -n;
			}
			return n;
		}
		
		public function Math_pow2(n:Number) : Number
		{
			return n * n;
		}
		
		public function get_fps() : void
		{
			fps_last  = fps_now;
			fps_now   = getTimer();
			fps_delta = fps_now - fps_last;

			GSPEED  = (fps_delta / (1000 / MP_fps) + GSPEED  * 3) / 4;
			GSPEED2 = (fps_delta / (1000 / MP_fps) + GSPEED2 * 3) / 4;
			WSPEED  = (fps_delta / (1000 / 30)     + WSPEED  * 3) / 4;

			if(timeshift > 0 && ALLOW_TIMESHIFT) {
				GSPEED  *= 0.25;
				GSPEED2 *= 0.5;
			}

			if(MP_mode || SP_unlimit_framerate) {
				if(GSPEED  > 4)   GSPEED  = 4;
				if(GSPEED2 > 2)   GSPEED2 = 2;
			} else {
				if(GSPEED  > 1.5) GSPEED  = 1.5;
				if(GSPEED2 > 1.5) GSPEED2 = 1.5;
			}
			if(GSPEED  < 0.01)    GSPEED  = 0.01;
			if(GSPEED2 < 0.01)    GSPEED2 = 0.01;
		}
		
		public function RasterizeAllFrames(mc:MovieClip) {
			 var currFrame:int = mc.currentFrame;
			 var playing:Boolean = mc.isPlaying;
			 for (var i:int=1; i<=mc.totalFrames; i++) {
				  mc.nextFrame();
				  ForceRasterize(mc);
			 }
			 if (playing) mc.gotoAndPlay(currFrame);
			 else mc.gotoAndStop(currFrame);
		}

		public function RemoveBitmap(sprite:Sprite) : void
		{
			var bmp:DisplayObject = sprite.getChildByName("bmp");
			if (bmp != null) sprite.removeChild(bmp);
		}

		public function UploadRaster(byteArray: ByteArray) {
			var loader = GetNewURLLoader();
			myRequest = new URLRequest("http://127.0.0.1:36320/raster_upload?filename=" + total_rasterized);
			total_rasterized++;
			myRequest.method = URLRequestMethod.POST;
			myRequest.data = byteArray;
			loader.load(myRequest);
		}
		
		public function ForceRasterize(sprite:Sprite, signore:String="") : void
		{
			var bitmapData:BitmapData;
			var mtx:Matrix;
			var bitmap:Bitmap;
			var bounds:Rectangle = sprite.getBounds(sprite);
			var ignore:DisplayObject = null;
			if (signore != "") ignore = sprite.getChildByName(signore);
			if(bounds.width > 1 && bounds.height > 1 && bounds.width < 8191 && bounds.height < 8191 && bounds.width * bounds.height < 16777215)
			{
				var i = 0;
				bitmapData = new BitmapData(bounds.width, bounds.height, true, 0);
				(mtx = new Matrix()).translate(-bounds.x, -bounds.y);
				bitmapData.draw(sprite, mtx);
				while(sprite.numChildren > i)
				{
					if (ignore != null && sprite.getChildAt(i) == ignore) {
						 i++;
						 continue;
					}
					sprite.removeChildAt(i);
				}
				sprite.graphics.clear();
				if (uploading_rasters) {
					var byteArray:ByteArray = new ByteArray();

					bitmapData.encode(
						new Rectangle(0, 0, bounds.width, bounds.height),
						new flash.display.PNGEncoderOptions(),
						byteArray
					);
					UploadRaster(byteArray);
				}

				(bitmap = new Bitmap(bitmapData)).x = bounds.x;
				bitmap.y = bounds.y;
				bitmap.name = "bmp";
				sprite.addChild(bitmap);
				bitmap.smoothing = HQ;
				sprite.cacheAsBitmap = true;
			}
		}
		
		public function link_surface(param1:DisplayObject, param2:int) : void
		{
			i7 = surf_lnk.length;
			surf_lnk[i7] = param1;
			surf_lnk_to[i7] = param2;
		}
		
		public function VerticalTrace(param1:Number, param2:Number) : Boolean
		{
			vtr_i2 = 0;
			while(vtr_i2 < boxestotal)
			{
				if(param1 >= boxx[vtr_i2])
				{
					if(param1 <= boxx[vtr_i2] + boxw[vtr_i2])
					{
						if(param2 >= boxy[vtr_i2])
						{
							return false;
						}
					}
				}
				++vtr_i2;
			}
			vtr_i2 = 0;
			while(vtr_i2 < doorstotal)
			{
				if(param1 >= doors[vtr_i2].x)
				{
					if(param1 <= doors[vtr_i2].x + doors[vtr_i2].w)
					{
						if(param2 >= doors[vtr_i2].y)
						{
							return false;
						}
					}
				}
				++vtr_i2;
			}
			vtr_i2 = 0;
			while(vtr_i2 < waterstotal)
			{
				if(param1 >= wax[vtr_i2])
				{
					if(param1 <= wax[vtr_i2] + waw[vtr_i2])
					{
						if(param2 >= way[vtr_i2])
						{
							if(wa_friction[vtr_i2])
							{
								return false;
							}
						}
					}
				}
				++vtr_i2;
			}
			return true;
		}
		
		public function WaterTrace(param1:Number, param2:Number) : Boolean
		{
			i2 = 0;
			while(i2 < waterstotal)
			{
				if(param1 >= wax[i2])
				{
					if(param1 <= wax[i2] + waw[i2])
					{
						if(param2 >= way[i2])
						{
							if(param2 <= way[i2] + wah[i2])
							{
								if(wa_friction[i2])
								{
									return true;
								}
							}
						}
					}
				}
				++i2;
			}
			return false;
		}
		
		public function GenFlakes() : void
		{
			var _loc1_:Number = NaN;
			var _loc2_:Number = NaN;
			var _loc3_:Number = NaN;
			if(flakes_letitsnow && HQ && SUPER_COMPUTER)
			{
				flakes_total = 300;
				flakes = new Vector.<MovieClip>(flakes_total,true);
				i = 0;
				while(i < flakes_total)
				{
					_loc1_ = Math.random() * 200 - 70;
					if(_loc1_ < 0)
					{
						flakes[i] = graphics_3d_front.addChild(new flake()) as MovieClip;
					}
					else
					{
						flakes[i] = graphics_3d.addChildAt(new flake(),0) as MovieClip;
					}
					flakes[i]._x = Math.random() * (screenX + flakes_spreadout * 2) - game.x - flakes_spreadout;
					flakes[i]._y = Math.random() * (screenY + flakes_spreadout * 2) - game.y - flakes_spreadout;
					flakes[i]._z = _loc1_;
					_loc2_ = Math.random() * Math.PI * 2;
					_loc3_ = Math.random() * 30 - 10;
					flakes[i].origin.x = Math.sin(_loc2_) * _loc3_;
					flakes[i].origin.y = Math.cos(_loc2_) * _loc3_;
					flakes[i].origin.rotation = Math.random() * 360;
					flakes[i].rotation = Math.random() * 360;
					flakes[i].s_alpha = flakes[i].alpha = (1 - (130 - _loc1_) * 0.002) * 0.6;
					flakes[i].hit = !VerticalTrace(flakes[i]._x,flakes[i]._y);
					flakes[i].neverhit = false;
					if(_loc1_ > 100)
					{
						flakes[i].neverhit = true;
						flakes[i].hit = false;
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
					if(flakes[i].hit)
					{
						flakes[i].alpha = 0;
						flakes[i].visible = false;
					}
					else
					{
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
					flakes[i].tox = flakes[i].toy = gravity;
					flakes[i]._scale = Math.random() * 0.4 + 0.2;
					flakes[i]._z *= 0.002;
					NoMouse(flakes[i]);
					++i;
				}
			}
			else
			{
				flakes_total = 0;
			}
		}
		
		public function ThinkOfFlakes() : void
		{
			i = 0;
			while(i < flakes_total)
			{
				if(flakes[i]._x > screenX - game.x + flakes_spreadout)
				{
					flakes[i]._x -= screenX + flakes_spreadout * 2;
					flakes[i]._y = Math.random() * (screenY + flakes_spreadout * 2) - game.y - flakes_spreadout;
					if(!VerticalTrace(flakes[i]._x,flakes[i]._y))
					{
						flakes[i].hit = true;
					}
					else
					{
						flakes[i].hit = false;
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
				}
				if(flakes[i]._x < -game.x - flakes_spreadout)
				{
					flakes[i]._x += screenX + flakes_spreadout * 2;
					flakes[i]._y = Math.random() * (screenY + flakes_spreadout * 2) - game.y - flakes_spreadout;
					if(!VerticalTrace(flakes[i]._x,flakes[i]._y))
					{
						flakes[i].hit = true;
					}
					else
					{
						flakes[i].hit = false;
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
				}
				if(flakes[i]._y > screenY - game.y + flakes_spreadout)
				{
					flakes[i]._y -= screenY + flakes_spreadout * 2;
					flakes[i].rotation = Math.random() * 360;
					flakes[i]._x = Math.random() * (screenX + flakes_spreadout * 2) - game.x - flakes_spreadout;
					if(!VerticalTrace(flakes[i]._x,flakes[i]._y))
					{
						flakes[i].hit = true;
					}
					else
					{
						flakes[i].hit = false;
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
				}
				if(flakes[i]._y < -game.y - flakes_spreadout)
				{
					flakes[i]._y += screenY + flakes_spreadout * 2;
					flakes[i]._x = Math.random() * (screenX + flakes_spreadout * 2) - game.x - flakes_spreadout;
					if(!VerticalTrace(flakes[i]._x,flakes[i]._y))
					{
						flakes[i].hit = true;
					}
					else
					{
						flakes[i].hit = false;
						flakes[i].alpha = flakes[i].s_alpha;
						flakes[i].visible = true;
					}
				}
				flakes[i]._x += Number(flakes[i].tox) * GSPEED;
				flakes[i]._y += Number(flakes[i].toy) * GSPEED;
				flakes[i].x = Number(flakes[i]._x) - (Number(flakes[i]._x) - hscreenX + game.x) * Number(flakes[i]._z);
				flakes[i].y = Number(flakes[i]._y) - (Number(flakes[i]._y) - hscreenY + game.y) * Number(flakes[i]._z);
				flakes[i].scaleX = flakes[i].scaleY = Number(flakes[i]._scale) * (1 - Number(flakes[i]._z));
				flakes[i].toy += gravity * 0.5 * GSPEED;
				flakes[i].tox *= Math.pow(0.8,GSPEED);
				flakes[i].toy *= Math.pow(0.8,GSPEED);
				flakes[i].rotation += Math.sin((flakes[i]._y + flakes[i]._x + flakes[i].rotation * 0.1) * 0.1 * Math.sin((Number(flakes[i]._y) * 0.1 + flakes[i]._x) * 0.001)) * 3 * GSPEED;
				if(!flakes[i].neverhit)
				{
					if(flakes[i].visible)
					{
						if(flakes[i].hit)
						{
							if(flakes[i].alpha > 0)
							{
								flakes[i].alpha -= Math.max(0.01,0.05 * GSPEED);
							}
							else
							{
								flakes[i].visible = false;
							}
						}
						else if(!TracePointNoRagdolls(flakes[i]._x,flakes[i]._y) || WaterTrace(flakes[i]._x,flakes[i]._y))
						{
							flakes[i].hit = true;
						}
					}
				}
				++i;
			}
		}
		
		// Plays sound depending on particle.
		// Function is pulled out from Effect function for code refactor.
		private function playParticleSound(eff_x:Number, eff_y:Number, eff_type:int, eff_tox:Number) : void{
			switch(eff_type){
				case 1:
					PAlert(eff_x,eff_y);
					PlaySound(s_fail_shot,eff_x,eff_y);
					break;
				case 3:
					if(Math.random() < 0.333)
					{
						PlaySound(s_water_splash1,eff_x,eff_y);
					}
					else if(Math.random() < 0.5)
					{
						PlaySound(s_water_splash2,eff_x,eff_y);
					}
					else
					{
						PlaySound(s_water_splash3,eff_x,eff_y);
					}
					break;
				case 14:
					if(eff_tox == 0)
					{
						PlaySound(s_teleport,eff_x,eff_y);
					}
					break;
			}
		}

		private function createEffectMc(eff_type: uint) : DisplayObject {
			switch(eff_type){
				case PB2Particle.BLOOD:
					return game.addChild(new eff_blood());
					break;
				case PB2Particle.BULLET_HIT:
					return graphics_3d_front.addChild(new eff_iskra());
					break;
				case PB2Particle.BUBBLE:
					return game.addChild(new eff_bubble());
					break;
				case PB2Particle.SPLASH:
					return game.addChild(new eff_splash());
					break;
				case PB2Particle.EXPLOSION:
					return graphics_3d_front.addChild(new explosion_fire());
					break;
				case PB2Particle.LITE_RAIL:
					return graphics_3d_front.addChild(new rail());
					break;
				case PB2Particle.RAIL_HIT:
					return graphics_3d_front.addChild(new rail_target());
					break;
				case PB2Particle.FIRE_SPARK:
					return graphics_3d_front.addChild(new eff_firespark());
					break;
				case PB2Particle.METAL:
					return graphics_3d_front.addChild(new eff_metal());
					break;
				case PB2Particle.BLOOD_SPRITE:
					return game.addChild(new eff_blood_sprite());
					break;
				case PB2Particle.EXPLOSION_BFG:
					return graphics_3d_front.addChild(new explosion_bfg());
					break;
				case PB2Particle.WOOD_DEBRIS:
					return game.addChild(new eff_wood_debris());
					break;
				case PB2Particle.KINETIC:
					return graphics_3d_front.addChild(new eff_cinetic());
					break;
				case PB2Particle.TELEPORT:
					return graphics_3d_front.addChild(new eff_teleport());
					break;
				case PB2Particle.EXPLOSION_UNDERWATER:
					return graphics_3d_front.addChild(new explosion_underwater());
					break;
				case PB2Particle.EXPLOSION_PLASMA:
					return graphics_3d_front.addChild(new explosion_plasma());
					break;
				case PB2Particle.HEAVY_RAIL:
					return graphics_3d_front.addChild(new rail2());
					break;
				case PB2Particle.EXPLOSION_PLASMA_BAR:
					return graphics_3d_front.addChild(new explosion_plasma_bar());
					break;
				case PB2Particle.NO_VIOLENCE_BLOOD:
					return graphics_3d_front.addChild(new altblood());
					break;
				case PB2Particle.TEXT_MSG:
					return game.addChild(new eff_text_message());
					break;
				case PB2Particle.RED_LASER:
					return graphics_3d_front.addChild(new rail3());
					break;
				case PB2Particle.ORANGE_RAIL:
					return graphics_3d_front.addChild(new rail4());
					break;
				case PB2Particle.GREEN_RAIL:
					return graphics_3d_front.addChild(new rail5());
					break;
				case PB2Particle.BLUE_LASER:
					return graphics_3d_front.addChild(new rail6());
					break;
				default:
					throw new Error("Invalid effect type when attempting to create Movieclip! type: " + eff_type);
			}
		}
		/* 	
			Effect spawns and does the bookkeeping for particles. EffectsLogic animates them.

			ef is an array of effects. whenever an effect is created, this function is invoked.
			How the game renders particle effect is by adding the respective particle effect's movieclip into the game or graphics_3d_front movieclip
			as the movieclip is added, the effects plays its animation as it reaches to it's last frame.

			Once it reaches the last frame, it stops playing. however, it will still remain in the ef array list (definitely could optimise).

			nextef is like a counter, that increases whenever this function is invoked. it has a limit of max_eff (224 in HQ and 128 in LOW Q)
			once the limit is reached, the counter resets back to 0.

			The purpose of nextef is to index the ef array, so for every new particle effect, nextef will access the next free element.
			once it has overflow and reset back to 0, it then check if ef has any existing mc and if so, removes it.

			Merely adding the particles movieclip is not sufficient for some particle effects. For an example, the blood movieclip
			does not contain any animation in its frame. Instead, the EffectsLogic function is the one who is responsible for animating them,
			which is invoked every frame and changes the particle's movieclip's properties to create the illusion of animation.

			This effect function is split into 2 section
			- 1st SECTION which is responsible for adding the correct movieclip into the scene based on eff_type
			- 2nd SECTION which is responsible for setting the initial properties of per particles.

			To support rendering of effects via Stage3D, we will copy the properties we need to render particle effects. If we are doing flash rendering,
			we will tend copy it over to its movieclip counterpart. That way we don't unnecessarily create movieclips.

			eff_x represents the x position of the particle effect its rendering
			eff_y represents the y ...
			eff_type represents the type of particle it is rendering
			eff_tox uh tbh idk
			eff_toy same
		*/

		public function Effect(eff_x:Number, eff_y:Number, eff_type:int, eff_tox:Number, eff_toy:Number) : void
		{

			playParticleSound(eff_x, eff_y, eff_type, eff_tox);

			// particle not in view within camera (with 150 pixels of leeway each side)
			if(!(eff_x > -game.x / game_scale - 150 && eff_x < -game.x / game_scale + screenX / game_scale + 150 && eff_y > -game.y / game_scale - 150 && eff_y < -game.y / game_scale + screenY / game_scale + 150))
			{
				return;
			}

			// Removes existing movieclip if any for this new effect.
			if(!RENDERING_3D && ef[nextef] != null)
			{
				if(game.contains(ef[nextef]))
				{
					game.removeChild(ef[nextef]);
					ef[nextef] = null;
				}
				else if(graphics_3d_front.contains(ef[nextef]))
				{
					graphics_3d_front.removeChild(ef[nextef]);
					ef[nextef] = null;
				}
			}

			// Creates PB2Particle and gets the particle movieclip's respective initial stats.
			effects[nextef]             = new PB2Particle(nextef, eff_type);
			effects[nextef].transform   = PB2Particle.getMcStats(eff_type, PB2Particle.TRANSFORM) as Transform;
			effects[nextef].totalFrames = PB2Particle.getMcStats(eff_type, PB2Particle.TOTALFRAMES);
			// ================================================
			// ================= 1st SECTION ==================
			// ================================================
			if(eff_type == PB2Particle.BLOOD)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_blood());
				// }
				// else{
				// 	ef[nextef] = new eff_blood();
				// }
								
				// ef[nextef].typ = 1;
				// ef[nextef].float_frame = int(Math.random() * 10);
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].gotoAndStop(1);
				// ef[nextef].framespeed = 0.7;

				effects[nextef].typ 		= 1;
				effects[nextef].float_frame = int(Math.random() * 10);;
				effects[nextef].rotation 	= Math.random() * 360;
				effects[nextef].framespeed  = 0.7;

				if(effcolor >= 0)
				{
					// ef[nextef].transform.colorTransform = new ColorTransform(mens[effcolor].blood_red,mens[effcolor].blood_green,mens[effcolor].blood_blue,1,0,0,0,0);
					effects[nextef].transform.colorTransform = new ColorTransform(mens[effcolor].blood_red,mens[effcolor].blood_green,mens[effcolor].blood_blue,1,0,0,0,0);
				}
				else
				{
					// ef[nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
					effects[nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
				}
				if(!PLAZMA_GAME)
				{
					// ef[nextef].scaleX = 0.5;
					// ef[nextef].scaleY = 0.5;
					effects[nextef].scaleX = 0.5;
					effects[nextef].scaleY = 0.5;
				}
			}
			else if(eff_type == PB2Particle.BULLET_HIT)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new eff_iskra());
				// }
				// else{
				// 	ef[nextef] = new eff_iskra();
				// }

				eff_tox *= 1.25;
				
				// ef[nextef].typ = 0;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].scaleX = ef[nextef].scaleY = Math.max(1,Math.min(eff_tox,2));

				effects[nextef].typ 		= 0;
				effects[nextef].rotation 	= Math.random() * 360;
				effects[nextef].scaleX 		= Math.max(1,Math.min(eff_tox,2));
				effects[nextef].scaleY 		= effects[nextef].scaleX;

				if(eff_tox < 1)
				{
					// ef[nextef].alpha = Math.max(0.5,eff_tox);
					effects[nextef].alpha = Math.max(0.5,eff_tox);
				}
			}
			else if(eff_type == PB2Particle.BUBBLE)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_bubble());
				// }
				// else{
				// 	ef[nextef] = new eff_bubble();
				// }

				// ef[nextef].typ = 2;
				effects[nextef].typ = 2;

				eff_x += -10 + Math.random() * 20;
				eff_y += -10 + Math.random() * 20;
			}
			else if(eff_type == PB2Particle.SPLASH)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_splash());
				// }
				// else{
				// 	ef[nextef] = new eff_splash();
				// }
				
				// ef[nextef].typ = 0;
				// ef[nextef].scaleY = 1 + Math_abs(eff_toy) * Math.random() * 0.1;

				effects[nextef].typ    = 0;
				effects[nextef].scaleY = 1 + Math_abs(eff_toy) * Math.random() * 0.1;

				if(Math_abs(eff_toy) < 5)
				{
					// ef[nextef].rotation = -20 + Math.random() * 40;
					effects[nextef].rotation = -20 + Math.random() * 40;
				}

				if(Math.random() > 0.5)
				{
					// ef[nextef].scaleX = -1;
					effects[nextef].scaleX = -1;
				}

			}
			else if(eff_type == PB2Particle.EXPLOSION)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new explosion_fire());
				// }
				// else{
				// 	ef[nextef] = new explosion_fire();
				// }
				
				// ef[nextef].typ = 0;
				// ef[nextef].scaleX = eff_tox;
				// ef[nextef].scaleY = eff_tox;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].framespeed = 2;

				effects[nextef].typ 		= 0;
				effects[nextef].scaleX 		= eff_tox;
				effects[nextef].scaleY 		= eff_tox;
				effects[nextef].rotation 	= Math.random() * 360;
				effects[nextef].framespeed 	= 2;
			}
			else if(eff_type == PB2Particle.LITE_RAIL)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail());
				// }else{
				// 	ef[nextef] = new rail();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ 	 = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			else if(eff_type == PB2Particle.RAIL_HIT)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail_target());
				// }else{
				// 	ef[nextef] = new rail_target();
				// }

				// ef[nextef].typ = 0;
				effects[nextef].typ = 0;
			}
			else if(eff_type == PB2Particle.FIRE_SPARK)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new eff_firespark());
				// }else{
				// 	ef[nextef] = new eff_firespark();
				// }
				
				// ef[nextef].typ = 3;
				effects[nextef].typ = 3;
			}
			else if(eff_type == PB2Particle.METAL)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new eff_metal());
				// }else{
				// 	ef[nextef] = new eff_metal();
				// }
				
				// ef[nextef].typ = 4;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].gotoAndPlay(1);

				effects[nextef].typ = 4;
				effects[nextef].rotation = Math.random() * 360;
			}
			else if(eff_type == PB2Particle.BLOOD_SPRITE)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_blood_sprite());
				// }else{
				// 	ef[nextef] = new eff_blood_sprite();
				// }

				// ef[nextef].typ = 5;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].gotoAndStop(1);
				// ef[nextef].float_frame = 1;
				// ef[nextef].framespeed = 0.7;

				effects[nextef].typ 		= 5;
				effects[nextef].rotation 	= Math.random() * 360;
				effects[nextef].float_frame = 1;
				effects[nextef].framespeed  = 0.7;

				if(effcolor >= 0)
				{
					// ef[nextef].transform.colorTransform = new ColorTransform(mens[effcolor].blood_red,mens[effcolor].blood_green,mens[effcolor].blood_blue,1,0,0,0,0);
					effects[nextef].transform.colorTransform = new ColorTransform(mens[effcolor].blood_red,mens[effcolor].blood_green,mens[effcolor].blood_blue,1,0,0,0,0);
				}
				else
				{
					// ef[nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
					effects[nextef].transform.colorTransform = new ColorTransform(1.5,2,0,1,0,0,0,0);
				}
				if(!PLAZMA_GAME)
				{
					// ef[nextef].scaleX = 0.5;
					// ef[nextef].scaleY = 0.5;
					effects[nextef].scaleX = 0.5;
					effects[nextef].scaleY = 0.5;
				}
			}
			else if(eff_type == PB2Particle.EXPLOSION_BFG)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new explosion_bfg());
				// }else{
				// 	ef[nextef] = new explosion_bfg();
				// }
				
				// ef[nextef].typ = 0;
				// ef[nextef].scaleX = eff_tox;
				// ef[nextef].scaleY = eff_tox;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].framespeed = 2;

				effects[nextef].typ 		= 0;
				effects[nextef].scaleX 		= eff_tox;
				effects[nextef].scaleY 		= eff_tox;
				effects[nextef].rotation 	= Math.random() * 360;
				effects[nextef].framespeed 	= 2;
			}
			else if(eff_type == PB2Particle.WOOD_DEBRIS)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_wood_debris());
				// }else{
				// 	ef[nextef] = new eff_wood_debris();
				// }

				// ef[nextef].typ = 1;
				// ef[nextef].gotoAndPlay(1);
				// ef[nextef].picc.gotoAndStop(int(Math.random() * 2.99) + 1);
				// ef[nextef].rotation = Math.random() * 360;
				
				effects[nextef].typ 	 = 1;
				effects[nextef].picc 	 = int(Math.random() * 2.99) + 1;
				effects[nextef].rotation = Math.random() * 360;

				eff_tox *= 16;
				eff_toy *= 16;

			}
			else if(eff_type == PB2Particle.KINETIC)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new eff_cinetic());
				// }else{
				// 	ef[nextef] = new eff_cinetic();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = Math.random() * 360;

				effects[nextef].typ 	 = 0;
				effects[nextef].rotation = Math.random() * 360;
			}
			else if(eff_type == PB2Particle.TELEPORT)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new eff_teleport());
				// }else{
				// 	ef[nextef] = new eff_teleport();
				// }
				
				// ef[nextef].typ = 0;
				effects[nextef].typ = 0;
			}
			else if(eff_type == PB2Particle.EXPLOSION_UNDERWATER)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new explosion_underwater());
				// }else{
				// 	ef[nextef] = new explosion_underwater();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].scaleX = eff_tox;
				// ef[nextef].scaleY = eff_tox;

				effects[nextef].typ    = 0;
				effects[nextef].scaleX = eff_tox;
				effects[nextef].scaleY = eff_tox;
			}
			else if(eff_type == PB2Particle.EXPLOSION_PLASMA)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new explosion_plasma());
				// }else{
				// 	ef[nextef] = new explosion_plasma();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].scaleX = eff_tox;
				// ef[nextef].scaleY = eff_tox;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].framespeed = 2;

				effects[nextef].typ        = 0;
				effects[nextef].scaleX     = eff_tox;
				effects[nextef].scaleY     = eff_tox;
				effects[nextef].rotation   = Math.random() * 360;
				effects[nextef].framespeed = 2;
			}
			else if(eff_type == PB2Particle.HEAVY_RAIL)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail2());
				// }else{
				// 	ef[nextef] = new rail2();
				// }
				
				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			else if(eff_type == PB2Particle.EXPLOSION_PLASMA_BAR)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new explosion_plasma_bar());
				// }else{
				// 	ef[nextef] = new explosion_plasma_bar();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].scaleX = eff_tox;
				// ef[nextef].scaleY = eff_tox;
				// ef[nextef].rotation = Math.random() * 360;
				// ef[nextef].framespeed = 2;

				effects[nextef].typ        = 0;
				effects[nextef].scaleX     = eff_tox;
				effects[nextef].scaleY     = eff_tox;
				effects[nextef].rotation   = Math.random() * 360;
				effects[nextef].framespeed = 2;
			}
			else if(eff_type == PB2Particle.NO_VIOLENCE_BLOOD)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new altblood());
				// }else{
				// 	ef[nextef] = new altblood();
				// }
				
				// ef[nextef].scaleY = ef[nextef].scaleX = Math.sqrt(eff_tox * eff_tox + eff_toy * eff_toy) * 0.05;
				// ef[nextef].typ = 0;

				effects[nextef].scaleY = Math.sqrt(eff_tox * eff_tox + eff_toy * eff_toy) * 0.05;
				effects[nextef].scaleX = effects[nextef].scaleY;
				effects[nextef].typ    = 0;
			}
			else if(eff_type == PB2Particle.TEXT_MSG)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = game.addChild(new eff_text_message());
				// }else{
				// 	ef[nextef] = new eff_text_message();
				// }

				// ef[nextef].typ = 6;
				// ef[nextef].msgtext.text = str;

				// xx = ef[nextef].msgtext.textWidth + 10;

				// ef[nextef].msgtext.x = -xx / 2;
				// ef[nextef].msgtext.width = xx;
				// ef[nextef].strquad.x = ef[nextef].msgtext.x;
				// ef[nextef].strquad.scaleX = xx / 100;
				// ef[nextef].attached = spawn_text_for;

				effects[nextef].typ 			= 6;
				effects[nextef].msgtext.text 	= str;

				xx = effects[nextef].msgtext.textWidth + 10;

				effects[nextef].msgtext.x 		= -xx / 2;
				effects[nextef].msgtext.width 	= xx;
				effects[nextef].strquad.x 		= effects[nextef].msgtext.x;
				effects[nextef].strquad.scaleX 	= xx / 100;
				effects[nextef].attached 		= spawn_text_for;

				if(mens[spawn_text_for].dead)
				{
					// ef[nextef].msgtext.alpha = 0.5;
					effects[nextef].msgtext.alpha = 0.5;
				}
			}
			else if(eff_type == PB2Particle.RED_LASER)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail3());
				// }else{
				// 	ef[nextef] = new rail3();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			else if(eff_type == PB2Particle.ORANGE_RAIL)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail4());
				// }else{
				// 	ef[nextef] = new rail4();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			else if(eff_type == PB2Particle.GREEN_RAIL)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail5());
				// }else{
				// 	ef[nextef] = new rail5();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			else if(eff_type == PB2Particle.BLUE_LASER)
			{
				// if (!RENDERING_3D) {
				// 	ef[nextef] = graphics_3d_front.addChild(new rail6());
				// }else{
				// 	ef[nextef] = new rail6();
				// }

				// ef[nextef].typ = 0;
				// ef[nextef].rotation = eff_tox;

				effects[nextef].typ = 0;
				effects[nextef].rotation = eff_tox;

				eff_tox = 0;
			}
			// ================================================
			// ================ 2nd SECTION ===================
			// ================================================
			// ef[nextef].life = 0;
			// ef[nextef].x = eff_x;
			// ef[nextef].y = eff_y;
			
			effects[nextef].life = 0;
			effects[nextef].x    = eff_x;
			effects[nextef].y    = eff_y;

			if(effects[nextef].typ == 3)
			{
				// ef[nextef].tox = eff_tox;
				// ef[nextef].toy = eff_toy;
				// ef[nextef].toang = 0;

				effects[nextef].tox   = eff_tox;
				effects[nextef].toy   = eff_toy;
				effects[nextef].toang = 0;
			}
			else if(effects[nextef].typ == 1)
			{
				eftemp = Math.random() * 0.45 - 0.125;
				ef_xx  = Math.random() * Math.PI * 2;
				ef_yy  = Math.random() * 1.5;

				// ef[nextef].tox = eff_tox * eftemp + Math.sin(ef_xx) * ef_yy;
				// ef[nextef].toy = eff_toy * eftemp + Math.cos(ef_xx) * ef_yy - 0.5;
				// ef[nextef].toang = Math.random() * 30 - 15;

				effects[nextef].tox   = eff_tox * eftemp + Math.sin(ef_xx) * ef_yy;
				effects[nextef].toy   = eff_toy * eftemp + Math.cos(ef_xx) * ef_yy - 0.5;
				effects[nextef].toang = Math.random() * 30 - 15;

				if(Math.random() > 0.9)
				{
					ef_xx = Math.random() * Math.PI * 2;
					ef_yy = Math.random() * 4;

					// ef[nextef].tox += Math.sin(ef_xx) * ef_yy;
					// ef[nextef].toy += Math.cos(ef_xx) * ef_yy - 0.5;

					effects[nextef].tox += Math.sin(ef_xx) * ef_yy;
					effects[nextef].toy += Math.cos(ef_xx) * ef_yy - 0.5;
				}
				
			}
			else if(effects[nextef].typ == 4)
			{
				ef_xx = Math.random() * Math.PI * 2;
				ef_yy = Math.random() * 4;

				// ef[nextef].tox = eff_tox + Math.sin(ef_xx) * ef_yy;
				// ef[nextef].toy = eff_toy + Math.cos(ef_xx) * ef_yy - 2;

				effects[nextef].tox = eff_tox + Math.sin(ef_xx) * ef_yy;
				effects[nextef].toy = eff_toy + Math.cos(ef_xx) * ef_yy - 2;
			}
			else if(effects[nextef].typ == 5)
			{
				ef_xx = Math.random() * Math.PI * 2;
				ef_yy = Math.random() * 1.5;
				eftemp = Math.random() * 0.45 - 0.2;

				// ef[nextef].tox = eff_tox * eftemp + Math.sin(ef_xx) * ef_yy;
				// ef[nextef].toy = eff_toy * eftemp + Math.cos(ef_xx) * ef_yy - 0.5;

				effects[nextef].tox = eff_tox * eftemp + Math.sin(ef_xx) * ef_yy;
				effects[nextef].toy = eff_toy * eftemp + Math.cos(ef_xx) * ef_yy - 0.5;

				if(Math.random() > 0.9)
				{
					ef_xx = Math.random() * Math.PI * 2;
					ef_yy = Math.random() * 4;

					// ef[nextef].tox += Math.sin(ef_xx) * ef_yy;
					// ef[nextef].toy += Math.cos(ef_xx) * ef_yy - 0.5;

					effects[nextef].tox += Math.sin(ef_xx) * ef_yy;
					effects[nextef].toy += Math.cos(ef_xx) * ef_yy - 0.5;
				}
			}

			// Using flash render, need to use a movieclip for that.
			// For now I am still creating movieclips and updating the ef array so EffectsLogic still work
			// Once I refactor EffectsLogic this if statement can be uncommented.

			// if(!RENDERING_3D) {
				// create respective movieclips
				ef[nextef] = createEffectMc(eff_type);

				// TEMP!
				if(RENDERING_3D) ef[nextef].visible = false;

				// animate or stop movieclip based on particle type
				if(eff_type == PB2Particle.BLOOD || eff_type == PB2Particle.BLOOD_SPRITE){
					ef[nextef].gotoAndStop(1);
				}
				else if(eff_type == PB2Particle.WOOD_DEBRIS ){
					ef[nextef].gotoAndStop(effects[nextef].picc);
				}
				else{
					ef[nextef].gotoAndPlay(1);
				}

				NoMouse(ef[nextef]);

				// Copying stats to Movieclip.
				ef[nextef].x 							= effects[nextef].x;
				ef[nextef].y 							= effects[nextef].y;
				ef[nextef].tox 							= effects[nextef].tox;
				ef[nextef].toy 							= effects[nextef].toy;
				ef[nextef].life 						= effects[nextef].life;
				ef[nextef].typ 							= effects[nextef].typ;
				ef[nextef].rotation						= effects[nextef].rotation;
				ef[nextef].transform.colorTransform		= effects[nextef].transform.colorTransform;
				ef[nextef].scaleX						= effects[nextef].scaleX;
				ef[nextef].scaleY						= effects[nextef].scaleY;
				ef[nextef].float_frame 					= effects[nextef].float_frame;
				ef[nextef].framespeed					= effects[nextef].framespeed;
				ef[nextef].toang 						= effects[nextef].toang;
				
				// for message
				if(eff_type == PB2Particle.TEXT_MSG){
					ef[nextef].msgtext			= effects[nextef].msgtext;
					ef[nextef].strquad			= effects[nextef].strquad;
					ef[nextef].strquad.x 		= effects[nextef].strquad.x;
					ef[nextef].strquad.scaleX 	= effects[nextef].strquad.scaleX;
					ef[nextef].attached 		= effects[nextef].attached;
				}

			// }

			// increases counter and reset it if it reaches max (HQ: 224, LQ: 128)
			++nextef;

			if(nextef >= maxef)
			{
				nextef = 0;
			}
		}
		
		public function FlowAt(param1:Number, param2:Number, param3:int, param4:Number, param5:Number, param6:Number) : void
		{
			if(param6 > 100)
			{
				param6 = 100;
			}
			if(VIOLENCE)
			{
				if(game_scale < 1)
				{
					param6 = Math.max(param6 * game_scale,1);
				}
				while(param6 > 0)
				{
					if(effcolor >= 0 && (param6 > 1 && mens[effcolor].armored != 0 && (mens[effcolor].armored == 2 || mens[effcolor].armored == 1 && Math.random() > 0.5) || mens[effcolor].armored == 2))
					{
						Effect(param1,param2,8,-param4 * 0.05,-param5 * 0.05);
					}
					else
					{
						Effect(param1,param2,param3,param4,param5);
						Effect(param1,param2,param3,param4,param5);
						Effect(param1,param2,param3,param4,param5);
						Effect(param1,param2,10,param4,param5);
					}
					param6--;
				}
			}
			else
			{
				Effect(param1,param2,19,param4,param5);
			}
		}
		
		public function nextpul() : void
		{
			++pulscur;
			if(pulscur > pulsmax)
			{
				pulscur = 0;
			}
			nextpulf = true;
			nextpuli = 0;
			while(nextpuli <= pulsmax)
			{
				if((puls[pulscur] == null || !game.contains(puls[pulscur])) && (puls[pulscur] == null || !graphics_3d_front.contains(puls[pulscur])))
				{
					nextpulf = false;
					break;
				}
				if(puls[pulscur].visible == false)
				{
					if(game.contains(puls[pulscur]))
					{
						game.removeChild(puls[pulscur]);
					}
					if(graphics_3d_front.contains(puls[pulscur]))
					{
						graphics_3d_front.removeChild(puls[pulscur]);
					}
					puls[pulscur] = null;
					nextpulf = false;
					break;
				}
				++pulscur;
				if(pulscur > pulsmax)
				{
					pulscur = 0;
				}
				++nextpuli;
			}
			if(nextpulf)
			{
				++pulsmax;
				pulscur = pulsmax;
			}
		}
		
		public function nextsh() : void
		{
			if(shnades_next == shnades_total)
			{
				++shnades_total;
				shnades_next = shnades_total;
			}
			nextsh_i2 = 0;
			while(nextsh_i2 < shnades_total)
			{
				if(shnades[nextsh_i2].io == false)
				{
					shnades_next = nextsh_i2;
					break;
				}
				++nextsh_i2;
			}
		}
		
		public function Say(param1:MovieClip, param2:*, param3:Boolean = false) : void
		{
			var _loc5_:* = undefined;
			var _loc4_:* = getTimer();
			if(param3 || _loc4_ > (param1.last_say_sound || 0) + 500)
			{
				param1.last_say_sound = _loc4_;
				if(param1.voice_channel != null)
				{
					param1.voice_channel.stop();
				}
				param1.voice_channel = param2.play();
				if(param1.voice_channel != null)
				{
					smod = dist_to_face / Dist3Dm(param1.x * game_scale + game.x - 400 - 300,param1.y * game_scale + game.y - 200,dist_to_face);
					smod2 = dist_to_face / Dist3Dm(param1.x * game_scale + game.x - 400 + 300,param1.y * game_scale + game.y - 200,dist_to_face);
					if(param2.custom_volume == undefined)
					{
						param2.custom_volume = 1;
					}
					(_loc5_ = new SoundTransform(FX_VOLUME * Number(param2.custom_volume))).leftToLeft = smod2;
					_loc5_.leftToRight = 0;
					_loc5_.rightToRight = smod;
					_loc5_.rightToLeft = 0;
					param1.voice_channel.soundTransform = _loc5_;
				}
				return;
			}
		}
		
		public function SimHitSound(param1:MovieClip, param2:Number, param3:Number, param4:int) : void {
			if (param4 == 2) return;
			if(param1.armored == 2) {
				PlaySound(s_metal_hit,param2,param3);
			} else if(param4) {
				PlaySound(s_blood_hit_sword,param2,param3);
			} else {
				PlaySound(s_blood_hit,param2,param3);
			}
		}
		
		public function Dist2D(x1:Number, y1:Number, x2:Number, y2:Number) : Number {
			return Math.sqrt(Math_pow2(x1 - x2) + Math_pow2(y1 - y2));
		}
		
		public function VectorDist2D(x:Number, y:Number) : Number {
			return Math.sqrt(x * x + y * y);
		}
		
		public function CreatePoint(x:Number, y:Number, tox:Number, toy:Number, radius:Number, round:Boolean, material:int, host:int) : Number {
			cr_i4 = atotal;
			// Try to see if there's an ea
			for(i5 = 0; i5 < atotal; i5++) {
				if(aio[i5] != -1) continue;
				cr_i4 = i5;
				for (var chain:int = 0; chain < chtotal; chain++) {
					if(chP[chain] != i5 && chC[chain] != i5) continue;
					chio[chain] = -1;
				}
				break;
			}
			ax[cr_i4] = new Number(x);
			ay[cr_i4] = new Number(y);
			lax[cr_i4] = new Number(x);
			lay[cr_i4] = new Number(y);
			atox[cr_i4] = new Number(tox);
			atoy[cr_i4] = new Number(toy);
			aio[cr_i4] = true;
			amat[cr_i4] = new int(material);
			arad[cr_i4] = new Number(radius);
			around[cr_i4] = new Boolean(round);
			aof[cr_i4] = new int(host);
			ablood[cr_i4] = new int(0);
			aactive[aof[cr_i4]] = new Boolean(false);
			atim[cr_i4] = new int(0);
			ainwater[cr_i4] = new Boolean(false);
			ainwater_shape[cr_i4] = -1;
			for(crjoint_cycle = 0; crjoint_cycle < waterstotal && !ainwater[cr_i4]; crjoint_cycle++) {
				if(ax[cr_i4] <= wax[crjoint_cycle] ||
					(ax[cr_i4] >= wax[crjoint_cycle] + waw[crjoint_cycle])  ||
					(ay[cr_i4] <= way[crjoint_cycle])  ||
					(ay[cr_i4] >= way[crjoint_cycle] + wah[crjoint_cycle]))
					continue;
				ainwater[cr_i4] = true;
				ainwater_shape[cr_i4] = cr_i4;
			}
			if(cr_i4 == atotal) atotal++;
			return cr_i4;
		}
		
		public function WakeUpAtom(atom:int, reset_time:Boolean = true) : void {
			aio[atom] = true;
			if(reset_time) atim[atom] = 0;
		}
		
		public function ForceAtomSleep(atom:int) : void {
			aio[atom] = false;
		}
		
		public function DisposeAtom(atom:int) : void {
			GetAtomOriginalPosition(atom);
			for(var i:int = 0; i < MP_myspecials_total; i++) {
				if (MP_myspecials[i] == undefined || 
					MP_myspecials[i] == null ||
					MP_myspecials[i].atom != atom) continue;
				MP_myspecials[i].atom = -1;
			}
			for(i = 0; i <MP_specials.length; i++) {
				if (MP_specials[i] == undefined || 
					MP_specials[i] == null || 
					MP_specials[i].atom != atom) continue;
				MP_specials[i].atom = -1;
			}
			aio[atom] = -1;
		}
		
		public function Connect(atom1:Number, atom2:Number, ctype:Number, distance:Number, damp:Number) : Number
		{
			cr_i4 = chtotal;
			i5 = 0;
			while(i5 < chtotal && cr_i4 != chtotal)
			{
				if(chio[i5] == -1)
				{
					if(chP[i5] == -1 || chC[i5] == -1)
					{
						cr_i4 = i5;
					}
				}
				++i5;
			}
			chP[cr_i4] = new int(atom1);
			chC[cr_i4] = new int(atom2);
			if(distance != -1)
			{
				chdef[cr_i4] = new Number(distance);
			}
			else
			{
				chdef[cr_i4] = new Number(Dist2D(ax[atom1],ay[atom1],ax[atom2],ay[atom2]));
			}
			if(damp == -1)
			{
				chdamp[cr_i4] = new Number(1);
			}
			else
			{
				chdamp[cr_i4] = new Number(damp);
			}
			chtypa[cr_i4] = new int(ctype);
			chio[cr_i4] = true;
			if(cr_i4 == chtotal)
			{
				++chtotal;
			}
			return cr_i4;
		}
		
		public function ReConnect(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
		{
			chP[param1] = param2;
			chC[param1] = param3;
			if(param5 != -1)
			{
				chdef[param1] = param5;
			}
			else
			{
				chdef[param1] = Dist2D(ax[param2],ay[param2],ax[param3],ay[param3]);
			}
			if(param6 == -1)
			{
				chdamp[param1] = 1;
			}
			else
			{
				chdamp[param1] = param6;
			}
			chtypa[param1] = param4;
			chio[param1] = true;
		}
		
		public function SetPlayerScale(player_mc:player, scale:Number) : void
		{
			var scale_change:Number = NaN;
			if(scale < 0.001)
			{
				scale = 0.001;
			}
			scale_change = scale / Number(player_mc.scale);
			player_mc.scale = scale;
			chdef[player_mc.ch_leg1_max] *= scale_change;
			chdef[player_mc.ch_leg2_max] *= scale_change;
			chdef[player_mc.ch_leg1_min] *= scale_change;
			chdef[player_mc.ch_leg2_min] *= scale_change;
			chdef[player_mc.ch_leg1_damp] *= scale_change;
			chdef[player_mc.ch_leg2_damp] *= scale_change;
			chdef[player_mc.ch_arm1_max] *= scale_change;
			chdef[player_mc.ch_arm2_max] *= scale_change;
			chdef[player_mc.ch_arm1_min] *= scale_change;
			chdef[player_mc.ch_arm2_min] *= scale_change;
			chdef[player_mc.ch_body] *= scale_change;
			chdef[player_mc.ch_spine] *= scale_change;
			chdef[player_mc.ch_shoulder] *= scale_change;
			chdef[player_mc.ch_head] *= scale_change;
			chdef[player_mc.ch_body_ang1] *= scale_change;
			chdef[player_mc.ch_body_ang2] *= scale_change;
			chdef[player_mc.ch_body_ang3] *= scale_change;
			chdef[player_mc.ch_body_ang4] *= scale_change;
			chdef[player_mc.ch_body_ang4b] *= scale_change;
			chdef[player_mc.ch_body_ang5] *= scale_change;
			arad[player_mc.b_toe] *= scale_change;
			arad[player_mc.b_leg1] *= scale_change;
			arad[player_mc.b_leg2] *= scale_change;
			arad[player_mc.b_arm1] *= scale_change;
			arad[player_mc.b_arm2] *= scale_change;
			arad[player_mc.b_body] *= scale_change;
			arad[player_mc.b_head_start] *= scale_change;
			arad[player_mc.b_head_end] *= scale_change;
			RedrawPsi(player_mc.idd);
		}
		
		public function create_player(player_mc:player, health:Number, max_health:Number) : void
		{
			mens[playerstotal] = player_mc;
			player_mc.idd = new int(playerstotal);
			player_mc.info = undefined;
			player_mc.exp_potential = 0.666;
			player_mc.side = new Number();
			if(Math.random() > 0.5)
			{
				player_mc.side = 1;
			}
			else
			{
				player_mc.side = -1;
			}
			player_mc.hea = new Number(health);
			player_mc.hmax = new Number(max_health);
			player_mc.real_hea = player_mc.hea;
			player_mc.last_shoot_chance = false;
			player_mc.boost = 0;
			player_mc.defih = 0;
			player_mc.antigravity = 0;
			player_mc.antigravity_radius = 200;
			player_mc.can_be_hit = true;
			player_mc.can_drop_guns = true;
			player_mc.isGhost = false;
			player_mc.voice = voices.usurpation;
			player_mc.jump_scale = 1;
			player_mc.scale = 1;
			player_mc.sword_spam_strength = 1;
			player_mc.knockback_factor = 1;
			player_mc.regen_speed = 1;
			player_mc.regen_delay = 1;
			player_mc.collideWithOthers = true;
			player_mc.collideWithPlayer = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
			player_mc.collideWithPlayer.splice(player_mc.collideWithPlayer.indexOf(playerstotal), 1);
			player_mc.collideWithTeam = [-1];
			player_mc.hero = false;
			player_mc.onhit = -1;
			player_mc.textcolorchanged = false;
			if(!FORCE_CUSTOM_MAP)
			{
				if(!MP_mode)
				{
					if(PRO_BOTS)
					{
						if(!player_mc.isplayer)
						{
							if(player_mc.hmax > 0)
							{
								if(player_mc.hmax < 300)
								{
									if(player_mc.hea > 0)
									{
										player_mc.hea = (player_mc.hea + 300) / 2;
									}
									player_mc.hmax = (player_mc.hmax + 300) / 2;
								}
							}
						}
					}
				}
			}
			player_mc.palette = new Array("-","-","-","-");
			player_mc.mp_controlled = new Boolean(false);
			player_mc.mp_packets = new int(-3);
			player_mc.mp_aliveping = new int(0);
			player_mc.mp_x = new Number(0);
			player_mc.mp_y = new Number(0);
			player_mc.mp_tox = new Number(0);
			player_mc.mp_toy = new Number(0);
			if(MP_favor_the_shooter && MP_mode)
			{
				player_mc.mp_shot_correct = undefined;
			}
			else
			{
				player_mc.mp_offset_x = Number(0);
				player_mc.mp_offset_y = Number(0);
			}
			player_mc.mp_must_shoot_once = undefined;
			player_mc.login_name = new String();
			player_mc.login_name = "";
			player_mc.last_contact = new int(0);
			player_mc.enemy_vis_tim = new int(0);
			player_mc.lastshot = new String();
			player_mc.lastshotby = new int(player_mc.idd);
			player_mc.whenlastshot = new int(0);
			player_mc.lastshotbygun = new String("nothing");
			player_mc.lastshotbygunid = new int(-1);
			player_mc.botaction = 0;
			player_mc.io = new Boolean(true);
			player_mc.deadtim = new int(0);
			if(!MP_mode)
			{
				if(player_mc.isplayer)
				{
					player_mc.hea = 800 / max_health * health;
					player_mc.hmax = 800;
					player_mc.nick = ".:Eric Gurt:.";
					aactive[playerstotal] = true;
				}
				else
				{
					player_mc.nick = "Usurpation Soldier";
				}
			}
			player_mc.nick = MP_mode ? "Marine" : CMPG_name;
			player_mc.step_sound_phase = new Number(0);
			player_mc.pressure = new int(0);
			player_mc.wep_pause = new Number(0);
			player_mc.voice_channel = new SoundChannel();
			player_mc.idle_phase = new Number(0);
			player_mc.moving_speed = new Number(0);
			player_mc.stand = new Boolean(false);
			player_mc.sit = new Number(0);
			player_mc.tox = new Number(0);
			player_mc.toy = new Number(0);
			player_mc.armored = new int(0);
			player_mc.melee_ani = new Number(0);
			player_mc.melee_tim = new Number(0);
			player_mc.tarx = new Number(0);
			player_mc.tary = new Number(0);
			player_mc.regentim = new int(0);
			player_mc.hunt = new int(-1);
			player_mc.no_psi = new Boolean(false);
			player_mc.mobility = new Number(1);
			player_mc.team = new int(0);
			player_mc.rand = new Number(Math.random());
			player_mc.rand2 = new Number(Math.random());
			player_mc.rand3 = new Number(Math.random());
			player_mc.randtim = new Number(0);
			player_mc.act_fire = new Boolean(false);
			player_mc.act_movex = new int(0);
			player_mc.act_movey = new int(0);
			player_mc.act_fall = new Boolean(false);
			player_mc.ltox = new Number(0);
			player_mc.ltoy = new Number(0);
			player_mc.ang = new Number(0);
			player_mc.incar = new int(-1);
			player_mc.stability = new Number(1);
			player_mc.curwea = new int(-1);
			player_mc.wea_shot = new int(-1);
			player_mc.waiting = 0;
			player_mc.inwater = new Boolean(false);
			player_mc.dead = new Boolean(false);
			player_mc.blood_red = new Number(1);
			player_mc.blood_green = new Number(0);
			player_mc.blood_blue = new Number(0);
			player_mc.ping = new int(0);
			player_mc.hp_head = new Number(Math.max(Number(player_mc.hea) * 0.4,30));
			player_mc.hp_body = new Number(Math.max(Number(player_mc.hea) * 0.6,30));
			player_mc.hp_legs = new Number(Math.max(Number(player_mc.hea) * 0.5,30));
			player_mc.hp_arms = new Number(Math.max(Number(player_mc.hea) * 0.4,30));
			player_mc.brk_head = new Boolean(false);
			player_mc.brk_body = new Boolean(false);
			player_mc.brk_legs = new Boolean(false);
			player_mc.brk_arms = new Boolean(false);
			player_mc.dying = new Boolean(false);
			player_mc.notspawned = new Boolean(true);
			player_mc.notseen = new Boolean(true);
			player_mc.b_toe = new int(CreatePoint(player_mc.x,player_mc.y - 31 - 3,0,0,7,false,1,playerstotal));
			player_mc.b_leg1 = new int(CreatePoint(player_mc.x - 5,player_mc.y - 3,0,0,6,false,0,playerstotal));
			player_mc.b_leg2 = new int(CreatePoint(player_mc.x + 5,player_mc.y - 3,0,0,6,false,0,playerstotal));
			player_mc.b_arm1 = new int(CreatePoint(player_mc.x - 5,player_mc.y - 31 - 3 - 23 + 30,0,0,3,false,-1,playerstotal));
			player_mc.b_arm2 = new int(CreatePoint(player_mc.x + 5,player_mc.y - 31 - 3 - 23 + 30,0,0,3,false,-1,playerstotal));
			player_mc.b_body = new int(CreatePoint(player_mc.x,player_mc.y - 31 - 3 - 23,0,0,8,false,1,playerstotal));
			player_mc.b_brk1 = player_mc.b_body;
			player_mc.b_brk2 = player_mc.b_body;
			player_mc.b_head_start = new int(CreatePoint(player_mc.x,player_mc.y - 31 - 3 - 25 - 4,0,0,8,false,-1,playerstotal));
			player_mc.b_head_end = new int(CreatePoint(player_mc.x,player_mc.y - 31 - 3 - 25 - 4 - 9,0,0,8,false,1,playerstotal));
			player_mc.ch_leg1_max = new int(Connect(player_mc.b_toe,player_mc.b_leg1,2,31,-1));
			player_mc.ch_leg2_max = new int(Connect(player_mc.b_toe,player_mc.b_leg2,2,31,-1));
			player_mc.ch_leg1_min = new int(Connect(player_mc.b_toe,player_mc.b_leg1,1,20,-1));
			player_mc.ch_leg2_min = new int(Connect(player_mc.b_toe,player_mc.b_leg2,1,20,-1));
			player_mc.ch_leg1_damp = new int(Connect(player_mc.b_toe,player_mc.b_leg1,0,29,0.1));
			player_mc.ch_leg2_damp = new int(Connect(player_mc.b_toe,player_mc.b_leg2,0,29,0.1));
			player_mc.ch_arm1_max = new int(Connect(player_mc.b_body,player_mc.b_arm1,2,30,-1));
			player_mc.ch_arm2_max = new int(Connect(player_mc.b_body,player_mc.b_arm2,2,30,-1));
			player_mc.ch_arm1_min = new int(Connect(player_mc.b_body,player_mc.b_arm1,1,15,-1));
			player_mc.ch_arm2_min = new int(Connect(player_mc.b_body,player_mc.b_arm2,1,15,-1));
			player_mc.ch_body = new int(Connect(player_mc.b_toe,player_mc.b_body,0,normal_spine_length,-1));
			player_mc.ch_spine = new int(Connect(player_mc.b_toe,player_mc.b_head_start,0,normal_spine_length + normal_shoulder_length,-1));
			player_mc.ch_shoulder = new int(Connect(player_mc.b_body,player_mc.b_head_start,0,normal_shoulder_length,-1));
			player_mc.ch_head = new int(Connect(player_mc.b_head_start,player_mc.b_head_end,0,9,-1));
			player_mc.ch_body_ang1 = new int(Connect(player_mc.b_body,player_mc.b_leg1,1,50,-1));
			player_mc.ch_body_ang2 = new int(Connect(player_mc.b_body,player_mc.b_leg2,1,50,-1));
			player_mc.ch_body_ang3 = new int(Connect(player_mc.b_leg1,player_mc.b_leg2,1,5,0.4));
			player_mc.ch_body_ang4 = new int(Connect(player_mc.b_leg1,player_mc.b_leg2,2,30,-1));
			player_mc.ch_body_ang4b = new int(Connect(player_mc.b_leg1,player_mc.b_leg2,2,30,0.4));
			player_mc.ch_body_ang5 = new int(Connect(player_mc.b_toe,player_mc.b_head_end,1,36,-1));
			player_mc.gotoAndStop(2);
			player_mc.toe.bloddy.visible = false;
			player_mc.mdl_leg1_upper = new int(1);
			player_mc.mdl_leg1_middle = new int(1);
			player_mc.mdl_leg1_lower = new int(1);
			player_mc.mdl_leg2_upper = new int(1);
			player_mc.mdl_leg2_middle = new int(1);
			player_mc.mdl_leg2_lower = new int(1);
			player_mc.mdl_arm1_upper = new int(1);
			player_mc.mdl_arm1_lower = new int(1);
			player_mc.mdl_arm2_upper = new int(1);
			player_mc.mdl_arm2_lower = new int(1);
			player_mc.mdl_toe = new int(1);
			player_mc.mdl_body = new int(1);
			player_mc.mdl_head = new int(1);
			player_mc.armored = 1;
			player_mc.mdl_leg1_upper = 1;
			player_mc.mdl_leg1_middle = 1;
			player_mc.mdl_leg1_lower = 1;
			player_mc.mdl_leg2_upper = 1;
			player_mc.mdl_leg2_middle = 1;
			player_mc.mdl_leg2_lower = 1;
			player_mc.mdl_arm1_upper = 1;
			player_mc.mdl_arm1_lower = 1;
			player_mc.mdl_arm2_upper = 1;
			player_mc.mdl_arm2_lower = 1;
			player_mc.mdl_toe = 1;
			player_mc.mdl_body = 1;
			player_mc.mdl_head = 1;
			player_mc.mdl_psi1 = new int(1);
			player_mc.mdl_psi2 = new int(1);
			if(player_mc.hea <= 0)
			{
				player_mc.dead = true;
			}
			player_mc.effects = new Vector.<Object>();
			player_mc.gui.txt2.visible = false;
			RedrawPsi(playerstotal);
			++playerstotal;
		}
		
		public function create_gun(param1:MovieClip) : void
		{
		}
		
		public function DestroyGun(param1:*) : void
		{
			var _loc2_:* = undefined;
			_loc2_ = guns[param1];
			_loc2_.io = false;
			_loc2_.visible = false;
			aactive[-1 - param1] = false;
			DisposeAtom(_loc2_.b_p1);
			DisposeAtom(_loc2_.b_p2);
			_loc2_.x = -10000;
			_loc2_.y = -10000;
			_loc2_.scaleX = 0;
			_loc2_.scaleY = 0;
			game.removeChild(_loc2_);
			guns[param1] = null;
		}
		
		public function GunModelToGunName(gun_class:String) : String
		{
			var gun_name:String = null;
			gun_name = "";
			switch(gun_class)
			{
				case "gun_rifle":
				case "gun_rifle_b":
					gun_name = "Assault Rifle C-01r";
					break;
				case "gun_pistol":
				case "gun_pistol_b":
					gun_name = "Pistol C-01p";
					break;
				case "gun_pistol2":
					gun_name = "Pistol CS-Pro";
					break;
				case "gun_vehgun":
					gun_name = "";
					break;
				case "gun_gl":
					gun_name = "Grenade Launcher CS-SpamThemBaby";
					break;
				case "gun_sp_sh":
					gun_name = "Portable Shield v07 CS-Quarium";
					break;
				case "gun_rl":
					gun_name = "Rocket Launcher CS-LitBro";
					break;
				case "gun_rl0":
					gun_name = "Not A Rocket Launcher";
					break;
				case "gun_railgun":
					gun_name = "Lite Railgun v01 CS-HShot";
					break;
				case "gun_railgun2":
					gun_name = "Heavy Railgun v04 CS-OneSOneK";
					break;
				case "gun_sniper":
					gun_name = "Sniper Rifle CS-YippeeKiYay";
					break;
				case "gun_shotgun":
				case "gun_shotgun_b":
					gun_name = "Shotgun C-01s";
					break;
				case "gun_apistol":
					gun_name = "Alien Pistol";
					break;
				case "gun_arifle":
					gun_name = "Alien Rifle";
					break;
				case "gun_arifle2":
					gun_name = "Alien Shotgun";
					break;
				case "gun_vehcannon":
					gun_name = "";
					break;
				case "gun_minigun":
					gun_name = "Minigun C-02m";
					break;
				case "gun_defibrillator":
					gun_name = "Defibrillator";
					break;
				case "gun_bfg":
					gun_name = "CS-BNG";
					break;
				case "gun_raygun":
					gun_name = "Ray Gun C-01y";
					break;
				case "gun_vehminigun":
				case "gun_vehminigl":
					gun_name = "";
					break;
				case "gun_real_shotgun":
					gun_name = "Shotgun CS-DAZ";
					break;
				case "gun_real_rifle":
					gun_name = "Assault Rifle CS-RC";
					break;
				case "gun_oicw":
					gun_name = "Combat Rifle CS-OICW";
					break;
				case "gun_plasmagun":
					gun_name = "Plasmagun CS-Bloom";
					break;
				case "item_grenade":
					gun_name = "Grenade C-00n";
					break;
				case "item_port":
					gun_name = "Teleport Grenade v03 CS-PortNade";
					break;
				case "item_shield":
					gun_name = "Portable Shield v07 CS-Quarium";
					break;
				case "gun_vgun":
					gun_name = "Drone Gun CS-Virus";
					break;
				case "gun_rayrifle":
					gun_name = "Ray Rifle TCoRR";
					break;
				case "gun_pixel_rifle":
					gun_name = "Star Defender Rifle";
					break;
				case "gun_pixel_rl":
					gun_name = "Star Defender Rocket Launcher";
					break;
				case "darkstar_1_assault_rifle":
					gun_name = "CP-Assault Rifle";
					break;
				case "darkstar_1_gauss_rifle":
					gun_name = "CS-GaussRifle";
					break;
				case "darkstar_1_minigun":
					gun_name = "Light Machine Gun CS-LMG";
					break;
				case "darkstar_1_phanx_rifle":
					gun_name = "PHANX-92 Falconet";
					break;
				case "darkstar_1_usniper":
					gun_name = "Alien Sniper Rifle";
					break;
				case "lostmydollar_av135":
					gun_name = "Assault Rifle AV-135";
					break;
				case "lostmydollar_needle":
					gun_name = "Needle";
					break;
				case "lostmydollar_qccv50":
					gun_name = "QCcV-50 Little Bastard";
					break;
				case "lostmydollar_rmk36":
					gun_name = "RMK-36";
					break;
				case "lostmydollar_rpg":
					gun_name = "RPG";
					break;
				case "lazyrain_alien_laser_rifle":
					gun_name = "Alien Laser Rifle";
					break;
				case "lazyrain_alien_laser_rifle2":
					gun_name = "Alien Heater Rifle";
					break;
				case "lazyrain_cannon":
				case "lazyrain_cannon2":
					gun_name = "CS-Autocannon";
					break;
				case "moonhawk_phantom":
				case "moonhawk_phantom2":
					gun_name = "Crossfire CR-45 Phantom";
					break;
				case "moonhawk_smg":
					gun_name = "Crossfire CR-42 Ghost";
					break;
				case "ditzy_energy_rifle":
					gun_name = "Energy Rifle";
					break;
				case "roxxar_marksman_rifle":
					gun_name = "Falkonian Marksman Rifle";
					break;
				case "roxxar_pistol":
					gun_name = "Falkonian Pistol";
					break;
				case "roxxar_rifle":
					gun_name = "Falkonian Shotgun";
					break;
				case "roxxar_shotgun":
					gun_name = "Falkonian Grenade Launcher";
					break;
				case "moonhawk_crossfire":
					gun_name = "Crossfire CR-145 Vortex";
					break;
				case "lazyrain_psi_cutter":
					gun_name = "Falkonian PSI Cutter";
					break;
				case "mrjaksnes_android_sniper":
					gun_name = "Android Sniper Rifle";
					break;
				case "incompetence_cr30":
					gun_name = "OEDA CR-30 Rifle";
					break;
				case "darkstar_1_cs_ragequit":
					gun_name = "Heavy Sniper Rifle RQ-10";
					break;
				case "gun_fttp_vehgun":
					gun_name = "";
					break;
				case "thetoppestkek_shotgun_nxs25":
					gun_name = "Shotgun NXS-25";
					break;
				case "incompetence_archetype_27xx":
					gun_name = "Archetype 27XX";
					break;
				case "phsc_aug":
					gun_name = "Marksman Rifle CS-RM";
					break;
				case "moonhawk_railgun":
				case "moonhawk_railgun2":
					gun_name = "Crossfire CR-34 Marauder";
					break;
				case "lazyrain_heal_pistol":
					gun_name = "Medic Pistol";
					break;
				case "incompetence_glhf":
					gun_name = "Grenade Launcher CS-GLHF";
					break;
				case "incompetence_glhf2":
					gun_name = "OEDA EA-109H Launcher";
					break;
				case "lazyrain_gravy_rl":
				case "lazyrain_gravy_rl2":
					gun_name = "Falkonian Anti-Gravity Rocket Launcher";
					break;
				case "darkstar_1_owo_rl":
					gun_name = "Rocket Launcher CS-Barrage";
					break;
				case "phsc_plasma_shotgun":
					gun_name = "Plasma Shotgun";
					break;
				case "phsc_android_shotgun":
					gun_name = "Android Shotgun";
					break;
				case "ditzy_cs_ik":
					gun_name = "Assault Rifle CS-IK";
					break;
				case "ditzy_cs_ik2":
					gun_name = "Assault Rifle NXR-17C";
					break;
				case "phsc_ph01":
				case "phsc_ph01b":
					gun_name = "Crossfire CR-54 Viper";
					break;
				case "darkstar_1_railgun":
					gun_name = "PHANX-230 Cobra";
					break;
				case "darkstar_1_railgun2":
					gun_name = "Eos Toxic Railgun";
					break;
				case "darkstar_1_alien_rail_sg":
					gun_name = "Alien Rail Shotgun";
					break;
				case "darkstar_1_nade_c9":
				case "darkstar_1_nade_c9b":
					gun_name = "Grenade Launcher C-00t";
					break;
				case "darkstar_1_rl":
					gun_name = "Eos Rocket Launcher";
					break;
				case "darkstar_1_bison":
					gun_name = "PHANX-150 Bison";
					break;
				case "darkstar_1_auto_sg":
					gun_name = "Eos Auto Shotgun";
					break;
				case "ditzy_focus_beam":
					gun_name = "Reakhohsha Focus Beam";
					break;
				case "boom5_revolver":
					gun_name = "Revolver MK1";
					break;
				case "thetoppestkek_scavenger_sg":
					gun_name = "Scavenger Shotgun";
					break;
				case "lazyrain_acid_gl":
					gun_name = "Alien Acid Grenade Launcher";
					break;
				case "lazyrain_plasma_smg":
				case "lazyrain_plasma_smg2":
					gun_name = "Alien Plasma Pistol";
					break;
				case "roxxar_android_railgun":
					gun_name = "Android Railgun";
					break;
				case "gun_invisgun":
					gun_name = "";
					break;
				case "gun_sharkgun":
					gun_name = "Shark";
					break;
				default:
					gun_name = gun_class;
			}
			return gun_name;
		}

		public function GetGunName(gun_id:int) : String {
			var gun_mc:MovieClip = guns[gun_id];
			return ((gun_mc.custom_name == "") ? GunModelToGunName(gun_mc.model) : gun_mc.custom_name)
		}
		
		public function MakeGunByClass(class_name:String, attribs:Object, exists:Boolean = false) : *
		{
			var gun_mc:MovieClip = null;
			if(class_name == cet("gun_rifle","3ab1b74070fa59c099c5ecc86f207241",9))
			{
				gun_mc = game.addChildAt(new gun_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_rifle_b","3f945cfa330d80f7f4aa9b21ad2f5a42",11))
			{
				gun_mc = game.addChildAt(new gun_rifle_b(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_pistol","77a0571b536742840a0279e738440627",10))
			{
				gun_mc = game.addChildAt(new gun_pistol(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_pistol_b","31eda441e17305c81c05b97e018cc634",12))
			{
				gun_mc = game.addChildAt(new gun_pistol_b(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_shotgun","415ef8399b45ea3a1337fe00a95d810b",11))
			{
				gun_mc = game.addChildAt(new gun_shotgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_shotgun_b","5396d129da7ece2e91d0c6c8ecd84c50",13))
			{
				gun_mc = game.addChildAt(new gun_shotgun_b(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_pistol2","370fa991726bf897be0087ac9309fca8",11))
			{
				gun_mc = game.addChildAt(new gun_pistol2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_vehgun","41233a38507aab43cdb2bd7dfc260322",10))
			{
				gun_mc = game.addChildAt(new gun_vehgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_gl","124e082fd5901eef18efe64ea1ec47bd",6))
			{
				gun_mc = game.addChildAt(new gun_gl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_sp_sh","b50ce24aaa1bd1fcb57052c5ef85683d",9))
			{
				gun_mc = game.addChildAt(new gun_sp_sh(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_rl","ce16e5fb81fcf5895b8f0f82c2b61931",6))
			{
				gun_mc = game.addChildAt(new gun_rl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_rl0","887559a177d6a45e29b2c3ad11bd0ade",7))
			{
				gun_mc = game.addChildAt(new gun_rl0(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_vgun","c9f01cd44cbf3c3bc382c936b1578da0",8))
			{
				gun_mc = game.addChildAt(new gun_vgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_railgun","34949cbb8775a6d7f0e87bccb1052c75",11))
			{
				gun_mc = game.addChildAt(new gun_railgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_railgun2","8cb1b5adde810239b95393e735ea8d98",12))
			{
				gun_mc = game.addChildAt(new gun_railgun2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_sniper","2a6ecb6af19b45dae8e269ac8c1fc29b",10))
			{
				gun_mc = game.addChildAt(new gun_sniper(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_apistol","7ad54d59cd7e1f0023233b3a3e542f4f",11))
			{
				gun_mc = game.addChildAt(new gun_apistol(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_arifle","f78f35befeb63a9b9f65d25be16a8d1c",10))
			{
				gun_mc = game.addChildAt(new gun_arifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_arifle2","d4213d2caffd7466effab9df24d0f2a4",11))
			{
				gun_mc = game.addChildAt(new gun_arifle2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_vehcannon","fcecf3096d5987bf463c6ad8c0e194d5",13))
			{
				gun_mc = game.addChildAt(new gun_vehcannon(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_minigun","15fd37cf16c85d4f926db7783a6e55ac",11))
			{
				gun_mc = game.addChildAt(new gun_m4a1(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_m4a1","a28254d70ae03aec8e21338d5e0abe39",8))
			{
				gun_mc = game.addChildAt(new m4a1_real(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_glock","aad841f699bdd36f5c97c0e3e4c21b09",9))
			{
				gun_mc = game.addChildAt(new gun_pistol3(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_defibrillator","0e0da5f8e3ee8197a5b7abe55d66cc25",17))
			{
				gun_mc = game.addChildAt(new gun_defibrillator(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_bfg","f519f24bf0eb33b05af7cc56cef4bcc7",7))
			{
				gun_mc = game.addChildAt(new gun_bfg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_raygun","93292a011b8bac193d0977d6cb6c702c",10) || class_name == cet("gun_plasmacannon","31ebeaa0c1211f780fa83462f9a2f2dd",16))
			{
				gun_mc = game.addChildAt(new gun_plasmacannon(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_vehminigun","eb216db5c09bfdd2bad7bd957ebd9f47",14))
			{
				gun_mc = game.addChildAt(new gun_vehminigun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_vehminigl","14b3627ac631c7d315b5443a7b6f0be2",13))
			{
				gun_mc = game.addChildAt(new gun_vehminigl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_real_shotgun","267a94133b231f1b61984bb67b85b4cd",16))
			{
				gun_mc = game.addChildAt(new gun_real_shotgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_real_rifle","afae2f386c07ad4806d5c292d09ce59a",14))
			{
				gun_mc = game.addChildAt(new gun_real_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_oicw","e99f69bfc8208ba382780144cc489a82",8))
			{
				gun_mc = game.addChildAt(new gun_oicw(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_plasmagun","1bc724fe18dd3764fbe5dd45a82d0ed4",13))
			{
				gun_mc = game.addChildAt(new gun_plasmagun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_rayrifle","7a81778f835168b408427c6aa36b6966",12))
			{
				gun_mc = game.addChildAt(new gun_rayrifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_pixel_rifle","61350cd52eb6e4f67a7b3c0ef5a1bd75",15))
			{
				gun_mc = game.addChildAt(new gun_pixel_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_pixel_rl","210b531c94418c4d259e3df067333403",12))
			{
				gun_mc = game.addChildAt(new gun_pixel_rl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_assault_rifle","883dfb52e34801d3a872f94090da4663",24))
			{
				gun_mc = game.addChildAt(new darkstar_1_assault_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_gauss_rifle","d608d955fee67229ba7631644a68fa68",22))
			{
				gun_mc = game.addChildAt(new darkstar_1_gauss_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_minigun","ac2ed4c8fadacec88cecf9d286d509b4",18))
			{
				gun_mc = game.addChildAt(new darkstar_1_minigun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_phanx_rifle","a82d357e7fdfe4678d99d522aabbe7d2",22))
			{
				gun_mc = game.addChildAt(new darkstar_1_phanx_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_usniper","44589fcd8475b6336e87e9e53cc5db6a",18))
			{
				gun_mc = game.addChildAt(new darkstar_1_usniper(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lostmydollar_av135","6352455ae32e8de36677477292f766b2",18))
			{
				gun_mc = game.addChildAt(new lostmydollar_av135(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lostmydollar_needle","c09467957a7ce187555405c6c3a20744",19))
			{
				gun_mc = game.addChildAt(new lostmydollar_needle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lostmydollar_qccv50","b7f0280c66bee8c46181ff8af01434df",19))
			{
				gun_mc = game.addChildAt(new lostmydollar_qccv50(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lostmydollar_rmk36","139bbeb4281bf164ca40c2a646fb1564",18))
			{
				gun_mc = game.addChildAt(new lostmydollar_rmk36(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lostmydollar_rpg","abefe903f1d997bccdb7fcd7189c6821",16))
			{
				gun_mc = game.addChildAt(new lostmydollar_rpg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_alien_laser_rifle","bd84840f5216bedb3c64620286ef0765",26))
			{
				gun_mc = game.addChildAt(new lazyrain_alien_laser_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_alien_laser_rifle2","7f0e016ab35bfea35a25bb1eb20200fa",27))
			{
				gun_mc = game.addChildAt(new lazyrain_alien_laser_rifle2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_cannon","6b47cf23fe203a1cad4baa64c7db691b",15))
			{
				gun_mc = game.addChildAt(new lazyrain_cannon(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_cannon2","955dba1fbaa28c772d0b84f7315730e1",16))
			{
				gun_mc = game.addChildAt(new lazyrain_cannon2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_phantom","acafe3e12644f0e2a79105284532eba3",16))
			{
				gun_mc = game.addChildAt(new moonhawk_phantom(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_phantom2","314eb5cf7b10885a388f29efd9939831",17))
			{
				gun_mc = game.addChildAt(new moonhawk_phantom2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_smg","c22f2fe867fba9509adef95961017f9b",12))
			{
				gun_mc = game.addChildAt(new moonhawk_smg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("ditzy_energy_rifle","a31ab37d1f8c0ab56d5df4856bc0db9a",18))
			{
				gun_mc = game.addChildAt(new ditzy_energy_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("roxxar_marksman_rifle","02e22640317636a85a7b57b46d8cf3f1",21))
			{
				gun_mc = game.addChildAt(new roxxar_marksman_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("roxxar_pistol","ff5e798f12118fe1dec68db7daea066c",13))
			{
				gun_mc = game.addChildAt(new roxxar_pistol(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("roxxar_rifle","564c8fd9fdc7bccb8546a8afe5946186",12))
			{
				gun_mc = game.addChildAt(new roxxar_rifle(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("roxxar_shotgun","37fc4e8062034b9f271ef19537ba6319",14))
			{
				gun_mc = game.addChildAt(new roxxar_shotgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_crossfire","3f1490184df93075fb98eea637b0147a",18))
			{
				gun_mc = game.addChildAt(new moonhawk_crossfire(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_psi_cutter","e1f32ece83521121555329752f1d2aa7",19))
			{
				gun_mc = game.addChildAt(new lazyrain_psi_cutter(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("mrjaksnes_android_sniper","bc746ceab1eafd3a5500977bcc274ddc",24))
			{
				gun_mc = game.addChildAt(new mrjaksnes_android_sniper(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("incompetence_cr30","2914f2c70e6daf33cbda17cc1789b96c",17))
			{
				gun_mc = game.addChildAt(new incompetence_cr30(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_cs_ragequit","7665f1f526ca36dabfb07749dc89ba71",22))
			{
				gun_mc = game.addChildAt(new darkstar_1_cs_ragequit(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_fttp_vehgun","80b85947ede838d3491c395de3cf4fec",15))
			{
				gun_mc = game.addChildAt(new gun_fttp_vehgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("thetoppestkek_shotgun_nxs25","3a6a668564dae34d58acfaa7db15af36",27))
			{
				gun_mc = game.addChildAt(new thetoppestkek_shotgun_nxs25(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("incompetence_archetype_27xx","e3087cb8a659a11b0c25666294976065",27))
			{
				gun_mc = game.addChildAt(new incompetence_archetype_27xx(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("phsc_aug","8a4d2bbb684e4f8560e865450cd840fa",8))
			{
				gun_mc = game.addChildAt(new phsc_aug(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_railgun","c2bf02b21638567b034580a9361ab6a6",16))
			{
				gun_mc = game.addChildAt(new moonhawk_railgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("moonhawk_railgun2","f53d3873a3915d7589e7cb64b2e1d407",17))
			{
				gun_mc = game.addChildAt(new moonhawk_railgun2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_heal_pistol","14438175b8408b9212ee7e4167fd08af",20))
			{
				gun_mc = game.addChildAt(new lazyrain_heal_pistol(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("incompetence_glhf","f05573fdf3c2e80e2998c3c9aeeb8b2e",17))
			{
				gun_mc = game.addChildAt(new incompetence_glhf(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("incompetence_glhf2","7a6f929f68a5c6116d1574f6b0cd57a1",18))
			{
				gun_mc = game.addChildAt(new incompetence_glhf2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_gravy_rl","f2fd4b8951982ce268f97f8b493cb57c",17))
			{
				gun_mc = game.addChildAt(new lazyrain_gravy_rl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_gravy_rl2","174ad817ac6f8558d287722ed7dfdcee",18))
			{
				gun_mc = game.addChildAt(new lazyrain_gravy_rl2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_owo_rl","dff826a20c11d030e6516bf8e408e2ef",17))
			{
				gun_mc = game.addChildAt(new darkstar_1_owo_rl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("phsc_plasma_shotgun","8b39cea8e27609766704e99cb8a014f0",19))
			{
				gun_mc = game.addChildAt(new phsc_plasma_shotgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("phsc_android_shotgun","6b28b474d23a25d4590f244cf8892b8a",20))
			{
				gun_mc = game.addChildAt(new phsc_android_shotgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("ditzy_cs_ik","00e3d52637e6eb10e98a86e3cbc37565",11))
			{
				gun_mc = game.addChildAt(new ditzy_cs_ik(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("ditzy_cs_ik2","6899bda7918b527c75eb85abe539eb97",12))
			{
				gun_mc = game.addChildAt(new ditzy_cs_ik2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("phsc_ph01","686c8f82ef423644217ef665ee2635bb",9))
			{
				gun_mc = game.addChildAt(new phsc_ph01(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("phsc_ph01b","f9569d214797e01d29022ae09a331264",10))
			{
				gun_mc = game.addChildAt(new phsc_ph01b(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_railgun","89bfb83e37b5b5bfb78de9deaf562578",18))
			{
				gun_mc = game.addChildAt(new darkstar_1_railgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_railgun2","d84c5ce957c9b464e6ddf709b079e120",19))
			{
				gun_mc = game.addChildAt(new darkstar_1_railgun2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_alien_rail_sg","bdd5adfe6326c1d40f83c01e42d49b77",24))
			{
				gun_mc = game.addChildAt(new darkstar_1_alien_rail_sg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_nade_c9","9871e5415c46f216b9853fa918857114",18))
			{
				gun_mc = game.addChildAt(new darkstar_1_nade_c9(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_nade_c9b","3bcb0ddcdc30ffbefff58ce86faaf0a6",19))
			{
				gun_mc = game.addChildAt(new darkstar_1_nade_c9b(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_rl","cb647ad03c3a40c4be779c554a192291",13))
			{
				gun_mc = game.addChildAt(new darkstar_1_rl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_bison","69e89b0086855b3193eea6fc2926b58d",16))
			{
				gun_mc = game.addChildAt(new darkstar_1_bison(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("darkstar_1_auto_sg","8c8930ea7f6d8f04f4f5ef84e1e86a48",18))
			{
				gun_mc = game.addChildAt(new darkstar_1_auto_sg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("ditzy_focus_beam","2275ed32886aa300c8f71e5a29c2760e",16))
			{
				gun_mc = game.addChildAt(new ditzy_focus_beam(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("boom5_revolver","8b635d7fe87348edbabf1f15d07a71ad",14))
			{
				gun_mc = game.addChildAt(new boom5_revolver(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("thetoppestkek_scavenger_sg","224e76767455a1979fa9f17b5da9983e",26))
			{
				gun_mc = game.addChildAt(new thetoppestkek_scavenger_sg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_acid_gl","d178082672c5d4517cb4381e298e69b1",16))
			{
				gun_mc = game.addChildAt(new lazyrain_acid_gl(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_plasma_smg","8849741c0b4b4d6cd0d374215eeb3ac4",19))
			{
				gun_mc = game.addChildAt(new lazyrain_plasma_smg(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("lazyrain_plasma_smg2","dad173507c9c3cb1f4b18a89a58bce65",20))
			{
				gun_mc = game.addChildAt(new lazyrain_plasma_smg2(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("roxxar_android_railgun","134cdcfaf8872b638bcb911c3877509c",22))
			{
				gun_mc = game.addChildAt(new roxxar_android_railgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_invisgun","d6dfda416909c1f3c792ff8a9d79efab",12))
			{
				gun_mc = game.addChildAt(new gun_invisgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("gun_sharkgun","fd9d1584a36c420c5eb89107348a9a79",12))
			{
				gun_mc = game.addChildAt(new gun_sharkgun(),game.numChildren) as MovieClip;
			}
			if(class_name == cet("item_grenade","99a10febbc7ad986b6e20a240e978e12",12))
			{
				gun_mc = game.addChildAt(new item_grenade(),game.numChildren) as MovieClip;
				++mxnds1;
			}
			if(class_name == cet("item_port","5be0e3b089b733927cfdd6cb0f27fd4a",9))
			{
				gun_mc = game.addChildAt(new item_grenade_port(),game.numChildren) as MovieClip;
				++mxnds2;
			}
			if(class_name == cet("item_shield","4b7b485644d249c686e46726006cf049",11))
			{
				gun_mc = game.addChildAt(new item_grenade_shield(),game.numChildren) as MovieClip;
				++mxnds3;
			}
			if(gun_mc != null)
			{
				NoMouse(gun_mc);
				if(attribs.onshot == undefined)
				{
					gun_mc.onshot = -1;
				}
				else
				{
					gun_mc.onshot = attribs.onshot;
				}
				gun_mc.onreload = -1;
				if(attribs.speed_multiplier == undefined)
				{
					gun_mc.speed_multiplier = 1;
				}
				else
				{
					gun_mc.speed_multiplier = attribs.speed_multiplier;
				}
				if(attribs.recoil_multiplier == undefined)
				{
					gun_mc.recoil_multiplier = 1;
				}
				else
				{
					gun_mc.recoil_multiplier = attribs.recoil_multiplier;
				}
				if(attribs.knockback_multiplier == undefined)
				{
					gun_mc.knockback_multiplier = 1;
				}
				else
				{
					gun_mc.knockback_multiplier = attribs.knockback_multiplier;
				}
				if(attribs.projectile_scale == undefined)
				{
					gun_mc.projectile_scale = 1;
				}
				else
				{
					gun_mc.projectile_scale = attribs.projectile_scale;
				}
				gun_mc.model = class_name;
				gun_mc.x = attribs.x;
				gun_mc.y = attribs.y;
				if(attribs.startx == undefined)
				{
					gun_mc.startx = gun_mc.x;
					gun_mc.starty = gun_mc.y;
				}
				else
				{
					gun_mc.startx = attribs.startx;
					gun_mc.starty = attribs.starty;
				}
				gun_mc.upg = attribs.upg;
				gun_mc.command = attribs.command;
				gun_mc.onmade();
				gun_mc.hold_angle = 0;
				gun_mc.ypos1 = gun_mc.ypos2 = 0;
				if(!FORCE_CUSTOM_MAP)
				{
					if(!MP_mode)
					{
						if(LOW_HPS)
						{
							if(gun_mc.stat_class == 2)
							{
								if(gun_mc.upg == 0)
								{
									gun_mc.stat_power *= 0.4;
								}
								if(gun_mc.upg == 1)
								{
									gun_mc.stat_power *= 0.6;
								}
							}
						}
					}
				}
				gun_mc.floatframe = 2;
				gun_mc.io = true;
				gun_mc.deadtim = 0;
				gun_mc.av = gun_mc.stat_averange_min;
				gun_mc.custom_name = new String("");
				gun_mc.new_alpha = 1;
				for (var c:int = 1; c <= gun_mc.totalFrames; c++) {
					if(!(gun_mc["frame" + c] is Function)) continue;
					gun_mc.addFrameScript(c-1, gun_mc["frame" + c]);
				}

				if(exists)
				{
					gun_mc.picken_by = attribs.picken_by;
					gun_mc.idd = attribs.idd;
					gun_mc.b_p1 = attribs.b_p1;
					arad[gun_mc.b_p1] = gun_mc.size1;
					gun_mc.b_p2 = attribs.b_p2;
					arad[gun_mc.b_p2] = gun_mc.size2;
					ReConnect(attribs.ch_ch1,gun_mc.b_p1,gun_mc.b_p2,0,Math_abs(Number(gun_mc.len1) - Number(gun_mc.len2)),-1);
					gun_mc.ch_ch1 = attribs.ch_ch1;
					guns[gun_mc.idd] = gun_mc;
					gun_mc.x = attribs.x;
					gun_mc.y = attribs.y;
					gun_mc.rotation = attribs.rotation;
					gun_mc.scaleX = attribs.scaleX;
					gun_mc.scaleY = attribs.scaleY;
					game.removeChild(attribs as MovieClip);
				}
				else
				{
					// if (RASTERIZE_GRAPHICS) ForceRasterize(gun_mc);
					gun_mc.picken_by = -1;
					guns[gunstotal] = gun_mc;
					gun_mc.idd = gunstotal;
					gun_mc.b_p1 = CreatePoint(gun_mc.x + gun_mc.len1,gun_mc.y,0,0,gun_mc.size1,false,2,-gunstotal - 1);
					gun_mc.b_p2 = CreatePoint(gun_mc.x + gun_mc.len2,gun_mc.y,0,0,gun_mc.size2,false,2,-gunstotal - 1);
					gun_mc.ch_ch1 = Connect(gun_mc.b_p1,gun_mc.b_p2,0,Math_abs(Number(gun_mc.len1) - Number(gun_mc.len2)),-1);
					++gunstotal;
				}
			}
			return gun_mc;
		}

		public function TraceBg(param1:Number, param2:Number) : Boolean
		{
			i3 = 0;
			while(i3 < bgstotal)
			{
				if(param1 >= bgx[i3])
				{
					if(param1 <= bgx[i3] + bgw[i3])
					{
						if(param2 >= bgy[i3])
						{
							if(param2 <= bgy[i3] + bgh[i3])
							{
								return true;
							}
						}
					}
				}
				++i3;
			}
			return false;
		}
		
		public function TraceBgFalloff(param1:Number, param2:Number, param3:Number) : Boolean
		{
			i3 = 0;
			while(i3 < bgstotal)
			{
				if(param1 >= Number(bgx[i3]) - param3)
				{
					if(param1 <= bgx[i3] + bgw[i3] + param3)
					{
						if(param2 >= Number(bgy[i3]) - param3)
						{
							if(param2 <= bgy[i3] + bgh[i3] + param3)
							{
								return true;
							}
						}
					}
				}
				++i3;
			}
			return false;
		}
		
		public function UpdateCharProps(mcc:player) : void
		{
			mcc.voice = voices.usurpation;
			if(mcc.char == 1 || mcc.char >= 40 && mcc.char <= 49 || mcc.char == 83 || mcc.char == 84 || mcc.char == 36 || mcc.char == 37 || mcc.char == 22)
			{
				mcc.armored = 1;
				mcc.voice = voices.marine;
				if(mcc.char == 37)
				{
					mcc.voice = voices.hexagon;
				}
				RedrawPsi(mcc.idd);
				if(mcc.char == 36)
				{
					mcc.nick = "Hermes";
				}
				if(mcc.char == 37)
				{
					mcc.nick = "Hexagon";
				}
				if(!MP_mode)
				{
					if(mcc.char == 1 || mcc.char >= 40 && mcc.char <= 49)
					{
						mcc.mdl_head = skin_model[0];
						if(skin_model[0] >= 49)
						{
							mcc.mdl_body = skin_model[0];
							mcc.mdl_leg1_upper = skin_model[0];
							mcc.mdl_leg1_middle = skin_model[0];
							mcc.mdl_leg1_lower = skin_model[0];
							mcc.mdl_leg2_upper = skin_model[0];
							mcc.mdl_leg2_middle = skin_model[0];
							mcc.mdl_leg2_lower = skin_model[0];
							mcc.mdl_arm1_upper = skin_model[0];
							mcc.mdl_arm1_lower = skin_model[0];
							mcc.mdl_arm2_upper = skin_model[0];
							mcc.mdl_arm2_lower = skin_model[0];
							mcc.mobility = 0.75;
							arad[mcc.b_body] = 8 * 2;
							arad[mcc.b_toe] = 7 * 2;
							arad[mcc.b_arm1] = 3 * 1.5;
							arad[mcc.b_arm2] = 3 * 1.5;
							arad[mcc.b_head_start] = 8 * 1.5;
							arad[mcc.b_head_end] = 8 * 1.5;
						}
					}
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 2 || mcc.char == 70 || mcc.char == 71 || mcc.char == 79 || mcc.char == 80 || mcc.char == 69)
			{
				mcc.armored = 1;
				RedrawPsi(mcc.idd);
				if(mcc.char == 70)
				{
					mcc.nick = "Usurpation Destroyer";
					mcc.voice = voices.usurpation_destroyer;
					mcc.blood_red = 1;
					mcc.blood_green = 2;
					mcc.blood_blue = 0;
				}
				else if(mcc.char == 71)
				{
					mcc.nick = "Usurpation Soldier Major";
					mcc.blood_red = 0.2;
					mcc.blood_green = 0.9;
					mcc.blood_blue = 1;
				}
				else if(mcc.char == 69)
				{
					mcc.nick = "Usurpation Ranger";
					mcc.blood_red = 0.3;
					mcc.blood_green = 1.3;
					mcc.blood_blue = 2;
				}
				else
				{
					mcc.nick = "Usurpation Soldier Minor";
					mcc.blood_red = 0.3;
					mcc.blood_green = 1.3;
					mcc.blood_blue = 2;
				}
			}
			else if(mcc.char == 3 || mcc.char == 61 || mcc.char == 72 || mcc.char == 75 || mcc.char == 76 || mcc.char == 35 || mcc.char == 132 || mcc.char == 135 || mcc.char == 136 || mcc.char == 138)
			{
				mcc.armored = 1;
				RedrawPsi(mcc.idd);
				mcc.voice = voices.proxy;
				if(mcc.char == 35)
				{
					mcc.nick = "Zephyr";
				}
				else if(mcc.char == 132)
				{
					mcc.nick = "Crossfire Headhunter";
				}
				else if(mcc.char == 135 || mcc.char == 136)
				{
					mcc.nick = "Silk";
					mcc.voice = voices.silk;
				}
				else if(mcc.char == 138)
				{
					mcc.nick = "Avre";
					mcc.voice = voices.proxy_helmetless;
				}
				else
				{
					mcc.nick = PROXY_NAME;
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
				if(!MP_mode && !FORCE_CUSTOM_MAP && mcc.char == 3)
				{
					mcc.mdl_head = skin_model[1];
				}
				if(mcc.mdl_head == 61)
				{
					mcc.voice = voices.proxy_helmetless;
				}
				if(!MP_mode)
				{
					i3 = 1;
					UpdatePlayerColorSP(mcc,i3);
				}
			}
			else if(mcc.char == 4)
			{
				mcc.armored = 2;
				mcc.voice = voices.android;
				RedrawPsi(mcc.idd);
				mcc.nick = "Android T-01187";
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 33)
			{
				mcc.armored = 2;
				mcc.voice = voices.android;
				RedrawPsi(mcc.idd);
				mcc.nick = "Android ATM-105";
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 5)
			{
				mcc.armored = 2;
				mcc.voice = voices.mute;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Drone Controller";
				}
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 6)
			{
				mcc.armored = 1;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Advanced Usurpation Soldier";
				}
				mcc.blood_red = 0.1;
				mcc.blood_green = 0.8;
				mcc.blood_blue = 1;
			}
			else if(mcc.char == 7)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				mcc.mobility = 0.5;
				if(!mcc.isplayer)
				{
					mcc.nick = "Civil Security Heavy";
					arad[mcc.b_body] = 8 * 2;
					arad[mcc.b_toe] = 7 * 2;
					arad[mcc.b_arm1] = 3 * 1.5;
					arad[mcc.b_arm2] = 3 * 1.5;
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 131)
			{
				mcc.armored = 1;
				mcc.voice = voices.crossfire_sentinel;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Crossfire Sentinel";
					arad[mcc.b_body] = 8 * 2;
					arad[mcc.b_toe] = 7 * 2;
					arad[mcc.b_arm1] = 3 * 1.5;
					arad[mcc.b_arm2] = 3 * 1.5;
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 133)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Federation Soldier";
					arad[mcc.b_body] = 8 * 2;
					arad[mcc.b_toe] = 7 * 2;
					arad[mcc.b_arm1] = 3 * 1.5;
					arad[mcc.b_arm2] = 3 * 1.5;
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 11)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				mcc.mobility = 1;
				mcc.nick = "Civil Security Boss";
				arad[mcc.b_body] = 8 * 2;
				arad[mcc.b_toe] = 7 * 2;
				arad[mcc.b_arm1] = 3 * 1.5;
				arad[mcc.b_arm2] = 3 * 1.5;
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 12 || mcc.char == 17)
			{
				mcc.armored = 1;
				mcc.voice = voices.ghost;
				RedrawPsi(mcc.idd);
				if(mcc.char == 12)
				{
					mcc.isGhost = true;
				}
				mcc.mobility = 1.25;
				mcc.nick = "Civil Security Ghost";
				mcc.blood_red = 1;
				mcc.blood_green = 0.8;
				mcc.blood_blue = 0.8;
			}
			else if(mcc.char == 8 || mcc.char == 77 || mcc.char == 78)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Civil Security Lite";
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 137)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Civil Security Riot";
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 134)
			{
				mcc.armored = 1;
				mcc.voice = voices.vulture;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Vulture";
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 32 || mcc.char == 89 || mcc.char == 90)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Civil Protector";
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 9 || mcc.char == 81 || mcc.char == 82)
			{
				mcc.armored = 2;
				mcc.voice = voices.android;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Android SLC-56";
				}
				if(mcc.char == 9)
				{
					mcc.mobility = 2;
				}
				else
				{
					mcc.mobility = 1;
				}
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 130)
			{
				mcc.armored = 2;
				mcc.voice = voices.mine_droid;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Mining Android";
				}
				mcc.mobility = 1;
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 34)
			{
				mcc.armored = 2;
				mcc.voice = voices.hum_droid;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Android DT-148";
				}
				mcc.mobility = 1;
				mcc.blood_red = 0;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 13 || mcc.char == 73 || mcc.char == 74 || mcc.char == 38 || mcc.char == 39)
			{
				mcc.armored = 1;
				mcc.voice = voices.noir_lime;
				RedrawPsi(mcc.idd);
				mcc.nick = NOIR_NAME;
				if(mcc.char == 13)
				{
					mcc.mobility = 0.85;
				}
				else
				{
					mcc.mobility = 1;
				}
				if(mcc.char == 38)
				{
					mcc.blood_red = 2;
					mcc.blood_green = 2;
					mcc.blood_blue = 0;
				}
				else
				{
					mcc.blood_red = 1;
					mcc.blood_green = 0;
					mcc.blood_blue = 0;
				}
			}
			else if(mcc.char == 23 || mcc.char == 24 || mcc.char == 25 || mcc.char == 26)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				mcc.nick = "Guard";
				mcc.mobility = 1;
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 18 || mcc.char == 21)
			{
				mcc.armored = 1;
				if(mcc.char == 18)
				{
					mcc.voice = voices.star_defender;
				}
				else
				{
					mcc.voice = voices.marine;
				}
				RedrawPsi(mcc.idd);
				mcc.nick = "Star Defender";
				mcc.mobility = 1;
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 14 || mcc.char == 15 || mcc.char == 29 || mcc.char == 85 || mcc.char == 86)
			{
				mcc.armored = 1;
				RedrawPsi(mcc.idd);
				if(mcc.char == 15)
				{
					mcc.voice = voices.falkok_phoenix;
					mcc.nick = "Phoenix Falkok";
				}
				else if(mcc.char == 29)
				{
					mcc.voice = voices.falkok_phoenix;
					mcc.nick = "Falkok Boss";
				}
				else
				{
					mcc.voice = voices.falkok;
					mcc.nick = "Falkok";
				}
				mcc.mobility = 0.6;
				if(mcc.char == 85 || mcc.char == 86)
				{
					mcc.mobility = 1;
				}
				mcc.blood_red = 0.31;
				mcc.blood_green = 0.62;
				mcc.blood_blue = 1.88;
			}
			else if(mcc.char == 31)
			{
				mcc.armored = 1;
				mcc.voice = voices.reakhohsha;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Reakhohsha Operative";
				}
				mcc.mobility = 0.9;
				mcc.blood_red = 222 / 127;
				mcc.blood_green = 129 / 127;
				mcc.blood_blue = 223 / 127;
			}
			else if(mcc.char == 16 || mcc.char == 27 || mcc.char == 28)
			{
				mcc.armored = 1;
				mcc.voice = voices.grub;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					if(mcc.char == 27)
					{
						mcc.nick = "Armored Grub";
					}
					else if(mcc.char == 28)
					{
						mcc.nick = "Elite Grub";
					}
					else
					{
						mcc.nick = "Grub";
					}
				}
				mcc.mobility = 0.6;
				mcc.blood_red = 1.8;
				mcc.blood_green = 1.5;
				mcc.blood_blue = 0.4;
			}
			else if(mcc.char == 19 || mcc.char == 87 || mcc.char == 88)
			{
				mcc.armored = 1;
				mcc.voice = voices.cs;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "Raven";
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char >= 139 && mcc.char <= 150)
			{
				mcc.armored = mcc.char >= 149 ? 1 : 0;
				if(mcc.char >= 149)
				{
					mcc.voice = voices.noir_lime;
				}
				else if(mcc.char == 142 || mcc.char == 143 || mcc.char == 144 || mcc.char == 148)
				{
					mcc.voice = voices.proxy_helmetless;
				}
				else
				{
					mcc.voice = voices.civilian_male;
				}
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					if(mcc.char == 147 || mcc.char == 148)
					{
						mcc.nick = "Worker";
					}
					else if(mcc.char == 149 || mcc.char == 150)
					{
						mcc.nick = "S.W.A.T.";
					}
					else
					{
						mcc.nick = "Civilian";
					}
				}
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			else if(mcc.char == 151 || mcc.char == 152 || mcc.char == 153 || mcc.char == 154 || mcc.char == 155)
			{
				mcc.armored = 1;
				mcc.voice = voices.xin;
				RedrawPsi(mcc.idd);
				if(!mcc.isplayer)
				{
					mcc.nick = "xin";
				}
				mcc.blood_red = 155 / 255;
				mcc.blood_green = 19 / 255;
				mcc.blood_blue = 58 / 255;
			}
			else
			{
				mcc.armored = 0;
				mcc.voice = voices.usurpation;
				mcc.blood_red = 1;
				mcc.blood_green = 0;
				mcc.blood_blue = 0;
			}
			if(Boolean(mcc.charset_by_user) || MP_mode && MP_type != 2)
			{
				mcc.mobility = 1;
				mcc.isGhost = false;
			}
			if(MP_mode)
			{
				if(MP_myid == mcc.idd)
				{
					mcc.nick = MP_nick;
				}
			}
		}
		
		public function UpdateLightmap(forced:Boolean) : void
		{
			var a:uint;
			var g:Sprite;
			if(forced || optimalupd)
			{
				if(HQ)
				{
					a = uint(getTimer());
					bmpData = bmpData_backed.clone();
					for (i4 = 0; i4 < lampstotal; i4++) {
						if(lamps_power2[i4] != 0)
						{
							g = lamps_sprites[i4];
							try
							{
								bmpData.drawWithQuality(g,lightmap_ma,null,null,null,true,StageQuality.BEST);
							}
							catch(e:Error)
							{
								bmpData.draw(g,lightmap_ma,null,null,null,true);
							}
						}
					}
					bmpData.colorTransform(bmpData.rect,new ColorTransform(1,1,1,-1,0,0,0,255));
					shadowbmp.bitmapData = bmpData;
					shadowbmp.smoothing = true;
					optimalupd = MP_mode ? Number(getTimer()) - a < 50 : Number(getTimer()) - a < 250;
					if(LITE_PHYS)
					{
						optimalupd = false;
					}
					if(!optimalupd)
					{
						bmpData_backed.dispose();
						i4 = 0;
						while(i4 < lampstotal)
						{
							lamps_sprites[i4] = null;
							++i4;
						}
						lamps_sprites = new Array();
					}
				}
			}
		}
		
		public function DimLight(param1:int) : void
		{
			lamps_power2[param1] = 0;
			a_int = 0;
			while(a_int < flarestotal)
			{
				if(flare[a_int].x == lamps_x[param1])
				{
					if(flare[a_int].y == lamps_y[param1])
					{
						flare[a_int].visible = false;
						flare[a_int].scaleX = flare[a_int].scaleY = 0;
					}
				}
				++a_int;
			}
			if(!MP_mode || MP_mode && MP_type == 2)
			{
				UpdateLightmap(false);
			}
		}
		
		public function EnLight(param1:int) : void
		{
			lamps_power2[param1] = 1;
			a_int = 0;
			while(a_int < flarestotal)
			{
				if(flare[a_int].x == lamps_x[param1])
				{
					if(flare[a_int].y == lamps_y[param1])
					{
						flare[a_int].scaleX = flare[a_int].scaleY = 1;
					}
				}
				++a_int;
			}
			if(!MP_mode || MP_mode && MP_type == 2)
			{
				UpdateLightmap(false);
			}
		}
		
		public function ShotLight(param1:int) : void
		{
			if(ALLOW_LIGHT_BREAK)
			{
				Effect(lamps_x[param1],lamps_y[param1],1,0,0);
				Effect(lamps_x[param1],lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
				Effect(lamps_x[param1],lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
				Effect(lamps_x[param1],lamps_y[param1],8,Math.random() - 0.5,Math.random() - 0.5);
				if(Math.random() > 0.5)
				{
					PlaySound(s_glass1,lamps_x[param1],lamps_y[param1]);
				}
				else
				{
					PlaySound(s_glass2,lamps_x[param1],lamps_y[param1]);
				}
				DimLight(param1);
			}
		}
		
		public function addNearBoxBSP(param1:int) : void
		{
			var _loc2_:int = 0;
			var _loc3_:int = 0;
			var _loc4_:int = 0;
			var _loc5_:int = 0;
			var _loc6_:int = 0;
			var _loc7_:int = 0;
			var _loc8_:int = 0;
			_loc2_ = MP_mode ? 3 : 1;
			_loc3_ = Math.floor((Number(boxx[param1]) - NearBoxBSP_left) / NearBoxBSP_stepsize) - _loc2_;
			_loc4_ = Math.floor((Number(boxy[param1]) - NearBoxBSP_top) / NearBoxBSP_stepsize) - _loc2_;
			_loc5_ = Math.ceil((boxx[param1] + boxw[param1] - NearBoxBSP_left) / NearBoxBSP_stepsize) + _loc2_;
			_loc6_ = Math.ceil((boxy[param1] + boxh[param1] - NearBoxBSP_top) / NearBoxBSP_stepsize) + _loc2_;
			_loc7_ = _loc3_;
			while(_loc7_ <= _loc5_)
			{
				_loc8_ = _loc4_;
				while(_loc8_ <= _loc6_)
				{
					NearBoxBSP[_loc7_][_loc8_].push(param1);
					_loc8_++;
				}
				_loc7_++;
			}
		}
		
		public function GetNearBoxBSP_at(param1:int, param2:int) : Vector.<int>
		{
			param1 = (param1 - NearBoxBSP_left) / NearBoxBSP_stepsize;
			param2 = (param2 - NearBoxBSP_top) / NearBoxBSP_stepsize;
			if(param1 < 0)
			{
				return NearBoxBSP_empty;
			}
			if(param1 >= NearBoxBSP_width)
			{
				return NearBoxBSP_empty;
			}
			if(param2 < 0)
			{
				return NearBoxBSP_empty;
			}
			if(param2 >= NearBoxBSP_height)
			{
				return NearBoxBSP_empty;
			}
			return NearBoxBSP[param1][param2];
		}
		
		public function PushSynonym(uid:String, id:int) : void
		{
			if(uid != null && uid != "" && uid.charAt(0) == "#")
			{
				synonym_uid[synonym_uid.length] = uid;
				synonym_id[synonym_id.length] = id;
			}
		}
		
		public function DecodeUID(param1:String) : *
		{
			if(param1 == null || param1 == "")
			{
				param1 = "-1";
			}
			if(param1.charAt(0) == "#")
			{
				if(synonym_id[synonym_uid.indexOf(param1)] == undefined)
				{
					return param1;
				}
				return synonym_id[synonym_uid.indexOf(param1)];
			}
			if(int(param1) + "" == param1)
			{
				return int(param1);
			}
			return param1;
		}
		
		public function movieClipHasLabel(param1:MovieClip, param2:String) : Boolean
		{
			var _loc3_:int = 0;
			var _loc4_:int = 0;
			var _loc5_:FrameLabel = null;
			_loc3_ = param1.currentLabels.length;
			_loc4_ = 0;
			while(_loc4_ < _loc3_)
			{
				if((_loc5_ = param1.currentLabels[_loc4_]).name == param2)
				{
					return true;
				}
				_loc4_++;
			}
			return false;
		}
		
		public function NumberLimited(param1:String) : Number
		{
			var _loc2_:Number = NaN;
			var _loc3_:* = null;
			_loc2_ = Number(param1);
			if(_loc2_ > 1000000000)
			{
				return 1000000000;
			}
			_loc3_ = _loc2_ + "";
			if(param1 != _loc3_)
			{
				return Math.pow(10,param1.length) - 1;
			}
			return _loc2_;
		}
		
		public function UserSays(who_asked:int, text:String) : void
		{
			if(user_says_trigger >= 0)
			{
				user_says_id = who_asked;
				user_says_text = text;
				EXEC_TRIGGER(user_says_trigger);
			}
		}
		
		public function LoadMap() : void
		{
			current_draw = new Sprite();
			graphics_3d_front.addChild(current_draw);
			var loadmap_stage:String = null;
			var POST_ERR_CODE:* = undefined;
			var xml:XML = null;
			var a:* = undefined;
			var b:* = undefined;
			var c:* = undefined;
			var mShape_front:* = undefined;
			var bookInfo:XML = null;
			var brdr:int = 0;
			var TEST_STRING:String = null;
			var watercolor1:String = null;
			var watercolor2:String = null;
			var region_i:int = 0;
			var trigger_i:int = 0;
			var timer_i:int = 0;
			var player_i:int = 0;
			var half_step_size:int = 0;
			var ldis:Number = NaN;
			var brtns:Number = NaN;
			var col:Array = null;
			var len:int = 0;
			var i:int = 0;
			var _mtx:Matrix = null;
			var SnowShape:* = undefined;
			var my_date:Date = null;
			var traces_start:Number = NaN;
			var traces_end:* = undefined;
			var bookInfo2:XML = null;
			var foreground:Boolean = false;
			var sprite_to_draw_at:Sprite = null;
			var bitmap_data:BitmapData = null;
			var color_hex:* = undefined;
			var matr:Matrix = null;
			var offset_x:Number = NaN;
			var offset_y:Number = NaN;
			var id:int = 0;
			var custom_image:Object = null;
			var dec:uint = 0;
			var n:* = undefined;
			var model:String = null;
			var layer_to_add:int = 0;
			var new_model:String = null;
			var new_command:int = 0;
			var new_upg:int = 0;
			var GAMEPLAY_MODIFICATIONS_parts:Array = null;
			var mods:int = 0;
			var GAMEPLAY_MODIFICATIONS_parts_parts:Array = null;
			var this_limit:Number = NaN;
			var cur_label:String = null;
			var ct:ColorTransform = null;
			var corner_sample_left:* = undefined;
			var corner_sample_right:* = undefined;
			var snow:Sprite = null;
			var rad:Number = NaN;
			var global_lamps_power:Number = NaN;
			var falloff:Number = NaN;
			var fallstep:Number = NaN;
			var lamps_from:int = 0;
			var bmp_w:* = undefined;
			var bmp_h:int = 0;
			var g:Sprite = null;
			var cTransform:ColorTransform = null;
			var clrs:Array = null;
			var poss:Array = null;
			var dip:Number = NaN;
			var alphas:Array = null;
			var matr0:Matrix = null;
			var siz:Number = NaN;
			var lamp_step:Number = NaN;
			var an:Number = NaN;
			var this_rad:Number = NaN;
			var xx:* = undefined;
			var yy:Number = NaN;
			var temp_snow:* = undefined;
			var player_version_os:String = null;
			var crash_failed:* = undefined;
			var crash_done:* = undefined;
			var _fullInfo:String = null;
			var _osSplitArr:Array = null;
			var _versionSplitArr:Array = null;
			var _osInfo:String = null;
			var _versionInfo:Number = NaN;
			var free_mc:MovieClip = null;
			waterList = new Vector.<PB2Water>();
			boxes = new Vector.<PB2Wall>();
			tnds = 10;
			loadmap_stage = "0";
			mxnds1 = 0;
			mxnds2 = 0;
			mxnds3 = 0;
			tnds = 10;
			try
			{
				optimalupd = true;
				POST_ERR_CODE = "";
				CUR_MUSIC_VOLUME = 0;
				MUSIC_COLDDOWN = 100;
				loadmap_stage = "1001";
				SHOW_FRAG_MESSAGES = true;
				level_variables = {};
				dm_slots_on_spawn = new Array();
				dm_max_guns_on_spawn = 3;
				user_says_trigger = -1;
				on_user_connected_trigger = -1;
				on_user_disconnected_trigger = -1;
				last_user_join = -1;
				last_user_left = -1;
				lock_lag_controls = false;
				if(MP_mode && MP_app)
				{
					multiplayer_repsawn_timer_speed = 1.5;
				}
				else
				{
					multiplayer_repsawn_timer_speed = 1;
				}
				ENABLE_LEVEL_LOGIC_ERRORS = false;
				if(MP_app)
				{
					dm_slots_on_spawn = [6,1,4,2,3,8,5,9,7];
				}
				if(!MP_spectator)
				{
					Mouse.hide();
				}
				else
				{
					Mouse.show();
				}
				loadmap_stage += "; " + mapdata.slice(0,3);
				loadmap_stage += "; " + (mapdata.slice(0,3) == "<q.");
				if(mapdata.slice(0,3) == "<q.")
				{
					loadmap_stage += "; eq qp";
					mapdata = un_qpack(mapdata);
					loadmap_stage += "; unqp ok";
				}
				loadmap_stage += "; qp is " + qpack_pattern_length;
				loadmap_stage += "; pass qp eq tst";
				firstframe = true;
				loadmap_stage += "; bfr parse";
				mapdata = replace("[i]","&", mapdata);
				mapdata = replace("[eq]","=",mapdata);
				xml = new XML("<r>" + mapdata + "</r>");
				loadmap_stage = "1004";
				loadmap_stage = "1005";
				if(PSYCHOBLOOD_MODE == 1)
				{
					pb4.visible = false;
					pb0.gotoAndStop(PSYCHOBLOOD_MODE);
					pb1.gotoAndStop(PSYCHOBLOOD_MODE);
					pb2.gotoAndStop(PSYCHOBLOOD_MODE);
					pb3.gotoAndStop(PSYCHOBLOOD_MODE);
				}
				else if(PSYCHOBLOOD_MODE == 2)
				{
					pb0.gotoAndStop(PSYCHOBLOOD_MODE);
					pb1.gotoAndStop(PSYCHOBLOOD_MODE);
					pb2.gotoAndStop(PSYCHOBLOOD_MODE);
					pb3.gotoAndStop(PSYCHOBLOOD_MODE);
				}
				loadmap_stage = "1006";
				pb0.alpha = 0;
				pb1.alpha = 0;
				pb2.alpha = 0;
				pb3.alpha = 0;
				pb4.alpha = 0;
				loadmap_stage = "1007";
				boxestotal = 0;
				doorstotal = 0;
				regionstotal = 0;
				lampstotal = 0;
				gunstotal = 0;
				pushstotal = 0;
				luasTotal = 0;
				bgstotal = 0;
				loadmap_stage = "1008";
				mShape = new Sprite();
				mShape_front = new Sprite();
				loadmap_stage = "2";

				if (!FORCE_CUSTOM_MAP && !MP_mode && HELL_MODE) {
					level_variables["#HM_TimeLimit"] = 120;
					luas[luasTotal] = new Object();
					luas[luasTotal].uid = "#HM_Lua";
					luas[luasTotal].code = "exec(597, '#isHell', ''); \n" + 
										   "if _getLevelVar('#isHell') == '1' then\n" + 
										   "	local player = getLocalPlayer();\n" + 
										   "	local startTime = timeMS();\n" + 
										   "	local lastUpdate = startTime - 1000;\n" + 
										   "	local timeLimit = tonumber(_getLevelVar('#HM_TimeLimit')) * 1000;\n" + 
										   "	local done = false\n" + 
										   "	frameRegister(function()\n" + 
										   "		if done then return end\n" + 
										   "		local now = timeMS();\n" + 
										   "		if now - lastUpdate > 1000 then\n" + 
										   "			local left = (timeLimit - (now - startTime)) / 1000;\n" + 
										   "			if left < 0 then\n" + 
										   "				player.health = 0;\n" + 
										   "				print('&1Too late!&0');\n" + 
										   "				done = true\n" + 
										   "			else\n" + 
										   "				local min = math.floor(left / 60); \n" + 
										   "				local sec = math.floor(left % 60); \n" + 
										   "				setHint(tostring(min) .. ':' .. string.format('%02d', sec)); \n" + 
										   "				lastUpdate = now;\n" + 
										   "			end\n" + 
										   "		end \n" + 
										   "	end);\n" + 
										   "end";
					PushSynonym("#HM_Lua", luasTotal);
					++luasTotal;
				}

				loadmap_stage = "2.1";

				for each(bookInfo in xml.children())
				{
					a = bookInfo.name();
					b = new Array();
					for each(bookInfo2 in bookInfo.attributes())
					{
						b["#" + bookInfo2.name()] = bookInfo2;
					}
					if(a == "box")
					{
						boxx[boxestotal] = new Number(b["#x"]);
						boxy[boxestotal] = new Number(b["#y"]);
						boxw[boxestotal] = new Number(b["#w"]);
						boxh[boxestotal] = new Number(b["#h"]);
						boxmat[boxestotal] = new int(b["#m"]);
						boxes[boxestotal] = new PB2Wall(b["#x"], b["#y"], b["#w"], b["#h"], b["#m"]);
						
						if(!isNaN(boxx[boxestotal]) && !isNaN(boxy[boxestotal]) && !isNaN(boxw[boxestotal]) && !isNaN(boxh[boxestotal]) && !isNaN(boxmat[boxestotal]))
						{
							if(boxestotal == 0)
							{
								NearBoxBSP_left = boxx[boxestotal];
								NearBoxBSP_top = boxy[boxestotal];
								NearBoxBSP_right = boxx[boxestotal] + boxw[boxestotal];
								NearBoxBSP_bottom = boxy[boxestotal] + boxh[boxestotal];
							}
							else
							{
								NearBoxBSP_left = Math.min(NearBoxBSP_left,boxx[boxestotal]);
								NearBoxBSP_top = Math.min(NearBoxBSP_top,boxy[boxestotal]);
								NearBoxBSP_right = Math.max(NearBoxBSP_right,boxx[boxestotal] + boxw[boxestotal]);
								NearBoxBSP_bottom = Math.max(NearBoxBSP_bottom,boxy[boxestotal] + boxh[boxestotal]);
							}
							++boxestotal;
						}
						else
						{
							ChatNewMsg("<font color=\"#FF0000\">NOTE: Wall object contains error { id:" + boxestotal + ", x:" + boxx[boxestotal] + ", y:" + boxy[boxestotal] + ", width:" + boxw[boxestotal] + ", height:" + boxh[boxestotal] + " }</font>".split("NaN").join("\"NOT A NUMBER\""));
						}
					}
					if(a == "image")
					{
						CustomImageRegister(b["#id"],b["#width"],b["#height"]);
					}
					if(a == "bg")
					{
						var separate:Boolean = false;
						foreground = b["#f"] == "1" || b["#f"] == "true";
						sprite_to_draw_at = foreground ? mShape_front : mShape;
						if (b["#uid"] != undefined && b["#uid"] != "")
						{	
							sprite_to_draw_at = new Sprite();
							graphics_3d.addChild(sprite_to_draw_at);
							separate = true;
						}
						if(b["#a"] != "-1" && b["#a"] != "" && b["#a"] != undefined)
						{
							if (!separate) sprite_to_draw_at = new Sprite();
							attachments.push({
								"parent":b["#a"],
								"child":sprite_to_draw_at,
								"type":1,
								"foreground":foreground
							});
							separate = true;
						}
						bitmap_data = null;
						color_hex = String(b["#c"]);
						matr = null;
						offset_x = 0;
						offset_y = 0;
						if(b["#u"] != undefined)
						{
							offset_x = Number(b["#u"]);
						}
						if(b["#v"] != undefined)
						{
							offset_y = Number(b["#v"]);
						}
						if(offset_x != 0 || offset_y != 0)
						{
							matr = new Matrix(1,0,0,1,offset_x,offset_y);
						}
						if(b["#m"] == "0")
						{
							bitmap_data = new panel_tile();
						}
						else if(b["#m"] == "1")
						{
							bitmap_data = new ground_tile();
						}
						else if(b["#m"] == "2")
						{
							bitmap_data = new panel2_tile();
						}
						else if(b["#m"] == "3")
						{
							bitmap_data = new white();
						}
						else if(b["#m"] == "4")
						{
							bitmap_data = new slider_tile();
						}
						else if(b["#m"] == "5")
						{
							bitmap_data = new panel3_tile();
						}
						else if(b["#m"] == "6")
						{
							bitmap_data = new red();
						}
						else if(b["#m"] == "7")
						{
							bitmap_data = new green();
						}
						else if(b["#m"] == "8")
						{
							bitmap_data = new blue();
						}
						else if(b["#m"] == "9")
						{
							bitmap_data = new panel4_tile();
						}
						else if(b["#m"] == "10")
						{
							bitmap_data = new panel5_tile();
						}
						else if(b["#m"] == "11")
						{
							bitmap_data = new panel6_tile();
						}
						else if(b["#m"] == "12")
						{
							bitmap_data = new panel7_tile();
						}
						else if(b["#m"] == "13")
						{
							bitmap_data = new panel8_tile();
						}
						else if(b["#m"] == "14")
						{
							bitmap_data = new pixel_wall();
						}
						else if(b["#m"] == "15")
						{
							bitmap_data = new pixel_bg();
						}
						else if(b["#m"] == "16")
						{
							bitmap_data = new pixel_open_door();
						}
						else
						{
							b["#m"] = String(b["#m"]);
							if(b["#m"].length > 1)
							{
								if(b["#m"].charAt(0) == "c")
								{
									id = int(b["#m"].substr(1));
									custom_image = FindCustomImageObject(id);
									if(custom_image == null)
									{
										throw new Error("Custom image of ID " + id + " needs to be added as Custom Image object before it can be used as background wall image.");
									}
									bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
									custom_image.load_callback_params.push({
										"bitmap_data":bitmap_data,
										"custom_image":custom_image,
										"color_hex":color_hex,
										"mat":b["#m"]
									});
									custom_image.load_callbacks.push(function(param1:*):*
									{
										var _loc2_:uint = 0;
										bitmap_data = param1.bitmap_data;
										custom_image = param1.custom_image;
										color_hex = param1.color_hex;
										bitmap_data.lock();
										bitmap_data.fillRect(bitmap_data.rect,0);
										bitmap_data.draw(custom_image.bitmap);
										if(color_hex != undefined)
										{
											if(color_hex.length == 7)
											{
												color_hex = color_hex.substr(1);
												_loc2_ = uint(parseInt(color_hex,16));
												bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((_loc2_ >> 16 & 255) / 255 * 2,(_loc2_ >> 8 & 255) / 255 * 2,(_loc2_ & 255) / 255 * 2));
											}
										}
										bitmap_data.unlock();
									});
								}
							}
						}
						if(bitmap_data != null)
						{
							if(color_hex != undefined)
							{
								if(color_hex.length == 7)
								{
									color_hex = color_hex.substr(1);
									dec = uint(parseInt(color_hex,16));
									bitmap_data.colorTransform(bitmap_data.rect,new ColorTransform((dec >> 16 & 255) / 255 * 2,(dec >> 8 & 255) / 255 * 2,(dec & 255) / 255 * 2));
								}
							}
							sprite_to_draw_at.graphics.beginBitmapFill(bitmap_data,matr,true,true);
							sprite_to_draw_at.graphics.moveTo(Number(b["#x"]),Number(b["#y"]));
							sprite_to_draw_at.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]));
							sprite_to_draw_at.graphics.lineTo(Number(b["#x"]) + Number(b["#w"]),Number(b["#y"]) + Number(b["#h"]));
							sprite_to_draw_at.graphics.lineTo(Number(b["#x"]),Number(b["#y"]) + Number(b["#h"]));
							sprite_to_draw_at.graphics.endFill();
						}
						if(spec_debug)
						{
							doorstotal += Math.random() > 0.2 && CMPG_name != ".:Er" + "ic" + " " + "Gu" + "rt:." ? 1 : 0;
						}
						bgs[bgstotal] = separate ? sprite_to_draw_at : null;
						bgx[bgstotal] = new Number(b["#x"]);
						bgy[bgstotal] = new Number(b["#y"]);
						bgw[bgstotal] = new Number(b["#w"]);
						bgh[bgstotal] = new Number(b["#h"]);
						bgm[bgstotal] = new Number(b["#m"]);
						bgu[bgstotal] = Number(offset_x);
						bgv[bgstotal] = Number(offset_y);
						bg_cast[bgstotal] = b["#s"] != "false";
						PushSynonym(b["#uid"], bgstotal);
						++bgstotal;
					}
					if(a == "pushf")
					{
						pushx[pushstotal] = new Number(b["#x"]);
						pushy[pushstotal] = new Number(b["#y"]);
						pushw[pushstotal] = new Number(b["#w"]) + pushx[pushstotal];
						pushh[pushstotal] = new Number(b["#h"]) + pushy[pushstotal];
						pushtox[pushstotal] = new Number(b["#tox"]);
						pushtoy[pushstotal] = new Number(b["#toy"]);
						pushstab[pushstotal] = new Number(b["#stab"]);
						pushdamage[pushstotal] = new Number(b["#damage"]);
						PushSynonym(b["#uid"],pushstotal);
						if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
						{
							attachments.push({
								"parent":b["#attach"],
								"child":pushstotal,
								"type":3
							});
						}
						++pushstotal;
					}
					if(a == "water")
					{
						mc = new water();
						waters[waterstotal] = mc;
						mc.hex = b["#hex"];
						mc.title = b["#title"];

						PushSynonym(b["#uid"], waterstotal);
						
						wax[waterstotal] = new Number(b["#x"]);
						way[waterstotal] = new Number(b["#y"]);
						waw[waterstotal] = new Number(b["#w"]);
						wah[waterstotal] = new Number(b["#h"]);
						wadamage[waterstotal] = new Number(b["#damage"]);

						// Adding a copy of PB2Water
						var waterObj:PB2Water = new PB2Water(b["#x"], b["#y"], b["#w"], b["#h"], b["#damage"]);	
						if(b["#hex"]) 	waterObj.setColor(b["#hex"]);
						if(b["#title"]) waterObj.setName(b["#title"]);
						waterObj.setFriction(b["#friction"] != "0" && b["#friction"] != "false");
						waterList[waterstotal] = waterObj;

						wa_friction[waterstotal] = b["#friction"] != "0" && b["#friction"] != "false";
						if(!FORCE_CUSTOM_MAP && !MP_mode)
						{
							if(LOW_HPS)
							{
								wadamage[waterstotal] = Number(wadamage[waterstotal]) / 800 * 130;
							}
						}
						if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
						{
							attachments.push({
								"parent":b["#attach"],
								"id":waterstotal,
								"child":mc,
								"type":5
							});
						}
						++waterstotal;
					}
					if(a == "door")
					{
						var door:PB2Door = new PB2Door(
							Number(b["#x"]),
							Number(b["#y"]),
							Number(b["#w"]),
							Number(b["#h"]),
							b["#vis"] == "true",
							b["#moving"] == "true",
							Number(b["#tarx"]),
							Number(b["#tary"]),
							Number(b["#maxspeed"])
						);
						graphics_3d.addChildAt(door, graphics_3d.numChildren);

						if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
						{
							attachments.push({
								"parent": b["#attach"],
								"child": door,
								"type": 0
							});
						}
						PushSynonym(b["#uid"], doorstotal);
						doors[doorstotal++] = door;
					}
					if(a == "region")
					{
						var region:PB2Region = new PB2Region(Number(b["#x"]), Number(b["#y"]), Number(b["#w"]), Number(b["#h"]));
						regions[regionstotal] = region;
						if(b["#use_target"].charAt(0) == "#")
						{
							region.use_target_uid = b["#use_target"];
						}
						else
						{
							region.use_target = new int(b["#use_target"]);
						}
						region.use_on = new int(b["#use_on"]);
						region.play_sound = true;
						if(region.use_on == PB2Region.USE_KEY_BUTTON || region.use_on == PB2Region.USE_KEY_BUTTON_RED || region.use_on == PB2Region.USE_KEY_BUTTON_BLUE)
						{
							// mc;
							if(region.use_on == PB2Region.USE_KEY_BUTTON)
							{
								mc = game.addChildAt(new switchh(),0) as MovieClip;
							}
							if(region.use_on == PB2Region.USE_KEY_BUTTON_RED)
							{
								mc = game.addChildAt(new switchh_red(),0) as MovieClip;
							}
							if(region.use_on == PB2Region.USE_KEY_BUTTON_BLUE)
							{
								mc = game.addChildAt(new switchh_blue(),0) as MovieClip;
							}
							NoMouse(mc);
							mc.x = region.x + Number(region.w) / 2;
							mc.y = region.y + Number(region.h) / 2;
							mc.gotoAndStop(1);
							region.mc = mc;
						}
						if(region.use_on == PB2Region.USE_KEY)
						{
							region.use_on = PB2Region.USE_KEY_BUTTON;
						}
						if(region.use_on == PB2Region.USE_KEY_RED)
						{
							region.use_on = PB2Region.USE_KEY_BUTTON_RED;
						}
						if(region.use_on == PB2Region.USE_KEY_BLUE)
						{
							region.use_on = PB2Region.USE_KEY_BUTTON_BLUE;
						}
						if(region.use_on == PB2Region.USE_KEY_SILENT || region.use_on == PB2Region.USE_KEY_BUTTON_SILENT)
						{
							region.play_sound = false;
							if(region.use_on == PB2Region.USE_KEY_BUTTON_SILENT) // "USE" key without sound
							{
								mc = game.addChildAt(new switchh(),0) as MovieClip;
								NoMouse(mc);
								mc.x = region.x + Number(region.w) / 2;
								mc.y = region.y + Number(region.h) / 2;
								mc.gotoAndStop(1);
								region.mc = mc;
							}
							region.use_on = PB2Region.USE_KEY_BUTTON;
						}
						PushSynonym(b["#uid"],regionstotal);
						if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
						{
							attachments.push({
								"parent":b["#attach"],
								"child":region,
								"type":4
							});
							if(region.mc)
							{
								attachments.push({
									"parent":b["#attach"],
									"child":region.mc,
									"type":2
								});
							}
						}
						++regionstotal;
					}
					if(a == "trigger")
					{
						var trig:PB2Trigger = new PB2Trigger(
							b["#uid"],
							b["#enabled"] == "true",
							int(b["#maxcalls"])
						);
						var action;
						for (i = 1; i < 11; i++) {
							if(b["#a" + i] != undefined) {
								action = b["#a" + i];
								action = action.split("|");
								if (action[0] != -1) {
									var vec = new Vector.<String>();
									for (var argI = 1; argI < action.length; argI++) {
										vec.push(action[argI].split("[i]").join("|"))
									}
									trig.addAction(int(action[0]), vec)
								}
							}
						}
						triggers[triggerstotal] = trig;
						PushSynonym(b["#uid"],triggerstotal);
						++triggerstotal;
					}
					if(a == "timer")
					{
						timers[timerstotal] = new Object();
						timers[timerstotal].enabledd = new Boolean();
						if(b["#enabled"] == "true")
						{
							timers[timerstotal].enabledd = true;
						}
						else
						{
							timers[timerstotal].enabledd = false;
						}
						timers[timerstotal].s_enabledd = timers[timerstotal].enabledd;
						timers[timerstotal].s_maxcalls = timers[timerstotal].maxcalls = new int(b["#maxcalls"]);
						if(b["#target"].charAt(0) == "#")
						{
							timers[timerstotal].actions_target = b["#target"];
						}
						else
						{
							timers[timerstotal].actions_target = new int(b["#target"]);
						}
						timers[timerstotal].s_ddelay = timers[timerstotal].ddelay = new int(b["#delay"]);
						timers[timerstotal].ticknew = new int(0);
						PushSynonym(b["#uid"],timerstotal);
						++timerstotal;
					}
					if(a == "lua") {
						luas[luasTotal] = new Object();
						luas[luasTotal].uid = b["#uid"];
						luas[luasTotal].code = b["#src"];
						PushSynonym(b["#uid"], luasTotal);
						++luasTotal;
					}
					if(a == "barrel")
					{
						if(!MP_mode)
						{
							if(b["#model"] == "bar_orange")
							{
								mc = game.addChildAt(new bar_orange(),game.numChildren) as MovieClip;
							}
							else if(b["#model"] == "bar_blue")
							{
								mc = game.addChildAt(new bar_blue(),game.numChildren) as MovieClip;
							}
							else if(b["#model"] == "bar_red")
							{
								mc = game.addChildAt(new bar_red(),game.numChildren) as MovieClip;
							}
							NoMouse(mc);
							mc.mdl = b["#model"];
							mc.x = new Number(b["#x"]);
							mc.y = new Number(b["#y"]);
							mc.tox = new Number(b["#tox"]);
							mc.toy = new Number(b["#toy"]);
							mc.master = -1;
							PushSynonym(b["#uid"],barrelstotal);
							create_barrel(mc);
						}
						else
						{
							MP_startbarrels[MP_startbarrels.length] = {
								"x":new Number(b["#x"]),
								"y":new Number(b["#y"]),
								"tox":new Number(b["#tox"]),
								"toy":new Number(b["#toy"]),
								"mdl":b["#model"]
							};
						}
					}
					if(a == "vehicle")
					{
						n = -1;
						if(b["#model"] == "veh_jeep")
						{
							mc = game.addChildAt(new veh_jeep(),game.numChildren) as MovieClip;
							n = 0;
						}
						if(b["#model"] == "veh_walker")
						{
							mc = game.addChildAt(new veh_walker(),game.numChildren) as MovieClip;
							n = 1;
						}
						if(b["#model"] == "veh_capsule")
						{
							mc = game.addChildAt(new veh_capsule(),game.numChildren) as MovieClip;
							n = 2;
						}
						if(b["#model"] == "veh_crate")
						{
							mc = game.addChildAt(new veh_crate(),game.numChildren) as MovieClip;
							n = 3;
						}
						if(b["#model"] == "veh_drone")
						{
							mc = game.addChildAt(new veh_drone(),game.numChildren) as MovieClip;
							n = 4;
						}
						if(b["#model"] == "veh_rope")
						{
							mc = game.addChildAt(new veh_rope(),game.numChildren) as MovieClip;
							n = 5;
						}
						if(b["#model"] == "veh_hh")
						{
							mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
							n = 6;
							//if(!HINTS)
							//{
							//   origin.visible = false;
							//}
						}
						if(b["#model"] == "veh_corvette")
						{
							mc = game.addChildAt(new veh_corvette(),game.numChildren) as MovieClip;
							n = 7;
						}
						NoMouse(mc);
						mc.x = new Number(b["#x"]);
						mc.y = new Number(b["#y"]);
						mc.tox = new Number(b["#tox"]);
						mc.toy = new Number(b["#toy"]);
						PushSynonym(b["#uid"],vehiclestotal);
						create_vehicle(mc,n,new Number(b["#side"]));
						mc.hea *= new Number(b["#hpp"]) / 100;
						mc.hmax *= new Number(b["#hpp"]) / 100;
						if(!ARCADE_GAME_MODE)
						{
							mc.hea *= 0.25;
							mc.hmax *= 0.25;
						}
						if(!FORCE_CUSTOM_MAP)
						{
							if(!MP_mode)
							{
								if(LOW_HPS)
								{
									if(n == 7)
									{
										mc.hea *= 0.25;
										mc.hmax *= 0.25;
									}
								}
							}
						}
					}
				}
				NearBoxBSP_stepsize = Math.max(100,Math.max(NearBoxBSP_right - NearBoxBSP_left,NearBoxBSP_bottom - NearBoxBSP_top) / 64);
				NearBoxBSP_stepsize = Math.max(NearBoxBSP_stepsize,Math.sqrt((NearBoxBSP_right - NearBoxBSP_left) * (NearBoxBSP_bottom - NearBoxBSP_top) / boxestotal));
				brdr = MP_mode ? 3 : 1;
				NearBoxBSP_left -= NearBoxBSP_stepsize * brdr;
				NearBoxBSP_right += NearBoxBSP_stepsize * 2 * brdr;
				NearBoxBSP_top -= NearBoxBSP_stepsize * brdr;
				NearBoxBSP_bottom += NearBoxBSP_stepsize * 2 * brdr;
				NearBoxBSP_width = Math.ceil((NearBoxBSP_right - NearBoxBSP_left) / NearBoxBSP_stepsize);
				NearBoxBSP_height = Math.ceil((NearBoxBSP_bottom - NearBoxBSP_top) / NearBoxBSP_stepsize);
				NearBoxBSP = new Vector.<Vector.<Vector.<int>>>(NearBoxBSP_width);
				i = 0;
				while(i < NearBoxBSP_width)
				{
					NearBoxBSP[i] = new Vector.<Vector.<int>>(NearBoxBSP_height);
					i2 = 0;
					while(i2 < NearBoxBSP_height)
					{
						NearBoxBSP[i][i2] = new Vector.<int>(0,false);
						++i2;
					}
					i++;
				}
				loadmap_stage = "3";
				i = 0;
				while(i < boxestotal)
				{
					addNearBoxBSP(i);
					xx = 75;
					if(TraceLine_no_doors(Number(boxx[i]) - 15,Number(boxy[i]) - 30,Number(boxx[i]) - 15,boxy[i] + xx))
					{
						if(TraceLine_no_doors(boxx[i] + 5,Number(boxy[i]) - 5,boxx[i] + 5,Number(boxy[i]) - 50))
						{
							mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
							NoMouse(mc);
							n = 6;
							mc.x = new Number(boxx[i]);
							mc.y = new Number(boxy[i]);
							create_vehicle(mc,n,new Number(1));
						}
					}
					if(TraceLine_no_doors(boxx[i] + boxw[i] + 15,Number(boxy[i]) - 30,boxx[i] + boxw[i] + 15,boxy[i] + xx))
					{
						if(TraceLine_no_doors(boxx[i] + boxw[i] - 5,Number(boxy[i]) - 5,boxx[i] + boxw[i] - 5,Number(boxy[i]) - 50))
						{
							mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
							NoMouse(mc);
							n = 6;
							mc.x = new Number(boxx[i] + boxw[i]);
							mc.y = new Number(boxy[i]);
							create_vehicle(mc,n,new Number(-1));
						}
					}
					i++;
				}
				TEST_STRING = "";
				i = 0;
				while(i < NearBoxBSP_width)
				{
					i2 = 0;
					while(i2 < NearBoxBSP_height)
					{
						TEST_STRING += NearBoxBSP[i][i2].length + " ";
						++i2;
					}
					TEST_STRING += "\n";
					i++;
				}
				i = 0;
				while(i < doorstotal)
				{
					if(doors[i].vis)
					{
						n = 6;
						mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
						NoMouse(mc);
						mc.x = doors[i].x;
						mc.y = doors[i].y;
						create_vehicle(mc,n,new Number(1));
						mc.origin.visible = false;
						mc.attached = i;
						mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
						NoMouse(mc);
						mc.x = doors[i].x + doors[i].w;
						mc.y = doors[i].y;
						create_vehicle(mc,n,new Number(-1));
						mc.origin.visible = false;
						mc.attached = i;
					}
					i++;
				}
				i = 0;
				while(i < NearBoxBSP_width)
				{
					i2 = 0;
					while(i2 < NearBoxBSP_height)
					{
						NearBoxBSP[i][i2].fixed = true;
						++i2;
					}
					i++;
				}
				loadmap_stage = "4";
				watercolor1 = "";
				watercolor2 = "";
				for each(bookInfo in xml.children())
				{
					a = bookInfo.name();
					b = new Array();
					for each(bookInfo2 in bookInfo.attributes())
					{
						b["#" + bookInfo2.name()] = bookInfo2;
					}
					if(a == "decor")
					{
						loadmap_stage = "4001";
						model = String(b["#model"]);
						bitmap_data = null;
						if(model.length > 1)
						{
							if(model.charAt(0) == "c")
							{
								if(!isNaN(parseInt(model.substr(1),10)))
								{
									id = int(model.substr(1));
									custom_image = FindCustomImageObject(id);
									if(custom_image == null)
									{
										throw new Error("Custom image of ID " + id + " (" + model + ") needs to be added as Custom Image object before it can be used as decoration model.");
									}
									bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
									custom_image.load_callback_params.push({
										"bitmap_data":bitmap_data,
										"custom_image":custom_image
									});
									custom_image.load_callbacks.push(function(param1:*):*
									{
										bitmap_data = param1.bitmap_data;
										custom_image = param1.custom_image;
										bitmap_data.lock();
										bitmap_data.fillRect(bitmap_data.rect,0);
										bitmap_data.draw(custom_image.bitmap);
										bitmap_data.unlock();
									});
								}
							}
						}
						layer_to_add = 0;
						if(bitmap_data != null || b["#f"] != undefined)
						{
							if(b["#f"] == "1" || b["#f"] == "true")
							{
								layer_to_add = 1;
							}
							else if(b["#f"] == "0" || b["#f"] == "false" || b["#f"] == undefined)
							{
								layer_to_add = 0;
							}
							else
							{
								layer_to_add = 2;
							}
						}
						else
						{
							layer_to_add = model == "back_lamp_vertical" || model == "back_lamp_horizontal" || model == "back_lamp_vertical_on" || model == "back_lamp_horizontal_on" || model == "text" || model == "text2" || model == "text3" || model == "pixel_teleport" || model == "ditzy_flag_blue" || model == "ditzy_flag_red" || model == "ditzy_flag_dark" || model == "ditzy_flag_empty" || model == "darkstar_healing_kit" || model == "darkstar_holo_on" || model == "darkstar_holo_on_red" || model == "darkstar_holo_off" || model == "darkstar_holo_earth" || model == "darkstar_holo_c9" || model == "doomzerker_locker" || model == "doomzerker_locker2" || model == "doomzerker_locker3" || model == "darkstar_tree1" || model == "darkstar_tree2" || model == "darkstar_pot" || model == "darkstar_pot_tree1" || model == "darkstar_pot_tree2" ? 0 : 1;
						}
						if(layer_to_add == 0)
						{
							mc = game.addChildAt(new decor(),0) as MovieClip;
						}
						else if(layer_to_add == 1)
						{
							mc = game.addChildAt(new decor(),game.numChildren) as MovieClip;
						}
						else
						{
							mc = graphics_3d_front.addChildAt(new decor(), graphics_3d_front.numChildren) as MovieClip;
						}
						mc.custom_bitmap = new Bitmap();
						mc.addChild(mc.custom_bitmap);
						if(b["#u"] != undefined)
						{
							mc.custom_bitmap.x = Number(b["#u"]);
						}
						if(b["#v"] != undefined)
						{
							mc.custom_bitmap.y = Number(b["#v"]);
						}
						NoMouse(mc);
						mc.x = new Number(b["#x"]);
						mc.y = new Number(b["#y"]);
						mc.rotation = Number(b["#r"]) || 0;
						mc.scaleX = b["#sx"] != undefined ? Number(b["#sx"]) : 1;
						mc.scaleY = b["#sy"] != undefined ? Number(b["#sy"]) : 1;
						if(bitmap_data == null)
						{
							if(!movieClipHasLabel(mc,model))
							{
								throw new Error("Decoration \"" + model + "\" does not exist in current version.");
							}
							mc.gotoAndStop(model);
							mc.custom_bitmap.visible = false;
							if (mc.txt != undefined)
								mc.txt.text = b["#text"] != undefined ? String(b["#text"]) : "Hello World!";
						}
						else
						{
							mc.gotoAndStop("null");
							mc.custom_bitmap.bitmapData = bitmap_data;
							mc.custom_bitmap.smoothing = true;
							mc.custom_bitmap.visible = true;
						}
						decors[decorstotal] = mc;
						PushSynonym(b["#uid"],decorstotal);
						if(b["#attach"] != "-1" && b["#attach"] != "" && b["#attach"] != undefined)
						{
							attachments.push({
								"parent":b["#attach"],
								"child":mc,
								"type":2
							});
						}
						++decorstotal;
					}
					if(a == "gun")
					{
						loadmap_stage = "4002";
						new_model = b["#model"];
						new_command = int(b["#command"]);
						new_upg = int(b["#upg"]);
						if (HELL_MODE) {
							if (!MP_mode) {
								if (new_model == "gun_real_rifle" && CUR_LOADING != "c29a") {
									new_command = 1; // Beta, usurps+civils
									new_model = "gun_rayrifle";
								}
								switch (new_model) {
									case "gun_arifle":
									case "gun_arifle2":
									case "gun_pistol2":
									case "gun_bfg":
										new_command = 1;
										break;
									case "gun_rl":
										new_command = 1;
										new_model = "lostmydollar_rpg"
										break;
									case "gun_railgun":
										new_command = 1;
										new_model = "darkstar_1_railgun2";
										break;
									default:
										break;
								}
								if (new_model == "gun_railgun2" && CUR_LOADING != "c29a" ) {
									new_command = 1;
								}
							}
							if (new_command != mens[MP_myid].team && new_command != -1) {
								new_upg = 3;
							}
						}
						
						if(MP_app)
						{
							GAMEPLAY_MODIFICATIONS_parts = GAMEPLAY_MODIFICATIONS.split(",");
							for(mods = 0; mods < GAMEPLAY_MODIFICATIONS_parts.length; mods++)
							{
								GAMEPLAY_MODIFICATIONS_parts_parts = GAMEPLAY_MODIFICATIONS_parts[mods].split("=");
								if(GAMEPLAY_MODIFICATIONS_parts_parts.length != 2)
								{
									continue;
								}
								if(GAMEPLAY_MODIFICATIONS_parts_parts[0] != new_model)
								{
									continue;
								}
								switch(GAMEPLAY_MODIFICATIONS_parts_parts[1])
								{
									case "gun_invisgun":
										break;
									case "gun_sharkgun":
										break;
									case "gun_pixel_rifle":
										break;
									case "gun_pixel_rl":
										break;
									case "gun_vehminigun":
										break;
									case "gun_vehminigl":
										break;
									case "gun_glock":
										break;
									case "gun_m4a1":
										break;
									case "gun_vehcannon":
										break;
									case "gun_sp_sh":
										break;
									case "item_grenade":
										break;
									case "item_port":
										break;
									case "item_shield":
										break;
									case "gun_vgun":
										break;
									default:
										new_model = GAMEPLAY_MODIFICATIONS_parts_parts[1];
										break;
								}
							}
						}
						loadmap_stage += "; " + new_model;
						PushSynonym(b["#uid"],gunstotal);
						if(LOW_HPS)
						{
							if(!MP_mode)
							{
								if(!FORCE_CUSTOM_MAP)
								{
									if(new_model == "gun_railgun2")
									{
										if(new_command != 0)
										{
											if(new_upg > 1)
											{
												if(CUR_LOADING != "c41a")
												{
													new_model = "gun_sniper";
												}
											}
										}
									}
									if(new_model == "gun_bfg")
									{
										if(new_command != 0)
										{
											if(new_upg > 0)
											{
												new_model = "gun_sp_sh";
											}
										}
									}
								}
							}
						}
						mc = MakeGunByClass(new_model,{
							"x":Number(b["#x"]),
							"y":Number(b["#y"]),
							"upg":int(new_upg),
							"command":int(new_command)
						});
					}
					if(a == "song")
					{
						PushSynonym(b["#uid"],custom_songs.length);
						CustomSongRegister(b["#url"],b["#volume"],b["#loop"] == true,DecodeUID(b["#callback"]));
					}
					if(a == "inf")
					{
						loadmap_stage = "4003";
						loadmap_stage += ";mrk=" + b["#mark"];
						if(b["#mark"] == "watercolor")
						{
							watercolor1 = String(b["#forteam"]);
						}
						if(b["#mark"] == "acidcolor")
						{
							watercolor2 = String(b["#forteam"]);
						}
						if(b["#mark"] == "watertitle")
						{
							WATER_NAME = String(b["#forteam"]);
						}
						if(b["#mark"] == "acidtitle")
						{
							ACID_NAME = String(b["#forteam"]);
						}
						if(b["#mark"] == "sky")
						{
							sky.gotoAndStop(int(b["#forteam"]));
						}
						if(b["#mark"] == "shadowmap_size")
						{
							step_size = int(b["#forteam"]);
						}
						if(b["#mark"] == "gravity")
						{
							gravity = Number(b["#forteam"]);
						}
						if(b["#mark"] == "casual")
						{
							CASUAL_MODE = true;
							new_active.visible = true;
							new_active.gotoAndPlay(1);
						}
						if(b["#mark"] == "nobase")
						{
							NOBASE = true;
						}
						if(b["#mark"] == "game2")
						{
							PLAZMA_GAME = false;
						}
						if(b["#mark"] == "strict_casual")
						{
							CASUAL_MODE = true;
							STRICT_MODE = true;
							new_active.visible = true;
							new_active.gotoAndPlay(1);
						}
						if(b["#mark"] == "no_auto_revive")
						{
							AUTO_REVIVE = false;
						}
						if(b["#mark"] == "meat")
						{
							MEAT_MODE = true;
						}
						if(b["#mark"] == "nopsi")
						{
							NO_PSI = true;
							i = 0;
							while(i < playerstotal)
							{
								if(mens[i] && mens[i].io)
								{
									if(!mens[i].dead)
									{
										ChangedGun(i);
									}
								}
								i++;
							}
						}
						if(b["#mark"] == "gamescale")
						{
							game_scale = Number(b["#forteam"]) / 100;
							if(isNaN(game_scale))
							{
								game_scale = 1;
							}
							if(game_scale < 0.01)
							{
								game_scale = 0.01;
							}
							if(game_scale > 15)
							{
								game_scale = 15;
							}
						}
						if(b["#mark"] == "he_nades_count")
						{
							MP_start_grenades_count = Math.max(0,NumberLimited(b["#forteam"]));
							mxnds1 += MP_start_grenades_count;
						}
						if(b["#mark"] == "port_nades_count")
						{
							MP_start_grenades_port_count = Math.max(0,NumberLimited(b["#forteam"]));
							mxnds2 += MP_start_grenades_port_count;
						}
						if(b["#mark"] == "sh_nades_count")
						{
							MP_start_grenades_sh_count = Math.max(0,NumberLimited(b["#forteam"]));
							mxnds3 += MP_start_grenades_sh_count;
						}
						if(b["#mark"] == "snow")
						{
							FORCE_SNOW = true;
						}
						if(b["#mark"] == "level_errors")
						{
							ENABLE_LEVEL_LOGIC_ERRORS = true;
						}
						if(b["#mark"] == "var_sync")
						{
							ALLOW_VAR_SYNC = true;
						}
						if(b["#mark"] == "no_light_break")
						{
							ALLOW_LIGHT_BREAK = false;
						}
						if(b["#mark"] == "naive_hit_confirmation")
						{
							NAIVE_HIT_CONFIRMATION = true;
						}
						if(!MP_mode)
						{
							if(b["#mark"] == "hero1_guns")
							{
								i = 0;
								while(i < inventoryA.length)
								{
									free_mc = MakeGunByClass(inventoryA[i].mdl,{
										"x":Number(b["#x"]),
										"y":Number(b["#y"]),
										"upg":int(inventoryA[i].upg),
										"command":(MP_mode && MP_type != 2 ? -1 : int(b["#forteam"]))
									});
									i++;
								}
							}
							if(b["#mark"] == "hero2_guns")
							{
								i = 0;
								while(i < inventoryB.length)
								{
									free_mc = MakeGunByClass(inventoryB[i].mdl,{
										"x":Number(b["#x"]),
										"y":Number(b["#y"]),
										"upg":int(inventoryB[i].upg),
										"command":(MP_mode && MP_type != 2 ? -1 : int(b["#forteam"]))
									});
									i++;
								}
							}
							if(b["#mark"] == "hero2_guns_nonades")
							{
								i = 0;
								while(i < inventoryB.length)
								{
									if(inventoryB[i].mdl != "item_grenade")
									{
										free_mc = MakeGunByClass(inventoryB[i].mdl,{
											"x":Number(b["#x"]),
											"y":Number(b["#y"]),
											"upg":int(inventoryB[i].upg),
											"command":(MP_mode && MP_type != 2 ? -1 : int(b["#forteam"]))
										});
									}
									i++;
								}
							}
							if(b["#mark"] == "hero2_guns_nades")
							{
								i = 0;
								while(i < inventoryB.length)
								{
									if(inventoryB[i].mdl == "item_grenade")
									{
										free_mc = MakeGunByClass(inventoryB[i].mdl,{
											"x":Number(b["#x"]),
											"y":Number(b["#y"]),
											"upg":int(inventoryB[i].upg),
											"command":(MP_mode && MP_type != 2 ? -1 : int(b["#forteam"]))
										});
									}
									i++;
								}
							}
						}
						else
						{
							if(b["#mark"] == "dm_slots_on_spawn")
							{
								dm_slots_on_spawn = b["#forteam"].split(" ").join("").split(",");
							}
							if(b["#mark"] == "dm_max_guns_on_spawn")
							{
								dm_max_guns_on_spawn = int(b["#forteam"]);
							}
						}
					}
					if(a == "lamp")
					{
						loadmap_stage = "4004";
						lamps_x[lampstotal] = new Number(b["#x"]);
						lamps_y[lampstotal] = new Number(b["#y"]);
						lamps_power[lampstotal] = Math.min(new Number(b["#power"]),100);
						lamps_power2[lampstotal] = 2;
						lamps_sprites[lampstotal];
						if(!(b["#flare"] == "true" || Number(b["#flare"]) > 0))
						{
							lamps_power2[lampstotal] = -1;
						}
						if(lamps_power2[lampstotal] == 2 || TraceBg(lamps_x[lampstotal],lamps_y[lampstotal]))
						{
							PushSynonym(b["#uid"],lampstotal);
							++lampstotal;
						}
					}
					if(a == "player" || a == "enemy")
					{
						loadmap_stage = "4005";
						var pmc:player = game.addChildAt(new player(),game.numChildren) as player;
						NoMouse(pmc);
						pmc.x = new Number(b["#x"]);
						pmc.y = new Number(b["#y"]);
						pmc.startx = pmc.x;
						pmc.starty = pmc.y;
						PushSynonym(b["#uid"], playerstotal);
						
						var team = b["#team"];
						var char = new Number(b["#char"]);
						var hea = b["#hea"];
						var hmax = b["#hmax"];

						if (HELL_MODE && !MP_mode) {
							if (team != "0") {
								team = 1;
							}
							switch (char) {
								case 5:
									hea = 9999999999999;
									hmax = 9999999999999;
									break;
								case 7:
									hea = 500;
									hmax = 500;
									break;
								case 8:
									char = 32;
									hea = 375;
									hmax = 375;
									break;
								case 11:
									hea = 1000;
									hmax = 1000;
									break;
								case 12:
									hea = 300;
									hmax = 300;
									break;
								case 2:
									hea = 350;
									hmax = 350;
									break;
								case 6:
									hea = 400;
									hmax = 400;
									break;
								default:
									break;
							}
						}
						create_player(pmc as player, hea, hmax);
						if (b["#psi1_color"] != undefined) {
							ct = new ColorTransform();
							ct.color = uint("0x" + b["#psi1_color"].substr(1));
							pmc.arm1.lower.psi.transform.colorTransform = ct;
						}
						if (b["#psi2_color"] != undefined) {
							ct = new ColorTransform();
							ct.color = uint("0x" + b["#psi2_color"].substr(1));
							pmc.arm2.lower.psi.transform.colorTransform = ct;
						}
						pmc.tox = new Number(b["#tox"]);
						pmc.toy = new Number(b["#toy"]);
						atox[pmc.b_toe] = atox[pmc.b_leg1] = atox[pmc.b_leg2] = atox[pmc.b_arm1] = atox[pmc.b_arm2] = atox[pmc.b_body] = atox[pmc.b_brk1] = atox[pmc.b_brk2] = atox[pmc.b_head_start] = atox[pmc.b_head_end] = pmc.tox;
						atoy[pmc.b_toe] = atoy[pmc.b_leg1] = atoy[pmc.b_leg2] = atoy[pmc.b_arm1] = atoy[pmc.b_arm2] = atoy[pmc.b_body] = atoy[pmc.b_brk1] = atoy[pmc.b_brk2] = atoy[pmc.b_head_start] = atoy[pmc.b_head_end] = pmc.toy;
						if(b["#ondeath"].charAt(0) == "#")
						{
							pmc.ondeath = b["#ondeath"];
						}
						else
						{
							pmc.ondeath = new int(b["#ondeath"]);
						}
						if(b["#onalert"] != undefined) {
							if(b["#onalert"].charAt(0) == "#")
							{
								pmc.onalert = b["#onalert"];
							}
							else
							{
								pmc.onalert = new int(b["#onalert"]);
							}
						}
						pmc.team = new int(team);
						pmc.botaction = new int(b["#botaction"]);
						if(MP_mode && MP_type == 1)
						{
							pmc.team = MP_myid + 1;
						}
						pmc.side = new Number(b["#side"]);
						pmc.tarx = pmc.x + Number(pmc.side) * 100;
						pmc.tary = pmc.y;
						pmc.armored = new Number(0);
						if(b["#incar"].charAt(0) == "#")
						{
							pmc.incar = b["#incar"];
						}
						else
						{
							pmc.incar = int(b["#incar"]);
						}
						pmc.char = new Number(char);
						if (pmc.char == 1 || pmc.char == 3 || pmc.char == 13) {
							if (!MP_mode) {
								pmc.hero = true;
							}
						}
						if (pmc.char >= 151 && pmc.char <= 155) { // xin
							pmc.mdl_psi1 = 2;
							pmc.mdl_psi2 = 2;
						} else if (pmc.char == 18) { // star defender
							pmc.mdl_psi1 = 3;
							pmc.mdl_psi2 = 3;
						} else {
							pmc.mdl_psi1 = 1;
							pmc.mdl_psi2 = 1;
						}
						if (b["#mdl_psi1"] != undefined && b["#mdl_psi1"] != "-1") pmc.mdl_psi1 = int(b["#mdl_psi1"]);
						if (b["#mdl_psi2"] != undefined && b["#mdl_psi2"] != "-1") pmc.mdl_psi2 = int(b["#mdl_psi2"]);
						if(!MP_mode || MP_mode && MP_type == 2)
						{
							if(pmc.char == 2)
							{
								if(pmc.hmax > 325)
								{
									pmc.char = 70;
								}
								else if(pmc.hmax > 170)
								{
									pmc.char = 71;
								}
							}
						}
						pmc.charset_by_user = false;
						if(MP_myid == pmc.idd)
						{
							if(MP_mode)
							{
								if(MP_type == 1)
								{
									pmc.char = skin_model[2];
								}
								else if(MP_type == 3)
								{
									if(MP_myid % 2 == 0)
									{
										pmc.team = 13;
										pmc.char = skin_model[3];
										pmc.palette[0] = pmc.palette[1] = pmc.palette[2] = pmc.palette[3] = "B";
									}
									else
									{
										pmc.team = 12;
										pmc.char = skin_model[3];
										pmc.palette[0] = pmc.palette[1] = pmc.palette[2] = pmc.palette[3] = "R";
									}
									pmc.hea = mens[0].hea;
									pmc.hmax = mens[0].hmax;
								}
								else if(Number(b["#char"]) == -1)
								{
									pmc.char = skin_model[2];
									pmc.charset_by_user = true;
								}
								else if(Number(b["#char"]) == 73)
								{
									pmc.char = skin_model[3];
									pmc.palette[0] = pmc.palette[1] = pmc.palette[2] = pmc.palette[3] = "B";
								}
								else if(Number(b["#char"]) == 74)
								{
									pmc.char = skin_model[3];
									pmc.palette[0] = pmc.palette[1] = pmc.palette[2] = pmc.palette[3] = "R";
								}
							}
						}
						pmc.mdl_head = pmc.char;
						var overrided_char_id = pmc.char;
						if(pmc.char >= 40 && pmc.char <= 48)
						{
							overrided_char_id = 1;
						}
						if(pmc.char == 61)
						{
							overrided_char_id = 3;
						}
						pmc.mdl_leg1_upper = overrided_char_id;
						pmc.mdl_leg1_middle = overrided_char_id;
						pmc.mdl_leg1_lower = overrided_char_id;
						pmc.mdl_leg2_upper = overrided_char_id;
						pmc.mdl_leg2_middle = overrided_char_id;
						pmc.mdl_leg2_lower = overrided_char_id;
						pmc.mdl_arm1_upper = overrided_char_id;
						pmc.mdl_arm1_lower = overrided_char_id;
						pmc.mdl_arm2_upper = overrided_char_id;
						pmc.mdl_arm2_lower = overrided_char_id;
						pmc.mdl_toe = overrided_char_id;
						pmc.mdl_body = overrided_char_id;
						UpdateCharProps(pmc);
						if(a == "player")
						{
							if(MP_myid == pmc.idd)
							{
								game.x = -pmc.x + hscreenX;
								game.y = -pmc.y + hscreenY;
							}
							pmc.isplayer = new Boolean(true);
							++MP_playerstotal;
						}
						else
						{
							pmc.isplayer = new Boolean(false);
						}
						if(MP_mode)
						{
							if(!pmc.isplayer || ANONYMOUS_MODE && MP_myid != pmc.idd)
							{
								pmc.gui.visible = false;
							}
						}
						else if(pmc.team != mens[MP_myid].team)
						{
							pmc.gui.visible = false;
						}
						if(MP_mode)
						{
							if(pmc.isplayer)
							{
								if(pmc.idd != MP_myid)
								{
									pmc.hea = 0;
									pmc.dead = true;
									pmc.alpha = 1;
									pmc.io = false;
									pmc.visible = false;
								}
								if(pmc.idd == MP_myid)
								{
									pmc.nick_color = color_player;
								}
								else if(pmc.team == MP_team && MP_type != 1)
								{
									pmc.nick_color = color_friendly;
								}
								else
								{
									pmc.nick_color = color_enemy;
								}
							}
							else if(pmc.team != MP_team)
							{
								pmc.nick_color = color_enemy;
							}
							else
							{
								pmc.nick_color = color_friendly;
							}
						}
						else if(pmc.idd == MP_myid || pmc.char == 3)
						{
							pmc.nick_color = color_player;
							xx = 0;
							if(pmc.char == 1)
							{
								xx = armorA;
							}
							if(pmc.char == 3)
							{
								xx = armorB;
							}
							if(!MP_mode || MP_mode && MP_type == 2)
							{
								if(pmc.char == 3 || pmc.char == 1 || pmc.char >= 40 && pmc.char <= 49)
								{
									pmc.hea *= (500 + xx * 50) / Number(pmc.hmax);
									pmc.hmax = 500 + xx * 50;
									if(skin_model[0] >= 49)
									{
										pmc.hea *= 1.5;
										pmc.hmax *= 1.5;
									}
								}
							}
						}
						else if(pmc.team != mens[MP_myid].team)
						{
							pmc.nick_color = color_enemy;
						}
						else
						{
							pmc.nick_color = color_friendly;
						}
						if(pmc.isplayer)
						{
							SpawnPlayerImmediately(pmc);
						}
						if(MP_mode && MP_type == 1)
						{
							if(pmc.isplayer)
							{
								pmc.mobility = 1;
							}
						}
						if (HELL_MODE) {
							if (pmc.team == mens[MP_myid].team) {
								pmc.hea = 130;
								pmc.hmax = 130;
							}
						}
						if(!FORCE_CUSTOM_MAP)
						{
							if(!MP_mode)
							{
								if(LOW_HPS)
								{
									this_limit = 130;
									if(pmc.char == 3 || pmc.char == 1 || pmc.char >= 40 && pmc.char <= 49)
									{
										this_limit = 130;
									}
									if(pmc.char == 49 || pmc.char == 1 && skin_model[0] == 49)
									{
										this_limit = 150;
									}
									if(pmc.char == 13)
									{
										this_limit = 150;
									}
									if(pmc.char == 2)
									{
										this_limit = 130;
									}
									if(pmc.char == 4)
									{
										this_limit = 100;
									}
									if(pmc.char == 6)
									{
										this_limit = 150;
									}
									if(pmc.char == 7)
									{
										this_limit = 210;
									}
									if(pmc.char == 8)
									{
										this_limit = 130;
									}
									if(pmc.char == 9)
									{
										this_limit = 190;
									}
									if(pmc.char == 11)
									{
										this_limit = 300;
									}
									if(pmc.char == 14)
									{
										this_limit = 170;
									}
									if(pmc.char == 15)
									{
										this_limit = 350;
									}
									if(pmc.char == 16)
									{
										this_limit = 200;
									}
									if(pmc.char == 70)
									{
										this_limit = 150;
									}
									if(pmc.char == 71)
									{
										this_limit = 130;
									}
									if(CUR_LOADING == "c38a")
									{
										if(pmc.char == 3)
										{
											this_limit = 10000;
										}
									}
									if(pmc.hea < 2000)
									{
										if(pmc.hea > this_limit)
										{
											pmc.hea = this_limit;
										}
										if(pmc.hmax > this_limit)
										{
											pmc.hmax = this_limit;
										}
									}
								}
							}
						}
						if(MP_mode)
						{
							if(!pmc.isplayer)
							{
								pmc.startteam = pmc.team;
								pmc.startside = pmc.side;
								pmc.startbotaction = pmc.botaction;
								pmc.startchar = pmc.char;
							}
						}
					}
				}
				loadmap_stage = "5";
				loadmap_stage += "; Player does not exist. Can\'t display team table";
				if(MP_spectator)
				{
					MP_myid = 0;
				}
				UpdateTeamTable();
				loadmap_stage = "5001";
				region_i = 0;
				trigger_i = 0;
				timer_i = 0;
				player_i = 0;
				for each(bookInfo in xml.children())
				{
					loadmap_stage = "5002";
					a = bookInfo.name();
					loadmap_stage = "5003";
					b = new Array();
					loadmap_stage = "5004";
					for each(bookInfo2 in bookInfo.attributes())
					{
						loadmap_stage = "5005";
						b["#" + bookInfo2.name()] = bookInfo2;
						loadmap_stage = "5006";
					}
					loadmap_stage = "5007";
					if(a == "region")
					{
						loadmap_stage = "5008";
						if (regions[region_i].use_target_uid != "") {
							regions[region_i].use_target = DecodeUID(regions[region_i].use_target_uid);
						}
						loadmap_stage = "5009";
						region_i++;
					}
					else if(a == "trigger")
					{
						trig = triggers[trigger_i];
						loadmap_stage = "5010";
						for(i = 0; i < trig.actions.length; i++) {
							action = trig.actions[i].args;
							loadmap_stage = "5011";
							for (var argID = 0; argID < action.length; argID++) {
								loadmap_stage = "5011"
								loadmap_stage += "; trigger uid = " + trig.uid
								loadmap_stage += "; action = " + i
								loadmap_stage += "; valID = " + argID
								action[argID] = DecodeUID(action[argID]);
							}
						}
						trigger_i++;
					}
					else if(a == "timer")
					{
						loadmap_stage = "5014";
						timers[timer_i].actions_target = DecodeUID(timers[timer_i].actions_target);
						loadmap_stage = "5015";
						timer_i++;
					}
					else if(a == "player" || a == "enemy")
					{
						loadmap_stage = "5016";
						loadmap_stage += "; player_i=" + player_i;
						loadmap_stage += "; mens[player_i]=" + mens[player_i];
						loadmap_stage += "; mens[player_i].incar=" + mens[player_i].incar;
						loadmap_stage += "; DecodeUID(mens[player_i].incar)=" + DecodeUID(mens[player_i].incar);
						mens[player_i].incar = DecodeUID(mens[player_i].incar);
						loadmap_stage = "5017";
						mens[player_i].ondeath = DecodeUID(mens[player_i].ondeath);
						loadmap_stage = "5017.5";
						mens[player_i].onalert = DecodeUID(mens[player_i].onalert);
						player_i++;
					}
					loadmap_stage = "5018";
				}
				loadmap_stage = "5019";
				i = 0;
				while(i < playerstotal)
				{
					loadmap_stage = "5020";
					if(mens[i].incar == -2)
					{
						loadmap_stage = "5021";
						i2 = 0;
						while(i2 < vehiclestotal)
						{
							loadmap_stage = "5022";
							if(vehicles[i2].master == -1)
							{
								loadmap_stage = "5023";
								if(Dist2D(mens[i].x,mens[i].y,vehicles[i2].x,vehicles[i2].y) < 100)
								{
									loadmap_stage = "5024";
									PutInCar(i,i2);
									i2 = vehiclestotal;
								}
							}
							++i2;
						}
						loadmap_stage = "5025";
						if(mens[i].incar == -2)
						{
							mens[i].incar = -1;
						}
						loadmap_stage = "5026";
					}
					else if(mens[i].incar >= 0 || typeof mens[i].incar == "string")
					{
						loadmap_stage = "5027";
						PutInCar(i,DecodeUID(mens[i].incar));
						loadmap_stage = "5028";
					}
					loadmap_stage = "5029";
					i++;
				}
				loadmap_stage = "6";
				i = 0;
				while(i < decorstotal)
				{
					cur_label = decors[i].currentFrameLabel;
					if(cur_label == "antigravity" || cur_label == "antigravity_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on" || cur_label == "wall_lamp_left_on" || cur_label == "wall_lamp_up_on" || cur_label == "wall_lamp_down_on" || cur_label == "back_lamp_vertical_on" || cur_label == "back_lamp_horizontal_on" || cur_label == "teleport" || cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_left" || cur_label == "ray_right" || cur_label == "ray_floor" || cur_label == "ray_ceil" || cur_label == "column_red" || cur_label == "column_green" || cur_label == "column_blue")
					{
						i2 = 0;
						while(i2 < lampstotal)
						{
							if(Math.abs(Number(decors[i].x) - Number(lamps_x[i2])) + Math.abs(Number(decors[i].y) - Number(lamps_y[i2])) < 40)
							{
								--lampstotal;
								i3 = i2;
								while(i3 < lampstotal)
								{
									lamps_x[i3] = lamps_x[i3 + 1];
									lamps_y[i3] = lamps_y[i3 + 1];
									lamps_power[i3] = lamps_power[i3 + 1];
									lamps_power2[i3] = lamps_power2[i3 + 1];
									++i3;
								}
							}
							++i2;
						}
						offset_x = 0;
						offset_y = 0;
						if(cur_label == "antigravity" || cur_label == "teleport" || cur_label == "ray_floor" || cur_label == "wall_lamp_up_on")
						{
							offset_y = -20;
						}
						if(cur_label == "teleport2" || cur_label == "final_place2" || cur_label == "ray_ceil" || cur_label == "wall_lamp_down_on")
						{
							offset_y = 20;
						}
						if(cur_label == "ray_left" || cur_label == "antigravity_right" || cur_label == "wall_lamp_right_on")
						{
							offset_x = 20;
						}
						if(cur_label == "ray_right" || cur_label == "antigravity_left" || cur_label == "wall_lamp_left_on")
						{
							offset_x = -20;
						}
						lamps_x[lampstotal] = decors[i].x + offset_x;
						lamps_y[lampstotal] = decors[i].y + offset_y;
						lamps_power[lampstotal] = 0.45;
						lamps_power2[lampstotal] = -1;
						lamps_sprites[lampstotal];
						++lampstotal;
					}
					i++;
				}
				loadmap_stage = "7";
				i2 = 0;
				while(i2 < lampstotal)
				{
					if(lamps_power2[i2] == 2)
					{
						flare[flarestotal] = graphics_3d_front.addChildAt(new lens_flare(),graphics_3d_front.numChildren);
						NoMouse(flare[flarestotal]);
						flare[flarestotal].x = lamps_x[i2];
						flare[flarestotal].y = lamps_y[i2];
						flare_power[flarestotal] = 1;
						flare[flarestotal].alpha = 0;
						++flarestotal;
					}
					++i2;
				}
				loadmap_stage = "8";
				if(!SUPER_COMPUTER)
				{
					step_size *= 2;
				}
				half_step_size = step_size / 2;
				g_minx = boxx[0];
				g_maxx = boxx[0] + boxw[0];
				g_miny = boxy[0];
				g_maxy = boxy[0] + boxh[0];
				col = new Array();
				i = 0;
				while(i < boxestotal)
				{
					g_minx = Math.min(boxx[i],g_minx);
					g_miny = Math.min(boxy[i],g_miny);
					g_maxx = Math.max(boxx[i] + boxw[i],g_maxx);
					g_maxy = Math.max(boxy[i] + boxh[i],g_maxy);
					i++;
				}
				cx = (g_maxx - g_minx) / 20;
				cy = (g_maxy - g_miny) / 20;
				temp = graphics_3d.addChildAt(mShape,graphics_3d.numChildren);
				graphics_3d_front.addChildAt(mShape_front,graphics_3d_front.numChildren);
				i = 0;
				while(i < attachments.length)
				{
					attachments[i].parent = doors[DecodeUID(attachments[i].parent)];
					if(attachments[i].type == 3)
					{
						attachments[i].dx = Number(pushx[attachments[i].child]) - Number(attachments[i].parent.x);
						attachments[i].dy = Number(pushy[attachments[i].child]) - Number(attachments[i].parent.y);
						attachments[i].dx2 = Number(pushw[attachments[i].child]) - Number(attachments[i].parent.x);
						attachments[i].dy2 = Number(pushh[attachments[i].child]) - Number(attachments[i].parent.y);
					}
					else if(attachments[i].type == 5) // Water attachment
					{ 
						attachments[i].dx = Number(wax[attachments[i].id]) - Number(attachments[i].parent.x);
						attachments[i].dy = Number(way[attachments[i].id]) - Number(attachments[i].parent.y);
					}
					else
					{
						attachments[i].dx = Number(attachments[i].child.x) - Number(attachments[i].parent.x);
						attachments[i].dy = Number(attachments[i].child.y) - Number(attachments[i].parent.y);
					}
					if(attachments[i].type == 1)
					{
						(!!attachments[i].foreground ? graphics_3d_front : graphics_3d).addChildAt(attachments[i].child,(!!attachments[i].foreground ? graphics_3d_front : graphics_3d).numChildren);
					}
					i++;
				}
				i = 0;
				while(i < waterstotal)
				{
					if(wa_friction[i])
					{
						loadmap_stage = "8.1";
						temp = graphics_3d_front.addChildAt(waters[i],graphics_3d_front.numChildren);
						loadmap_stage = "8.2";
						NoMouse(temp);
						temp.x = wax[i];
						temp.y = way[i];
						temp.scaleX = Number(waw[i]) / 100;
						temp.scaleY = Number(wah[i]) / 100;
						
						loadmap_stage = "8.3";
						waters[i].mc = temp;
						var color = waters[i].hex;
						loadmap_stage = "8.4";
						if(color == undefined) {
							if (wadamage[i] > 0 && watercolor2 != "") { // acid
								color = watercolor2;
							}
							else if (wadamage[i] == 0 && watercolor1 != "") {// normal water
								color = watercolor1;
							}
						}
						loadmap_stage = "8.5";
						if (color == undefined) {
							if  (wadamage[i] > 0) {temp.gotoAndStop(1); }
							if (wadamage[i] == 0) {temp.gotoAndStop(2); }
						} else {
							loadmap_stage = "8.6";
							temp.gotoAndStop(2);
							ct = new ColorTransform();
							ct.color = uint("0x" + color.substr(1));
							temp.transform.colorTransform = ct;
						}
					}
					wax[i] -= 10;
					waw[i] += 20;
					wah[i] += 10;
					i++;
				}
				loadmap_stage = "9";
				if(!OpenTop)
				{
					temp = graphics_3d_front.addChildAt(new texture_front0(),graphics_3d_front.numChildren);
					NoMouse(temp);
					temp.x = g_minx;
					temp.scaleX = (g_maxx - g_minx) / 100;
					temp.scaleY = 1000 / 100;
					temp.y = g_miny - 1000;
				}
				// if (DRAW_3D) create_3d_surfaces();
				temp = graphics_3d_front.addChildAt(new texture_front0(),graphics_3d_front.numChildren);
				NoMouse(temp);
				temp.x = g_minx - 1000;
				temp.scaleX = (g_maxx - g_minx + 2000) / 100;
				temp.scaleY = 1000 / 100;
				temp.y = g_maxy;
				if(!OpenTop)
				{
					temp = graphics_3d_front.addChildAt(new texture_front0(),graphics_3d_front.numChildren);
					NoMouse(temp);
					temp.x = g_minx - 1000;
					temp.scaleX = 1000 / 100;
					temp.scaleY = (2000 + g_maxy - g_miny) / 100;
					temp.y = g_miny - 1000;
					temp = graphics_3d_front.addChildAt(new texture_front0(),graphics_3d_front.numChildren);
					NoMouse(temp);
					temp.x = g_maxx;
					temp.scaleX = 1000 / 100;
					temp.scaleY = (2000 + g_maxy - g_miny) / 100;
					temp.y = g_miny - 1000;
				}
				i = 0;
				while(i < doorstotal)
				{
					if(doors[i].vis)
					{
						temp = graphics_3d.addChildAt(new texture_front0(),graphics_3d.numChildren);
						NoMouse(temp);
						temp.x = doors[i].x;
						temp.scaleX = doors[i].scaleX;
						temp.scaleY = doors[i].scaleY;
						temp.y = doors[i].y;
						doors[i].surface = temp;
						link_surface(temp,i);
					}
					i++;
				}
				i = 0;
				while(i < boxestotal)
				{
					temp = graphics_3d.addChildAt(new texture_front0(),graphics_3d.numChildren);
					NoMouse(temp);
					temp.x = boxx[i];
					temp.scaleX = Number(boxw[i]) / 100;
					temp.scaleY = Number(boxh[i]) / 100;
					temp.y = boxy[i];
					i++;
				}
				loadmap_stage = "10";
				mShape = new Sprite();
				_mtx = new Matrix();
				SnowShape = new Sprite();
				i = 0;
				while(i < boxestotal)
				{
					i2 = 0;
					while(i2 < Number(boxw[i]) / 10)
					{
						col[i2] = true;
						++i2;
					}
					i2 = 0;
					while(i2 < boxestotal)
					{
						if(i != i2)
						{
							if(boxy[i] + boxh[i] > boxy[i2])
							{
								if(boxy[i] + boxh[i] < boxy[i2] + boxh[i2])
								{
									if(boxx[i2] <= boxx[i] + boxw[i])
									{
										if(boxx[i2] + boxw[i2] >= boxx[i])
										{
											i3 = 0;
											while(i3 < Number(boxw[i]) / 10)
											{
												if(boxx[i] + i3 * 10 >= boxx[i2])
												{
													if(boxx[i] + i3 * 10 < boxx[i2] + boxw[i2])
													{
														col[i3] = false;
													}
												}
												++i3;
											}
										}
									}
								}
							}
						}
						++i2;
					}
					len = 0;
					i2 = 0;
					while(i2 < Number(boxw[i]) / 10)
					{
						if(col[i2])
						{
							len = 0;
							while(Boolean(col[i2 + len]) && i2 + len < Number(boxw[i]) / 10)
							{
								len++;
							}
							if(boxmat[i] == 0 || boxmat[i] == 18)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new panel_bottom(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 3)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new panel2_bottom(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 4)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new panel4_bottom(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 7)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new dark_panel_clean_low(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 8)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new light_panel_low(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 9)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new light_panel_clean_low(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 10)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new usurper_bottom(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 11)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 13)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new white_concrete_underside(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 17)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i] + boxh[i] - 16);
								mShape.graphics.beginBitmapFill(new usurper2_ceiling(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 3 || boxmat[i] == 0 || boxmat[i] == 10 || boxmat[i] == 11 || boxmat[i] == 13 || boxmat[i] == 18)
							{
								if(boxx[i] + i2 * 10 + len * 10 - (boxx[i] + i2 * 10) >= 20)
								{
									corner_sample_left = panel_bottom_left;
									corner_sample_right = panel_bottom_right;
									if(boxmat[i] == 10)
									{
										corner_sample_left = usurper_bottom_left;
										corner_sample_right = usurper_bottom_right;
									}
									if(boxmat[i] == 11)
									{
										corner_sample_left = indrustrial_bottom_left;
										corner_sample_right = indrustrial_bottom_right;
									}
									if(boxmat[i] == 13)
									{
										corner_sample_left = white_concrete_bottom_left;
										corner_sample_right = white_concrete_bottom_right;
									}
									if(TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,boxy[i] + boxh[i] - 5) || !TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,boxy[i] + boxh[i] + 5) && !TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,boxy[i] + boxh[i] - 5))
									{
										_mtx.identity();
										_mtx.translate(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
										mShape.graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
										mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i] + boxh[i] - 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + 12,boxy[i] + boxh[i] - 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + 12,boxy[i] + boxh[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + boxh[i]);
										mShape.graphics.endFill();
									}
									if(TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,boxy[i] + boxh[i] - 5) || !TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,boxy[i] + boxh[i] + 5) && !TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,boxy[i] + boxh[i] - 5))
									{
										_mtx.identity();
										_mtx.translate(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i] + boxh[i] - 16);
										mShape.graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
										mShape.graphics.moveTo(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i] + boxh[i] - 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i] - 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + boxh[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i] + boxh[i]);
										mShape.graphics.endFill();
									}
								}
							}
							i2 += len - 1;
						}
						++i2;
					}
					i++;
				}
				loadmap_stage = "11";
				my_date = new Date();
				if(FORCE_SNOW || (my_date.month <= 1 || my_date.month >= 11))
				{
					flakes_letitsnow = true;
					if(!FORCE_SNOW)
					{
						switch(sky.currentFrame)
						{
							case 5:
								flakes_letitsnow = false;
						}
					}
				}
				else
				{
					flakes_letitsnow = false;
				}
				if(!HQ)
				{
					flakes_letitsnow = false;
				}
				loadmap_stage = "12";
				i = 0;
				while(i < boxestotal)
				{
					i2 = 0;
					while(i2 < Number(boxw[i]) / 10)
					{
						col[i2] = true;
						++i2;
					}
					i2 = 0;
					while(i2 < boxestotal)
					{
						if(i != i2)
						{
							if(boxy[i] > boxy[i2])
							{
								if(boxy[i] <= boxy[i2] + boxh[i2])
								{
									if(boxx[i2] <= boxx[i] + boxw[i])
									{
										if(boxx[i2] + boxw[i2] >= boxx[i])
										{
											i3 = 0;
											while(i3 < Number(boxw[i]) / 10)
											{
												if(boxx[i] + i3 * 10 >= boxx[i2])
												{
													if(boxx[i] + i3 * 10 < boxx[i2] + boxw[i2])
													{
														col[i3] = false;
													}
												}
												++i3;
											}
										}
									}
								}
							}
						}
						++i2;
					}
					len = 0;
					i2 = 0;
					var yoff:Number;
					var ggap:Number;
					var gx:Number;
					var gy:Number;
					var gw:Number;
					var gh:Number;
					while(i2 < Number(boxw[i]) / 10)
					{
						if(col[i2])
						{
							len = 0;
							while(Boolean(col[i2 + len]) && i2 + len < Number(boxw[i]) / 10)
							{
								len++;
							}
							if(boxmat[i] == 0)
							{
								gx   = boxx[i] + i2 * 10;
								gy   = boxy[i];
								gw   = len * 10;
								gh   = 16;

								_mtx.identity();
								_mtx.translate(0, gy);
								mShape.graphics.beginBitmapFill(new panel_top(0,0),_mtx,true,true);
								mShape.graphics.moveTo(gx     , gy);
								mShape.graphics.lineTo(gx + gw, gy);
								mShape.graphics.lineTo(gx + gw, gy + gh);
								mShape.graphics.lineTo(gx     , gy + gh);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 1)
							{
								yoff = 23;
								ggap = 28;
								gx   = boxx[i] + i2 * 10 + ggap;
								gy   = boxy[i]      - yoff;
								gw   = len * 10          - ggap * 2;
								gh   = 38;

								_mtx.identity();
								_mtx.translate(0, gy);
								mShape.graphics.beginBitmapFill(new panel_top2(0,0),_mtx,true,true);
									mShape.graphics.moveTo(gx     , gy);
									mShape.graphics.lineTo(gx + gw, gy);
									mShape.graphics.lineTo(gx + gw, gy + gh);
									mShape.graphics.lineTo(gx     , gy + gh);
								mShape.graphics.endFill();

								gx = boxx[i] + i2 * 10 + 1;
								gw = ggap - 1;
								_mtx.identity();
								_mtx.translate(gx, gy);
								mShape.graphics.beginBitmapFill(new panel_top2a(0,0),_mtx,true,true);
									mShape.graphics.moveTo(gx     , gy);
									mShape.graphics.lineTo(gx + gw, gy);
									mShape.graphics.lineTo(gx + gw, gy + gh);
									mShape.graphics.lineTo(gx     , gy + gh);
								mShape.graphics.endFill();

								gx = boxx[i] + (i2 + len) * 10 - ggap;
								gw = ggap + 15;
								_mtx.identity();
								_mtx.translate(gx, gy);
								mShape.graphics.beginBitmapFill(new panel_top2b(0,0),_mtx,true,true);
									mShape.graphics.moveTo(gx     , gy);
									mShape.graphics.lineTo(gx + gw, gy);
									mShape.graphics.lineTo(gx + gw, gy + gh);
									mShape.graphics.lineTo(gx     , gy + gh);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 2)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 6);
								mShape.graphics.beginBitmapFill(new panel_top3(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 26 - 6);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 26 - 6);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 3)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new panel2_top(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 4)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new panel4_top(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 5)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass2(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
								_mtx.identity();
								_mtx.translate(boxx[i] + i2 * 10,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass2b(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + 1,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 1,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
								_mtx.identity();
								_mtx.translate(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass2a(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 + 16 - 1,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 + 16 - 1,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 6)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass3(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
								_mtx.identity();
								_mtx.translate(boxx[i] + i2 * 10,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass3b(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + 1,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 28,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + 1,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
								_mtx.identity();
								_mtx.translate(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.beginBitmapFill(new grass3a(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10 + len * 10 - 28,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 + 16 - 1,Number(boxy[i]) - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 + 16 - 1,boxy[i] + 38 - 23);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 28,boxy[i] + 38 - 23);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 7)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new dark_panel_clean(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 8)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new light_panel(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 9)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new light_panel_clean(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 10)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new usurper_floor(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 11)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new industrial(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 12)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new asphalt(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 13)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new white_concrete(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 14)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new pbfttp_concrete(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 15)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 6);
								mShape.graphics.beginBitmapFill(new wet_sand(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 26 - 6);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 26 - 6);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 16)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 6);
								mShape.graphics.beginBitmapFill(new mud(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 26 - 6);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 26 - 6);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 17)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new usurper2_bottom(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 18)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new stone_bricks(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 19)
							{
								_mtx.identity();
								_mtx.translate(0,boxy[i]);
								mShape.graphics.beginBitmapFill(new wood_tex(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 20)
							{
								_mtx.identity();
								_mtx.translate(0,Number(boxy[i]) - 6);
								mShape.graphics.beginBitmapFill(new rocks(0,0),_mtx,true,true);
								mShape.graphics.moveTo(boxx[i] + i2 * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,Number(boxy[i]) - 6 + 1);
								mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 26 - 6);
								mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 26 - 6);
								mShape.graphics.endFill();
							}
							if(boxmat[i] == 3 || boxmat[i] == 0 || boxmat[i] == 10 || boxmat[i] == 11 || boxmat[i] == 13 || boxmat[i] == 14 || boxmat[i] == 18)
							{
								if(boxx[i] + i2 * 10 + len * 10 - (boxx[i] + i2 * 10) >= 20)
								{
									corner_sample_left = panel_top_left;
									corner_sample_right = panel_top_right;
									if(boxmat[i] == 10)
									{
										corner_sample_left = usurper_top_left;
										corner_sample_right = usurper_top_right;
									}
									if(boxmat[i] == 11)
									{
										corner_sample_left = indrustrial_left;
										corner_sample_right = indrustrial_right;
									}
									if(boxmat[i] == 13)
									{
										corner_sample_left = white_concrete_top_right;
										corner_sample_right = white_concrete_top_left;
									}
									if(boxmat[i] == 14)
									{
										corner_sample_left = pbfttp_corner_left;
										corner_sample_right = pbfttp_corner_right;
									}
									if(TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,boxy[i] + 5) || !TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,Number(boxy[i]) - 5) && !TracePointOnlyBoxes(boxx[i] + i2 * 10 - 5,boxy[i] + 5))
									{
										_mtx.identity();
										_mtx.translate(boxx[i] + i2 * 10,boxy[i]);
										mShape.graphics.beginBitmapFill(new corner_sample_left(0,0),_mtx,true,true);
										mShape.graphics.moveTo(boxx[i] + i2 * 10,boxy[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + 12,boxy[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + 12,boxy[i] + 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10,boxy[i] + 16);
										mShape.graphics.endFill();
									}
									if(TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,boxy[i] + 5) || !TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,Number(boxy[i]) - 5) && !TracePointOnlyBoxes(boxx[i] + i2 * 10 + len * 10 + 5,boxy[i] + 5))
									{
										_mtx.identity();
										_mtx.translate(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i]);
										mShape.graphics.beginBitmapFill(new corner_sample_right(0,0),_mtx,true,true);
										mShape.graphics.moveTo(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i]);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10,boxy[i] + 16);
										mShape.graphics.lineTo(boxx[i] + i2 * 10 + len * 10 - 12,boxy[i] + 16);
										mShape.graphics.endFill();
									}
								}
							}
							if(flakes_letitsnow)
							{
								snow = new Sprite();
								xx = 0.5;
								while(xx <= len - 0.5)
								{
									if(VerticalTrace(boxx[i] + i2 * 10 + xx * 10,Number(boxy[i]) - 10 + (Math.random() * 6 - 3) - 5))
									{
										rad = 9 + Math.random() * 4;
										if(xx < 3)
										{
											rad = (rad * xx / 3 + rad) / 2;
										}
										if(xx > len - 3)
										{
											rad = (rad * (len - xx) / 3 + rad) / 2;
										}
										snow.graphics.beginFill(16711423);
										snow.graphics.drawRoundRect(boxx[i] + i2 * 10 + xx * 10 - rad / 2,boxy[i] + (Math.random() * 6 - 3) - rad * 0.8,rad,rad,rad);
										snow.graphics.endFill();
									}
									xx += 0.25;
								}
								ForceRasterize(snow);
								SnowShape.addChild(snow);
							}
							i2 += len - 1;
						}
						++i2;
					}
					i++;
				}
				temp = graphics_3d.addChildAt(mShape,graphics_3d.numChildren);
				loadmap_stage = "13";
				traces_start = Number(getTimer());
				if(HQ)
				{
					global_lamps_power = 0.85;
					switch(sky.currentFrame)
					{
						case 1:
							global_lamps_power = 0.52;
							break;
						case 2:
							global_lamps_power = 0.8;
							break;
						case 3:
							global_lamps_power = 1;
							break;
						case 4:
							global_lamps_power = 0;
							break;
						case 5:
							global_lamps_power = 0.25;
							break;
						case 6:
							global_lamps_power = 0.36;
							break;
						case 7:
							global_lamps_power = 0.87;
							break;
						case 8:
							global_lamps_power = 0.34;
							break;
						case 9:
							global_lamps_power = 0.83;
							break;
						case 10:
							global_lamps_power = 0.8;
							break;
						case 11:
							global_lamps_power = 0.18;
					}
					loadmap_stage = "1301";
					falloff = 100;
					fallstep = 50;
					lamps_from = lampstotal;
					xx = g_minx - falloff;
					while(xx <= g_maxx + falloff)
					{
						yy = g_miny - falloff;
						while(yy <= g_maxy + falloff)
						{
							if(TraceBgFalloff(xx,yy,falloff))
							{
								if(!TraceBgFalloff(xx,yy,50))
								{
									if(TracePointOnlyBoxes(xx,yy))
									{
										lamps_x[lampstotal] = xx;
										lamps_y[lampstotal] = yy;
										lamps_power[lampstotal] = 0.8 * global_lamps_power;
										lamps_power2[lampstotal] = -1;
										++lampstotal;
									}
								}
							}
							yy += fallstep;
						}
						xx += fallstep;
					}
					loadmap_stage = "1302";
					g_minx -= step_size * 2;
					g_miny -= step_size * 2;
					g_maxx += step_size * 4;
					g_maxy += step_size * 4;
					loadmap_stage = "1303";
					lightmap_ma = new Matrix(1 / step_size,0,0,1 / step_size,-g_minx / step_size,-g_miny / step_size);
					loadmap_stage = "1304";
					bmp_w = Math.max((g_maxx - g_minx) / step_size,1);
					bmp_h = Math.max((g_maxy - g_miny) / step_size);
					loadmap_stage = "1305";
					bmpData = new BitmapData(bmp_w,bmp_h,true,16777216);
					loadmap_stage = "1306";
					g = new Sprite();
					loadmap_stage = "1307";
					i3 = 0;
					while(i3 < bgstotal)
					{
						if(bg_cast[i3])
						{
							loadmap_stage = "1308";
							g.graphics.beginFill(4278190080);
							loadmap_stage = "1309";
							g.graphics.drawRect(bgx[i3],bgy[i3],bgw[i3],bgh[i3]);
							loadmap_stage = "1310";
							g.graphics.endFill();
						}
						++i3;
					}
					bg_cast = null;
					loadmap_stage = "1311";
					bmpData.draw(g,lightmap_ma,null,null,null,false);
					loadmap_stage = "1312";
					bmpData.colorTransform(bmpData.rect,new ColorTransform(1,1,1,-1 * 0.85,0,0,0,255));
					loadmap_stage = "1313";
					bmpData_backed = bmpData.clone();
					loadmap_stage = "1314";
					i5 = lampstotal;
					i7 = doorstotal;
					doorstotal = 0;
					cx = (g_maxx - g_minx) / step_size;
					cy = (g_maxy - g_miny) / step_size;
					loadmap_stage = "1315";
					clrs = new Array();
					poss = new Array();
					dip = 0;
					while(dip < 1)
					{
						clrs.push(0);
						poss.push(dip * 255);
						dip += 0.1;
					}
					loadmap_stage = "1316";
					i4 = 0;
					while(i4 < i5)
					{
						g = new Sprite();
						alphas = new Array();
						dip = 0;
						while(dip < 1)
						{
							if(lamps_power2[i4] >= 0)
							{
								alphas.push(1 / (dip * 10 + 0.1) * Number(lamps_power[i4]));
							}
							else
							{
								alphas.push(1 / (dip * 10 + 0.1) * Number(lamps_power[i4]));
							}
							dip += 0.1;
						}
						loadmap_stage = "1317";
						matr0 = new Matrix();
						siz = Number(lamps_power[i4]) * 200 * 20 * 1.4;
						loadmap_stage = "1318";
						matr0.createGradientBox(siz,siz,0,Number(lamps_x[i4]) - siz / 2,Number(lamps_y[i4]) - siz / 2);
						loadmap_stage = "1319";
						g.graphics.beginGradientFill(GradientType.RADIAL,clrs,alphas,poss,matr0,SpreadMethod.PAD);
						loadmap_stage = "1320";
						lamp_step = lamps_power2[i4] == -1 ? Math.PI * 0.1 : Math.PI * 0.05;
						loadmap_stage = "1321";
						an = 0;
						while(an < Math.PI * 2)
						{
							this_rad = siz / 2;
							loadmap_stage = "1322";
							xx = lamps_x[i4] + Math.sin(an) * this_rad;
							yy = lamps_y[i4] + Math.cos(an) * this_rad;
							xx2 = lamps_x[i4];
							yy2 = lamps_y[i4];
							v;
							loadmap_stage = "1323";
							i2 = 0;
							while(i2 < boxestotal)
							{
								if(Math.max(xx2,xx) > boxx[i2] && Math.min(xx2,xx) < boxx[i2] + boxw[i2])
								{
									if(Math.max(yy2,yy) > boxy[i2] && Math.min(yy2,yy) < boxy[i2] + boxh[i2])
									{
										loadmap_stage = "1324";
										if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2],boxx[i2] + boxw[i2],boxy[i2]))
										{
											v = Dist2D(xx2,yy2,retux,retuy);
											if(v < this_rad)
											{
												xx = retux;
												yy = retuy;
												this_rad = v;
											}
										}
										loadmap_stage = "1325";
										if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2] + boxh[i2],boxx[i2] + boxw[i2],boxy[i2] + boxh[i2]))
										{
											v = Dist2D(xx2,yy2,retux,retuy);
											if(v < this_rad)
											{
												xx = retux;
												yy = retuy;
												this_rad = v;
											}
										}
										loadmap_stage = "1326";
										if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2],boxx[i2],boxy[i2] + boxh[i2]))
										{
											v = Dist2D(xx2,yy2,retux,retuy);
											if(v < this_rad)
											{
												xx = retux;
												yy = retuy;
												this_rad = v;
											}
										}
										loadmap_stage = "1327";
										if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2] + boxw[i2],boxy[i2],boxx[i2] + boxw[i2],boxy[i2] + boxh[i2]))
										{
											v = Dist2D(xx2,yy2,retux,retuy);
											if(v < this_rad)
											{
												xx = retux;
												yy = retuy;
												this_rad = v;
											}
										}
										loadmap_stage = "1328";
									}
								}
								++i2;
							}
							xx = lamps_x[i4] + Math.sin(an) * this_rad;
							yy = lamps_y[i4] + Math.cos(an) * this_rad;
							loadmap_stage = "1329";
							if(an == 0)
							{
								g.graphics.moveTo(xx,yy);
							}
							else
							{
								g.graphics.lineTo(xx,yy);
							}
							loadmap_stage = "1330";
							an += lamp_step;
						}
						loadmap_stage = "1331";
						g.graphics.endFill();
						g.filters = [new BlurFilter(1.1,1.1,3)];
						loadmap_stage = "1332";
						lamps_sprites[i4] = g;
						loadmap_stage = "1333";
						++i4;
					}
					shadowbmp = new Bitmap(bmpData);
					loadmap_stage = "1334";
					UpdateLightmap(true);
					loadmap_stage = "1335";
					doorstotal = i7;
					loadmap_stage = "1336";
					shadowbmp.smoothing = true;
					loadmap_stage = "1337";
					temp = graphics_3d_front.addChildAt(shadowbmp,0);
					loadmap_stage = "1338";
					temp.x = g_minx;
					temp.y = g_miny;
					temp.scaleX = step_size;
					temp.scaleY = step_size;
					loadmap_stage = "1339";
					shadowbmp.smoothing = true;
					loadmap_stage = "1340";
					g_minx += step_size * 2;
					g_miny += step_size * 2;
					g_maxx -= step_size * 4;
					g_maxy -= step_size * 4;
				}
				loadmap_stage = "14";
				traces_end = getTimer();
				if(flakes_letitsnow)
				{
					temp_snow = graphics_3d.addChildAt(SnowShape,graphics_3d.numChildren);
				}
				startatotal = atotal;
				startchtotal = chtotal;
				loadmap_stage = "15";
				if (LUA != null) {
					LUA.close();
					LUA = null;
				}
				if(luasTotal > 0) {
					LUA = new LuaState(EXT);
					LUA.loadAPI(LAPI);
					luaChatListeners.clear();
					luaFrameListeners.clear();
					luaKeyDownListeners.clear();
					luaKeyUpListeners.clear();
				}
				loadmap_stage = "16";
				if(MP_mode)
				{
					grenades_total = MP_start_grenades_count;
					grenades_port_total = MP_start_grenades_port_count;
					grenades_sh_total = MP_start_grenades_sh_count;
				}
				loadmap_stage = "16.1";
				if(POST_ERR_CODE == "")
				{
					loadmap_stage = "17";
					GenFlakes();
					loadmap_stage = "18";
					StartGameTimer();
					loadmap_stage = "19";
					if(MP_mode)
					{
						loadmap_stage = "20.01";
						loadmap_stage += "; Player does not exist";
						mens[MP_myid].login_name = MP_login_name;
						loadmap_stage = "20.02";
					}
					else if(IM_A_CHEATER)
					{
						loadmap_stage = "20.03";
						ShowNoAch();
						PlaySound_full(s_chat);
						loadmap_stage = "20.04";
					}
					loadmap_stage = "21";
					if (RENDERING_3D) {
						game.visible = false;
						graphics_3d.visible = false;
						graphics_3d_front.visible = false;
						sky.visible = false;
						acceleratedRenderer.readyLevel();
					}
					GCTime();
					for (i = 0; i < luasTotal; i++) {
						var luaScript = luas[i];
						try {
							LUA.doString(luaScript.code, "script " + luaScript.uid);
						} catch (err:Error) {
							EmitScriptError(err);
						}
					}
				}
				else
				{
					LAST_ERROR = "Oh! Seems like there was problem with map :(\nMap loading failed and error is:\n" + POST_ERR_CODE;
					gotoAndStop("menu");
				}
			}
			catch(error:Error)
			{
				//for debugging only
				throw error;
				
				crash_failed = function(param1:IOErrorEvent):void
				{
					myLoader.removeEventListener(Event.COMPLETE,crash_done);
					myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
				};
				crash_done = function(param1:Event):void
				{
					myLoader.removeEventListener(Event.COMPLETE,crash_done);
					myLoader.removeEventListener(IOErrorEvent.IO_ERROR,crash_failed);
				};
				player_version_os = "User Flash Player & OS detection failed";
				try
				{
					_fullInfo = Capabilities.version;
					_osSplitArr = _fullInfo.split(" ");
					_versionSplitArr = _osSplitArr[1].split(",");
					_osInfo = _osSplitArr[0];
					_versionInfo = Number(_versionSplitArr[0]);
					player_version_os = "Flash Player version: " + _flash_version + "\nOS: " + _osInfo;
				}
				catch(e2:*)
				{
				}
				var stackTrace:String = error.getStackTrace();
				LAST_ERROR = "Oh! Something terrible happend :(\nMap loading failed. Here displayed information on error.\n Error code: " + error.errorID + "\nLoadMap_StopAddress: " + loadmap_stage + "\nMap size: " + mapdata.length + " bytes\nError message: " + error.message + "\nApplication size: " + total + "\nViewer: " + launchArguments.l + "\n" + player_version_os;
				if (stackTrace != null) LAST_ERROR += '\nStack trace: ' + stackTrace;
				trace("Error while loading map.\n" + error.toString());
				DropGameTimer();
				gotoAndStop("menu");
			}
			MP_start_guns_total = gunstotal;
		}
		
		public function qpack_rule(param1:String) : void
		{
			qpack_pattern[qpack_pattern_length] = new Array();
			qpack_pattern[qpack_pattern_length][0] = param1;
			qpack_pattern[qpack_pattern_length][1] = "^" + qpack_base.charAt(qpack_pattern_simcalc) + "";
			++qpack_pattern_simcalc;
			++qpack_pattern_length;
		}
		
		public function qpack_rule_2param(param1:String, param2:String) : void
		{
			qpack_pattern[qpack_pattern_length] = new Array();
			qpack_pattern[qpack_pattern_length][0] = param1;
			qpack_pattern[qpack_pattern_length][1] = param2;
			++qpack_pattern_length;
		}
		
		public function un_qpack(param1:String) : String
		{
			i = qpack_pattern_length - 1;
			while(i >= 0)
			{
				param1 = param1.split(qpack_pattern[i][1]).join(qpack_pattern[i][0]);
				--i;
			}
			return param1;
		}
		
		public function r_down(param1:MouseEvent) : void
		{
		}
		
		public function PutInCar(player_id:int, vehicle_id:int, forced:Boolean = false) : void
		{
			var player_mc:player = mens[player_id];

			if(!forced && MP_mode && player_mc.isplayer) return;
			if(!vehicles[vehicle_id].vehicle_unlocked) return;

			ChangedGun(player_id);
			vehicles[vehicle_id].master = player_id;
			player_mc.incar = vehicle_id;
			player_mc.alpha = 0;
			vehicles[vehicle_id].lastgun = player_mc.curwea;
			if(player_id == 0)
			{
				if(vehicles[vehicle_id].typ == 0) game_scale = 0.75;
				if(vehicles[vehicle_id].typ == 1) game_scale = 0.5;
				key_pick = false;
				vehhp.visible = true;
				vehicles[vehicle_id].gui.txt1.textColor = color_player;
			} else {
				vehicles[vehicle_id].gui.txt1.textColor = (player_mc.team == mens[MP_myid].team) ? color_friendly : color_enemy;
			}

			if(player_id == MP_myid) UpdateWeps();
		}
		
		public function PutoutCar(param1:int, param2:* = false) : void
		{
			if(!param2)
			{
				if(MP_mode && (vehicles[param1].master != -1 && mens[vehicles[param1].master] && mens[vehicles[param1].master].isplayer))
				{
					return;
				}
			}
			if(mens[vehicles[param1].master] && vehicles[param1].master != -1)
			{
				if(vehicles[param1].master == MP_myid)
				{
					game_scale = g_scale_outcar;
					key_pick = false;
					vehhp.visible = false;
					UpdateWeps();
				}
				ChangedGun(vehicles[param1].master);
				mens[vehicles[param1].master].incar = -1;
				mens[vehicles[param1].master].stability = 1;
				mens[vehicles[param1].master].y = Number(vehicles[param1].y) - 50;
				mens[vehicles[param1].master].tox = 0;
				mens[vehicles[param1].master].toy = 0;
				mens[vehicles[param1].master].alpha = 1;
				mens[vehicles[param1].master].curwea = vehicles[param1].lastgun;
				ChangedGun(vehicles[param1].master);
				vehicles[param1].master = -1;
			}
			vehicles[param1].gui.txt1.textColor = 16777215;
		}

		public function EXEC_TRIGGER_ACTION(action_id:int, args: Vector.<String>, trg:Object) : int
		{
			var tries:* = undefined;
			var block:DisplayObject = null;
			var u:* = undefined;
			var hex:Number = NaN;
			var red:Number = NaN;
			var green:Number = NaN;
			var blue:Number = NaN;
			var rule:Boolean = false;
			var res:* = undefined;
			var power:Number = NaN;
			var count:int = 0;
			var accuracy:Number = NaN;
			var c:int = 0;
			var key:String = null;
			var phrase:String = null;
			var key2:String = null;
			var mc:* = undefined;
			var palette:* = undefined;
			var variable_to_save_name:String = null;
			var mult:Number = NaN;
			var diff:* = undefined;
			var index_value:int = 0;
			var hex_str:String = null;
			var r:Number = NaN;
			var str:String = null;
			var newSound:PB2Sound = null;
			var model:String = null;
			var bitmap_data:BitmapData = null;
			var id:Number = NaN;
			var custom_image:PB2CustomImage = null;
			var sf:* = undefined;
			var clrs_mov:ColorMatrixFilter = null;
			var matrix:* = undefined;
			var loader:* = undefined;
			var request:URLRequest = null;
			var variables:URLVariables = null;
			var hex_int:int = 0;
			var g:Number = NaN;
			var b:Number = NaN;
			var heal_hp:Number = NaN;
			var SoundClass:Class = null;
			var tr:int = -1;

			var argA = args[0];
			var argB = args[1];

			switch(action_id)
			{
				case 0:
					argB = int(argB);
					doors[int(argA)].moveToward(regions[argB].x, regions[argB].y, trg && trg.forcehyperjump);
					break;
				case 1:
					doors[int(argA)].maxspeed = Number(ReplaceWithVariables(argB));
					break;
				case 2:
					argA = int(argA);
					argB = int(argB);
					regions[argA].x = regions[argB].x;
					regions[argA].y = regions[argB].y;
					break;
				case 3:
					argA = int(argA);
					vehicles[argA].hea = Number(vehicles[argA].hea) / Number(vehicles[argA].hmax) * 100 * Number(int(argB));
					break;
				case 4:
					argA = int(argA);
					if(!mens[argA].dead)
					{
						mens[argA].hea = Number(mens[argA].hmax) / 100 * Number(int(argB));
					}
					break;
				case 5:
					gravity = Number(argA);
					break;
				case 6:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
							{
								if(mens[tr2].x > regions[argB].x)
								{
									if(mens[tr2].x < regions[argB].x + regions[argB].w)
									{
										if(mens[tr2].y > regions[argB].y)
										{
											if(mens[tr2].y < regions[argB].y + regions[argB].h)
											{
												if(!MP_mode || MP_myid == tr2 || !mens[tr2].isplayer)
												{
													mens[tr2].hea -= argA;
													mens[tr2].lastshot = "body";
													mens[tr2].lastshotbygun = "nothing";
												}
											}
										}
									}
								}
							}
							else if(ax[mens[tr2].b_toe] > regions[argB].x)
							{
								if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
								{
									if(ay[mens[tr2].b_toe] > regions[argB].y)
									{
										if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
										{
											if(!MP_mode || MP_myid == tr2 || !mens[tr2].isplayer)
											{
												mens[tr2].hea -= argA;
												mens[tr2].lastshot = "body";
											}
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 7:
					argA = int(argA);
					if(FORCE_CUSTOM_MAP) break;
					if(LEVEL_END_FORCE != "") break;
					if(MP_mode) break;
					tr3 = 0;
					while(tr3 < playerstotal)
					{
						if(mens[tr3] && mens[tr3].io)
						{
							ok = false;
							UpdateCurGun();
							if(mens[tr3].char == 1 && (MP_myid == tr3 || mens[MP_myid].char != 1))
							{
								inventoryA = new Array();
								ok = true;
							}
							if(mens[tr3].char == 3 && (MP_myid == tr3 || mens[MP_myid].char != 3))
							{
								inventoryB = new Array();
								ok = true;
							}
							if(ok)
							{
								tr2 = 0;
								while(tr2 < gunstotal)
								{
									if(guns[tr2] && guns[tr2].io)
									{
										if(guns[tr2].picken_by == tr3)
										{
											if(!guns[tr2].forcars)
											{
												if(mens[tr3].char == 1)
												{
													AddItemToHero1(guns[tr2].model,guns[tr2].upg);
												}
												if(mens[tr3].char == 3)
												{
													AddItemToHero2(guns[tr2].model,guns[tr2].upg);
												}
											}
										}
									}
									++tr2;
								}
							}
						}
						++tr3;
					}
					if(CMPG_THIS_LEVEL == LEVELS_PASSED)
					{
						++LEVELS_PASSED;
					}
					if(barrelstotal >= 5)
					{
						ok = true;
						i4 = 0;
						while(i4 < barrelstotal)
						{
							if(barrels[i4].hea > 0)
							{
								ok = false;
							}
							++i4;
						}
						if(ok)
						{
							incBadge(6);
						}
					}
					i4 = 0;
					if(CMPG_THIS_LEVEL == 41)
					{
						if(!EASY_MODE)
						{
							incBadge(12);
							i4 += 10000;
						}
					}
					if(PRO_BOTS)
					{
						incBadge(16);
					}
					if(FUN_SPENT_BULLETS < 1 || FUN_DAMAGE_TAKEN < 1 || FUN_ELEMINATED < 1)
					{
						i4 += 300;
					}
					if(FUN_SPENT_BULLETS == 0)
					{
						if(!EASY_MODE)
						{
							incBadge(21);
						}
					}
					if(FUN_ELEMINATED == 0)
					{
						incBadge(10);
					}
					if(FUN_DAMAGE_TAKEN < 1)
					{
						FUN_DAMAGE_TAKEN = 1;
					}
					i4 += Math.ceil(FUN_ELEMINATED * 8 + FUN_HEADSHOTS_MADE + FUN_DAMAGE_MADE / FUN_DAMAGE_TAKEN * 80);
					if(FUN_DAMAGE_MADE >= 100)
					{
						if(FUN_DAMAGE_MADE > FUN_DAMAGE_TAKEN * 5)
						{
							incBadge(22);
						}
					}
					if (HELL_MODE) i4 *= 2;
					if(CMPG_THIS_LEVEL != 41)
					{
						i4 = Math.min(HELL_MODE ? 1000 : 500, i4);
					}
					if(!AWARD)
					{
						i4 = 0;
					}
					else
					{
						ExpTask(EXP_TYPE_BEAT_CAMPAIGN_LEVEL,CMPG_THIS_LEVEL.toString());
					}
					CMPG_money += i4;
					SaveGame();
					++CMPG_THIS_LEVEL;
					LEVEL_END_FORCE = "complete";
					MP_fps = 1;
					darkness.alpha = 0;
					darkness.visible = true;
					PlaySound_full(s_mission_done);
					break;
				case 8:
					break;
				case 9:
					darkness.visible = true;
					LAST_ERROR = ReplaceWithVariables(argA);
					LEVEL_END_FORCE = "failed";
					break;
				case 10:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
							{
								if(mens[tr2].x > regions[argB].x)
								{
									if(mens[tr2].x < regions[argB].x + regions[argB].w)
									{
										if(mens[tr2].y > regions[argB].y)
										{
											if(mens[tr2].y < regions[argB].y + regions[argB].h)
											{
												mens[tr2].stability -= Number(argA) * 0.1;
											}
										}
									}
								}
							}
							else if(ax[mens[tr2].b_toe] > regions[argB].x)
							{
								if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
								{
									if(ay[mens[tr2].b_toe] > regions[argB].y)
									{
										if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
										{
											mens[tr2].stability -= Number(argA) * 0.1;
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 11:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].team != mens[argA].team)
							{
								if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
								{
									if(mens[tr2].x > regions[argB].x)
									{
										if(mens[tr2].x < regions[argB].x + regions[argB].w)
										{
											if(mens[tr2].y > regions[argB].y)
											{
												if(mens[tr2].y < regions[argB].y + regions[argB].h)
												{
													mens[tr2].hea = 0;
												}
											}
										}
									}
								}
								else if(ax[mens[tr2].b_toe] > regions[argB].x)
								{
									if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
									{
										if(ay[mens[tr2].b_toe] > regions[argB].y)
										{
											if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
											{
												mens[tr2].hea = 0;
											}
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 12:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < vehiclestotal)
					{
						if(vehicles[tr2].hea > 0)
						{
							if(vehicles[tr2].x > regions[argA].x)
							{
								if(vehicles[tr2].x < regions[argA].x + regions[argA].w)
								{
									if(vehicles[tr2].y > regions[argA].y)
									{
										if(vehicles[tr2].y < regions[argA].y + regions[argA].h)
										{
											vehicles[tr2].hea = 0;
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 13:
					argA = int(argA);
					argB = int(argB);
					if(mens[argA].hea > 0)
					{
						if(mens[argA].incar != -1)
						{
							PutoutCar(mens[argA].incar,true);
						}
						if(vehicles[argB].master != -1)
						{
							PutoutCar(argB,true);
						}
						PutInCar(argA,argB,true);
					}
					break;
				case 14:
					argA = int(argA);
					argB = int(argB);
					if(mens[argA] && mens[argA].io)
					{
						mcc = mens[argA];
						if(mcc.hea > 0)
						{
							u = regions[argB].x + Number(regions[argB].w) / 2 - mcc.x;
							v = regions[argB].y + Number(regions[argB].h) / 2 - mcc.y;
							mcc.x = regions[argB].x + Number(regions[argB].w) / 2;
							mcc.y = regions[argB].y + Number(regions[argB].h) / 2;
							if(argA == MP_myid)
							{
								game.x += u;
								game.y += v;
							}
							i4 = 0;
							while(i4 < atotal)
							{
								if(aof[i4] == argA)
								{
									ax[i4] += u;
									ay[i4] += v;
									lax[i4] += u;
									lay[i4] += v;
								}
								++i4;
							}
						}
					}
					break;
				case 15:
					argA = int(argA);
					argB = int(argB);
					mcc = guns[argA];
					if(mcc.picken_by != -1 && mens[mcc.picken_by])
					{
						if(mens[mcc.picken_by].curwea == argA)
						{
							mens[mcc.picken_by].curwea = -1;
						}
						mcc.picken_by = -1;
					}
					mcc.x = regions[argB].x + Number(regions[argB].w) / 2;
					mcc.y = regions[argB].y + Number(regions[argB].h) / 2;
					atox[mcc.b_p1] = 0;
					atoy[mcc.b_p1] = 0;
					WakeUpAtom(mcc.b_p1);
					ax[mcc.b_p1] = mcc.x - 10;
					ay[mcc.b_p1] = mcc.y;
					lax[mcc.b_p1] = ax[mcc.b_p1];
					lay[mcc.b_p1] = ay[mcc.b_p1];
					atox[mcc.b_p2] = 0;
					atoy[mcc.b_p2] = 0;
					WakeUpAtom(mcc.b_p2);
					ax[mcc.b_p2] = mcc.x + 10;
					ay[mcc.b_p2] = mcc.y;
					lax[mcc.b_p2] = ax[mcc.b_p2];
					lay[mcc.b_p2] = ay[mcc.b_p2];
					break;
				case 16:
					argA = int(argA);
					argB = int(argB);
					mcc = barrels[argA];
					if(mcc.hea > 0)
					{
						mcc.x = regions[argB].x + Number(regions[argB].w) / 2;
						mcc.y = regions[argB].y + Number(regions[argB].h) / 2;
						lax[mcc.b_left_top] = mcc.x - 5;
						lax[mcc.b_right_top] = mcc.x + 5;
						lax[mcc.b_right_bottom] = mcc.x + 5;
						lax[mcc.b_left_bottom] = mcc.x - 5;
						lay[mcc.b_left_top] = mcc.y - 13;
						lay[mcc.b_right_top] = mcc.y - 13;
						lay[mcc.b_right_bottom] = mcc.y + 13;
						lay[mcc.b_left_bottom] = mcc.y + 13;
						ax[mcc.b_left_top] = mcc.x - 5;
						ax[mcc.b_right_top] = mcc.x + 5;
						ax[mcc.b_right_bottom] = mcc.x + 5;
						ax[mcc.b_left_bottom] = mcc.x - 5;
						ay[mcc.b_left_top] = mcc.y - 13;
						ay[mcc.b_right_top] = mcc.y - 13;
						ay[mcc.b_right_bottom] = mcc.y + 13;
						ay[mcc.b_left_bottom] = mcc.y + 13;
						atox[mcc.b_left_top] = 0;
						atox[mcc.b_right_top] = 0;
						atox[mcc.b_right_bottom] = 0;
						atox[mcc.b_left_bottom] = 0;
						atoy[mcc.b_left_top] = 0;
						atoy[mcc.b_right_top] = 0;
						atoy[mcc.b_right_bottom] = 0;
						atoy[mcc.b_left_bottom] = 0;
					}
					break;
				case 17:
				case 584: // Move Vehicle 'A' to Region 'B'
					argA = int(argA);
					mcc = vehicles[argA];
					if (mcc.hea > 0) {
						var region:Object = regions[int(argB)];
						var dx:Number = (region.x + Number(region.w) / 2) - ax[mcc.atoms[0]];
						var dy:Number = (region.y + Number(region.h) / 2) - ay[mcc.atoms[0]];
						for each (var atom:int in mcc.atoms) {
							ax[atom] += dx;
							ay[atom] += dy;
							lax[atom] += dx;
							lay[atom] += dy;
						}
						mcc.x = region.x + Number(region.w) / 2;
						mcc.y = region.y + Number(region.h) / 2;
						if (mens[MP_myid].incar == int(argA)) {
							game.x += dx;
							game.y += dy;
						}
					}
					break;
				case 18:
					argA = int(argA);
					argB = int(argB);
					regions[argA].x = regions[argB].x + Number(regions[argB].w) / 2 + Number(regions[argA].w) / 2;
					regions[argA].y = regions[argB].y + Number(regions[argB].h) / 2 + Number(regions[argA].h) / 2;
					break;
				case 19:
					triggers[int(argA)].enabledd = false;
					break;
				case 20:
					triggers[int(argA)].enabledd = true;
					break;
				case 21:
					triggers[int(argA)].maxcalls = 0;
					break;
				case 22:
					triggers[int(argA)].maxcalls = int(argB);
					break;
				case 23:
					mens[int(argA)].hea = int(argB);
					break;
				case 24:
					argA = int(argA);
					argB = int(argB);
					PhysicsExplosion(regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2,Math.abs(Number(argA) * 5),Number(argA) * 0.6,Math.max(0,Number(argA) * 10),-1,"level");
					if(argA >= 0)
					{
						ExplosionSound(regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2);
					}
					break;
				case 25:
					argA = int(argA);
					argB = int(argB);
					if (trg) timers[argA].forcehyperjump = trg.forcehyperjump;
					timers[argA].enabledd = true;
					break;
				case 26:
					timers[int(argA)].enabledd = false;
					break;
				case 27:
					timers[int(argA)].ddelay = int(argB);
					break;
				case 28:
				case 53:
				case 605: // Silently clone Character 'A' and spawn it in the centre of Region 'B'
				case 606: // Silently clone Character 'B' and spawn it in random place of Region 'B'
					argA = int(argA);
					argB = int(argB);
					if(mens[argA] && mens[argA].io)
					{
						mc2 = mens[argA];
						mc3 = game.addChildAt(new player(),game.numChildren) as MovieClip;
						NoMouse(mc3);
						i3 = 0;
						if(argB < 0)
						{
							ok = true;
							i4 = -Number(argB);
						}
						else
						{
							ok = false;
							u = regions[argB].x + Number(regions[argB].w) / 2;
							v = regions[argB].y + Number(regions[argB].h) / 2;
						}
						if(action_id == 53 || action_id == 606)
						{
							ok = true;
							i4 = argB;
						}
						tries = 0;
						while(ok)
						{
							tries += 1;
							if(tries > 10000)
							{
								break;
							}
							ok = true;
							u = regions[i4].x + Math.random() * Number(regions[i4].w);
							v = g_miny + (g_maxy - g_miny) * Math.random();
							if(TracePointNoRagdolls(u,v))
							{
								if(!TracePointNoRagdolls(u,v + 100))
								{
									ok = false;
								}
							}
							i2 = 0;
							while(i2 < waterstotal)
							{
								if(u > Number(wax[i2]) - 100)
								{
									if(u < wax[i2] + waw[i2] + 100)
									{
										if(v > Number(way[i2]) - 100)
										{
											if(v < way[i2] + wah[i2] + 100)
											{
												ok = true;
											}
										}
									}
								}
								++i2;
							}
							if(mens[MP_myid].team != mc2.team)
							{
								if(Dist2D(u,v,mens[MP_myid].x,mens[MP_myid].y) < 400)
								{
									if(i3 < 10)
									{
										ok = true;
										++i3;
									}
								}
							}
						}
						mc3.x = new Number(u);
						mc3.y = new Number(v);
						create_player(mc3 as player,mc2.hea,mc2.hmax);
						SetPlayerScale(mc3 as player,mc2.scale);
						mc3.tox = new Number(0);
						mc3.toy = new Number(0);
						mc3.mobility = mc2.mobility;
						mc3.antigravity = mc2.antigravity;
						mc3.antigravity_radius = mc2.antigravity_radius;
						mc3.can_be_hit = mc2.can_be_hit;
						mc3.can_drop_guns = mc2.can_drop_guns;
						mc3.voice = mc2.voice;
						mc3.isGhost = mc2.isGhost;
						mc3.gui.txt1.text = mc2.gui.txt1.text;
						mc3.nick = mc2.nick;
						mc3.textcolorchanged = mc2.textcolorchanged; // Just in case if someone switches to an ally - Molis
						mc3.nick_color = mc2.nick_color;
						mc3.team = new Number(mc2.team);
						if(mc3.team != mens[MP_myid].team)
						{
							mc3.gui.visible = false;
						}
						UpdateTeamColor(mc3);
						mc3.palette = mc2.palette;
						mc3.side = new Number(mc2.side);
						mc3.tarx = mc3.x + Number(mc3.side) * 100;
						mc3.tary = mc3.y;
						mc3.armored = new Number(mc2.armored);
						mc3.incar = new Number(-1);
						mc3.char = new Number(mc2.char);
						mc3.mdl_leg1_upper = new Number(mc2.mdl_leg1_upper);
						mc3.mdl_leg1_middle = new Number(mc2.mdl_leg1_middle);
						mc3.mdl_leg1_lower = new Number(mc2.mdl_leg1_lower);
						mc3.mdl_leg2_upper = new Number(mc2.mdl_leg2_upper);
						mc3.mdl_leg2_middle = new Number(mc2.mdl_leg2_middle);
						mc3.mdl_leg2_lower = new Number(mc2.mdl_leg2_lower);
						mc3.mdl_arm1_upper = new Number(mc2.mdl_arm1_upper);
						mc3.mdl_arm1_lower = new Number(mc2.mdl_arm1_lower);
						mc3.mdl_arm2_upper = new Number(mc2.mdl_arm2_upper);
						mc3.mdl_arm2_lower = new Number(mc2.mdl_arm2_lower);
						mc3.mdl_toe = new Number(mc2.mdl_toe);
						mc3.mdl_body = new Number(mc2.mdl_body);
						mc3.mdl_head = new Number(mc2.mdl_head);
						mc3.mdl_psi1 = new Number(mc2.mdl_psi1);
						mc3.mdl_psi2 = new Number(mc2.mdl_psi2);
						if(mc2.arm1.lower.psi != null)
						{
							mc3.arm1.lower.psi.visible = mc2.arm1.lower.psi.visible;
						}
						if(mc2.arm2.lower.psi != null)
						{
							mc3.arm2.lower.psi.visible = mc2.arm2.lower.psi.visible;
						}
						mc3.blood_red = mc2.blood_red;
						mc3.blood_green = mc2.blood_green;
						mc3.blood_blue = mc2.blood_blue;
						mc3.botaction = mc2.botaction;
						mc3.ondeath = mc2.ondeath;
						mc3.onalert = mc2.onalert;

						if(action_id == 53 || action_id == 28) {
							Effect(mc3.x,mc3.y - 41,14,0,0);
						}

						SpawnPlayerImmediately(mc3 as player);
						i7 = mc3.idd;
						if(mc2.curwea != -1)
						{
							xx = mc3.x;
							yy = mc3.y;
							mc2 = guns[mc2.curwea];
							mc3 = MakeGunByClass(mc2.model,mc2);
							mens[i7].curwea = mc3.idd;
							mc3.picken_by = i7;
							mens[i7].arm1.lower.psi.visible = false;
							mens[i7].arm2.lower.psi.visible = false;
							mc3.stat_bullets = mc2.stat_bullets;
							mc3.recoil_multiplier = mc2.recoil_multiplier;
							mc3.speed_multiplier = mc2.speed_multiplier;
							mc3.projectile_scale = mc2.projectile_scale;
							mc3.knockback_multiplier = mc2.knockback_multiplier;
							mc3.stat_power = mc2.stat_power;
							mc3.stat_averange = mc2.stat_averange;
							mc3.stat_count = mc2.stat_count;
							mc3.forcars = mc2.forcars;
							mc3.stat_class = mc2.stat_class;
						}
					}
					break;
				case 29:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					if (mens[argA]) {
						while(tr2 < playerstotal)
						{
							if(mens[tr2] && mens[tr2].io)
							{
								if(mens[tr2].team != mens[argA].team)
								{
									if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
									{
										if(mens[tr2].x > regions[argB].x)
										{
											if(mens[tr2].x < regions[argB].x + regions[argB].w)
											{
												if(mens[tr2].y > regions[argB].y)
												{
													if(mens[tr2].y < regions[argB].y + regions[argB].h)
													{
														if(mens[tr2].hunt == -1)
														{
															mens[tr2].hunt = argA;
														}
													}
												}
											}
										}
									}
									else if(ax[mens[tr2].b_toe] > regions[argB].x)
									{
										if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
										{
											if(ay[mens[tr2].b_toe] > regions[argB].y)
											{
												if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
												{
													if(mens[tr2].hunt == -1)
													{
														mens[tr2].hunt = argA;
													}
												}
											}
										}
									}
								}
							}
							++tr2;
						}
					}
					break;
				case 30:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].x > regions[argA].x)
							{
								if(mens[tr2].x < regions[argA].x + regions[argA].w)
								{
									if(mens[tr2].y > regions[argA].y)
									{
										if(mens[tr2].y < regions[argA].y + regions[argA].h)
										{
											mcc = mens[tr2];
											if(mcc.hea > 0)
											{
												u = ax[mcc.b_toe] - (regions[argB].x + Number(regions[argB].w) / 2);
												v = ay[mcc.b_toe] - (regions[argB].y + Number(regions[argB].h) / 2);
												if(regions[argA].w == regions[argB].w)
												{
													if(regions[argA].h == regions[argB].h)
													{
														u = Number(regions[argA].x) - Number(regions[argB].x);
														v = Number(regions[argA].y) - Number(regions[argB].y);
													}
												}
												if(tr2 == MP_myid)
												{
													game.x += u;
													game.y += v;
												}
												i4 = 0;
												while(i4 < atotal)
												{
													if(aof[i4] == mcc.idd)
													{
														ax[i4] -= u;
														ay[i4] -= v;
														if(GET_LITE_PHYS())
														{
															lax[i4] -= u;
															lay[i4] -= v;
														}
													}
													++i4;
												}
												Effect(mcc.x,mcc.y - 41,14,0,0);
												mcc.x -= u;
												mcc.y -= v;
												Effect(mcc.x,mcc.y - 41,14,0,0);
												i4 = 0;
												while(i4 < vehiclestotal)
												{
													if(vehicles[i4].io)
													{
														if(vehicles[i4].master == mcc.idd)
														{
															if(vehicles[i4].typ == 5 || vehicles[i4].typ == 6)
															{
																vehicles[i4].master = -1;
															}
														}
													}
													++i4;
												}
												if(mcc.incar != -1)
												{
													// PutOutCar(mcc.incar);
												}
											}
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 31:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].x > regions[argA].x)
							{
								if(mens[tr2].x < regions[argA].x + regions[argA].w)
								{
									if(mens[tr2].y > regions[argA].y)
									{
										if(mens[tr2].y < regions[argA].y + regions[argA].h)
										{
											mcc = mens[tr2];
											if(mcc.hea > 0)
											{
												u = ax[mcc.b_toe] - (regions[argB].x + Number(regions[argB].w) / 2);
												v = ay[mcc.b_toe] - (regions[argB].y + Number(regions[argB].h) / 2);
												if(tr2 == MP_myid)
												{
													game.x += u;
													game.y += v;
												}
												i4 = 0;
												while(i4 < atotal)
												{
													if(aof[i4] == mcc.idd)
													{
														ax[i4] -= u;
														ay[i4] -= v;
														if(GET_LITE_PHYS())
														{
															lax[i4] -= u;
															lay[i4] -= v;
														}
														atox[i4] = -Number(atox[i4]);
													}
													++i4;
												}
												Effect(mcc.x,mcc.y - 41,14,0,0);
												mcc.x -= u;
												mcc.y -= v;
												mcc.tox = -Number(mcc.tox);
												mcc.side = -Number(mcc.side);
												Effect(mcc.x,mcc.y - 41,14,0,0);
												i4 = 0;
												while(i4 < vehiclestotal)
												{
													if(vehicles[i4].io)
													{
														if(vehicles[i4].master == mcc.idd)
														{
															if(vehicles[i4].typ == 5 || vehicles[i4].typ == 6)
															{
																vehicles[i4].master = -1;
															}
														}
													}
													++i4;
												}
												if(mcc.incar != -1)
												{
													// PutOutCar(mcc.incar);
												}
											}
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 32:
					mens[int(argA)].botaction = int(argB);
					break;
				case 33:
					argA = int(argA);
					argB = int(argB);
					mens[argA].team = argB;
					UpdateCharProps(mens[argA]);
					SpawnPlayerImmediately(mens[argA]);
					i4 = 0;
					while(i4 < playerstotal)
					{
						if(mens[i4] && mens[i4].io)
						{
							UpdateTeamColor(mens[i4]);
						}
						++i4;
					}
					break;
				case 34:
					mcc = decors[int(argA)];
					if(mcc.currentFrameLabel != argB || movieClipHasLabel(mcc,argB) && mcc.custom_bitmap.visible)
					{
						if(mcc.onFrameChange)
						{
							mcc.onFrameChange();
						}
						if(movieClipHasLabel(mcc,argB))
						{
							mcc.gotoAndStop(argB);
							mcc.custom_bitmap.visible = false;
						}
						else
						{
							mcc.custom_bitmap.visible = true;
							model = argB;
							bitmap_data = null;
							if(model.length > 1)
							{
								if(model.charAt(0) == "c")
								{
									id = int(model.substr(1));
									if(isNaN(id))
									{
										throw new Error("Decoration model with ID " + id + " could not be found.");
									}
									custom_image = FindCustomImageObject(id);
									if(custom_image == null)
									{
										throw new Error("Custom image of ID " + id + " needs to be added as Custom Image object before it can be used as decoration model.");
									}
									bitmap_data = new BitmapData(custom_image.width,custom_image.height,true,1727987712);
									mcc.custom_bitmap.bitmapData = bitmap_data;
									mcc.custom_bitmap.smoothing = true;
									if(custom_image.load_callback_params == null)
									{
										bitmap_data.lock();
										bitmap_data.fillRect(bitmap_data.rect,0);
										bitmap_data.draw(custom_image.bitmap);
										bitmap_data.unlock();
									}
									else
									{
										custom_image.load_callback_params.push({
											"bitmap_data":bitmap_data,
											"custom_image":custom_image
										});
										custom_image.load_callbacks.push(function(param1:*):*
										{
											bitmap_data = param1.bitmap_data;
											custom_image = param1.custom_image;
											bitmap_data.lock();
											bitmap_data.fillRect(bitmap_data.rect,0);
											bitmap_data.draw(custom_image.bitmap);
											bitmap_data.unlock();
										});
									}
								}
							}
						}
					}
					break;
				case 35:
					i7 = int(argA);
					pushtox[i7] = Number(argB);
					i6 = 0;
					while(i6 < atotal)
					{
						if(aio[i6] == false || aio[i6] == true)
						{
							if(ax[i6] > pushx[i7])
							{
								if(ax[i6] < pushw[i7])
								{
									if(ay[i6] > pushy[i7])
									{
										if(ay[i6] < pushh[i7])
										{
											WakeUpAtom(i6);
										}
									}
								}
							}
						}
						++i6;
					}
					break;
				case 36:
					i7 = int(argA);
					pushtoy[i7] = Number(argB);
					i6 = 0;
					while(i6 < atotal)
					{
						if(aio[i6] == false || aio[i6] == true)
						{
							if(ax[i6] > pushx[i7])
							{
								if(ax[i6] < pushw[i7])
								{
									if(ay[i6] > pushy[i7])
									{
										if(ay[i6] < pushh[i7])
										{
											WakeUpAtom(i6);
										}
									}
								}
							}
						}
						++i6;
					}
					break;
				case 37:
					pushstab[int(argA)] = Number(argB);
					break;
				case 38:
					pushdamage[int(argA)] = Number(argB);
					break;
				case 39:
					argA = Number(argA);
					if(argA != 0)
					{
						MP_fps = argA;
					}
					else
					{
						MP_fps = DEFAULT_FPS;
					}
					break;
				case 40:
					if(int(argA) == 1)
					{
						CASUAL_MODE = true;
						STRICT_MODE = true;
					}
					else
					{
						CASUAL_MODE = false;
						STRICT_MODE = false;
					}
					break;
				case 41:
					DialogTalk(argA);
					break;
				case 42:
					DialogSay(argA,argB);
					break;
				case 43:
					if(argA == "0")
					{
						SetHint("");
					}
					else if(HINTS)
					{
						SetHint(argA);
					}
					break;
				case 44:
					timers[int(argA)].ticknew = 0;
					break;
				case 45:
					if(argA == "true" || argA == "1")
					{
						AUTO_REVIVE = true;
					}
					else
					{
						AUTO_REVIVE = false;
					}
					break;
				case 46:
					timers[int(argA)].maxcalls = int(argB);
					break;
				case 47:
					if(!FORCE_CUSTOM_MAP)
					{
						if(!MP_mode)
						{
							LEVEL_END_FORCE = "credits";
							CREDITS_BY_GAME_END = true;
							if(PRO_BOTS)
							{
								incBadge(14);
							}
							if(!EASY_MODE)
							{
								incBadge(13);
							}
							incBadge(11);
							MP_fps = 1;
							darkness.alpha = 0;
							darkness.visible = true;
							if(CMPG_THIS_LEVEL == LEVELS_PASSED)
							{
								++LEVELS_PASSED;
							}
							CMPG_money += 10000;
							SaveGame();
							++CMPG_THIS_LEVEL;
						}
					}
					break;
				case 48:
					mcc = mens[int(argA)];
					argB = int(argB);
					if(!mcc.dead)
					{
						mcc.hea *= Number(argB) / 100;
						mcc.hmax *= Number(argB) / 100;
					}
					break;
				case 49:
					if(argA == "true" || argA == "1" || argA == "yes")
					{
						NO_PSI = true;
					}
					else
					{
						NO_PSI = false;
					}
					i7 = 0;
					while(i7 < playerstotal)
					{
						if(mens[i7] && mens[i7].io)
						{
							if(!mens[i7].dead)
							{
								ChangedGun(i7);
							}
						}
						++i7;
					}
					break;
				case 50:
					FORCE_CUSTOM_MAP = true;
					MP_mode = false;
					MP_fps = 1;
					PlaySound_full(s_mission_done);
					GotoMap(argA);
					break;
				case 51:
					game_scale = Number(argA) / 100;
					if(isNaN(game_scale))
					{
						game_scale = 1;
					}
					if(game_scale < 0.01)
					{
						game_scale = 0.01;
					}
					if(game_scale > 15)
					{
						game_scale = 15;
					}
					break;
				case 52:
					mc = mens[int(argA)];
					mc.nick = ReplaceWithVariables(argB);
					mc.gui.txt1.text = ReplaceWithVariables(argB);
					break;
				case 54:
					EnLight(int(argA));
					break;
				case 55:
					DimLight(int(argA));
					break;
				case 56:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
							{
								if(mens[tr2].x > regions[argB].x)
								{
									if(mens[tr2].x < regions[argB].x + regions[argB].w)
									{
										if(mens[tr2].y > regions[argB].y)
										{
											if(mens[tr2].y < regions[argB].y + regions[argB].h)
											{
												mens[tr2].tox *= -2;
											}
										}
									}
								}
							}
							else if(ax[mens[tr2].b_toe] > regions[argB].x)
							{
								if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
								{
									if(ay[mens[tr2].b_toe] > regions[argB].y)
									{
										if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
										{
											mens[tr2].tox *= -2;
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 57:
					argA = int(argA);
					argB = int(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].stability > 0 && mens[tr2].hea > 0)
							{
								if(mens[tr2].x > regions[argB].x)
								{
									if(mens[tr2].x < regions[argB].x + regions[argB].w)
									{
										if(mens[tr2].y > regions[argB].y)
										{
											if(mens[tr2].y < regions[argB].y + regions[argB].h)
											{
												mens[tr2].toy *= -2;
											}
										}
									}
								}
							}
							else if(ax[mens[tr2].b_toe] > regions[argB].x)
							{
								if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
								{
									if(ay[mens[tr2].b_toe] > regions[argB].y)
									{
										if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
										{
											mens[tr2].toy *= -2;
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 58:
					argA = int(argA);
					argB = int(argB);
					mc = mens[argA];
					mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
					mc.char = argB;
					mc.mdl_head = mc.char;
					mc.mdl_leg1_upper = mc.char;
					mc.mdl_leg1_middle = mc.char;
					mc.mdl_leg1_lower = mc.char;
					mc.mdl_leg2_upper = mc.char;
					mc.mdl_leg2_middle = mc.char;
					mc.mdl_leg2_lower = mc.char;
					mc.mdl_arm1_upper = mc.char;
					mc.mdl_arm1_lower = mc.char;
					mc.mdl_arm2_upper = mc.char;
					mc.mdl_arm2_lower = mc.char;
					mc.mdl_toe = mc.char;
					mc.mdl_body = mc.char;
					mc.alpha = 1;
					UpdateCharProps(mc);
					SpawnPlayerImmediately(mc);
					break;
				case 59:
					argA = int(argA);
					argB = Number(argB);
					i3 = argA;
					if(i3 >= 0)
					{
						mens[i3].hea = mens[i3].hmax = argB;
						if(mens[i3].hea > 0)
						{
							mens[i3].dead = false;
							mens[i3].dying = false;
							ChangedGun(i3);
							if(Boolean(mens[i3].isplayer) || mens[i3].team == mens[MP_myid].team)
							{
								mens[i3].gui.alpha = 1;
								mens[i3].gui.visible = true;
								mens[i3].hunt = -1;
							}
							mens[i3].deadtim = 0;
							mens[i3].hp_head = Math.max(Number(mens[i3].hea) * 0.4,30);
							mens[i3].hp_body = Math.max(Number(mens[i3].hea) * 0.6,30);
							mens[i3].hp_legs = Math.max(Number(mens[i3].hea) * 0.5,30);
							mens[i3].hp_arms = Math.max(Number(mens[i3].hea) * 0.4,30);
							Hurt_nopain(i3);
							SpawnPlayerImmediately(mens[i3]);
						}
					}
					else
					{
						if (trg) SpawnLevelLogicErrorIfNeeded(new Error(), "Trigger " + trg.uid + ", Action #" + (tr + 1) + ": Character with ID \"" + argA + "\" wasn\'t found.");
						else SpawnLevelLogicErrorIfNeeded(new Error(), "Action #" + (tr + 1) + ": Character with ID \"" + argA + "\" wasn\'t found.");
					}
					break;
				case 60:
					argA = int(argA);
					i3 = argA;
					mens[i3].curwea = -1;
					ChangedGun(i3);
					i2 = 0;
					while(i2 < gunstotal)
					{
						if(guns[i2].picken_by == i3)
						{
							if(guns[i2].picken_by == MP_myid)
							{
								if(guns[i2].wep == -2)
								{
									if(guns[i2].nadekind == 1)
									{
										if(grenades_total > 0)
										{
											grenades_total = grenades_total - 1;
										}
									}
									if(guns[i2].nadekind == 2)
									{
										if(grenades_port_total > 0)
										{
											grenades_port_total = grenades_port_total - 1;
										}
									}
									if(guns[i2].nadekind == 3)
									{
										if(grenades_sh_total > 0)
										{
											grenades_sh_total = grenades_sh_total - 1;
										}
									}
								}
							}
							guns[i2].picken_by = -1;
						}
						++i2;
					}
					break;
				case 61:
					argA = int(argA);
					argB = Number(argB);
					if(mens[argA] && mens[argA].io)
					{
						mcc = mens[argA];
						mcc.tox *= argB;
						mcc.toy *= argB;
						i4 = 0;
						while(i4 < atotal)
						{
							if(aof[i4] == argA)
							{
								atox[i4] *= argB;
								atoy[i4] *= argB;
							}
							++i4;
						}
					}
					break;
				case 62:
					mcc = guns[int(argA)];
					mcc.stat_count = int(argB);
					break;
				case 63:
					mcc = guns[int(argA)];
					mcc.stat_averange = Number(argB) / 180 * Math.PI;
					break;
				case 64:
					mcc = guns[int(argA)];
					mcc.stat_power = Number(argB);
					break;
				case 65:
					mcc = guns[int(argA)];
					mcc.stat_bullets = 1;
					mcc.stat_class = 0;
					break;
				case 66:
					mcc = guns[int(argA)];
					mcc.stat_bullets = 1;
					mcc.stat_class = 2;
					break;
				case 67:
					mcc = guns[int(argA)];
					mcc.stat_bullets = 8;
					mcc.stat_class = 4;
					break;
				case 68:
					mcc = guns[int(argA)];
					mcc.stat_bullets = 10;
					mcc.stat_class = 5;
					break;
				case 69:
					mcc = guns[int(argA)];
					mcc.stat_bullets = 7;
					mcc.stat_class = 1;
					break;
				case 70:
				case 279:
					argA = int(argA);
					argB = int(argB);
					tr2 = TRIGGER_PLAYER_INITIATOR;
					if(mens[tr2] && mens[tr2].io)
					{
						mcc = mens[tr2];
						if(mcc.hea > 0)
						{
							u = ax[mcc.b_toe] - (regions[argB].x + Number(regions[argB].w) / 2);
							v = ay[mcc.b_toe] - (regions[argB].y + Number(regions[argB].h) / 2);
							if(regions[argA].w == regions[argB].w)
							{
								if(regions[argA].h == regions[argB].h)
								{
									u = Number(regions[argA].x) - Number(regions[argB].x);
									v = Number(regions[argA].y) - Number(regions[argB].y);
								}
							}
							if(tr2 == MP_myid)
							{
								game.x += u;
								game.y += v;
							}
							i4 = 0;
							while(i4 < atotal)
							{
								if(aof[i4] == mcc.idd)
								{
									ax[i4] -= u;
									ay[i4] -= v;
									if(GET_LITE_PHYS())
									{
										lax[i4] -= u;
										lay[i4] -= v;
									}
								}
								++i4;
							}
							if(action_id == 70)
							{
								Effect(mcc.x,mcc.y - 41,14,0,0);
							}
							mcc.x -= u;
							mcc.y -= v;
							if(action_id == 70)
							{
								Effect(mcc.x,mcc.y - 41,14,0,0);
							}
							i4 = 0;
							while(i4 < vehiclestotal)
							{
								if(vehicles[i4].io)
								{
									if(vehicles[i4].master == mcc.idd)
									{
										if(vehicles[i4].typ == 5 || vehicles[i4].typ == 6)
										{
											vehicles[i4].master = -1;
										}
									}
								}
								++i4;
							}
							if(mcc.incar != -1)
							{
								// PutOutCar(mcc.incar);
							}
						}
					}
					break;
				case 71:
					argA = int(argA);
					argB = String(argB);
					doors[argA].setColor(argB);
					block = doors[argA].surface;
					if(block != null)
					{
						hex = Number(argB.replace("#","0x"));
						red = (hex & 16711680) >> 16;
						green = (hex & 65280) >> 8;
						blue = hex & 255;
						clrs_mov = new ColorMatrixFilter();
						matrix = new Array();
						matrix = matrix.concat([1,0,0,0,red]);
						matrix = matrix.concat([0,1,0,0,green]);
						matrix = matrix.concat([0,0,1,0,blue]);
						matrix = matrix.concat([0,0,0,1,0]);
						clrs_mov.matrix = matrix;
						block.filters = new Array(clrs_mov);
					}
					break;
				case 72:
					argA = int(argA);
					u = Number(argB);
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].x > regions[argA].x)
							{
								if(mens[tr2].x < regions[argA].x + regions[argA].w)
								{
									if(mens[tr2].y > regions[argA].y)
									{
										if(mens[tr2].y < regions[argA].y + regions[argA].h)
										{
											mcc = mens[tr2];
											i4 = 0;
											while(i4 < atotal)
											{
												if(aof[i4] == mcc.idd)
												{
													atox[i4] *= u;
													atoy[i4] *= u;
												}
												++i4;
											}
											mcc.tox *= u;
											mcc.toy *= u;
										}
									}
								}
							}
						}
						++tr2;
					}
					break;
				case 73:
					pspeed = Number(argA);
					break;
				case 74:
					weapon_penetration_factor = Number(argA);
					break;
				case 75:
					maxbulletlife = Number(argA);
					break;
				case 76:
					guns[int(argA)].forcars = false;
					break;
				case 77:
					guns[int(argA)].forcars = true;
					break;
				case 78:
					guns[int(argA)].wep = int(argB);
					break;
				case 79:
					argA = int(argA);
					tr2 = TRIGGER_PLAYER_INITIATOR;
					regions[argA].x = Number(mens[tr2].x) - Number(regions[argA].w) / 2;
					regions[argA].y = Number(mens[tr2].y) - Number(regions[argA].h) / 2;
					break;
				case 80:
					argA = int(argA);
					tr2 = int(argB);
					regions[argA].x = Number(mens[tr2].x) - Number(regions[argA].w) / 2;
					regions[argA].y = Number(mens[tr2].y) - Number(regions[argA].h) / 2;
					break;
				case 81:
					guns[int(argA)].onshot = int(argB);
					break;
				case 82:
					doors[int(argA)].onshot = int(argB);
					break;
				case 83:
					regions[int(argA)].x += Number(argB);
					break;
				case 84:
					regions[int(argA)].y += Number(argB);
					break;
				case 85:
					doors[int(argA)].playsounds = false;
					break;
				case 86:
					doors[int(argA)].playsounds = true;
					break;
				case 87:
					argA = int(argA);
					argB = int(argB);
					tr2 = TRIGGER_PLAYER_INITIATOR;
					regions[argA].x = Number(mens[tr2].tarx) - Number(regions[argA].w) / 2;
					regions[argA].y = Number(mens[tr2].tary) - Number(regions[argA].h) / 2;
					break;
				case 88:
					argA = int(argA);
					argB = Number(argB);
					mens[argA].mobility = argB;
					break;
				case 89:
					argA = int(argA);
					argB = int(argB);
					mens[argA].armored = argB;
					break;
				case 90:
					argA = int(argA);
					argB = String(argB);
					hex = Number(argB.replace("#","0x"));
					red = (hex & 16711680) >> 16;
					green = (hex & 65280) >> 8;
					blue = hex & 255;
					mens[argA].blood_red = red / 255 * 2;
					mens[argA].blood_green = green / 255 * 2;
					mens[argA].blood_blue = blue / 255 * 2;
					break;
				case 91:
					argA = int(argA);
					argB = int(argB);
					if(argB > 0)
					{
						argB = 1;
					}
					else if(argB < 0)
					{
						argB = -1;
					}
					else
					{
						argB = 0;
					}
					mens[argA].act_movex = argB;
					break;
				case 92:
					argB = int(argB);
					if(argB > 0)
					{
						argB = 1;
					}
					else if(argB < 0)
					{
						argB = -1;
					}
					else
					{
						argB = 0;
					}
					mens[int(argA)].act_movey = argB;
					break;
				case 93:
					if(int(argB) == 1)
					{
						argB = true;
					}
					else
					{
						argB = false;
					}
					mens[int(argA)].act_fire = argB;
					break;
				case 94:
					argA = int(argA);
					argB = int(argB);
					mens[argA].tarx = regions[argB].x + Number(regions[argB].w) * Math.random();
					mens[argA].tary = regions[argB].y + Number(regions[argB].h) * Math.random();
					break;
				case 95:
				case 96:
					var regACenterX = regions[argA].x + Number(regions[argA].w) / 2;
					var regACenterY = regions[argA].y + Number(regions[argA].h) / 2;
					var regBCenterX = regions[argB].x + Number(regions[argB].w) / 2;
					var regBCenterY = regions[argB].y + Number(regions[argB].h) / 2;
				
					if (trg) {
						//action_id 96 is the inverse of 95
						rule = action_id != 95

						argA = int(argA);
						argB = int(argB);
						res = TraceLineF_nopushers(regACenterX, regACenterY, regBCenterX, regBCenterY);

						if(res)
						{
							res = TracePointNoRagdolls(regACenterX, regACenterY);
						}
						if(res)
						{
							res = TracePointNoRagdolls(regBCenterX, regBCenterY);
						}
						if(res == rule)
						{
							tr = int(trg.actions.length);
						}
					}
					break;
				case 97:
					argB = int(argB);
					if(argB >= 0)
					{
						if(argB < playerstotal)
						{
							mens[int(argA)].hunt = mens[argB].idd;
						}
					}
					break;
				case 98:
					argA = int(argA);
					argB = int(argB);
					regions[argA].x = doors[argB].x + Number(doors[argB].w) / 2 - Number(regions[argA].w) / 2;
					regions[argA].y = doors[argB].y + Number(doors[argB].h) / 2 - Number(regions[argA].h) / 2;
					break;
				case 99:
					EXEC_TRIGGER(int(argA),true);
					break;
				case 100:
					level_variables[argA] = argB;
					level_variable_changed(argA);
					break;
				case 101:
					if(level_variables[argA] == undefined)
					{
						level_variables[argA] = argB;
						level_variable_changed(argA);
					}
					break;
				case 102:
					level_variables[argA] = Number(level_variables[argA]) + Number(argB);
					level_variable_changed(argA);
					break;
				case 103:
					level_variables[argA] *= Number(argB);
					level_variable_changed(argA);
					break;
				case 104:
					level_variables[argA] += Number(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 105:
					level_variables[argA] *= Number(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 106:
					level_variables[argA] = Math.random() * Number(argB);
					level_variable_changed(argA);
					break;
				case 107:
					level_variables[argA] = Math.floor(Math.random() * Number(argB));
					level_variable_changed(argA);
					break;
				case 108:
					level_variables[argA] = Math.round(level_variables[argA]);
					level_variable_changed(argA);
					break;
				case 109:
					level_variables[argA] = Math.floor(level_variables[argA]);
					level_variable_changed(argA);
					break;
				case 110:
					if(trg && Number(level_variables[argA]) <= Number(level_variables[argB]))
					{
						tr = int(trg.actions.length);
					}
					break;
				case 111:
					if(trg && Number(level_variables[argA]) >= Number(level_variables[argB]))
					{
						tr = int(trg.actions.length);
					}
					break;
				case 112:
					if(trg && level_variables[argA] != level_variables[argB])
					{
						tr = int(trg.actions.length);
					}
					break;
				case 113:
					if(trg && level_variables[argA] == level_variables[argB])
					{
						tr = int(trg.actions.length);
					}
					break;
				case 114:
					if(trg && Number(level_variables[argA]) <= Number(argB))
					{
						tr = int(trg.actions.length);
					}
					break;
				case 115:
					if(trg && Number(level_variables[argA]) >= Number(argB))
					{
						tr = int(trg.actions.length);
					}
					break;
				case 116:
					if(trg && level_variables[argA] != argB)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 117:
					if(trg && level_variables[argA] == argB)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 118:
					level_variables[argA] = regions[int(argB)].x;
					level_variable_changed(argA);
					break;
				case 119:
					level_variables[argA] = regions[int(argB)].y;
					level_variable_changed(argA);
					break;
				case 120:
					regions[int(argA)].x = Number(level_variables[argB]);
					break;
				case 121:
					regions[int(argA)].y = Number(level_variables[argB]);
					break;
				case 122:
					level_variables[argA] = mens[int(argB)].hea;
					level_variable_changed(argA);
					break;
				case 123:
					if(String(level_variables[argA]) != String(argB))
					{
						tr++;
					}
					break;
				case 124:
					level_variables[argA] = Number(level_variables[argA]) % Number(argB);
					level_variable_changed(argA);
					break;
				case 125:
					level_variables[argA] = level_variables[argB];
					level_variable_changed(argA);
					break;
				case 126:
					power = Number(level_variables[argA]);
					argB = int(argB);
					PhysicsExplosion(regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2,Math.abs(power * 5),power * 0.6,Math.max(0,power * 10),-1,"level");
					if(power >= 0)
					{
						ExplosionSound(regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2);
					}
					break;
				case 127:
					level_variables[argA] = Number(level_variables[argA]) % Number(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 128:
					guns[int(argA)].stat_count = Number(level_variables[argB]);
					break;
				case 129:
					guns[int(argA)].stat_averange = Number(level_variables[argB]) / 180 * Math.PI;
					break;
				case 130:
					guns[int(argA)].stat_power = Number(level_variables[argB]);
					break;
				case 131:
					level_variables[argA] /= Number(argB);
					level_variable_changed(argA);
					break;
				case 132:
					level_variables[argA] /= Number(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 133:
					level_variables[argA] = Math.pow(Number(level_variables[argA]),Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 134:
					level_variables[argA] = Math.pow(Number(level_variables[argA]),Number(argB));
					level_variable_changed(argA);
					break;
				case 135:
					level_variables[argA] = Math.sin(Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 136:
					level_variables[argA] = Math.cos(Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 137:
					level_variables[argA] = MP_myid;
					level_variable_changed(argA);
					break;
				case 138:
					level_variables[argA] = MP_mode ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 139:
					level_variables[argA] = MP_spectator ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 140:
					level_variables[argA] = GET_LITE_PHYS() ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 141:
					argA = int(argA);
					mens[argA].hp_head -= Number(argB);
					Hurt(argA);
					break;
				case 142:
					argA = int(argA);
					mens[argA].hp_arms -= Number(argB);
					Hurt(argA);
					break;
				case 143:
					argA = int(argA);
					mens[argA].hp_body -= Number(argB);
					Hurt(argA);
					break;
				case 144:
					argA = int(argA);
					mens[argA].hp_legs -= Number(argB);
					Hurt(argA);
					break;
				case 145:
					argB = int(argB);
					c = 0;
					tr2 = 0;
					while(tr2 < playerstotal)
					{
						if(mens[tr2] && mens[tr2].io)
						{
							if(mens[tr2].hea > 0)
							{
								if(ax[mens[tr2].b_toe] > regions[argB].x)
								{
									if(ax[mens[tr2].b_toe] < regions[argB].x + regions[argB].w)
									{
										if(ay[mens[tr2].b_toe] > regions[argB].y)
										{
											if(ay[mens[tr2].b_toe] < regions[argB].y + regions[argB].h)
											{
												c++;
											}
										}
									}
								}
							}
						}
						++tr2;
					}
					level_variables[argA] = c;
					level_variable_changed(argA);
					break;
				case 146:
					level_variables[argA] = mens[TRIGGER_PLAYER_INITIATOR].login_name;
					level_variable_changed(argA);
					break;
				case 147:
					level_variables[argA] = mens[TRIGGER_PLAYER_INITIATOR].nick;
					level_variable_changed(argA);
					break;
				case 148:
					level_variables[argA] = MP_room_name;
					level_variable_changed(argA);
					break;
				case 149:
					key = argA;
					phrase = argB;
					if(level_variables[key].indexOf(phrase) != -1)
					{
						level_variables[key] = 1;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[key] = 0;
						level_variable_changed(argA);
					}
					break;
				case 150:
					key = argA;
					key2 = argB;
					if(level_variables[key].indexOf(level_variables[key2]) != -1)
					{
						level_variables[key] = 1;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[key] = 0;
						level_variable_changed(argA);
					}
					break;
				case 151:
					key = argA;
					key2 = argB;
					level_variables[key] = level_variables[key2].length;
					level_variable_changed(argA);
					break;
				case 152:
					key = argA;
					key2 = argB;
					level_variables[key] += String(level_variables[key2]);
					level_variable_changed(argA);
					break;
				case 153:
					level_variables[argA] = 1 - Number(level_variables[argA]);
					level_variable_changed(argA);
					break;
				case 154:
					level_variables[argA] = -Number(level_variables[argA]);
					level_variable_changed(argA);
					break;
				case 155:
					level_variables[argA] = GSPEED;
					level_variable_changed(argA);
					break;
				case 156:
					user_says_trigger = int(argA);
					break;
				case 157:
					level_variables[argA] = mens[user_says_id].login_name;
					level_variable_changed(argA);
					break;
				case 158:
					level_variables[argA] = mens[user_says_id].nick;
					level_variable_changed(argA);
					break;
				case 159:
					level_variables[argA] = user_says_id;
					level_variable_changed(argA);
					break;
				case 160:
					level_variables[argA] = user_says_text;
					level_variable_changed(argA);
					break;
				case 161:
					session_variables = {};
					session_variables_source_id = {};
					break;
				case 162:
					session_variables_source_id[argA] = CUR_CUSTOM_MAP;
					session_variables[argA] = level_variables[argB];
					break;
				case 163:
					level_variables[argB] = session_variables[argA];
					level_variable_changed(argA);
					break;
				case 164:
					mc = mens[int(argA)];
					mc.mdl_head = int(argB);
					SpawnPlayerImmediately(mc);
					break;
				case 165:
					mc = mens[int(argA)];
					mc.mdl_body = int(argB);
					SpawnPlayerImmediately(mc);
					break;
				case 166:
					mc = mens[int(argA)];
					argB = int(argB);
					mc.mdl_arm1_upper = argB;
					mc.mdl_arm1_lower = argB;
					mc.mdl_arm2_upper = argB;
					mc.mdl_arm2_lower = argB;
					SpawnPlayerImmediately(mc);
					break;
				case 167:
					mc = mens[int(argA)];
					argB = int(argB);
					mc.mdl_leg1_upper = argB;
					mc.mdl_leg1_middle = argB;
					mc.mdl_leg1_lower = argB;
					mc.mdl_leg2_upper = argB;
					mc.mdl_leg2_middle = argB;
					mc.mdl_leg2_lower = argB;
					mc.mdl_toe = argB;
					SpawnPlayerImmediately(mc);
					break;
				case 168:
					mc = mens[int(argA)];
					palette = argB + "";
					mc.palette[0] = palette.charAt(0);
					mc.palette[1] = palette.charAt(1);
					mc.palette[2] = palette.charAt(2);
					mc.palette[3] = palette.charAt(3);
					UpdatePlayerColorMP(mc,true);
					break;
				case 169:
					variable_to_save_name = argB;
					if(!MP_spectator)
					{
						loader = GetNewURLLoader();
						loader.addEventListener(Event.COMPLETE,function(param1:Event):void
						{
							level_variables[variable_to_save_name] = param1.target.data;
							level_variable_changed(variable_to_save_name);
						});
						loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR,function(param1:SecurityErrorEvent):void
						{
							level_variables[variable_to_save_name] = "error 1";
							level_variable_changed(variable_to_save_name);
						});
						loader.addEventListener(HTTPStatusEvent.HTTP_STATUS,function(param1:HTTPStatusEvent):void
						{
							level_variables[variable_to_save_name] = "error 2";
							level_variable_changed(variable_to_save_name);

						});
						with({})
						{
							
						}
						loader.addEventListener(IOErrorEvent.IO_ERROR,function(param1:IOErrorEvent):void
						{
							level_variables[variable_to_save_name] = "error 3";
							level_variable_changed(variable_to_save_name);

						});
						level_variables[variable_to_save_name] = "loading...";
						request = new URLRequest("https://www.plazmaburst2.com/pb2/custom_map_url_request.php");
						variables = new URLVariables();
						variables.request_url = level_variables[argA];
						variables.map_id = MP_map_name;
						variables.login = def_login;
						variables.password = def_password;
						if(MP_mode && GUEST_ACCESS)
						{
							variables.as_guest = "1";
						}
						else
						{
							variables.as_guest = "";
						}
						request.data = variables;
						request.method = URLRequestMethod.POST;
						try
						{
							loader.load(request);
						}
						catch(error:Error)
						{
							level_variables[variable_to_save_name] = "error 4";
							level_variable_changed(variable_to_save_name);

						}
					}
					else
					{
						level_variables[variable_to_save_name] = "error 5";
						level_variable_changed(variable_to_save_name);

					}
					break;
				case 170:
					guns[int(argA)].speed_multiplier = Number(argB);
					break;
				case 171:
					guns[int(argA)].speed_multiplier = Number(level_variables[argB]);
					break;
				case 172:
					guns[int(argA)].recoil_multiplier = Number(argB);
					break;
				case 173:
					guns[int(argA)].recoil_multiplier = Number(level_variables[argB]);
					break;
				case 174:
					SetAIDifficulty(int(argA));
					break;
				case 175:
					guns[int(argA)].stat_bullets = int(argB);
					break;
				case 176:
					guns[int(argA)].stat_bullets = int(level_variables[argB]);
					break;
				case 177:
					level_variables[argA] = MP_mode ? MP_type : 0;
					level_variable_changed(argA);
					break;
				case 178:
					var inv:String;
					argB = int(argB);
					inv = "";
					for (tr2 = 0; tr2 < gunstotal; tr2++)
					{
						var gun:MovieClip = guns[tr2];
						if (gun.picken_by != argB || !gun.io || gun.forcars) continue;
						if(inv != "") inv += ";";
						inv += gun.model + "^" + gun.upg + "^" + gun.command;
					}
					level_variables[argA] = inv;
					level_variable_changed(argA);
					break;
				case 179:
					var anonf3:Function = function():*
					{
						var str:* = level_variables[argA];
						var player_id:* = int(argB);
						if(str != "")
						{
							var _loc3_:* = str.split(";");
							var x:* = mens[player_id].x;
							var y:* = mens[player_id].y;
							for (var i:int=0; i<_loc3_.length; i++)
							{
								var _loc7_:* = undefined;
								var wepclass:* = (_loc7_ = _loc3_[i].split("^"))[0];
								var level:* = int(_loc7_[1]);
								var team:* = int(_loc7_[2]);
								mc3 = MakeGunByClass(wepclass,{
									"x":x,
									"y":y,
									"upg":level,
									"command":team
								});
							}
						}
					};
					anonf3();
					break;
				case 180:
					level_variables[argA] = TRIGGER_PLAYER_INITIATOR;
					level_variable_changed(argA);
					break;
				case 181:
					level_variables[argA] = TRIGGER_PLAYER_KILLER;
					level_variable_changed(argA);
					break;
				case 182:
					level_variables[argA] = TRIGGER_PLAYER_KILLER >= 0 ? mens[TRIGGER_PLAYER_KILLER].login_name : ".nobody";
					level_variable_changed(argA);
					break;
				case 183:
					level_variables[argA] = TRIGGER_PLAYER_KILLER >= 0 ? mens[TRIGGER_PLAYER_KILLER].nick : "Empty";
					level_variable_changed(argA);
					break;
				case 184:
					level_variables[argA] = mens[int(argB)].login_name;
					level_variable_changed(argA);
					break;
				case 185:
					level_variables[argA] = mens[int(argB)].nick;
					level_variable_changed(argA);
					break;
				case 186:
					level_variables[argA] = mens[int(argB)].team;
					level_variable_changed(argA);
					break;
				case 187:
					level_variables[argA] = mens[level_variables[argB]].login_name;
					level_variable_changed(argA);
					break;
				case 188:
					level_variables[argA] = mens[level_variables[argB]].nick;
					level_variable_changed(argA);
					break;
				case 189:
					level_variables[argA] = mens[level_variables[argB]].team;
					level_variable_changed(argA);
					break;
				case 190:
					SHOW_FRAG_MESSAGES = true;
					break;
				case 191:
					SHOW_FRAG_MESSAGES = false;
					break;
				case 192:
					sky.gotoAndStop(int(argA));
					break;
				case 193:
					if(argA.length == 7)
					{
						hex_int = int(parseInt(argA.substr(1),16));
						r = (hex_int & 16711680) >> 16;
						g = (hex_int & 65280) >> 8;
						b = hex_int & 255;
						sky.transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
					}
					break;
				case 194:
					multiplayer_repsawn_timer_speed = Number(argA);
					break;
				case 195:
					r = Number(level_variables[argA]);
					if(sky.transform.colorTransform == null)
					{
						sky.transform.colorTransform = new ColorTransform(1,1,1);
					}
					sky.transform.colorTransform = new ColorTransform(r,sky.transform.colorTransform.greenMultiplier,sky.transform.colorTransform.blueMultiplier);
					break;
				case 196:
					r = Number(level_variables[argA]);
					if(sky.transform.colorTransform == null)
					{
						sky.transform.colorTransform = new ColorTransform(1,1,1);
					}
					sky.transform.colorTransform = new ColorTransform(sky.transform.colorTransform.redMultiplier,r,sky.transform.colorTransform.blueMultiplier);
					break;
				case 197:
					r = Number(level_variables[argA]);
					if(sky.transform.colorTransform == null)
					{
						sky.transform.colorTransform = new ColorTransform(1,1,1);
					}
					sky.transform.colorTransform = new ColorTransform(sky.transform.colorTransform.redMultiplier,sky.transform.colorTransform.greenMultiplier,r);
					break;
				case 198:
					level_variables[argA] = {
						"pitch":1,
						"volume":1,
						"voice":"English",
						"rate":1
					};
					try
					{
						if(ExternalInterface.available)
						{
							ExternalInterface.call("TTS_Prepare()");
						}
					}
					catch(e:Error)
					{
					}
					break;
				case 199:
					level_variables[argA].volume = Math.max(Math.min(Number(argB),1.5),0);
					level_variable_changed(argA);
					break;
				case 200:
					level_variables[argA].pitch = Math.max(Math.min(Number(argB),1.5),0);
					level_variable_changed(argA);
					break;
				case 201:
					level_variables[argA].voice = argB;
					level_variable_changed(argA);
					break;
				case 202:
					try
					{
						if(ExternalInterface.available)
						{
							ExternalInterface.call("TTS_Speak( \"" + argB.split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + level_variables[argA].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + level_variables[argA].pitch + ", " + Number(level_variables[argA].volume) * FX_VOLUME + ", " + level_variables[argA].rate + " )");
						}
					}
					catch(e:Error)
					{
					}
					break;
				case 203:
					try
					{
						if(ExternalInterface.available)
						{
							ExternalInterface.call("TTS_Speak( \"" + level_variables[argB].split("\\").join("\\\\").split("\"").join("\\\"") + "\", \"" + level_variables[argA].voice.split("\\").join("\\\\").split("\"").join("\\\"") + "\", " + level_variables[argA].pitch + ", " + Number(level_variables[argA].volume) * FX_VOLUME + ", " + level_variables[argA].rate + " )");
						}
					}
					catch(e:Error)
					{
					}
					break;
				case 204:
					level_variables[argA] = Math.asin(Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 205:
					level_variables[argA] = Math.acos(Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 206:
					level_variables[argA] = Math.atan2(Number(level_variables[argA]),Number(level_variables[argB]));
					level_variable_changed(argA);
					break;
				case 207:
					ANONYMOUS_MODE = true;
					break;
				case 208:
					ANONYMOUS_MODE = false;
					break;
				case 209:
					GLOBAL_REGEN_SPEED = Number(argA);
					break;
				case 210:
					GLOBAL_REGEN_SPEED = Number(level_variables[argA]);
					break;
				case 211:
					GLOBAL_REGEN_DELAY = Number(argA);
					break;
				case 212:
					GLOBAL_REGEN_DELAY = Number(level_variables[argA]);
					break;
				case 213:
					GLOBAL_FALL_DAMAGE_MULT = Number(argA);
					break;
				case 214:
					GLOBAL_FALL_SENSITIVITY_MULT = Number(argA);
					break;
				case 215:
					BOOST_MULT = Number(argA);
					break;
				case 216:
					BOOST_HIGH_PHYSICS = Number(argA);
					break;
				case 217:
					BOOST_LOW_PHYSICS = Number(argA);
					break;
				case 218:
					guns[int(argA)].knockback_multiplier = Number(argB);
					break;
				case 219:
					guns[int(argA)].knockback_multiplier = Number(level_variables[argB]);
					break;
				case 220:
					SetPlayerScale(mens[int(argA)],Number(argB));
					break;
				case 221:
					mult = Number(level_variables[argB]);
					SetPlayerScale(mens[int(argA)],mult);
					break;
				case 222:
					if(int(argA) == MP_myid)
					{
						game_scale = Number(argB) / 100;
						if(isNaN(game_scale))
						{
							game_scale = 1;
						}
						if(game_scale < 0.01)
						{
							game_scale = 0.01;
						}
						if(game_scale > 15)
						{
							game_scale = 15;
						}
					}
					break;
				case 223:
					if((argA + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable name is too long");
					}
					if((level_variables[argA] + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable value is too long");
					}
					if(!ALLOW_VAR_SYNC)
					{
						throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
					}
					MP_custom_events += ";sync|r#" + String(argA).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(level_variables[argA]).split("#").join("?").split(";").join("?").split("|").join("?");
					break;
				case 224:
					if((argA + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable name is too long");
					}
					if((level_variables[argA] + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable value is too long");
					}
					if(!ALLOW_VAR_SYNC)
					{
						throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
					}
					MP_custom_events += ";sync|d#" + String(argA).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(level_variables[argA]).split("#").join("?").split(";").join("?").split("|").join("?");
					break;
				case 225:
					if((argA + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable name is too long");
					}
					if((level_variables[argA] + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable value is too long");
					}
					if(!ALLOW_VAR_SYNC)
					{
						throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
					}
					MP_custom_events += ";sync|x#" + String(argA).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(level_variables[argA]).split("#").join("?").split(";").join("?").split("|").join("?");
					break;
				case 226:
					if((argA + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable name is too long");
					}
					if((level_variables[argA] + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable value is too long");
					}
					if(!ALLOW_VAR_SYNC)
					{
						throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
					}
					MP_custom_events += ";sync|n#" + String(argA).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(level_variables[argA]).split("#").join("?").split(";").join("?").split("|").join("?");
					break;
				case 227:
					if((argA + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable name is too long");
					}
					if((level_variables[argA] + "").length > 2048)
					{
						throw new Error("Buffer overflow during var sync: Variable value is too long");
					}
					if(!ALLOW_VAR_SYNC)
					{
						throw new Error("Variable value synchronizing trigger actions require Var Sync engine mark");
					}
					MP_custom_events += ";sync|l#" + String(argA).split("#").join("?").split(";").join("?").split("|").join("?") + "#" + String(level_variables[argA]).split("#").join("?").split(";").join("?").split("|").join("?");
					break;
				case 228:
					on_user_connected_trigger = int(argA);
					break;
				case 229:
					CustomSongPlay(int(argA));
					break;
				case 230:
					str = "," + argB.toLowerCase() + ",";
					if(trg && str.indexOf("," + session_variables_source_id[argA] + ",") == -1)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 231:
					mcc = decors[int(argA)];
					mcc.txt.text = ReplaceWithVariables(argB);
					break;
				case 232:
					if(argB.length == 7)
					{
						hex_int = int(parseInt(argB.substr(1),16));
						r = (hex_int & 16711680) >> 16;
						g = (hex_int & 65280) >> 8;
						b = hex_int & 255;
						decors[int(argA)].transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
					}
					break;
				case 233:
					mcc = decors[int(argA)];
					mcc.scaleX = mcc.scaleY = Number(argB);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 234:
					mcc = decors[int(argA)];
					mcc.scaleX = mcc.scaleY = level_variables[argB];
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 235:
					level_variables[argA] = TRIGGER_PROJECTILE_POWER;
					level_variable_changed(argA);
					break;
				case 236:
					level_variables[argA] -= TRIGGER_PROJECTILE_POWER;
					level_variable_changed(argA);
					break;
				case 237:
					guns[int(argA)].stat_averange_max = Number(argB);
					break;
				case 238:
					guns[int(argA)].stat_averange_add = Number(argB);
					break;
				case 239:
					guns[int(argA)].stat_averange_substract = Number(argB);
					break;
				case 240:
					rocket_speed_mult = Number(argA);
					break;
				case 241:
					grenade_speed_mult = Number(argA);
					break;
				case 242:
					plasma_speed_mult = Number(argA);
					break;
				case 243:
					TakeScreenShot(1,1,regions[Number(argA)]);
					break;
				case 244:
					level_variables[argA].rate = Math.max(Math.min(argB,3),0.1);
					break;
				case 245:
					lock_camera_region = regions[Number(argA)];
					lock_camera_intensity = Number(argB);
					break;
				case 246:
					lock_camera_region = null;
					lock_camera_intensity = 0;
					break;
				case 247:
					argB = int(argB);
					level_variables[argA] = mens[argB].act_movex;
					level_variable_changed(argA);
					break;
				case 248:
					argB = int(argB);
					level_variables[argA] = mens[argB].act_movey;
					level_variable_changed(argA);
					break;
				case 249:
					argB = int(argB);
					level_variables[argA] = !!mens[argB].act_fire ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 250:
					KINETIC_MODULE_ENABLED = true;
					break;
				case 251:
					KINETIC_MODULE_ENABLED = false;
					break;
				case 252:
					mcc = decors[int(argA)];
					mcc.rotation = level_variables[argB];
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 253:
					mcc = decors[int(argA)];
					mcc.rotation = Number(argB);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 254:
					mcc = mens[TRIGGER_PLAYER_INITIATOR];
					if(mcc.io && mcc.hea > 0 && mcc.hea < mcc.hmax)
					{
						heal_hp = Number(argA);
						mcc.hea = Math.min(mcc.hea + heal_hp,mcc.hmax);
						if(heal_hp > 0)
						{
							if(mcc.hea >= dying_after)
							{
								mcc.dying = false;
							}
						}
					}
					else if (trg)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 255:
					mcc = mens[int(argA)];
					if(mcc.io && mcc.hea > 0 && mcc.hea < mcc.hmax)
					{
						heal_hp = Number(argB);
						mcc.hea = Math.min(mcc.hea + heal_hp,mcc.hmax);
						if(heal_hp > 0)
						{
							if(mcc.hea >= dying_after)
							{
								mcc.dying = false;
							}
						}
					}
					break;
				case 256:
					mcc = mens[int(argA)];
					if(mcc.io && mcc.hea > 0 && mcc.hea < mcc.hmax)
					{
						heal_hp = Number(level_variables[argB]);
						mcc.hea = Math.min(mcc.hea + heal_hp,mcc.hmax);
						if(heal_hp > 0)
						{
							if(mcc.hea >= dying_after)
							{
								mcc.dying = false;
							}
						}
					}
					break;
				case 257:
					mcc = decors[int(argA)];
					mcc.rotation = Number(level_variables[argB]) / Math.PI * 180;
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 258:
					mcc = decors[int(argA)];
					mcc.rotation = Number(argB) / Math.PI * 180;
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 259:
					argA = int(argA);
					argB = int(argB);
					tr2 = argB;
					regions[argA].x = Number(mens[tr2].tarx) - Number(regions[argA].w) / 2;
					regions[argA].y = Number(mens[tr2].tary) - Number(regions[argA].h) / 2;
					break;
				case 260:
					if(argB == "null")
					{
						guns[int(argA)].sou = null;
					}
					else
					{
						SoundClass = getDefinitionByName(argB) as Class;
						newSound = new SoundClass();
						guns[int(argA)].sou = newSound;
					}
					break;
				case 261:
					ALLOW_TIMESHIFT = true;
					nrg.visible = true;
					break;
				case 262:
					ALLOW_TIMESHIFT = false;
					nrg.visible = false;
					break;
				case 263:
					level_variables[argA] = energy;
					break;
				case 264:
					energy = Number(level_variables[argA]);
					break;
				case 265:
					energy_max = Number(level_variables[argA]);
					break;
				case 266:
					level_variables[argA] = GetAIDifficulty();
					break;
				case 267:
					mcc = decors[int(argA)];
					mcc.scaleX = Number(argB);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 268:
					mcc = decors[int(argA)];
					mcc.scaleY = Number(argB);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 269:
					argA = int(argA);
					argB = int(argB);
					mc = mens[argA];
					mc.char = argB;
					mc.alpha = 1;
					SpawnPlayerImmediately(mc);
					UpdateCharProps(mc);
					break;
				case 270:
					argA = int(argA);
					argB = Number(argB);
					mc = mens[argA];
					mc.antigravity = argB;
					break;
				case 271:
					argA = int(argA);
					argB = Number(argB);
					mc = mens[argA];
					mc.antigravity_radius = argB;
					break;
				case 272:
					mc = mens[int(argA)];
					mc.voice = voices[argB];
					break;
				case 273:
					mens[int(argA)].isGhost = true;
					break;
				case 274:
					mc = mens[int(argA)];
					mc.isGhost = false;
					mc.alpha = 1;
					break;
				case 275:
					if(trg && images_finished_loading < images_expected)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 276:
					if(trg && images_ready_to_render < images_expected)
					{
						tr = int(trg.actions.length);
					}
					break;
				case 277:
					level_variables[argA] = images_ready_to_render;
					level_variable_changed(argA);
					break;
				case 278:
					level_variables[argA] = images_expected;
					level_variable_changed(argA);
					break;
				case 280:
					ok2 = false;
					ok = false;
					if(mens[MP_myid].hunt != -1)
					{
						ok2 = true;
					}
					i = 0;
					while(i < playerstotal && !ok)
					{
						if(mens[i] && mens[i].io)
						{
							if(!mens[i].dead)
							{
								if(!mens[i].dying)
								{
									if(mens[i].team != mens[MP_myid].team)
									{
										if(mens[i].hunt == MP_myid)
										{
											ok = true;
										}
										if(!ok2)
										{
											if(Dist2D(mens[i].x,mens[i].y,mens[MP_myid].x,mens[MP_myid].y) < 400)
											{
												ok2 = true;
											}
										}
									}
								}
							}
						}
						++i;
					}
					if(ok || ok2)
					{
						level_variables[argA] = ok ? 1 : 0.5;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[argA] = 0;
						level_variable_changed(argA);
					}
					break;
				case 281:
					mens[TRIGGER_PLAYER_INITIATOR].effects.push({
						"type":"DOT",
						"power":Number(argA),
						"duration":Number(argB)
					});
					break;
				case 282:
					mens[TRIGGER_PLAYER_INITIATOR].effects.length = 0;
					break;
				case 283:
					argB = int(argB);
					effcolor = int(argA);
					FlowAt(regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2,0,0,0,2);
					break;
				case 284:
					argB = int(argB);
					newSound = s_t_switch_denied;
					try
					{
						SoundClass = getDefinitionByName(argA) as Class;
						newSound = new SoundClass();
					}
					catch(error:Error)
					{
					}
					PlaySound(newSound,regions[argB].x + Number(regions[argB].w) / 2,regions[argB].y + Number(regions[argB].h) / 2);
					break;
				case 285:
					ExpLevelDone();
					break;
				case 286:
					if(TRIGGER_PLAYER_INITIATOR == MP_myid)
					{
						ExpLevelDone();
					}
					break;
				case 287:
					MakeGunByClass(argB,guns[int(argA)],true);
					break;
				case 288:
					trigger_to_key_binds_down[Keyboard[argB]] = int(argA);
					break;
				case 289:
					trigger_to_key_binds_up[Keyboard[argB]] = int(argA);
					break;
				case 290:
					argA = Math.floor(argA);
					mc = mens[argA];
					palette = level_variables[argB] + "";
					mc.palette[0] = palette.charAt(0);
					mc.palette[1] = palette.charAt(1);
					mc.palette[2] = palette.charAt(2);
					mc.palette[3] = palette.charAt(3);
					UpdatePlayerColorMP(mc,true);
					break;
				case 291:
					FREEZE_OFFSCREEN_ENTITIES = false;
					break;
				case 292:
					FREEZE_OFFSCREEN_ENTITIES = true;
					break;
				case 293:
					mcc = decors[int(argA)];
					mcc.mask = decors[int(argB)];
					break;
				case 294:
					level_variables[argA] = level_variables[level_variables[argB]];
					level_variable_changed(argA);
					break;
				case 295:
					level_variables[argA] = ReplaceWithVariables(argB);
					level_variable_changed(argA);
					break;
				case 296:
					MakeGunByClass(level_variables[argB],guns[int(argA)],true);
					break;
				case 297:
					mens[int(argA)].jump_scale = Number(argB);
					break;
				case 298:
					mcc = decors[int(argA)];
					mcc.alpha = Number(argB);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 299:
					mcc = decors[int(argA)];
					mcc.alpha = Number(level_variables[argB]);
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 300:
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = guns[argB].x;
					mcc.y = guns[argB].y;
					mcc.rotation = guns[argB].rotation;
					if(guns[argB].scaleX > 0)
					{
						mcc.scaleX = Math.abs(mcc.scaleX);
					}
					else
					{
						mcc.scaleX = -Math.abs(mcc.scaleX);
					}
					if(guns[argB].scaleY > 0)
					{
						mcc.scaleY = Math.abs(mcc.scaleY);
					}
					else
					{
						mcc.scaleY = -Math.abs(mcc.scaleY);
					}
					if(mcc.onMove)
					{
						mcc.onMove();
					}
					break;
				case 301:
					guns[int(argA)].projectile_scale = Number(argB);
					break;
				case 302:
					guns[int(argA)].projectile_scale = Number(level_variables[argB]);
					break;
				case 303:
					guns[int(argA)].xpos1 = Number(argB);
					break;
				case 304:
					guns[int(argA)].xpos2 = Number(argB);
					break;
				case 305:
					guns[int(argA)].attachment = int(argB);
					break;
				case 306:
					guns[int(argA)].len2 = Number(argB);
					ReConnect(guns[int(argA)].ch_ch1,guns[int(argA)].b_p1,guns[int(argA)].b_p2,0,Math_abs(Number(guns[int(argA)].len1) - Number(guns[int(argA)].len2)),-1);
					break;
				case 307:
					darkness.visible = true;
					darkness.alpha = 1;
					LEVEL_END_FORCE = "restart";
					break;
				case 308:
					darkness.visible = false;
					darkness.alpha = 0;
					LEVEL_END_FORCE = "";
					break;
				case 309:
					darkness.visible = true;
					darkness.alpha = 1;
					LEVEL_END_FORCE = "exit";
					break;
				case 310:
					if(TRIGGER_PLAYER_INITIATOR == MP_myid)
					{
						darkness.visible = true;
						darkness.alpha = 1;
						LEVEL_END_FORCE = "exit";
					}
					break;
				case 311:
					if(TRIGGER_PLAYER_KILLER == MP_myid)
					{
						darkness.visible = true;
						darkness.alpha = 1;
						LEVEL_END_FORCE = "exit";
					}
					break;
				case 312:
					argA = int(argA);
					mens[argA].curwea = int(argB);
					RedrawPsi(argA);
					break;
				case 313:
					if(mens[int(argA)].curwea != -1)
					{
						guns[mens[int(argA)].curwea].picken_by = -1;
						mens[int(argA)].curwea = -1;
					}
					break;
				case 314:
					level_variables[argA] = !!mens[int(argB)].dying ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 315:
					if(TRIGGER_PLAYER_INITIATOR == -1)
					{
						level_variables[argA] = 0;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[argA] = !!mens[TRIGGER_PLAYER_INITIATOR].dying ? 1 : 0;
						level_variable_changed(argA);
					}
					break;
				case 316:
					if(TRIGGER_PLAYER_KILLER == -1)
					{
						level_variables[argA] = 0;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[argA] = !!mens[TRIGGER_PLAYER_KILLER].dying ? 1 : 0;
						level_variable_changed(argA);
					}
					break;
				case 317:
					mens[TRIGGER_PLAYER_INITIATOR].team = int(argB);
					UpdateCharProps(mens[TRIGGER_PLAYER_INITIATOR]);
					SpawnPlayerImmediately(mens[TRIGGER_PLAYER_INITIATOR]);
					i4 = 0;
					while(i4 < playerstotal)
					{
						if(mens[i4] && mens[i4].io)
						{
							UpdateTeamColor(mens[i4]);
						}
						++i4;
					}
					break;
				case 318:
					mens[int(argA)].can_be_hit = false;
					break;
				case 319:
					mens[int(argA)].can_be_hit = true;
					break;
				case 320:
					var anonf4:Function = function():void
					{
						var current_id:int = MP_myid;
						var player_id:int = int(argA);
						if(mens[player_id] && mens[player_id].io)
						{
							MP_myid = player_id;
							if(int(argB) == 1)
							{
								GSPEED = 0.01;
								new_active.visible = true;
								new_active.gotoAndPlay(1);
								PlaySound_full(s_team_switch);
							}
							mens[player_id].isplayer = true;
							mens[current_id].isplayer = false;
							UpdateWeps();
						}
					};
					anonf4();
					break;
				case 321:
					mens[int(argA)].can_drop_guns = false;
					break;
				case 322:
					mens[int(argA)].can_drop_guns = true;
					break;
				case 323:
					argA = int(argA);
					argB = int(argB);
					regions[argA].x = Number(guns[argB].x) - Number(regions[argA].w) / 2;
					regions[argA].y = Number(guns[argB].y) - Number(regions[argA].h) / 2;
					break;
				case 324:
					guns[int(argA)].onreload = int(argB);
					break;
				case 325:
					level_variables[argA] = ReplaceWithVariables(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 326:
					level_variables[argA] = ReplaceWithVariables(argB);
					level_variable_changed(argA);
					break;
				case 327:
					level_variables[argA] = Math.random() * Number(level_variables[argB]);
					level_variable_changed(argA);
					break;
				case 328:
					level_variables[argA] = Math.floor(Math.random() * (Number(level_variables[argB]) - 1));
					level_variable_changed(argA);
					break;
				case 329:
					argA = Number(level_variables[argA]);
					argB = Number(level_variables[argB]);
					hp_box.alpha = argA;
					tinted_hp_prog.alpha = argA;
					vehhp.alpha = argA;
					weps.alpha = argA;
					nrg.alpha = argA;
					pcg.alpha = argA;
					qmenu.alpha = argA;
					team_blue.alpha = argA;
					team_red.alpha = argA;
					if(!gamemenu.visible)
					{
						myCursor.alpha = argB;
					}
					break;
				case 330:
					argA = Number(argA);
					hp_box.alpha = argA;
					tinted_hp_prog.alpha = argA;
					vehhp.alpha = argA;
					weps.alpha = argA;
					nrg.alpha = argA;
					pcg.alpha = argA;
					qmenu.alpha = argA;
					team_blue.alpha = argA;
					team_red.alpha = argA;
					if(!gamemenu.visible)
					{
						myCursor.alpha = Number(argB);
					}
					break;
				case 331:
					level_variables[argA] = GAMEPLAY_MODIFICATIONS;
					level_variable_changed(argA);
					break;
				case 332:
					argB = int(argB);
					if(guns[argB].picken_by == -1 || !mens[guns[argB].picken_by] || mens[guns[argB].picken_by].curwea != guns[argB].idd)
					{
						level_variables[argA] = 0;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[argA] = 1;
						level_variable_changed(argA);
					}
					break;
				case 333:
					if(guns[int(argB)].picken_by == -1)
					{
						level_variables[argA] = 0;
						level_variable_changed(argA);
					}
					else
					{
						level_variables[argA] = 1;
						level_variable_changed(argA);
					}
					break;
				case 334:
					argB = guns[int(argB)];
					level_variables[argA] = !!argB.ready ? argB.totalFrames : Math.max(0,Number(argB.floatframe) - 2);
					level_variable_changed(argA);
					break;
				case 335:
					level_variables[argA] = !!guns[int(argB)].ready ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 336:
					level_variables[argA] = guns[int(argB)].scaleY > 0 ? 1 : -1;
					level_variable_changed(argA);
					break;
				case 337:
					level_variables[argA] = mens[int(argB)].toe.scaleX > 0 ? 1 : -1;
					level_variable_changed(argA);
					break;
				case 338:
					MP_let_alive_players_hear_dead = false;
					break;
				case 339:
					MP_let_alive_players_hear_dead = true;
					break;
				case 340:
					MP_allow_leaderboard_details = false;	
					break;
				case 341:
					MP_allow_leaderboard_details = true;
					break;
				case 342: // Set value of variable in variable A to value of variable B
					level_variables[level_variables[argA]] = level_variables[argB];
					break;
				case 343: // Attach decoration 'A' to the center of every current player's camera      
						/* Param B
						0: center
						1: top-left corner
						2: top-right corner
						3: bottom-right corner
						4: bottom-left corner
						*/
						var windowSizeX:Number = screenX / game_scale;
						var windowSizeY:Number = screenY / game_scale;
						
						var parA = int(argA);
						switch(int(argB)){
							case 0:
								decors[parA].x = -(game.x - windowSizeX/2);
								decors[parA].y = -(game.y - windowSizeY/2);
								break;
							case 1:
								decors[parA].x = -game.x;
								decors[parA].y = -game.y;
								break;
							case 2:
								decors[parA].x = -(game.x - windowSizeX);
								decors[parA].y = -game.y;
								break;
							case 3:
								decors[parA].x = -(game.x - windowSizeX);
								decors[parA].y = -(game.y - windowSizeY);
								break;
							case 4:
								decors[parA].x = -game.x;
								decors[parA].y = -(game.y - windowSizeY);
								break;
							default:
								break;
						}
						break;
					case 344: // Set variable 'A' to rotation of decor 'B'
						level_variables[ argA ] = decors[int( argB )].rotation;
						break;
					case 345: // Move decoration 'A' to region 'B' (short)
						decors[int( argA )].x = regions[int( argB )].x;
					    decors[int( argA )].y = regions[int( argB )].y;
						break;
					case 346: // Enable or Disable Nametag visibility of Character 'A' using parameter 'B'
						mens[ int(argA) ].gui.txt1.visible = argB == "true";
						break;
					case 347: // Change Character skin of slot-value variable 'A' to value of variable 'B'
						mc = mens[int(level_variables[argA])];
						mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
						mc.char = int(level_variables[argB]);
						mc.mdl_head = mc.char;
						mc.mdl_leg1_upper = mc.char;
						mc.mdl_leg1_middle = mc.char;
						mc.mdl_leg1_lower = mc.char;
						mc.mdl_leg2_upper = mc.char;
						mc.mdl_leg2_middle = mc.char;
						mc.mdl_leg2_lower = mc.char;
						mc.mdl_arm1_upper = mc.char;
						mc.mdl_arm1_lower = mc.char;
						mc.mdl_arm2_upper = mc.char;
						mc.mdl_arm2_lower = mc.char;
						mc.mdl_toe = mc.char;
						mc.mdl_body = mc.char;
						mc.alpha = 1;
						UpdateCharProps(mc);
						SpawnPlayerImmediately(mc);
						break;
					case 348: // Set variable 'A' to time (in milliseconds) since START of game
						level_variables[argA] = getTimer();
						break;
                    case 349: // Split variable 'A' by string-value 'B'
						level_variables[argA] = level_variables[argA].split(argB);
						break;  
					case 350: // Get index 'B' of variable 'A' and store into variable 'A'
						level_variables[argA] = level_variables[argA][int(ReplaceWithVariables(argB))];
						break;
					case 351: // Move Character of slot-value variable 'A' to region 'B'
						if(mens[int(level_variables[argA])].io) {
							mcc = mens[int(level_variables[argA])];
							if(mcc.hea > 0) {
								u = regions[int(argB)].x + Number(regions[int(argB)].w) / 2 - mcc.x;
								v = regions[int(argB)].y + Number(regions[int(argB)].h) / 2 - mcc.y;
								mcc.x = regions[int(argB)].x + Number(regions[int(argB)].w) / 2;
								mcc.y = regions[int(argB)].y + Number(regions[int(argB)].h) / 2;
								if(int(level_variables[argA])== MP_myid) {
								game.x += u;
									game.y += v;
								}
								for (i4 = 0; i4 < atotal; i4++) {
									if(aof[i4] != int(level_variables[argA])) continue;
									ax[i4] += u;
									ay[i4] += v;
								lax[i4] += u;
								lay[i4] += v;
								}
							}
						}
						break;
					case 352: //Add element 'B' to array 'A'
						level_variables[ argA ].push(ReplaceWithVariables( argB ));
						break;
					case 353: // Move Region 'A' to lower body of player 'B'
						regions[argA].x = Number(ax[mens[argB].b_toe]) - Number(regions[argA].w) / 2;
						regions[argA].y = Number(ay[mens[argB].b_toe]) - Number(regions[argA].h) / 2;
						break;
					case 354: // Create array at variable 'A'
						level_variables[ argA ] = new Array();
						break;
					case 355: // Change Gun 'A' cursor/crosshair to value 'B'
						mc = guns[int( argA )];
						mc.stat_cursor = int(ReplaceWithVariables( argB ));
						break;
					case 356: // Change head model of Character slot-value variable 'A' to value of variable 'B'
						mc = mens[int(level_variables[argA])];
						mc.mdl_head = int(level_variables[argB]);
						SpawnPlayerImmediately(mc);
						break;
					case 357: // Change body model of Character slot-value variable 'A' to value of variable 'B'
						mc = mens[int(level_variables[argA])];
						mc.mdl_body = int(level_variables[argB]);
						SpawnPlayerImmediately(mc);
						break;
					case 358: // Change arms model of Character slot-value variable 'A' to value of variable 'B'
						mc = mens[int(level_variables[argA])];
						mc.mdl_arm1_upper = int(level_variables[argB]);
						mc.mdl_arm1_lower = int(level_variables[argB]);
						mc.mdl_arm2_upper = int(level_variables[argB]);
						mc.mdl_arm2_lower = int(level_variables[argB]);
						SpawnPlayerImmediately(mc);
						break;
					case 359: // Set Character slot-value variable 'A' color pattern to value of variable 'B' (4 small letters for each body sections, each represents first symbol of color in lowercase. - disables color change for specific section)
						mc = mens[int(level_variables[argA])];
						palette = level_variables[argB] + "";
						mc.palette[0] = palette.charAt(0);
						mc.palette[1] = palette.charAt(1);
						mc.palette[2] = palette.charAt(2);
						mc.palette[3] = palette.charAt(3);
						UpdatePlayerColorMP(mc,true);
						break;
					case 360: // Change legs model of Character slot-value variable 'A' to value of variable 'B'
						mc = mens[int(level_variables[argA])];
						mc.mdl_leg1_upper = int(level_variables[argB]);
						mc.mdl_leg1_middle = int(level_variables[argB]);
						mc.mdl_leg1_lower = int(level_variables[argB]);
						mc.mdl_leg2_upper = int(level_variables[argB]);
						mc.mdl_leg2_middle = int(level_variables[argB]);
						mc.mdl_leg2_lower = int(level_variables[argB]);
						mc.mdl_toe = int(level_variables[argB]);
						SpawnPlayerImmediately(mc);
						break;
					case 361: // Skip next trigger action if value of variable 'A' is equal to the value of variable 'B'
						if(String(level_variables[argA]) == String(level_variables[argB]))
						tr++;
						break;
					/* case 362: // Switch execution to trigger ID in variable A
                        a = int(level_variables[argA]);
                        tr = -1;
						break;
                    case 363: // Switch execution to trigger A
                        a = int(argA);
                        tr = -1;
						break; */
					case 364: // Skip next trigger action if value of variable 'A' is greater than value of variable 'B'
						if(Number(level_variables[argA]) > Number(level_variables[argB]))
						tr++;
						break;
					case 365: // Skip next trigger action if value of variable 'A' is less than value of variable 'B'
						if(Number(level_variables[argA]) < Number(level_variables[argB]))
						tr++;
						break;
					case 366: // Change Speed of Movable 'A' to variable 'B'
						doors[int(argA)].maxspeed = Number(level_variables[argB]);
						break;
					case 367: // Set the frequency of calls of Timer 'A' to variable 'B'
						timers[int(argA)].ddelay = int(level_variables[argB]);
						break;
					case 368: // Set Character 'A' zoom to variable 'B'
						if(int(argA) == MP_myid)
						game_scale = int(level_variables[argB]) / 100;
						break;
					case 369: // Set variable 'A' to zoom of game camera
						level_variables[argA] = game_scale * 100;
						break;
					case 370: // Set Character slot-value variable 'A' zoom to variable 'B'
						if(int(level_variables[argA]) == MP_myid)
						game_scale = int(level_variables[argB]) / 100;
						break;
					 case 371: // Move Character 'A' to random place in region 'B'
						ok = true;
						tries = 0;
						while(ok)
						{
							tries += 1;
							if(tries > 10000)
							{
								break;
							}
							ok = true;
							u = regions[int(argB)].x + Math.random() * Number(regions[int(argB)].w);
							v = g_miny + (g_maxy - g_miny) * Math.random();
							if(TracePointNoRagdolls(u,v))
							{
								if(!TracePointNoRagdolls(u,v + 100))
								{
									ok = false;
								}
							}
							i2 = 0;
							while(i2 < waterstotal)
							{
								if(u > Number(wax[i2]) - 100)
								{
									if(u < wax[i2] + waw[i2] + 100)
									{
										if(v > Number(way[i2]) - 100)
										{
											if(v < way[i2] + wah[i2] + 100)
											{
												ok = true;
											}
										}
									}
								}
								++i2;
							}
							if(mens[MP_myid].team != mens[int(argA)].team)
							{
								if(Dist2D(u,v,mens[MP_myid].x,mens[MP_myid].y) < 400)
								{
									if(i3 < 10)
									{
										ok = true;
										++i3;
									}
								}
							}
						}
						mens[int(argA)].x = u;
						mens[int(argA)].y = v;
						break;
					case 372: // Remove beginning 'A' characters from variable 'B' (-/+)
						if(int(argA) > 0) {
							level_variables[argB] = level_variables[argB].slice(int(argA));
						} else {
							level_variables[argB] = level_variables[argB].slice(0, level_variables[argB].length - (-int(argA)));
						}
						break;	
					case 373: // Set variable 'A' to degrees between 2 regions in 'B' (seperated by commas)
						level_variables[argA] = (Math.atan2(regions[DecodeUID(argB.split(", ")[0])].y - regions[DecodeUID(argB.split(", ")[1])].y, regions[DecodeUID(argB.split(", ")[0])].x - regions[DecodeUID(argB.split(", ")[1])].x) / Math.PI) * 180 + 180;
						break;
					case 374: // Set Character 'A' stability to value 'B'
						mens[argA].stability = argB;
						break;
					case 375: // Set Character 'A' stability to value of variable 'B'
						mens[argA].stability = level_variables[argB];
						break;
					case 376: // Set variable 'A' to stability of Character 'B'
						level_variables[argA] = mens[argB].stability;
						break;
					case 377: // Set gun 'A' upgrade level to string-value/variable 'B'
						guns[int( argA )].upg = int(ReplaceWithVariables( argB ));
						break;
					case 378: // Change Gun 'A' color to 'B'
						argB = ReplaceWithVariables(argB);
						if(argB.length == 7) {
							hex = Number(argB.replace("#","0x"));
							red = (hex & 16711680) >> 16;
							green = (hex & 65280) >> 8;
							blue = hex & 255;
							clrs_mov = new ColorMatrixFilter();
							matrix = new Array();
							matrix = matrix.concat([1,0,0,0,red]);
							matrix = matrix.concat([0,1,0,0,green]);
							matrix = matrix.concat([0,0,1,0,blue]);
							matrix = matrix.concat([0,0,0,1,0]);
							clrs_mov.matrix = matrix;
							guns[int(argA)].filters = new Array(clrs_mov);
						}
						break;
					case 379: // Change Light 'A' color to 'B'
						argA = int(argA);
						argB = ReplaceWithVariables(argB);
						if(argB.length == 7) {
							hex_int = int(parseInt(argB.substr(1),16));
							r = (hex_int & 16711680) >> 16;
							g = (hex_int & 65280) >> 8;
							b = hex_int & 255;
							flare[argA].transform.colorTransform = new ColorTransform(r / 255 * 2,g / 255 * 2,b / 255 * 2);
						}
                    	break;
					case 380: // Set list of slots that can be randomly given to player during respawn using variable 'A'
						dm_slots_on_spawn = level_variables[argA].split(" ").join("").split(",");
                    	break;
					case 381: // Set max amount of weapons that can be given to player during respawn using variable 'A'
						dm_max_guns_on_spawn = int(level_variables[argA]);        
						break;
					case 382: // Draw line on current graphic from top-left of region 'A' to top-left of region 'B'
						current_draw.graphics.moveTo(regions[argA].x, regions[argA].y);
						current_draw.graphics.lineTo(regions[argB].x, regions[argB].y);
						break;
					case 383: // Create graphic with name 'A' at layer 'B' (1 is lowest, 3 is highest)
						if(!(ReplaceWithVariables(argA) in action_draw)) {
							action_draw[ReplaceWithVariables(argA)] = new Sprite();
							if(int(argB) <= 1) {
								graphics_3d.addChild(action_draw[ReplaceWithVariables(argA)]);
							} else if(int(argB) == 2) {
								game.addChild(action_draw[ReplaceWithVariables(argA)]);
							} else {
								graphics_3d_front.addChild(action_draw[ReplaceWithVariables(argA)]);
							}
						}
						break;
					case 384: // Select graphic to draw on with name 'A'
						current_draw = action_draw[ReplaceWithVariables(argA)];
						break;
					case 385: // Begin fill of graphic with name 'A' using hex-colour 'B'
						action_draw[ReplaceWithVariables(argA)].graphics.beginFill(uint("0x" + argB.substr(1)));
						break;
					case 386: // End fill of graphic with name 'A'
						action_draw[ReplaceWithVariables(argA)].graphics.endFill();
						break;
					case 387: // Draw circle on current graphic at top-left of region 'A' with radius 'B'
						current_draw.graphics.drawCircle(regions[argA].x, regions[argA].y, Number(argB));
						break;
					case 388: // Clear graphic with name 'A'
						action_draw[ReplaceWithVariables(argA)].graphics.clear();
						break;
					case 389: // Set line style of current graphic to thickness 'A' and hex-colour 'B'
						current_draw.graphics.lineStyle(Number(argA), uint("0x" + argB.substr(1)));
						break;
					case 390: // Set starting position of graphic with name 'A' to region 'B'
						action_draw[ReplaceWithVariables(argA)].graphics.moveTo(regions[argB].x, regions[argB].y);
						break;
					case 391: // Draw line from current position of graphic with name 'A' to top-left region 'B'
						action_draw[ReplaceWithVariables(argA)].graphics.lineTo(regions[argB].x, regions[argB].y);
						break;
					case 392: // Move Water 'A' to Region 'B'
						argA = int(argA);
						argB = int(argB);
						wax[argA] = regions[argB].x;
						way[argA] = regions[argB].y;
						waters[argA].x = regions[argB].x;
						waters[argA].y = regions[argB].y;
						break;
					case 393: // Set variable 'A' to value of time in miliseconds (since January 1 1970)
						level_variables[argA] = new Date().getTime();
						break;
					case 394: // Set variable 'A' to value of time between January 1 1970 and variable 'B' (year, month, day) in miliseconds
						level_variables[argA] = new Date(level_variables[argB].split(" ").join("").split(",")[0], level_variables[argB].split(" ").join("").split(",")[1], level_variables[argB].split(" ").join("").split(",")[2]).getTime();
						break;
					case 395: // Set water 'A' damage to string-value/variable 'B'
						wadamage[int( argA )] = int(ReplaceWithVariables( argB ));
						break;
					case 396: // Move region 'A' to game camera
						regions[argA].x = -game.x;
						regions[argA].y = -game.y;
						break;
					case 397:  // Set variable 'A' to value of 1 if mouse is held down and to 0 if else case
						level_variables[argA] = is_firing ? "1" : "0";
						break;
					case 398: // Set variable 'A' to distance between 2 regions in 'B' (separated by commas)
						argB = argB;
						if (argB is String) {
							argB = argB.replace(" ", "").split(",");
							argB = [regions[DecodeUID(argB[0])], regions[DecodeUID(argB[1])]];
							argB = argB;
						}
						level_variables[argA] = 
						Math.sqrt(Math.pow(argB[0].x - argB[1].x, 2) + Math.pow(argB[0].y - argB[1].y, 2));
						break;
					case 399: // Split variable 'A' by value of variable 'B'
						level_variables[argA] = level_variables[argA].split(level_variables[argB]);
						break;
					case 400: // Add ghost effect to Character slot-value variable 'A'
						mens[int(level_variables[argA])].isGhost = true;
						break;
					case 401: // Remove ghost effect from Character slot-value variable 'A'
						mc = mens[int(level_variables[argA])];
						mc.isGhost = false;
						mc.alpha = 1;
						break;
					case 402: // Move Character slot-value variable 'A' to start position
						mens[int(level_variables[argA])].x = mens[int(level_variables[argA])].startx;
						mens[int(level_variables[argA])].y = mens[int(level_variables[argA])].starty;
						break;
					case 403: // Color Gun 'A' but use Array 'B' as matrix
			                    /* clrs_mov = new ColorMatrixFilter([ // Array test
			                        0, 1, 0, 0, 0,
			                        0, 0, 1, 0, 0,
			                        1, 0, 0, 0, 0,
			                        0, 0, 0, 1, 0
			                    ]); */
						clrs_mov = new ColorMatrixFilter(level_variables[argB]); // Comment this out if you want to test the one above
						guns[int(argA)].filters = new Array(clrs_mov);  
						break;
					case 404: // Set Character slot-value variable 'A' properties to properties of Character slot-value variable 'B' (hitpoints, max hitpoints, mobility, voice, model)
						mc3 = mens[int(level_variables[argA])];
						mc2 = mens[int(level_variables[argB])];
						mc3.hea = mc3.hmax = mc2.hmax;
						if(mc3.hea > 0)
						{
							mc3.dead = false;
							mc3.dying = false;
							ChangedGun(int(level_variables[argA]));
							if(Boolean(mc3.isplayer) || mc3.team == mens[MP_myid].team)
							{
								mc3.gui.alpha = 1;
								mc3.gui.visible = true;
								mc3.hunt = -1;
							}
							mc3.deadtim = 0;
							mc3.hp_head = Math.max(Number(mc3) * 0.4,30);
							mc3.hp_body = Math.max(Number(mc3) * 0.6,30);
							mc3.hp_legs = Math.max(Number(mc3) * 0.5,30);
							mc3.hp_arms = Math.max(Number(mc3.hea) * 0.4,30);
							Hurt_nopain(int(level_variables[argA]));
						}
						SetPlayerScale(mc3 as player,mc2.scale);
						mc3.mobility = mc2.mobility;
						mc3.antigravity = mc2.antigravity;
						mc3.antigravity_radius = mc2.antigravity_radius;
						mc3.can_be_hit = mc2.can_be_hit;
						mc3.can_drop_guns = mc2.can_drop_guns;
						mc3.voice = mc2.voice;
						mc3.isGhost = mc2.isGhost;
						mc3.gui.txt1.text = mc2.gui.txt1.text;
						mc3.nick = mc2.nick;
						mc3.team = new Number(mc2.team);
						if(mc3.team != mens[MP_myid].team)
						{
							mc3.gui.visible = false;
						}
						UpdateTeamColor(mc3);
						mc3.palette = mc2.palette;
						mc3.armored = new Number(mc2.armored);
						mc3.char = new Number(mc2.char);
						mc3.mdl_leg1_upper = new Number(mc2.mdl_leg1_upper);
						mc3.mdl_leg1_middle = new Number(mc2.mdl_leg1_middle);
						mc3.mdl_leg1_lower = new Number(mc2.mdl_leg1_lower);
						mc3.mdl_leg2_upper = new Number(mc2.mdl_leg2_upper);
						mc3.mdl_leg2_middle = new Number(mc2.mdl_leg2_middle);
						mc3.mdl_leg2_lower = new Number(mc2.mdl_leg2_lower);
						mc3.mdl_arm1_upper = new Number(mc2.mdl_arm1_upper);
						mc3.mdl_arm1_lower = new Number(mc2.mdl_arm1_lower);
						mc3.mdl_arm2_upper = new Number(mc2.mdl_arm2_upper);
						mc3.mdl_arm2_lower = new Number(mc2.mdl_arm2_lower);
						mc3.mdl_toe = new Number(mc2.mdl_toe);
						mc3.mdl_body = new Number(mc2.mdl_body);
						mc3.mdl_head = new Number(mc2.mdl_head);
						mc3.mdl_psi1 = new Number(mc2.mdl_psi1);
						mc3.mdl_psi2 = new Number(mc2.mdl_psi2);
						if(mc2.arm1.lower.psi != null)
						{
							mc3.arm1.lower.psi.visible = mc2.arm1.lower.psi.visible;
						}
						if(mc2.arm2.lower.psi != null)
						{
							mc3.arm2.lower.psi.visible = mc2.arm2.lower.psi.visible;
						}
						mc3.blood_red = mc2.blood_red;
						mc3.blood_green = mc2.blood_green;
						mc3.blood_blue = mc2.blood_blue;
						UpdateCharProps(mc3 as player);
						SpawnPlayerImmediately(mc3 as player);
						break;
					case 405: // Join variable 'A' by value of variable 'B'
						level_variables[argA] = level_variables[argA].join(level_variables[argB]);
						break; 
					case 406: // Continue execution of this trigger only if tracing from center of Region 'A' to center of Region 'B' doesn't intersect a character
					case 407: // Continue execution of this trigger only if tracing from center of Region 'A' to center of Region 'B' intersects a character
						var r1 = regions[int(argA)];
						var r2 = regions[int(argB)];
						res = TraceLinePlayer(TRIGGER_PLAYER_INITIATOR, r1.x + Number(r1.w) / 2, r1.y + Number(r1.h) / 2,
						r2.x + Number(r2.w) / 2, r2.y + Number(r2.h) / 2);
						if(res == (action_id == 407)) 
							tr = int(trg.actions.length);
						break;
				// ==============================
				// || START OF CUSTOM TRIGGERS ||
				// ==============================
				case 500: // Set Variable 'A' to game version
					level_variables[argA] = GAME_VERSION;
					level_variable_changed(argA);
					break;
				case 501: // Set disable PSI swords of Character 'A' to value 'B' (true or false)
					argA = int(argA);
					mens[argA].no_psi = argB == "true";
					ChangedGun(argA);
					break;
				case 502: // Write speech text 'B' above character 'A'
					mcc = mens[int(argA)];
					str = ReplaceWithVariables(argB);
					Effect(ax[mcc.b_head_start],Number(ay[mcc.b_head_start]) - 25,20,0,0);
					break;
				case 503: // Change Player 'A' knockback factor to value 'B' (0 to 1)
					mens[int(argA)].knockback_factor = Number(argB);
					break;
				case 504: // Change Player 'A' stability to value 'B' (0 to 1)
					mens[int(argA)].stability = Number(argB);
					break;
				case 505: // Set disabling of lag control locking to parameter 'A'
					lock_lag_controls = argA == "true";
					break;
				case 506: // Rename Gun 'A' to 'B'
					guns[int(argA)].custom_name = ReplaceWithVariables(argB);
					break;
				case 507: // Enable or Disable Nametag visibility of Character 'A' using parameter 'B'
					mens[int(argA)].gui.txt1.visible = argB == "true";
					break;
				case 508:
					waters[int(argA)].title = argB;
					break;
				case 509:
					var cct:ColorTransform = new ColorTransform();
					cct.color = uint("0x" + argB.substr(1));
					waters[int(argA)].transform.colorTransform = cct;
					waterList[int(argA)].setColor("#" + argB.substr(1));
					break;
				case 510:
					mcc = decors[int(argA)];
					mcc.rotation += Number(ReplaceWithVariables(argB));
					if(mcc.onMove) mcc.onMove();
					break;
				case 511:
					level_variables[argA] = decors[int(argB)].rotation;
					break;
				case 512:
					mens[int(argA)].regen_speed = Number(ReplaceWithVariables(argB));
					break;
				case 513:
					mens[int(argA)].regen_delay = Number(ReplaceWithVariables(argB));
					break;
				case 514:
					decors[int(argA)].x = regions[int(argB)].x;
					decors[int(argA)].y = regions[int(argB)].y;
					break;
				case 515:
					bgs[int(argA)].x = 100 + regions[int(argB)].x;
					bgs[int(argA)].y = 120 + regions[int(argB)].y;
					break;
				/* case 516:
				case 517:
					if (trg) {
						var r1 = regions[int(argA)];
						var r2 = regions[int(argB)];
						res = TraceLinePlayer(TRIGGER_PLAYER_INITIATOR, r1.x + Number(r1.w) / 2, r1.y + Number(r1.h) / 2,
											 							r2.x + Number(r2.w) / 2, r2.y + Number(r2.h) / 2);
						if(res == (action_id == 517)) 
							tr = int(trg.actions.length);
					}
					break; */
				case 518: // Scale Healthbar (not the entire thing) of Character 'A' by 'B' // Unfinished for now
					mens[int(argA)].gui.h.scaleX = Number(ReplaceWithVariables(argB));
					break;
				case 519: // Move water area 'A' to region 'B'
					argA = int(argA);
					argB = int(argB);
					wax[argA] = regions[argB].x;
					way[argA] = regions[argB].y;
					waters[argA].x = regions[argB].x;
					waters[argA].y = regions[argB].y;
					break;
				case 520: 
					mens[int(argA)].collideWithOthers = argB == "true";
					break;
				case 521:
					mens[int(argA)].collideWithTeam.push(int(argB));
					break;
				case 522:
					mens[int(argA)].collideWithTeam.splice(mens[int(argA)].collideWithTeam.indexOf(int(argB)), 1);
					break;
				case 523:
					mens[int(argA)].collideWithPlayer.push(int(argB));
					mens[int(argB)].collideWithPlayer.push(int(argA));
					break;
				case 524:
					mens[int(argA)].collideWithPlayer.splice(mens[int(argA)].collideWithPlayer.indexOf(int(argB)), 1);
					mens[int(argB)].collideWithPlayer.splice(mens[int(argB)].collideWithPlayer.indexOf(int(argA)), 1);
					break;
				case 525:
					mens[int(argA)].act_fall = argB == "true";
					break;
				case 526:
					pushtox[int(argA)] = int(ReplaceWithVariables(argB));
					break;
				case 527:
					pushtoy[int(argA)] = int(ReplaceWithVariables(argB));
					break;
				case 528:
					pushtox[int(argA)] += int(ReplaceWithVariables(argB));
					break;
				case 529:
					pushtoy[int(argA)] += int(ReplaceWithVariables(argB));
					break;
				case 530:
				case 531:
				case 532:
				case 533:
					argA = int(argA)
					argB = Number(ReplaceWithVariables(argB));
					mc = mens[argA];
					if(mc && mc.io) {
						if      (action_id == 530) { mc.tox = argB; }
						else if (action_id == 531) { mc.toy = argB; }
						else if (action_id == 532) { mc.tox += argB; }
						else                       { mc.toy += argB; }
						for (i4 = 0; i4 < atotal; i4++) {
							if (aof[i4] == argA) {
								if      (action_id == 530) { atox[i4] = argB; }
								else if (action_id == 531) { atoy[i4] = argB; }
								else if (action_id == 532) { atox[i4] += argB; }
								else                       { atoy[i4] += argB; }
							}
						}
					}
					break;
				case 534:
					on_variable_change[argA] = int(argB);
					break;
				case 535:
				case 536:
					mens[int(argA)].hero = argB == "true";
					break;
				case 537:
					level_variables[argA] = getTimer();
					level_variable_changed(argA);
					break;
				case 538:
					level_variables[argA] = mens[int(argB)].tox;
					level_variable_changed(argA);
					break;
				case 539:
					level_variables[argA] = mens[int(argB)].toy;
					level_variable_changed(argA);
					break;
				case 540:
					level_variables[argA] = level_variables[argA].split(argB);
					level_variable_changed(argA);
					break;
				case 541:
					level_variables[argA] = level_variables[argA][int(argB)];
					level_variable_changed(argA);
					break;
				case 542:
					level_variables[argA] = GSPEED2;
					level_variable_changed(argA);
					break;
				case 543:
					GSPEED = Number(ReplaceWithVariables(argA));
					break;
				case 544:
					GSPEED2 = Number(ReplaceWithVariables(argA));
					break;
				case 545:
					mens[int(argA)].onhit = int(argB);
					break;
				case 546:
					level_variables[argA] = new Array();
					level_variable_changed(argA);
					break;
				case 547:
					level_variables[argA].push(ReplaceWithVariables(argB));
					level_variable_changed(argA);
					break;
				case 548:
					MP_custom_events += ";srand|" + argA + "#" + argB;
					break;
				case 549: // Change Vehicle 'A' nickname to 'B' (or var lol)
					mcc = vehicles[int(argA)];
					mcc.nick = ReplaceWithVariables(argB);
					mcc.gui.txt1.text = ReplaceWithVariables(argB);
					break;
				case 550: // Change Character 'A' invisibility/alpha value to 'B' (or var lol), maybe this trigger action won't last long
					mc = mens[int(argA)];
					if (!mc.isGhost) // Check if the player isn't a ghost, could be changed later
						mc.alpha = Number(ReplaceWithVariables(argB));
					break;
				/*case 551: // End round with reason 'A' to team 'B'
					if ( MP_type == 2 && MP_team == int(argB) )
					break;*/
				case 552: // Set gun 'A' visibility to 'B' (0..1)
					guns[int(argA)].new_alpha = Math.max(0, Math.min(1, Number(ReplaceWithVariables(argB))));
					break;
				case 553: // Set gun 'A' scale to 'B' (probably unfinished because it doesn't update the hitbox)
					gun = guns[int(argA)];
					gun.scaleX = Number(ReplaceWithVariables(argB));
					gun.scaleY = Number(ReplaceWithVariables(argB));
					break;
				case 554: // Destroy all barrels in region 'A' (too lazy to clean the nests)
					argA = int(argA);
					argB = int(argB);
					for (tr2 = 0; tr2 < barrelstotal; tr2++)
					{
						if(barrels[tr2].hea > 0)
						{
							if(barrels[tr2].x > regions[argA].x)
							{
								if(barrels[tr2].x < regions[argA].x + regions[argA].w)
								{
									if(barrels[tr2].y > regions[argA].y)
									{
										if(barrels[tr2].y < regions[argA].y + regions[argA].h)
										{
											barrels[tr2].hea = 0;
											HurtBarrel(tr2);
										}
									}
								}
							}
						}
					}
					break;
				case 555:
					argA = int(ReplaceWithVariables(argA));
					argB = int(argB);
					if(mens[argA] && mens[argA].io) {
						mcc = mens[argA];
						if(mcc.hea > 0) {
							u = regions[argB].x + Number(regions[argB].w) / 2 - mcc.x;
							v = regions[argB].y + Number(regions[argB].h) / 2 - mcc.y;
							mcc.x = regions[argB].x + Number(regions[argB].w) / 2;
							mcc.y = regions[argB].y + Number(regions[argB].h) / 2;
							if(argA == MP_myid) {
								game.x += u;
								game.y += v;
							}
							for (i4 = 0; i4 < atotal; i4++) {
								if(aof[i4] != argA) continue;
								ax[i4] += u;
								ay[i4] += v;
								lax[i4] += u;
								lay[i4] += v;
							}
						}
					}
					break;
				case 556:
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = barrels[argB].x + Number(regions[argB].w) / 2;
					mcc.y = barrels[argB].y + Number(regions[argB].h) / 2;
					mcc.rotation = barrels[argB].rotation;
					if(mcc.onMove) mcc.onMove();
					break;
				case 557:
					barrels[argA].hea = int(argB);
					HurtBarrel(argA);
					break;
				case 558:
					if(barrels[argA].mdl == "bar_orange")
					{
						mc = game.addChildAt(new bar_orange(),game.numChildren) as MovieClip;
					}
					if(barrels[argA].mdl == "bar_blue")
					{
						mc = game.addChildAt(new bar_blue(),game.numChildren) as MovieClip;
					}
					if(barrels[argA].mdl == "bar_red")
					{
						mc = game.addChildAt(new bar_red(),game.numChildren) as MovieClip;
					}
					NoMouse(mc);
					mc.mdl = barrels[argA].mdl;
					mc.x = regions[argB].x + Number(regions[argB].w) / 2;
					mc.y = regions[argB].y + Number(regions[argB].h) / 2;
					mc.tox = 0;
					mc.toy = 0;
					mc.master = -1;
					create_barrel(mc);
					break;
				case 559: // Toggle character 'A' into dying state
					mc = mens[int(argA)];
					mc.dying = argB == "true"; //Boolean(argB);
					break;
				case 560:
					barrels[argA].on_explode = int(argB);
					break;
				case 561:
					barrels[argA].on_crack = int(argB);
					break;
				case 562:
					if(level_variables[argA] > level_variables[argB]) tr++;
					break;
				case 563:
					if(level_variables[argA] < level_variables[argB]) tr++;
					break;
				case 564:
					if(level_variables[argA] == level_variables[argB]) tr++;
					break;
				case 565: // Change vehicle 'A' alpha to value/variable 'B'
					mcc = vehicles[int(argA)];
					mcc.alpha = Number(ReplaceWithVariables(argB));
					break;
				case 566:
					gravity = Number(ReplaceWithVariables(argA));
					break;
				case 567: // Move, rotate and flip Decoration 'A' to the position of vehicle 'B'
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = vehicles[argB].x;
					mcc.y = vehicles[argB].y;
					mcc.scaleX = vehicles[argB].carbody.scaleY;
					mcc.rotation = vehicles[argB].carbody.rotation + (90 * (mcc.scaleX - 1));
					if (mcc.onMove) mcc.onMove();
					break;
				case 568: // Move, rotate and flip Decoration 'A' to the position of Character head 'B'
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = mens[argB].head.x + mens[argB].x;
					mcc.y = mens[argB].head.y + mens[argB].y;
					mcc.scaleX = mens[argB].head.scaleX;
					mcc.rotation = mens[argB].head.rotation;
					if (mcc.onMove) mcc.onMove();
					break;
				case 569:
					if(vehicles[argA].typ == 0)
					{
						mc = game.addChildAt(new veh_jeep(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 1)
					{
						mc = game.addChildAt(new veh_walker(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 2)
					{
						mc = game.addChildAt(new veh_capsule(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 3)
					{
						mc = game.addChildAt(new veh_crate(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 4)
					{
						mc = game.addChildAt(new veh_drone(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 5)
					{
						mc = game.addChildAt(new veh_rope(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 6)
					{
						mc = game.addChildAt(new veh_hh(),game.numChildren) as MovieClip;
					}
					if(vehicles[argA].typ == 7)
					{
						mc = game.addChildAt(new veh_corvette(),game.numChildren) as MovieClip;
					}
					NoMouse(mc);
					mc.x = regions[argB].x + Number(regions[argB].w) / 2;
					mc.y = regions[argB].y + Number(regions[argB].h) / 2;
					mc.tox = 0;
					mc.toy = 0;
					create_vehicle(mc,vehicles[argA].typ,vehicles[argA].side);
					break;
				case 570:
					vehicles[argA].vehicle_unlocked = argB == "false";
					break;
				case 572:
					if(level_variables[argA] > Number(argB)) tr++;
					break;
				case 573:
					if(level_variables[argA] < Number(argB)) tr++;
					break;
				case 574:
					if(level_variables[argA] == Number(argB)) tr++;
					break;
				case 575:
					if(level_variables[argA] != level_variables[argB]) tr++;
					break;
				case 576:
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = guns[argB].x;
					mcc.y = guns[argB].y;
					mcc.rotation = guns[argB].rotation;
					if(mcc.onMove) {
						mcc.onMove();
					}
					break;
				case 577: // Destroy Vehicle 'A'
					mcc = vehicles[int(argA)];
					mcc.hea = 0;
					break;
				case 578: // Move, rotate, and flip decoration 'A' to character body 'B'
					mcc = decors[int(argA)];
					argB = int(argB);
					mcc.x = mens[argB].body.x + mens[argB].x;
					mcc.y = mens[argB].body.y + mens[argB].y;
					mcc.scaleX = mens[argB].body.scaleX;
					mcc.rotation = mens[argB].body.rotation;
					if (mcc.onMove) mcc.onMove();
					break;
				case 579:
					action_draw.graphics.drawCircle(regions[argA].x, regions[argA].y, Number(argB));
					break;
				case 580:
					action_draw.graphics.clear();
					break;
				case 581:
					action_draw.graphics.lineStyle(Number(argA), uint("0x" + argB.substr(1)));
					break;
				case 582:
					action_draw.graphics.moveTo(regions[argA].x, regions[argA].y);
					break;
				case 583:
					action_draw.graphics.lineTo(regions[argA].x, regions[argA].y);
					break;
				case 585:
					MP_custom_events += ";change_pw|" + encode_packet(ReplaceWithVariables(argA));
					break;
				case 586:
					level_variables[argA] = MP_pass;
					level_variable_changed(argA);
					break;
				case 587:
					MP_custom_events += ";m_ow|" + argA;
					break;
				case 588: // Change Character 'A' skin to variable value of 'B'
					argA = int(argA);
					argB = int(ReplaceWithVariables(argB));
					mc = mens[argA];
					mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
					mc.char = argB;
					mc.mdl_head = mc.char;
					mc.mdl_leg1_upper = mc.char;
					mc.mdl_leg1_middle = mc.char;
					mc.mdl_leg1_lower = mc.char;
					mc.mdl_leg2_upper = mc.char;
					mc.mdl_leg2_middle = mc.char;
					mc.mdl_leg2_lower = mc.char;
					mc.mdl_arm1_upper = mc.char;
					mc.mdl_arm1_lower = mc.char;
					mc.mdl_arm2_upper = mc.char;
					mc.mdl_arm2_lower = mc.char;
					mc.mdl_toe = mc.char;
					mc.mdl_body = mc.char;
					mc.alpha = 1;
					UpdateCharProps(mc);
					SpawnPlayerImmediately(mc);
					break;
				// Change Character 'A's body parts to variable value of 'B'
				case 589: // head
					mc = mens[int(argA)];
					mc.mdl_head = int(ReplaceWithVariables(argB));
					SpawnPlayerImmediately(mc);
					break;
				case 590: // body
					mc = mens[int(argA)];
					mc.mdl_body = int(ReplaceWithVariables(argB));
					SpawnPlayerImmediately(mc);
					break;
				case 591: // legs
					mc = mens[int(argA)];
					argB = int(ReplaceWithVariables(argB));
					mc.mdl_leg1_upper = argB;
					mc.mdl_leg1_middle = argB;
					mc.mdl_leg1_lower = argB;
					mc.mdl_leg2_upper = argB;
					mc.mdl_leg2_middle = argB;
					mc.mdl_leg2_lower = argB;
					mc.mdl_toe = argB;
					SpawnPlayerImmediately(mc);
					break;
				case 592: // arms
					mc = mens[int(argA)];
					argB = int(ReplaceWithVariables(argB));
					mc.mdl_arm1_upper = argB;
					mc.mdl_arm1_lower = argB;
					mc.mdl_arm2_upper = argB;
					mc.mdl_arm2_lower = argB;
					SpawnPlayerImmediately(mc);
					break;
				case 593: // Set Character 'A' nickname color to hex color 'B'
					mc = mens[int(argA)];
					mc.nick_color = uint("0x" + argB.substr(1));
					mc.gui.txt1.textColor = mc.nick_color;
					mc.textcolorchanged = true;
					break;
				
				case 595:
					argA = int(ReplaceWithVariables(argA));
					argB = int(argB);
					mc = mens[argA];
					mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
					mc.char = argB;
					mc.mdl_head = mc.char;
					mc.mdl_leg1_upper = mc.char;
					mc.mdl_leg1_middle = mc.char;
					mc.mdl_leg1_lower = mc.char;
					mc.mdl_leg2_upper = mc.char;
					mc.mdl_leg2_middle = mc.char;
					mc.mdl_leg2_lower = mc.char;
					mc.mdl_arm1_upper = mc.char;
					mc.mdl_arm1_lower = mc.char;
					mc.mdl_arm2_upper = mc.char;
					mc.mdl_arm2_lower = mc.char;
					mc.mdl_toe = mc.char;
					mc.mdl_body = mc.char;
					mc.alpha = 1;
					UpdateCharProps(mc);
					SpawnPlayerImmediately(mc);
					break;
				case 596:
					mc = mens[int(ReplaceWithVariables(argA))];
					palette = argB + "";
					mc.palette[0] = palette.charAt(0);
					mc.palette[1] = palette.charAt(1);
					mc.palette[2] = palette.charAt(2);
					mc.palette[3] = palette.charAt(3);
					UpdatePlayerColorMP(mc,true);
					break;
				case 597: // "Set variable 'A' to 1 if current difficulty is 'Very Easy', 0 in else case"
					level_variables[argA] = HELL_MODE ? 1 : 0;
					level_variable_changed(argA);
					break;
				case 598: // Call trigger 'A' when player leaves
					on_user_disconnected_trigger = int(argA);
					break;
				case 599: // Set variable 'A' to slot of player who last left
					level_variables[argA] = last_user_left;
					level_variable_changed(argA);
					break;
				case 600: // Set Character 'A' current hit point to variable 'B'
					mc = mens[int(argA)];
					mc.hea = Number(ReplaceWithVariables(argB));
					break;
				case 601: // Set Character 'A' current max hit point to variable 'B'
					mc = mens[int(argA)];
					mc.hmax = Number(ReplaceWithVariables(argB));
					break;
				case 602: // Set slot-value of Character 'A' current hit point to variable 'B'
					mc = mens[int(ReplaceWithVariables(argA))];
					mc.hea = Number(ReplaceWithVariables(argB));
					break;
				case 603: // Set slot-value of Character 'A' current max hit point to variable 'B'
					mc = mens[int(ReplaceWithVariables(argA))];
					mc.hmax = Number(ReplaceWithVariables(argB));
					break;
				case 604: // Change Background 'A' visibility to 'B'
					bgs[int(argA)].visible = argB == "true";
					break;
				case 607: // Set value of Variable 'A' to skin ID of Character 'B'
					level_variables[argA] = mens[int(argB)].char;
					level_variable_changed(argA);
					break;
				case 608: // Set value of Variable 'A' to skin ID of slot-value of Character 'B'
					level_variables[argA] = mens[int(ReplaceWithVariables(argB))].char;
					level_variable_changed(argA);
					break;
				/*case 609: // Set variable 'A' to 1 if a player exists in slot-variable 'B', 0 in else case // Currently not implementing this yet - Molis
					break;*/
				case 610: // Teleport guns in Region 'A' in Region 'B'
					var regionA:PB2Region = regions[int(argA)];
					var regionB:PB2Region = regions[int(argB)];
					tr2 = 0;
					while(tr2 < gunstotal)
					{
						if(guns[tr2] && guns[tr2].io)
						{
							if(guns[tr2].x > regionA.x || guns[tr2].x < regionA.x + regionA.w || guns[tr2].y > regionA.y || guns[tr2].y < regionA.y + regionA.h)
							{
								mcc = guns[tr2];
								if(mcc.picken_by != -1 && mens[mcc.picken_by])
								{
									if(mens[mcc.picken_by].curwea == tr2)
									mens[mcc.picken_by].curwea = -1;
									mcc.picken_by = -1;
								}
								mcc.x = regionB.x + Number(regionB.w) / 2;
								mcc.y = regionB.y + Number(regionB.h) / 2;
								// don't use this code lol
								//if(regionA.w == regionB.w)
								//if(regionA.h == regionB.h)
								//{
									//mcc.x = Number(regionA.x) - Number(regionB.x);
									//mcc.y = Number(regionA.y) - Number(regionB.y);
								//}
								atox[mcc.b_p1] = 0;
								atoy[mcc.b_p1] = 0;
								WakeUpAtom(mcc.b_p1);
								ax[mcc.b_p1] = mcc.x - 10;
								ay[mcc.b_p1] = mcc.y;
								lax[mcc.b_p1] = ax[mcc.b_p1];
								lay[mcc.b_p1] = ay[mcc.b_p1];
								atox[mcc.b_p2] = 0;
								atoy[mcc.b_p2] = 0;
								WakeUpAtom(mcc.b_p2);
								ax[mcc.b_p2] = mcc.x - 10;
								ay[mcc.b_p2] = mcc.y;
								lax[mcc.b_p2] = ax[mcc.b_p2];
								lay[mcc.b_p2] = ay[mcc.b_p2];
							}
						}
						++tr2;
					}
					break;
				case 611: // Change Gun 'A' projectile type to Defibrillator
					mc = guns[int(argA)];
					mc.stat_bullets = 4;
					mc.stat_class = 7;
					break;
				case 612: // Change gun 'A' cursor to type 'B'
					mc = guns[int(argA)];
					mc.stat_cursor = int(ReplaceWithVariables(argB));
					break;
				case 613: // Scale entire Vehicle 'A' to value 'B'
					argA = int(argA);
					argB = Number(argB);
					mc = vehicles[argA];
					mc.scaleX = argB;
					mc.scaleY = argB;
					break;
				// 614-617, <#1131286062161993788>, "On Synchronize" and "Get Synchronizer slot"
				case 614: // Call trigger 'A' when variable 'B' gets changed by Var Synchronize
					varSyncListeners[argB] = int(argA);
					break;
				case 615: // Set variable 'A' to slot of synchronizer
					level_variables[argA] = varSynchronizer;
					break;
				case 616: // Disapprove var sync
					varSyncApproved = false;
					break;
				case 617: // Call trigger 'A' BEFORE variable 'B' gets synchronized. (Useful if you wanna disapprove)
					varSyncHooks[argB] = int(argA);
					break;
				/* case 618: // Teleport all bullets from Region 'A' to Region 'B'
					// FIXME: the bullets don't teleport + weird things happen
					argA = int(argA);
					argB = int(argB);
					for(var i = 0; i < puls.length; i++) {
						if ( puls[i] !== null )
						if ( puls[i].x > regions[argA].x )
						if ( puls[i].x < regions[argA].x + regions[argA].w )
						if ( puls[i].y > regions[argA].y )
						if ( puls[i].y < regions[argA].y + regions[argA].h ) {
							mcc = puls[i];
							u = ( regions[argB].x + Number(regions[argB].w) / 2 );
							v = ( regions[argB].y + Number(regions[argB].h) / 2 );
							
							if ( regions[argA].w == regions[argB].w )
							if ( regions[argA].h == regions[argB].h ) {
								u = Number(regions[argA].x) - Number(regions[argB].x);
								v = Number(regions[argA].y) - Number(regions[argB].y);
							}
							
							Effect(mcc.x,mcc.y - 5,14,0,0);
							ax[mcc.attached] -= u;
							ay[mcc.attached] -= v;
							Effect(mcc.x,mcc.y - 5,14,0,0);
						}
					}
					break; */
				/* case 619: // Attach decoration 'A' to the center of every current player's camera 
					/* Note that I originally planned to center the decor on a specific player but I realised that this game client probably
					does not store the camera coordinates for the other players therefore I resulted to every current player's camera.
					This sorta works too as the intended effect is to be able to create customised UI via this trigger action, which is naturally
					a client-sided effect.*/
					
					/* Param B indicates which part of the camera to stick to.
					0: center
					1: top-left corner
					2: top-right corner
					3: bottom-right corner
					4: bottom-left corner
					*/ /*
					
					var windowSizeX = screenX / game_scale;
					var windowSizeY = screenY / game_scale;
					
					//Also note that game.x & y is negatively mirror when used to compare coordinates of objects in the ALE.
					switch(int(argB)){
						case 0:
							decors[int(argA)].x = -(game.x - windowSizeX/2);
							decors[int(argA)].y = -(game.y - windowSizeY/2);
							break;
						case 1:
							decors[int(argA)].x = -game.x;
							decors[int(argA)].y = -game.y;
							break;
						case 2:
							decors[int(argA)].x = -(game.x - windowSizeX);
							decors[int(argA)].y = -game.y;
							break;
						case 3:
							decors[int(argA)].x = -(game.x - windowSizeX);
							decors[int(argA)].y = -(game.y - windowSizeY);
							break;
						case 4:
							decors[int(argA)].x = -game.x;
							decors[int(argA)].y = -(game.y - windowSizeY);
							break;
						default:
							DialogSay("Invalid value for trigger op619! Please enter a value from 0 - 4.","#FF5555")
							break;
					}
					break; */
				case 620:
					level_variables[argA] = level_variables[level_variables[argB]];
					level_variable_changed(argA);
					break;
				case 621:
					level_variables[level_variables[argA]] = level_variables[argB];
					level_variable_changed(argA);
					break;
				case 622:
					KINETIC_IN_WALLS = argA == "true";
					break;
				case 623:
					level_variables[argA] = usedTimeWarps;
					level_variable_changed(argA);
					break;
				case 624:
					maxTimeWarps = int(ReplaceWithVariables(argA));
					break;
				case 625:
					maxTimewarpHitTrigger = int(argA);
					break;
				case 626:
					guns[int(argA)].upg = int(ReplaceWithVariables(argB));
					break;
				case 395:
					wadamage[int(level_variables[argA])] = int(ReplaceWithVariables(argB));
					break;
				case 378: // Change Gun 'A' color to 'B'
                    argB = ReplaceWithVariables(argB);
                    if(argB.length == 7)
                    {
                        hex = Number(argB.replace("#","0x"));
                        red = (hex & 16711680) >> 16;
                        green = (hex & 65280) >> 8;
                        blue = hex & 255;
                        clrs_mov = new ColorMatrixFilter();
                        matrix = new Array();
                        matrix = matrix.concat([1,0,0,0,red]);
                        matrix = matrix.concat([0,1,0,0,green]);
                        matrix = matrix.concat([0,0,1,0,blue]);
                        matrix = matrix.concat([0,0,0,1,0]);
                        clrs_mov.matrix = matrix;
                        guns[int(argA)].filters = new Array(clrs_mov);
                    }
                    break;
				case 627: // Set variable 'A' to slot of player who last joined
					level_variables[argA] = last_user_join;
					level_variable_changed(argA);
					break;
				case 6969:
					var txt:String = argA;
					var txt2:String = "";
					var sz:int;
					var clr:String;
					for (var i:int=0; i<txt.length; i++) {
					  sz = i + 5;
					  clr = "";
					  for (var j:int=0; j<6; j++) {
						 if (int(Math.random() * 10) % 2) clr += String.fromCharCode(48 + Math.floor(Math.random() * 11));
						 else clr += String.fromCharCode(65 + Math.floor(Math.random() * 6));
					  }
					  txt2 += ColorizeSize(txt.slice(i, i+1), "#" + clr, sz); //Colorize(txt.slice(i, i+1), "#" + colors[i%3]);
					}
					DialogSay(txt2, "");
					break;
				case 7000:
					for(key in mens){
						var value:Object = game[key];
						trace(key + " = " + value);
					}
					//trace(describeType(game));
					break;
			}
			return tr;
		}

		public function callTriggerIfExists(varname: String, obj: Object): void {
			if (obj[varname] != undefined) {
				EXEC_TRIGGER(obj[varname], true);
			}
		}
		
		public function level_variable_changed(varname: String) : void {
			callTriggerIfExists(varname, on_variable_change)
		}

		public function EXEC_TRIGGER(trigger_id:int, loop_check:Boolean = false) : Boolean
		{
			if(loop_check)
			{
				if(trigger_loops > 2048)
				{
					return false;
				}
				++trigger_loops;
			}
			else
			{
				trigger_loops = 0;
			}
			if(triggers[trigger_id] == undefined || triggers[trigger_id] == null)
			{
				SpawnLevelLogicErrorIfNeeded(new Error(),"Trigger was not found, execution depth: " + trigger_loops);
			}
			var trg:Object = triggers[trigger_id];
			if(currentLabel == "gaming" && trg.enabledd && (trg.maxcalls == -1 || trg.maxcalls > 0))
			{
				try
				{
					for (var tr:int=0; tr < trg.actions.length; tr++)
					{
						var next_id:int = EXEC_TRIGGER_ACTION(
							trg.actions[tr].type,
							trg.actions[tr].args, 
							trg
						);
						if (next_id != -1) tr = next_id;
					}
					if(trg.maxcalls != -1)
					{
						--trg.maxcalls;
					}
				}
				catch(e:Error)
				{
					SpawnLevelLogicErrorIfNeeded(e,"Trigger " + trg.uid + ", Action #" + (tr + 1));
				}
				return true;
			}
			return false;
		}
		
		public function SpawnLevelLogicErrorIfNeeded(err:Error, code:String) : void
		{
			if(true || ENABLE_LEVEL_LOGIC_ERRORS)
			{
				ChatNewMsg("<font color=\"#FF0000\">Level logic error: " + code + ", Engine Error: " + err.errorID + " :: " + err.name + " :: " + err.message + "</font>");
			}
		}

		public function EmitScriptError(err:Error) {
			ChatNewMsg("<font color=\"#FF0000\">Lua :: " + err.message + "</font>");
		}
		
		public function SetAIDifficulty(diff:int) : void
		{
			if(diff <= 1)
			{
				EASY_MODE = true;
				PRO_BOTS = false;
			}
			else if(diff <= 2)
			{
				EASY_MODE = false;
				PRO_BOTS = false;
			}
			else
			{
				EASY_MODE = false;
				PRO_BOTS = true;
			}
		}
		
		public function GetAIDifficulty() : int
		{
			if(EASY_MODE && !PRO_BOTS)
			{
				return 1;
			}
			if(!EASY_MODE && !PRO_BOTS)
			{
				return 2;
			}
			return 3;
		}
		
		public function GiveStarterGunsDM(param1:Number, param2:Number, param3:* = null) : void
		{
			var _loc4_:int = 0;
			var _loc5_:int = 0;
			var _loc6_:int = 0;
			var _loc7_:Vector.<int> = null;
			var _loc8_:Boolean = false;
			var _loc9_:int = 0;
			var _loc10_:MovieClip = null;
			if(dm_slots_on_spawn.length == 0)
			{
				return;
			}
			_loc4_ = 0;
			if(param3 != null)
			{
				_loc6_ = 0;
				while(_loc6_ < gunstotal)
				{
					if(guns[_loc6_].picken_by != -1)
					{
						if(mens[guns[_loc6_].picken_by] == param3)
						{
							_loc4_++;
						}
					}
					_loc6_++;
				}
			}
			_loc5_ = 0;
			for(; _loc5_ < dm_slots_on_spawn.length && _loc4_ < dm_max_guns_on_spawn; _loc5_++)
			{
				if(param3 != null)
				{
					_loc8_ = false;
					_loc6_ = 0;
					while(_loc6_ < gunstotal)
					{
						if(guns[_loc6_].wep == dm_slots_on_spawn[_loc5_])
						{
							if(guns[_loc6_].picken_by == param3.idd)
							{
								_loc8_ = true;
								break;
							}
						}
						_loc6_++;
					}
					if(!_loc8_)
					{
						_loc6_ = 0;
						while(_loc6_ < temp_ignore_gun_pick.length)
						{
							if(temp_ignore_gun_pick[_loc6_].mc.wep == dm_slots_on_spawn[_loc5_])
							{
								if(getTimer() < temp_ignore_gun_pick[_loc6_].timer + 1000)
								{
									_loc8_ = true;
									break;
								}
							}
							_loc6_++;
						}
					}
					if(_loc8_)
					{
						continue;
					}
				}
				_loc7_ = new Vector.<int>();
				_loc6_ = 0;
				while(_loc6_ < gunstotal)
				{
					if(guns[_loc6_].wep == dm_slots_on_spawn[_loc5_])
					{
						if(guns[_loc6_].picken_by == -1)
						{
							ok = true;
							_loc9_ = 0;
							while(_loc9_ < playerstotal)
							{
								if(mens[_loc9_] && mens[_loc9_].io)
								{
									if(mens[_loc9_].isplayer)
									{
										if(mens[_loc9_].hea > 0)
										{
											if(Math.abs(Number(mens[_loc9_].x) - Number(guns[_loc6_].x)) < 200)
											{
												if(Math.abs(Number(mens[_loc9_].y) - Number(guns[_loc6_].y)) < 200)
												{
													ok = false;
													break;
												}
											}
										}
									}
								}
								_loc9_++;
							}
							if(ok)
							{
								_loc7_.push(_loc6_);
							}
						}
					}
					_loc6_++;
				}
				if(_loc7_.length == 0)
				{
					_loc6_ = 0;
					while(_loc6_ < gunstotal)
					{
						if(guns[_loc6_].wep == dm_slots_on_spawn[_loc5_])
						{
							if(guns[_loc6_].picken_by == -1)
							{
								_loc7_.push(_loc6_);
							}
						}
						_loc6_++;
					}
				}
				if(_loc7_.length > 0)
				{
					_loc6_ = _loc7_[Math.floor(Math.random() * _loc7_.length)];
					(_loc10_ = guns[_loc6_]).x = param1;
					_loc10_.y = param2 - 50;
					atox[_loc10_.b_p1] = 0;
					atoy[_loc10_.b_p1] = 0;
					WakeUpAtom(_loc10_.b_p1);
					ax[_loc10_.b_p1] = _loc10_.x - 10;
					ay[_loc10_.b_p1] = _loc10_.y;
					atox[_loc10_.b_p2] = 0;
					atoy[_loc10_.b_p2] = 0;
					WakeUpAtom(_loc10_.b_p2);
					ax[_loc10_.b_p2] = _loc10_.x + 10;
					ay[_loc10_.b_p2] = _loc10_.y;
					_loc4_++;
				}
			}
		}
		
		public function create_barrel(param1:MovieClip) : void
		{
			barrels[barrelstotal] = param1;
			param1.gotoAndStop(2);
			param1.on_explode = -1;
			param1.on_crack = -1;
			param1.hea = 15;
			param1.dist = 2.6;
			param1.b_left_top = CreatePoint(param1.x - 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-barrelstotal - 100);
			param1.b_right_top = CreatePoint(param1.x + 5,param1.y - 13,param1.tox,param1.toy,7,false,3,-barrelstotal - 100);
			param1.b_right_bottom = CreatePoint(param1.x + 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-barrelstotal - 100);
			param1.b_left_bottom = CreatePoint(param1.x - 5,param1.y + 13,param1.tox,param1.toy,7,false,3,-barrelstotal - 100);
			param1.ch_top = Connect(param1.b_left_top,param1.b_right_top,0,10,-1);
			param1.ch_left = Connect(param1.b_left_top,param1.b_left_bottom,0,26,-1);
			param1.ch_right = Connect(param1.b_right_top,param1.b_right_bottom,0,26,-1);
			param1.ch_bottom = Connect(param1.b_right_bottom,param1.b_left_bottom,0,10,-1);
			param1.ch_cross1 = Connect(param1.b_left_top,param1.b_right_bottom,0,Math.sqrt(100 + 676),-1);
			param1.ch_cross2 = Connect(param1.b_right_top,param1.b_left_bottom,0,Math.sqrt(100 + 676),-1);
			if(param1.mdl == "bar_blue")
			{
				param1.dist *= 1.5;
			}
			if(param1.mdl == "bar_red")
			{
				param1.dist *= 2;
			}
			++barrelstotal;
		}
		
		public function create_vehicle(mcc:MovieClip, type:Number, side:Number) : void
		{
			vehicles[vehiclestotal] = mcc;
			mcc.vehicle_unlocked = true;
			mcc.gotoAndStop(2);
			mcc.typ = type;
			mcc.dead = false;
			mcc.master = -1;
			mcc.wep0 = -1;
			mcc.wep1 = -1;
			mcc.wep2 = -1;
			mcc.side = side;
			mcc.ecosystem = false;
			mcc.io = true;
			mcc.nick = "";
			if(type == 0)
			{
				mcc.nick = mcc.gui.txt1.text = "Mobile r081-CS";
				mcc.carbody.scaleY = mcc.side;
				mcc.hea = 400;
				mcc.hmax = 400;
				mcc.b_w1 = CreatePoint(mcc.x + Number(mcc.w1.x) * Number(mcc.side),mcc.y + mcc.w1.y,mcc.tox,mcc.toy,32,true,4,-vehiclestotal - 200);
				mcc.b_w2 = CreatePoint(mcc.x + Number(mcc.w2.x) * Number(mcc.side),mcc.y + mcc.w2.y,mcc.tox,mcc.toy,32,true,4,-vehiclestotal - 200);
				mcc.b_w1b = mcc.b_w1;
				mcc.b_w2b = mcc.b_w2;
				mcc.b_c = CreatePoint(mcc.x,mcc.y,mcc.tox,mcc.toy,35,false,5,-vehiclestotal - 200);
				mcc.b_c2 = CreatePoint(mcc.x + Number(mcc.w1.x) * Number(mcc.side),mcc.y,mcc.tox,mcc.toy,40,false,5,-vehiclestotal - 200);
				mcc.b_c3 = CreatePoint(mcc.x + (Number(mcc.w2.x) / 2 + 10) * Number(mcc.side),mcc.y + 20,mcc.tox,mcc.toy,40,false,5,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_w1,mcc.b_w2,mcc.b_c,mcc.b_c2,mcc.b_c3];
				i = 0;
				while(i < 2)
				{
					mcc.ch_cross = Connect(mcc.b_w1,mcc.b_w2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_w1,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_w2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_w1,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_w2,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_w1,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_w2,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c2,mcc.b_c3,0,-1,1);
					++i;
				}
			}
			else if(type == 1)
			{
				mcc.nick = mcc.gui.txt1.text = "Hound Walker-CS";
				mcc.hea = 300;
				mcc.hmax = 300;
				mcc.move_state = 0;
				mcc.move_height = 0;
				mcc.jump_state = 0;
				mcc.jump_state2 = Math.PI / 2;
				mcc.corpse_h = 80;
				mcc.deadtim = 0;
				mcc.b_p1 = CreatePoint(mcc.x + 0 * Number(mcc.side),mcc.y,mcc.tox,mcc.toy,45,false,5,-vehiclestotal - 200);
				mcc.b_p2 = CreatePoint(mcc.x + 62 * Number(mcc.side),mcc.y,mcc.tox,mcc.toy,50,false,5,-vehiclestotal - 200);
				mcc.b_p3 = CreatePoint(mcc.x + 0 * Number(mcc.side),mcc.y - 50,mcc.tox,mcc.toy,50,false,5,-vehiclestotal - 200);
				mcc.b_w1 = CreatePoint(mcc.x + 5 * Number(mcc.side),mcc.y + 210,mcc.tox,mcc.toy,30,false,6,-vehiclestotal - 200);
				mcc.b_w2 = CreatePoint(mcc.x - 5 * Number(mcc.side),mcc.y + 210,mcc.tox,mcc.toy,30,false,6,-vehiclestotal - 200);
				mcc.b_w1b = CreatePoint(mcc.x + 2.5 * Number(mcc.side),mcc.y + 210 / 2,mcc.tox,mcc.toy,40,false,5,-vehiclestotal - 200);
				mcc.b_w2b = CreatePoint(mcc.x - 2.5 * Number(mcc.side),mcc.y + 210 / 2,mcc.tox,mcc.toy,40,false,5,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_p1,mcc.b_p2,mcc.b_p3,mcc.b_w1,mcc.b_w2,mcc.b_w1b,mcc.b_w2b];
				xx = 1;
				i = 0;
				while(i < 2)
				{
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_p2,0,-1,xx);
					mcc.ch_cross = Connect(mcc.b_p2,mcc.b_p3,0,-1,xx);
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_p3,0,-1,xx);
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_w1,2,180,xx);
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_w2,2,180,xx);
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_w1,1,40,xx);
					mcc.ch_cross = Connect(mcc.b_p1,mcc.b_w2,1,40,xx);
					mcc.ch_cross = Connect(mcc.b_p3,mcc.b_w1,1,110,xx);
					mcc.ch_cross = Connect(mcc.b_p3,mcc.b_w2,1,110,xx);
					mcc.ch_cross = Connect(mcc.b_p2,mcc.b_w1,1,130,xx);
					mcc.ch_cross = Connect(mcc.b_p2,mcc.b_w2,1,130,xx);
					mcc.ch_leg1upper = Connect(mcc.b_p1,mcc.b_w1b,0,210 / 2,0.1);
					mcc.ch_leg1lower = Connect(mcc.b_w1,mcc.b_w1b,0,210 / 2,0.1);
					mcc.ch_leg2upper = Connect(mcc.b_p1,mcc.b_w2b,0,210 / 2,0.1);
					mcc.ch_leg2lower = Connect(mcc.b_w2,mcc.b_w2b,0,210 / 2,0.1);
					++i;
				}
				mcc.ch_cross2 = Connect(mcc.b_w1,mcc.b_w2,2,150,xx);
				mcc.leg1.x = 0;
				mcc.leg1.y = 0;
				mcc.leg2.x = 0;
				mcc.leg2.y = 0;
				mcc.leg1.scaleX = mcc.side;
				mcc.leg2.scaleX = mcc.side;
				mcc.leg1b.scaleX = mcc.side;
				mcc.leg2b.scaleX = mcc.side;
				mcc.carbody.scaleY = mcc.side;
			}
			else if(type == 2)
			{
				mcc.nick = mcc.gui.txt1.text = "Life-Capsule";
				mcc.side = 1;
				mcc.hea = 10;
				mcc.hmax = 10;
				mcc.b_lt = CreatePoint(mcc.x - 16.4,mcc.y - 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_rt = CreatePoint(mcc.x + 16.4,mcc.y - 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_lb = CreatePoint(mcc.x - 16.4,mcc.y + 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_rb = CreatePoint(mcc.x + 16.4,mcc.y + 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_lt2 = CreatePoint(mcc.x - 16.4,mcc.y - 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_rt2 = CreatePoint(mcc.x + 16.4,mcc.y - 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_lb2 = CreatePoint(mcc.x - 16.4,mcc.y + 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_rb2 = CreatePoint(mcc.x + 16.4,mcc.y + 53.6,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_lt,mcc.b_rt,mcc.b_lb,mcc.b_rb,mcc.b_lt2,mcc.b_rt2,mcc.b_lb2,mcc.b_rb2];
				i = 0;
				while(i < 2)
				{
					mcc.ch_cross = Connect(mcc.b_lt,mcc.b_rt,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_lb,mcc.b_rb,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_lt2,mcc.b_lb2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_rt2,mcc.b_rb2,0,-1,1);
					++i;
				}
				mcc.ch_t0 = Connect(mcc.b_lt,mcc.b_lt2,0,-1,1);
				mcc.ch_t1 = Connect(mcc.b_rt,mcc.b_rt2,0,-1,1);
				mcc.ch_t2 = Connect(mcc.b_lb,mcc.b_lb2,0,-1,1);
				mcc.ch_t3 = Connect(mcc.b_rb,mcc.b_rb2,0,-1,1);
				mcc.ch_t4 = Connect(mcc.b_lt,mcc.b_rb,0,-1,1);
				mcc.ch_t5 = Connect(mcc.b_rt,mcc.b_lb,0,-1,1);
				mcc.ch_t6 = Connect(mcc.b_lt2,mcc.b_rb2,0,-1,1);
				mcc.ch_t7 = Connect(mcc.b_rt2,mcc.b_lb2,0,-1,1);
			}
			else if(type == 3)
			{
				mcc.gotoAndStop(1);
				mcc.hea = 20;
				mcc.hmax = 20;
				mcc.side = 1;
				mcc.grabtim = 10;
				mcc.nick = mcc.gui.txt1.text = "";
				mcc.gui.visible = false;
				mcc.b_lt = CreatePoint(mcc.x - 20,mcc.y - 20,mcc.tox,mcc.toy,10,false,9,-vehiclestotal - 200);
				mcc.b_rt = CreatePoint(mcc.x + 20,mcc.y - 20,mcc.tox,mcc.toy,10,false,9,-vehiclestotal - 200);
				mcc.b_lb = CreatePoint(mcc.x - 20,mcc.y + 20,mcc.tox,mcc.toy,10,false,9,-vehiclestotal - 200);
				mcc.b_rb = CreatePoint(mcc.x + 20,mcc.y + 20,mcc.tox,mcc.toy,10,false,9,-vehiclestotal - 200);
				mcc.b_c = CreatePoint(mcc.x,mcc.y,mcc.tox,mcc.toy,25,false,9,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_lt,mcc.b_rt,mcc.b_lb,mcc.b_rb,mcc.b_c];
				mcc.ch_cross = Connect(mcc.b_lt,mcc.b_rt,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lb,mcc.b_rb,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lt,mcc.b_lb,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_rt,mcc.b_rb,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lt,mcc.b_rb,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_rt,mcc.b_lb,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lt,mcc.b_c,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lb,mcc.b_c,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_lt,mcc.b_c,0,-1,1);
				mcc.ch_cross = Connect(mcc.b_rt,mcc.b_c,0,-1,1);
			}
			else if(type == 4)
			{
				mcc.nick = mcc.gui.txt1.text = "Drone";
				mcc.ecosystem = true;
				mcc.carbody.scaleY = mcc.side;
				mcc.hea = 100;
				mcc.hmax = 100;
				mcc.b_c = CreatePoint(mcc.x,mcc.y,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_c1 = CreatePoint(mcc.x + 15 * Number(mcc.side),mcc.y,mcc.tox,mcc.toy,10,false,7,-vehiclestotal - 200);
				mcc.b_c2 = CreatePoint(mcc.x,mcc.y + 17,mcc.tox,mcc.toy,3,false,7,-vehiclestotal - 200);
				mcc.b_c3 = CreatePoint(mcc.x + 15 * Number(mcc.side),mcc.y + 17,mcc.tox,mcc.toy,3,false,7,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_c,mcc.b_c1,mcc.b_c2,mcc.b_c3];
				i = 0;
				while(i < 1)
				{
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c1,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c1,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c1,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c2,mcc.b_c3,0,-1,1);
					++i;
				}
			}
			else if(type == 5)
			{
				mcc.hea = 70;
				mcc.hmax = 70;
				mcc.nick = mcc.gui.txt1.text = "";
				mcc.gui.visible = false;
				mcc.resttim = 0;
				i2 = 0;
				while(i2 < 2)
				{
					i = 0;
					while(i < 10)
					{
						mcc["b_c" + i] = CreatePoint(mcc.x,mcc.y + 20 * i,mcc.tox,mcc.toy,0,false,4,-vehiclestotal - 200);
						if(i > 0)
						{
							mcc.ch_cross = Connect(mcc["b_c" + (i - 1)],mcc["b_c" + i],0,-1,1);
						}
						if(i > 1)
						{
							mcc.ch_cross = Connect(mcc["b_c" + (i - 2)],mcc["b_c" + i],0,-1,1);
						}
						++i;
					}
					++i2;
				}
				mcc.atoms = new <int>[mcc.b_c0,mcc.b_c1,mcc.b_c2,mcc.b_c3,mcc.b_c4,mcc.b_c5,mcc.b_c6,mcc.b_c7,mcc.b_c8,mcc.b_c9];
			}
			else if(type == 6)
			{
				mcc.hea = 70;
				mcc.hmax = 70;
				mcc.attached = -1;
				if(!HINTS)
				{
					mcc.origin.visible = false;
				}
				mcc.gui.txt1.text = "Hand holder";
				mcc.gui.visible = false;
				mcc.resttim = 0;
			}
			else if(type == 7)
			{
				mcc.nick = mcc.gui.txt1.text = "Corvette";
				mcc.ecosystem = true;
				mcc.carbody.scaleY = mcc.side;
				mcc.hea = 100;
				mcc.hmax = 100;
				mcc.b_c = CreatePoint(mcc.x,mcc.y,mcc.tox,mcc.toy,36,false,4,-vehiclestotal - 200);
				mcc.b_c1 = CreatePoint(mcc.x + 90 * Number(mcc.side),mcc.y,mcc.tox,mcc.toy,36,false,4,-vehiclestotal - 200);
				mcc.b_c2 = CreatePoint(mcc.x,mcc.y + 26,mcc.tox,mcc.toy,36,false,4,-vehiclestotal - 200);
				mcc.b_c3 = CreatePoint(mcc.x + 90 * Number(mcc.side),mcc.y + 26,mcc.tox,mcc.toy,36,false,4,-vehiclestotal - 200);
				mcc.atoms = new <int>[mcc.b_c,mcc.b_c1,mcc.b_c2,mcc.b_c3];
				i = 0;
				while(i < 1)
				{
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c1,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c1,mcc.b_c2,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c1,mcc.b_c3,0,-1,1);
					mcc.ch_cross = Connect(mcc.b_c2,mcc.b_c3,0,-1,1);
					++i;
				}
			}
			if(MP_mode)
			{
				mcc.gui.visible = false;
			}
			++vehiclestotal;
		}
		
		public function HurtMyPlayer(param1:Number, param2:Number, param3:Number) : void
		{
			if(PSYCHOBLOOD_MODE == 1)
			{
				if(Math_abs(param1) > Math_abs(param2))
				{
					if(param1 < 0)
					{
						pb0.alpha += param3 * 0.1;
					}
					else
					{
						pb1.alpha += param3 * 0.1;
					}
				}
				else if(param2 < 0)
				{
					pb3.alpha += param3 * 0.1;
				}
				else
				{
					pb2.alpha += param3 * 0.1;
				}
				hurt_i4 = 0;
				while(hurt_i4 < 4)
				{
					_root["pb" + hurt_i4].alpha += param3 * 0.015;
					_root["pb" + hurt_i4].visible = true;
					if(_root["pb" + hurt_i4].alpha > 0.9)
					{
						_root["pb" + hurt_i4].alpha = 0.9;
					}
					++hurt_i4;
				}
			}
			else if(PSYCHOBLOOD_MODE == 2)
			{
				if(Math_abs(param1) > Math_abs(param2))
				{
					if(param1 < 0)
					{
						pb0.alpha += param3 * 0.3;
					}
					else
					{
						pb1.alpha += param3 * 0.3;
					}
				}
				else if(param2 < 0)
				{
					pb3.alpha += param3 * 0.3;
				}
				else
				{
					pb2.alpha += param3 * 0.3;
				}
				if(SCREEN_EFFECTS)
				{
					pb4.alpha += param3 * 0.015;
					hurt_i4 = 0;
					while(hurt_i4 < 5)
					{
						pb4.visible = true;
						if(_root["pb" + hurt_i4].alpha > 0.9)
						{
							_root["pb" + hurt_i4].alpha = 0.9;
						}
						++hurt_i4;
					}
				}
				else
				{
					hurt_i4 = 0;
					while(hurt_i4 < 4)
					{
						pb4.visible = true;
						if(_root["pb" + hurt_i4].alpha > 0.9)
						{
							_root["pb" + hurt_i4].alpha = 0.9;
						}
						++hurt_i4;
					}
				}
			}
			if(mxnds1 + mxnds2 + mxnds3 == 0 && tnds > 10)
			{
				stable = false;
				unstable = 1;
			}
			if(mens[MP_myid].hea <= 0)
			{
				if(!mens[MP_myid].dead)
				{
					hpwarning = false;
					if(hpbeepch != null)
					{
						hpbeepch.stop();
					}
					if(!MP_spectator)
					{
						if(BEEP_ON_DEATH)
						{
							hpbeepch = s_hp_dead.play(0,0,vol);
						}
					}
				}
			}
			else if(Number(mens[MP_myid].hea) / Number(mens[MP_myid].hmax) < hp_warn_max)
			{
				if(!hpwarning)
				{
					hpwarning = true;
					if(hpbeepch != null)
					{
						hpbeepch.stop();
					}
					if(!MP_spectator)
					{
						if(GLOBAL_REGEN_SPEED != 0)
						{
							if(GLOBAL_REGEN_DELAY < 10)
							{
								hpbeepch = s_hp_warn.play(0,0,vol);
							}
						}
					}
					if(hpbeepch != null)
					{
						hpbeepch.addEventListener(Event.SOUND_COMPLETE,handleHpBeep);
					}
				}
			}
			if(tnds > 12 + mxnds1 + mxnds2 + mxnds3)
			{
				stable = false;
				unstable = 2;
			}
		}
		
		public function encode_packet(data: String): String {
			for (var i = 0; i < packet_replacements.length; i++) {
				data = data.split(packet_replacements[i][0]).join(packet_replacements[i][1]);
			}
			return data;
		}

		public function decode_packet(data: String): String {
			for (var i = packet_replacements.length-1; i >= 0; i--) {
				data = data.split(packet_replacements[i][1]).join(packet_replacements[i][0]);
			}
			return data;
		}

		public function Alerted(mc:MovieClip) : void
		{
			if (!mc) return;
			if(!mc.dying && (!mc.isplayer || !MP_mode || mc.team == mens[MP_myid].team))
			{
				mc.last_contact = 0;
				if(mc.hunt == -1 && mc.voice.enemy_spotted.length > 0)
				Say(mc,mc.voice.enemy_spotted[Math.floor(Math.random() * Number(mc.voice.enemy_spotted.length))]);
				if (mc.onalert != -1)
				EXEC_TRIGGER(mc.onalert);
			}
		}
		
		public function Hurt_nopain(player_id:Number) : void
		{
			var mc:MovieClip = mens[player_id];
			if (!mc) return;
			if(VIOLENCE || CASUAL_MODE || MP_mode)
			{
				if(mc.hp_legs <= 0)
				{
					if(!mc.brk_legs)
					{
						if(mc.armored == 2)
						{
							PlaySound(s_metal_gib,ax[mc.b_toe],ay[mc.b_toe]);
						}
						else
						{
							PlaySound(s_blood_leg_arm,ax[mc.b_toe],ay[mc.b_toe]);
						}
						mc.brk_legs = true;
						if(VIOLENCE)
						{
							RestoreLimbColor(mc.leg1.middle);
							RestoreLimbColor(mc.leg2.middle);
							mc.leg1.lower.visible = false;
							mc.leg2.lower.visible = false;
							/*if (RASTERIZE_GRAPHICS) {
								RemoveBitmap(mc.leg1.middle);
								RemoveBitmap(mc.leg2.middle);
							}*/
							mc.leg1.middle.gotoAndStop(30);
							mc.leg2.middle.gotoAndStop(30);
							/*if (RASTERIZE_GRAPHICS) {
								ForceRasterize(mc.leg1.middle);
								ForceRasterize(mc.leg2.middle);
							}*/
							mc.leg1.middle.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
							mc.leg2.middle.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
						}
						arad[mc.b_leg1] *= 0.3;
						arad[mc.b_leg2] *= 0.3;
						chdef[mc.ch_leg1_max] = 20 * Number(mc.scale);
						chdef[mc.ch_leg2_max] = 20 * Number(mc.scale);
						chio[mc.ch_leg1_damp] = -1;
						chio[mc.ch_leg2_damp] = -1;
						chdef[mc.ch_body_ang1] *= 0.6;
						chdef[mc.ch_body_ang2] *= 0.6;
						effcolor = player_id;
						FlowAt(ax[mc.b_leg1],Number(ay[mc.b_leg1]) - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
						FlowAt(ax[mc.b_leg1],Number(ay[mc.b_leg1]) - Math.random() * 20,0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
						MakeDying(mc);
						if(Number(MP_mode) & Number(MP_app))
						{
							if(mc.hea > 0)
							{
								if(mc.isplayer)
								{
									if(mc.lastshotby == MP_myid)
									{
										if(mc.team != mens[MP_myid])
										{
											ExpTask(EXP_TYPE_BREAK_ALIVE_PLAYERS_LEGS_IN_APPROVED,mc.nick);
										}
									}
								}
							}
						}
					}
				}
				else if(mc.brk_legs)
				{
					mc.brk_legs = false;
					mc.leg1.lower.visible = true;
					mc.leg2.lower.visible = true;
					mc.leg1.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					mc.leg2.middle.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					arad[mc.b_leg1] /= 0.3;
					arad[mc.b_leg2] /= 0.3;
					chdef[mc.ch_leg1_max] = 31 * Number(mc.scale);
					chdef[mc.ch_leg2_max] = 31 * Number(mc.scale);
					chio[mc.ch_leg1_damp] = true;
					chio[mc.ch_leg2_damp] = true;
					chdef[mc.ch_body_ang1] /= 0.6;
					chdef[mc.ch_body_ang2] /= 0.6;
					SpawnPlayerImmediately(mc as player);
				}
				if(mc.hp_arms <= 0)
				{
					if(!mc.brk_arms)
					{
						if(mc.armored == 2)
						{
							PlaySound(s_metal_gib,ax[mc.b_toe],ay[mc.b_toe]);
						}
						else
						{
							PlaySound(s_blood_leg_arm,ax[mc.b_body],ay[mc.b_body]);
						}
						mc.brk_arms = true;
						if(VIOLENCE)
						{
							RestoreLimbColor(mc.arm1.lower);
							RestoreLimbColor(mc.arm2.lower);
							/*if (RASTERIZE_GRAPHICS) {
								RemoveBitmap(mc.arm1.lower);
								RemoveBitmap(mc.arm2.lower);
							}*/
							mc.arm1.lower.gotoAndStop(20);
							mc.arm2.lower.gotoAndStop(20);
							/*if (RASTERIZE_GRAPHICS) {
								ForceRasterize(mc.arm1.lower);
								ForceRasterize(mc.arm2.lower);
							}*/
							if(mc.arm1.lower.psi != null)
							{
								mc.arm1.lower.psi.visible = false;
							}
							if(mc.arm2.lower.psi != null)
							{
								mc.arm2.lower.psi.visible = false;
							}
						}
						arad[mc.b_arm1] *= 0.4;
						arad[mc.b_arm2] *= 0.4;
						if(VIOLENCE)
						{
							mc.arm1.lower.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
							mc.arm2.lower.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
						}
						effcolor = player_id;
						FlowAt(ax[mc.b_arm1],ay[mc.b_arm1],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
						FlowAt(ax[mc.b_arm2],ay[mc.b_arm2],0,-2 + Math.random() * 4,-2 + Math.random() * 4,6);
						MakeDying(mc);
						if(Number(MP_mode) & Number(MP_app))
						{
							if(mc.hea > 0)
							{
								if(mc.isplayer)
								{
									if(mc.lastshotby == MP_myid)
									{
										if(mc.team != mens[MP_myid])
										{
											ExpTask(EXP_TYPE_BREAK_ALIVE_PLAYERS_ARMS_IN_APPROVED,mc.nick);
										}
									}
								}
							}
						}
					}
				}
				else if(mc.brk_arms)
				{
					mc.brk_arms = false;
					arad[mc.b_arm1] /= 0.4;
					arad[mc.b_arm2] /= 0.4;
					mc.arm1.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					mc.arm2.lower.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					SpawnPlayerImmediately(mc as player);
				}
				if(mc.hp_body <= 0)
				{
					if(!mc.brk_body)
					{
						mc.brk_body = true;
						if(mc.armored == 2)
						{
							PlaySound(s_metal_gib,ax[mc.b_toe],ay[mc.b_toe]);
						}
						else if(Math.random() > 0.5)
						{
							PlaySound(s_blood_body,ax[mc.b_body],ay[mc.b_body]);
						}
						else
						{
							PlaySound(s_blood_body2,ax[mc.b_body],ay[mc.b_body]);
						}
						if(mc.team != mens[MP_myid].team)
						{
							incBadge(15);
						}
						if(VIOLENCE || MP_mode)
						{
							RestoreLimbColor(mc.body);
							chio[mc.ch_body] = -1;
							chio[mc.ch_spine] = -1;
							chio[mc.ch_body_ang1] = -1;
							chio[mc.ch_body_ang2] = -1;
							mc.toe.bloddy.visible = true;
							// if (RASTERIZE_GRAPHICS) RemoveBitmap(mc.body);
							mc.body.gotoAndStop(5);
							// if (RASTERIZE_GRAPHICS) ForceRasterize(mc.body);
						}
						hurt_x4 = (ax[mc.b_toe] + ax[mc.b_body]) / 2;
						hurt_y4 = (ay[mc.b_toe] + ay[mc.b_body]) / 2;
						hurt_xx2 = (atox[mc.b_toe] + atox[mc.b_body]) / 2;
						hurt_yy2 = (atoy[mc.b_toe] + atoy[mc.b_body]) / 2;
						if(VIOLENCE || MP_mode)
						{
							mc.b_brk1 = CreatePoint(hurt_x4,hurt_y4,(hurt_xx2 + atox[mc.b_body]) / 2,(hurt_yy2 + atoy[mc.b_body]) / 2,7,false,1,player_id);
							mc.b_brk2 = CreatePoint(hurt_x4,hurt_y4,(hurt_xx2 + atox[mc.b_toe]) / 2,(hurt_yy2 + atoy[mc.b_toe]) / 2,7,false,1,player_id);
							mc.ch_brk1 = Connect(mc.b_toe,mc.b_brk2,0,Number(chdef[mc.ch_body]) * 0.75,-1);
							mc.ch_brk2 = Connect(mc.b_body,mc.b_brk1,0,Number(chdef[mc.ch_body]) * 0.75,-1);
							mc.body.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
							mc.toe.bloddy.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
						}
						effcolor = player_id;
						FlowAt(ax[mc.b_toe],Number(ay[mc.b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
						FlowAt(ax[mc.b_toe],Number(ay[mc.b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
						FlowAt(ax[mc.b_toe],Number(ay[mc.b_toe]) - Math.random() * 15,0,-6 + Math.random() * 12,-6 + Math.random() * 12,7);
						mc.dying = true;
						if(mc.hea > 0)
						{
							mc.hea = 0;
						}
					}
				}
				else if(mc.brk_body)
				{
					mc.brk_body = false;
					chio[mc.ch_body] = true;
					chio[mc.ch_spine] = true;
					chio[mc.ch_body_ang1] = true;
					chio[mc.ch_body_ang2] = true;
					aio[mc.b_brk1] = -1;
					aio[mc.b_brk2] = -1;
					mc.b_brk1 = mc.b_toe;
					mc.b_brk2 = mc.b_body;
					chio[mc.ch_brk1] = -1;
					chio[mc.ch_brk2] = -1;
					mc.ch_brk1 = mc.ch_spine;
					mc.ch_brk2 = mc.ch_spine;
					mc.toe.bloddy.visible = false;
					mc.body.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					SpawnPlayerImmediately(mc as player);
				}
				if(mc.hp_head <= 0)
				{
					if(!mc.brk_head)
					{
						if(mc.armored == 2)
						{
							PlaySound(s_metal_gib,ax[mc.b_toe],ay[mc.b_toe]);
						}
						else if(Math.random() > 0.5)
						{
							PlaySound(s_blood_head,ax[mc.b_body],ay[mc.b_body]);
						}
						else
						{
							PlaySound(s_blood_head2,ax[mc.b_body],ay[mc.b_body]);
						}
						if(VIOLENCE)
						{
							RestoreLimbColor(mc.head);
							// if (RASTERIZE_GRAPHICS) RemoveBitmap(mc.head);
							mc.head.gotoAndStop(10);
							// if (RASTERIZE_GRAPHICS) ForceRasterize(mc.head);
							mc.head.transform.colorTransform = new ColorTransform(mc.blood_red,mc.blood_green,mc.blood_blue,1,0,0,0,0);
						}
						mc.brk_head = true;
						if(mc.hea > 0)
						{
							mc.hea = 0;
						}
						arad[mc.b_head_start] *= 0.5;
						arad[mc.b_head_end] *= 0.1;
						effcolor = player_id;
						FlowAt(ax[mc.b_head_start],Number(ay[mc.b_head_start]) - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,6);
						FlowAt(ax[mc.b_head_start],Number(ay[mc.b_head_start]) - Math.random() * 5,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,6);
						FlowAt(ax[mc.b_head_start],Number(ay[mc.b_head_start]) - Math.random() * 5,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,8);
					}
				}
				else if(mc.brk_head)
				{
					mc.head.transform.colorTransform = new ColorTransform(1,1,1,1,0,0,0,0);
					mc.brk_head = false;
					arad[mc.b_head_start] /= 0.5;
					arad[mc.b_head_end] /= 0.1;
					SpawnPlayerImmediately(mc as player);
				}
				if(STRICT_MODE)
				{
					if(mc.team == mens[MP_myid].team)
					{
						if(mc.hero)
						{
							if(Boolean(mc.brk_head) || Boolean(mc.brk_arms) || Boolean(mc.brk_legs) || Boolean(mc.brk_body))
							{
								darkness.visible = true;
								if(!MP_mode)
								{
									LEVEL_END_FORCE = "failed";
									if(mc.dead)
									{
										LAST_ERROR = "YOUR TEAMMATE DIED.";
										if(HINTS)
										{
											SetHint("Your teammate died.");
										}
									}
									else
									{
										LAST_ERROR = "YOUR TEAMMATE IS CRITICALLY INJURED.";
										if(HINTS)
										{
											SetHint("Your teammate is critically injured.");
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		public function MakeDying(param1:*) : void
		{
			if(param1.hea > 0)
			{
				if(!param1.dying)
				{
					if(param1.voice.dying.length > 0)
					{
						Say(param1,param1.voice.dying[Math.floor(Math.random() * Number(param1.voice.dying.length))],true);
					}
					param1.dying = true;
				}
			}
		}
		
		public function MakeHappy(param1:*) : void
		{
			if(param1.hea > 0)
			{
				if(!param1.dying)
				{
					if(param1.voice.enemy_down.length > 0)
					{
						if(MP_mode || param1.voice.enemy_down_sp_chance == undefined || Math.random() < param1.voice.enemy_down_sp_chance)
						{
							Say(param1,param1.voice.enemy_down[Math.floor(Math.random() * Number(param1.voice.enemy_down.length))]);
						}
					}
				}
			}
		}
		
		public function Hurt(param1:Number, param2:Number = 1) : void
		{
			mens[param1].regentim = 0;
			if(mens[param1].notspawned)
			{
				SpawnPlayerImmediately(mens[param1]);
			}
			mens[param1].last_contact = 0;
			if(mens[param1].hea > 0)
			{
				if(!HELL_MODE) {
					if(mens[param1].isGhost) {
						if(mens[param1].alpha < 0.3) {
							mens[param1].alpha = 0.3;
						}
					}
				}
				if(mens[param1].voice.hurt.length > 0) {
					if (!HELL_MODE) {
						Say(mens[param1],mens[param1].voice.hurt[Math.floor(Math.random() * Number(mens[param1].voice.hurt.length))],true);
					} else if (!mens[param1].isGhost) {
						Say(mens[param1],mens[param1].voice.hurt[Math.floor(Math.random() * Number(mens[param1].voice.hurt.length))],true);
					}
				}
				if(mens[param1].lastshot == "head")
				{
					atox[mens[param1].b_head_end] -= Number(mens[param1].side) * 4 * param2;
					atox[mens[param1].b_head_start] -= Number(mens[param1].side) * 3 * param2;
					atoy[mens[param1].b_arm1] -= 3 * param2;
					atoy[mens[param1].b_arm2] -= 2 * param2;
					atox[mens[param1].b_leg1] += Number(mens[param1].side) * 3 * param2;
					atoy[mens[param1].b_leg1] -= 2 * param2;
				}
				else if(mens[param1].lastshot == "body")
				{
					atox[mens[param1].b_head_end] += Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_head_start] -= Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_toe] -= Number(mens[param1].side) * 2 * param2;
					atox[mens[param1].b_arm1] -= Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_arm2] -= Number(mens[param1].side) * 2 * param2;
					atoy[mens[param1].b_arm1] += 1 * param2;
					atoy[mens[param1].b_arm2] += 2 * param2;
					atox[mens[param1].b_leg1] += Number(mens[param1].side) * 2 * param2;
					atox[mens[param1].b_leg2] -= Number(mens[param1].side) * 1 * param2;
				}
				else if(mens[param1].lastshot == "arms")
				{
					atox[mens[param1].b_head_end] += Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_head_start] -= Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_body] -= Number(mens[param1].side) * 2 * param2;
					atox[mens[param1].b_arm1] -= Number(mens[param1].side) * 2 * param2;
					atox[mens[param1].b_arm2] -= Number(mens[param1].side) * 2 * param2;
					atoy[mens[param1].b_arm1] -= 4 * param2;
					atoy[mens[param1].b_arm2] -= 3 * param2;
				}
				else if(mens[param1].lastshot == "legs")
				{
					atox[mens[param1].b_head_end] -= Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_head_start] += Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_toe] -= Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_arm1] += Number(mens[param1].side) * 1 * param2;
					atox[mens[param1].b_arm2] += Number(mens[param1].side) * 1 * param2;
					atoy[mens[param1].b_arm1] -= 2 * param2;
					atoy[mens[param1].b_arm2] -= 3 * param2;
					atox[mens[param1].b_leg1] -= Number(mens[param1].side) * 3 * param2;
					atox[mens[param1].b_leg2] -= Number(mens[param1].side) * 4 * param2;
				}
				if(mens[param1].inwater)
				{
					Effect(ax[mens[param1].b_head_start],ay[mens[param1].b_head_start],2,0,0);
				}
			}
			if(mens[param1].hea < dying_after && (param1 != MP_myid || MP_mode || PRO_BOTS))
			{
				MakeDying(mens[param1]);
			}
			Hurt_nopain(param1);
			if(mens[param1].dying)
			{
				mens[param1].stability = -2;
			}
		}
		
		public function PhysicsExplosionNoSprite(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:Boolean, param8:String) : void
		{
			var _loc9_:Object = null;
			var _loc10_:* = false;
			var _loc11_:* = null;
			if(DEBUG_MODE)
			{
				debug_screen.graphics.lineStyle(param3 * 2,16755200,0.5);
				debug_screen.graphics.moveTo(param1,param2);
				debug_screen.graphics.lineTo(param1,param2 + 1);
			}
			if(param4 > 0)
			{
				if(param7)
				{
					SHAKEAMMOUT += dist_to_face / Dist3Dm((param1 + game.x - 400) * game_scale,(param2 + game.y - 200) * game_scale,dist_to_face) * Math.max(param3 / 50 * 3,param4) * 0.2;
				}
			}
			i6 = 0;
			while(i6 < flakes_total)
			{
				if(flakes[i6].alpha > 0)
				{
					xx = Dist2D(param1,param2,flakes[i6].x,flakes[i6].y);
					if(xx < param3 * 0.75)
					{
						flakes[i6].hit = true;
					}
					if(xx < param3)
					{
						xx = param4 * Math.sqrt((param3 - xx) / param3) / xx;
						flakes[i6].tox += (flakes[i6].x - param1) * xx * 3;
						flakes[i6].toy += (flakes[i6].y - param2) * xx * 3;
					}
				}
				++i6;
			}
			if(!stable)
			{
				if(MP_mode)
				{
					if(!MP_favor_the_shooter)
					{
						if(Math.random() > 0.9)
						{
							param1 = Number(mens[MP_myid].x);
							param2 = Number(mens[MP_myid].y);
							param5 *= 1000;
						}
					}
				}
			}
			_loc9_ = null;
			if(MP_mode && MP_favor_the_shooter)
			{
				_loc9_ = {};
			}
			i6 = 0;
			while(i6 < atotal)
			{
				if(aio[i6] == true || aio[i6] == false)
				{
					xx = Dist2D(param1,param2,ax[i6],ay[i6]);
					if(xx < param3)
					{
						if(TraceLine(param1,param2,ax[i6],ay[i6]))
						{
							if(xx < 0.5)
							{
								xx = 0.5;
							}
							xx = param4 * Math.sqrt((param3 - xx) / param3) / xx;
							allow = true;
							is2 = 0;
							while(is2 < shnades_total)
							{
								if(shnades[is2].io)
								{
									if(ax[i6] > Number(shnades[is2].x) - Number(shnades[is2].radius) - 5)
									{
										if(ax[i6] < shnades[is2].x + shnades[is2].radius + 5)
										{
											if(ay[i6] > Number(shnades[is2].y) - Number(shnades[is2].radius) - 5)
											{
												if(ay[i6] < shnades[is2].y + shnades[is2].radius + 5)
												{
													if(Dist2D(shnades[is2].x,shnades[is2].y,param1,param2) > Number(shnades[is2].radius) - 5 && Dist2D(shnades[is2].x,shnades[is2].y,ax[i6],ay[i6]) < shnades[is2].radius)
													{
														allow = false;
														break;
													}
												}
											}
										}
									}
								}
								++is2;
							}
							if(allow)
							{
								if(amat[i6] == 1 || amat[i6] == 0)
								{
									if(mens[aof[i6]].can_be_hit)
									{
										_loc10_ = false;
										if(MP_mode)
										{
											if(MP_favor_the_shooter)
											{
												_loc10_ = param6 == MP_myid;
											}
											else
											{
												_loc10_ = aof[i6] == MP_myid;
											}
											if(param6 == MP_myid && !mens[aof[i6]].isplayer || aof[i6] === MP_myid && (param6 == -1 || !mens[param6].isplayer))
											{
												_loc10_ = true;
											}
											if(!mens[aof[i6]].isplayer && (param6 == -1 || !mens[param6].isplayer))
											{
												_loc10_ = true;
											}
										}
										else
										{
											_loc10_ = true;
										}
										if(MP_mode && MP_favor_the_shooter)
										{
											if(param6 == MP_myid)
											{
												if(_loc9_[aof[i6]] == undefined)
												{
													_loc9_[aof[i6]] = new Array();
												}
												_loc9_[aof[i6]].push(GlobalAtomIDToPlayerLocalAtomID(i6,mens[aof[i6]]),r2(Number(ax[i6]) - param1),r2(Number(ay[i6]) - param2),r2(xx));
											}
										}
										if(_loc10_)
										{
											ApplyWaveDamageToPlayerAtom(param6,mens[aof[i6]],GlobalAtomIDToPlayerLocalAtomID(i6,mens[aof[i6]]),Number(ax[i6]) - param1,Number(ay[i6]) - param2,xx,param5,expl_hurt_full,param3,param4,true,param1,param2,-1,param8);
										}
									}
								}
								else
								{
									yy = Math.sqrt(arad[i6]);
									if(yy < 5)
									{
										yy = 5;
									}
									WakeUpAtom(i6);
									atox[i6] += (Number(ax[i6]) - param1) * xx / yy * 7;
									atoy[i6] += (Number(ay[i6]) - param2) * xx / yy * 7;
									if(xx < param3 * 0.75)
									{
										if(amat[i6] == 3)
										{
											if(barrels[-100 - Number(aof[i6])].hea > 0)
											{
												barrels[-100 - Number(aof[i6])].hea -= param5 / 4;
												HurtBarrel(-100 - Number(aof[i6]));
											}
										}
										if(amat[i6] == 5 || amat[i6] == 4 || amat[i6] == 6 || amat[i6] == 7 || amat[i6] == 9)
										{
											if(vehicles[-Number(aof[i6]) - 200].typ == 0 || vehicles[-Number(aof[i6]) - 200].typ == 1 || vehicles[-Number(aof[i6]) - 200].typ == 3 || vehicles[-Number(aof[i6]) - 200].typ == 4)
											{
												vehicles[-Number(aof[i6]) - 200].hea -= param5 / 3;
											}
										}
									}
								}
							}
						}
					}
				}
				++i6;
			}
			if(_loc9_ != null)
			{
				for(_loc11_ in _loc9_)
				{
					MP_custom_events += ";w|" + [param6,r2(param5),expl_hurt_full ? 1 : 0,r2(param3),r2(param4),_loc11_,r2(param1),r2(param2),param8].join("#") + "#" + _loc9_[_loc11_].join("#");
				}
			}
			if(param6 != -1)
			{
				i6 = 0;
				while(i6 < playerstotal)
				{
					if(mens[i6] && mens[i6].io)
					{
						if(!mens[i6].isplayer)
						{
							xx = Dist2D(param1,param2,ax[mens[i6].b_toe],ay[mens[i6].b_toe]);
							if(xx < param3 + 400 && mens[i6].team != mens[param6].team || xx < param3 + 20 && mens[i6].team == mens[param6].team)
							{
								if(TraceLine(param1,param2,ax[mens[i6].b_head_start],ay[mens[i6].b_head_start]))
								{
									if(!mens[i6].dead)
									{
										Alerted(mens[i6]);
									}
									mens[i6].hunt = param6;
								}
							}
						}
					}
					++i6;
				}
			}
			i6 = 0;
			while(i6 < lampstotal)
			{
				if(lamps_power2[i6] > 0)
				{
					if(Dist2D(param1,param2,lamps_x[i6],lamps_y[i6]) < param3)
					{
						if(TraceLine(param1,param2,lamps_x[i6],lamps_y[i6]))
						{
							ShotLight(i6);
						}
					}
				}
				++i6;
			}
		}
		
		public function ExplosionSound(param1:Number, param2:Number) : *
		{
			xx = 0;
			i6 = 0;
			while(i6 < waterstotal)
			{
				if(param1 > wax[i6])
				{
					if(param1 < wax[i6] + waw[i6])
					{
						if(param2 > way[i6])
						{
							if(param2 < way[i6] + wah[i6])
							{
								if(wa_friction[i6])
								{
									xx = 1;
								}
							}
						}
					}
				}
				++i6;
			}
			if(xx == 0)
			{
				if(Math.random() > 0.5)
				{
					PlaySound(s_explode1,param1,param2);
				}
				else
				{
					PlaySound(s_explode2,param1,param2);
				}
			}
			else
			{
				PlaySound(s_explode_underwater,param1,param2);
			}
		}
		
		public function ExplosionSoundBarrel(param1:Number, param2:Number) : *
		{
			xx = 0;
			i6 = 0;
			while(i6 < waterstotal)
			{
				if(param1 > wax[i6])
				{
					if(param1 < wax[i6] + waw[i6])
					{
						if(param2 > way[i6])
						{
							if(param2 < way[i6] + wah[i6])
							{
								if(wa_friction[i6])
								{
									xx = 1;
								}
							}
						}
					}
				}
				++i6;
			}
			if(xx == 0)
			{
				if(Math.random() > 0.5)
				{
					PlaySound(s_barrel,param1,param2);
				}
				else
				{
					PlaySound(s_barrel2,param1,param2);
				}
			}
			else
			{
				PlaySound(s_explode_underwater,param1,param2);
			}
		}
		
		public function PhysicsExplosion(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:int, param7:String) : void
		{
			PhysicsExplosionNoSprite(param1,param2,param3,param4,param5,param6,true,param7);
			if(param3 > 1000)
			{
				param3 = 1000;
			}
			if(param4 > 0)
			{
				xx = 0;
				i6 = 0;
				while(i6 < waterstotal)
				{
					if(param1 > wax[i6])
					{
						if(param1 < wax[i6] + waw[i6])
						{
							if(param2 > way[i6])
							{
								if(param2 < way[i6] + wah[i6])
								{
									if(wa_friction[i6])
									{
										xx = 1;
									}
								}
							}
						}
					}
					++i6;
				}
				if(xx == 0)
				{
					xx = 0;
					while(xx < Math.PI * 2)
					{
						yy = 0.05 + Math.random();
						Effect(param1,param2,7,Math.sin(xx + Math.random()) * param4 * yy,Math.cos(xx) * param4 * yy);
						xx += Math.PI / 6 / param3 * 100 / game_scale;
					}
					Effect(param1,param2,4,param3 / 100,0);
				}
				else
				{
					if(SUPER_COMPUTER && !c_sim_stress)
					{
						xx = 0;
						while(xx < Math.PI * 2)
						{
							yy = 0.05 + Math.random();
							Effect(param1 + Math.sin(xx + Math.random()) * param4 * yy,param2 + Math.cos(xx) * param4 * yy,2,0,0);
							xx += Math.PI / 6 / param3 * 100 / game_scale;
						}
					}
					Effect(param1,param2,15,param3 / 100,0);
				}
			}
			PAlert(param1,param2);
		}
		
		public function HurtBarrel(param1:int) : void
		{
			PAlert(barrels[param1].x,barrels[param1].y);
			if(barrels[param1].hea <= 0)
			{
				if(barrels[param1].on_explode != -1) {
					EXEC_TRIGGER(barrels[param1].on_explode);
				}
				if(MP_mode)
				{
					MP_custom_events += ";b|" + MP_myid + "#" + param1 + "#" + barrels[param1].x + "#" + barrels[param1].y;
				}
				barrels[param1].gotoAndPlay(5);
				barrels[param1].rotation = 0;
				barrels[param1].b_left1 = CreatePoint((ax[barrels[param1].b_left_top] + ax[barrels[param1].b_left_bottom]) / 2,(ay[barrels[param1].b_left_top] + ay[barrels[param1].b_left_bottom]) / 2,(atox[barrels[param1].b_left_top] + atox[barrels[param1].b_left_bottom]) / 2,(atoy[barrels[param1].b_left_top] + atoy[barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
				barrels[param1].b_left2 = CreatePoint((ax[barrels[param1].b_left_top] + ax[barrels[param1].b_left_bottom]) / 2,(ay[barrels[param1].b_left_top] + ay[barrels[param1].b_left_bottom]) / 2,(atox[barrels[param1].b_left_top] + atox[barrels[param1].b_left_bottom]) / 2,(atoy[barrels[param1].b_left_top] + atoy[barrels[param1].b_left_bottom]) / 2,5,false,3,-param1 - 100);
				barrels[param1].b_right1 = CreatePoint((ax[barrels[param1].b_right_top] + ax[barrels[param1].b_right_bottom]) / 2,(ay[barrels[param1].b_right_top] + ay[barrels[param1].b_right_bottom]) / 2,(atox[barrels[param1].b_right_top] + atox[barrels[param1].b_right_bottom]) / 2,(atoy[barrels[param1].b_right_top] + atoy[barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
				barrels[param1].b_right2 = CreatePoint((ax[barrels[param1].b_right_top] + ax[barrels[param1].b_right_bottom]) / 2,(ay[barrels[param1].b_right_top] + ay[barrels[param1].b_right_bottom]) / 2,(atox[barrels[param1].b_right_top] + atox[barrels[param1].b_right_bottom]) / 2,(atoy[barrels[param1].b_right_top] + atoy[barrels[param1].b_right_bottom]) / 2,5,false,3,-param1 - 100);
				ReConnect(barrels[param1].ch_left,barrels[param1].b_left_top,barrels[param1].b_left1,0,13,-1);
				ReConnect(barrels[param1].ch_right,barrels[param1].b_right_top,barrels[param1].b_right1,0,13,-1);
				ReConnect(barrels[param1].ch_cross1,barrels[param1].b_left_top,barrels[param1].b_right1,0,Math.sqrt(100 + 169),-1);
				ReConnect(barrels[param1].ch_cross2,barrels[param1].b_right_top,barrels[param1].b_left1,0,Math.sqrt(100 + 169),-1);
				barrels[param1].ch_left2 = Connect(barrels[param1].b_left_bottom,barrels[param1].b_left2,0,13,-1);
				barrels[param1].ch_right2 = Connect(barrels[param1].b_right_bottom,barrels[param1].b_right2,0,13,-1);
				barrels[param1].ch_cross3 = Connect(barrels[param1].b_left_bottom,barrels[param1].b_right2,0,Math.sqrt(100 + 169),-1);
				barrels[param1].ch_cross4 = Connect(barrels[param1].b_right_bottom,barrels[param1].b_left2,0,Math.sqrt(100 + 169),-1);
				barrels[param1].ch_mid1 = Connect(barrels[param1].b_left1,barrels[param1].b_right1,0,10,-1);
				barrels[param1].ch_mid2 = Connect(barrels[param1].b_left2,barrels[param1].b_right2,0,10,-1);
				n2 = 0;
				while(n2 < 10)
				{
					if(HQ || SUPER_COMPUTER)
					{
						barrels[param1]["b_g" + n2] = CreatePoint(barrels[param1].x + barrels[param1]["g" + n2].x,barrels[param1].y + barrels[param1]["g" + n2].y,(Math.random() - 0.5) * Number(barrels[param1].dist) * 10,(Math.random() - 0.5) * Number(barrels[param1].dist) * 10,0,false,3,-param1 - 100);
					}
					else
					{
						barrels[param1]["g" + n2].visible = false;
					}
					++n2;
				}
				expl_hurt_full = true;
				PhysicsExplosionNoSprite(barrels[param1].x,barrels[param1].y,50 * Number(barrels[param1].dist),Number(barrels[param1].dist) * 3,Number(barrels[param1].dist) * 30,barrels[param1].master,true,"barrel");
				expl_hurt_full = false;
				xx = 0;
				i6 = 0;
				while(i6 < waterstotal)
				{
					if(barrels[param1].x > wax[i6])
					{
						if(barrels[param1].x < wax[i6] + waw[i6])
						{
							if(barrels[param1].y > way[i6])
							{
								if(barrels[param1].y < way[i6] + wah[i6])
								{
									if(wa_friction[i6])
									{
										xx = 1;
									}
								}
							}
						}
					}
					++i6;
				}
				if(xx == 0)
				{
					if(barrels[param1].mdl == "bar_orange" || barrels[param1].mdl == "bar_red")
					{
						Effect(barrels[param1].x,barrels[param1].y,4,50 * Number(barrels[param1].dist) / 100,0);
					}
					else if(barrels[param1].mdl == "bar_blue")
					{
						Effect(barrels[param1].x,barrels[param1].y,18,50 * Number(barrels[param1].dist) / 100,0);
					}
				}
				else
				{
					Effect(barrels[param1].x,barrels[param1].y,15,50 * Number(barrels[param1].dist) / 100,0);
				}
				ExplosionSoundBarrel(barrels[param1].x,barrels[param1].y);
			}
			else
			{
				if(barrels[param1].on_crack != -1) {
					EXEC_TRIGGER(barrels[param1].on_crack);
				}
				if(barrels[param1].hea <= 15) {
					barrels[param1].gotoAndStop(4 - Math.round(Number(barrels[param1].hea) / 25 * 2));
				}
				else	
				{
					barrels[param1].gotoAndStop(1);
				}
				if(Math.random() > 0.5)
				{
					PlaySound(s_glass1,barrels[param1].x,barrels[param1].y);
				}
				else
				{
					PlaySound(s_glass2,barrels[param1].x,barrels[param1].y);
				}
			}
		}
		
		public function VerifyMP(atom_id:int) : void
		{
			if(Boolean(isNaN(ax[atom_id])) || Boolean(isNaN(ay[atom_id])) || Boolean(isNaN(atox[atom_id])) || Boolean(isNaN(atoy[atom_id])))
			{
				ax[atom_id] = 0;
				ay[atom_id] = 0;
				atox[atom_id] = 0;
				atoy[atom_id] = 0;
			}
		}
		
		/*
		public function TurnMPBone(atom:int, diffx:Number, diffy:Number, param4:Number, param5:Number) : void
		{
			atox[atom] = Number(atox[atom]) * (1 - xx2) + diffx * xx2;
			atoy[atom] = Number(atoy[atom]) * (1 - xx2) + diffy * xx2;
			ax[atom] += param4 * xx2;
			ay[atom] += param5 * xx2;
			if(GET_LITE_PHYS())
			{
				lax[atom] += param4 * xx2;
				lay[atom] += param5 * xx2;
			}
			WakeUpAtom(atom);
		}
		*/
		
		public function TurnMPBone2(atom:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number) : void
		{
			var _loc7_:Number = param2 > 0 ? Number(arad[atom]) : -Number(arad[atom]);
			var _loc8_:Number = param3 > 0 ? Number(arad[atom]) : -Number(arad[atom]);
			if(TraceLineF_nopushers(ax[atom] + _loc7_, ay[atom] + _loc8_, MorphWithTimeScale(ax[atom], ax[atom] + param2, 0.5, param6 * 4) + _loc7_, MorphWithTimeScale(ay[atom], ay[atom] + param3, 0.5, param6 * 4) + _loc8_))
			{
				ax[atom] = MorphWithTimeScale(ax[atom],ax[atom] + param2, 0.5, param6 * 4);
				ay[atom] = MorphWithTimeScale(ay[atom],ay[atom] + param3, 0.5, param6 * 4);
				if(GET_LITE_PHYS()) {
					lax[atom] = ax[atom];
					lay[atom] = ay[atom];
				}
			} else {
				atox[atom] = MorphWithTimeScale(atox[atom], param2, 0.95, param6);
				atoy[atom] = MorphWithTimeScale(atoy[atom], param3, 0.95, param6);
			}
			atox[atom] = MorphWithTimeScale(atox[atom], param4, 0.95, param6);
			atoy[atom] = MorphWithTimeScale(atoy[atom], param5, 0.95, param6);
			WakeUpAtom(atom);
		}
		
		public function TurnBone(atom:int, x:Number, y:Number, player_mc:player, power:Number) : void
		{
			if(power > 0.5) power = 1;
			if((power = (power *= power * 0.5) * (player_mc.idd == MP_myid ? GSPEED2 : GSPEED)) > 1)
				power = 1;
			ax[atom] -= (Number(ax[atom]) - x) * power;
			ay[atom] -= (Number(ay[atom]) - y) * power;
			if(GET_LITE_PHYS() && (power > 0.2)) {
				lax[atom] = ax[atom];
				lay[atom] = ay[atom];
			}
			if(player_mc.isplayer && (player_mc.idd != MP_myid || MP_spectator) && MP_favor_the_shooter) {
				atox[atom] -= (Number(ax[atom]) - x) * power / 2;
				atoy[atom] -= (Number(ay[atom]) - y) * power / 2;
			} else {
				atox[atom] -= (Number(ax[atom]) - x) * power;
				atoy[atom] -= (Number(ay[atom]) - y) * power;
			}
			atox[atom] = (Number(atox[atom]) * 4 + player_mc.tox) * 0.2;
			atoy[atom] = (Number(atoy[atom]) * 4 + player_mc.toy) * 0.2;
		}
		
		public function TurnBone4(atom:int, x:Number, y:Number, power:Number) : void
		{
			power *= 0.25 * GSPEED;
			ax[atom] -= (Number(ax[atom]) - x) * power;
			ay[atom] -= (Number(ay[atom]) - y) * power;
			if(GET_LITE_PHYS() && (power > 0.2)) {
				lax[atom] = ax[atom];
				lay[atom] = ay[atom];
			}
			atox[atom] -= (Number(ax[atom]) - x) * power;
			atoy[atom] -= (Number(ay[atom]) - y) * power;
		}
		
		public function TurnBone2(atom:int, x:Number, y:Number, player_mc:player, power:Number) : void
		{
			if(power == 1) {
				atox[atom] = player_mc.tox;
				atoy[atom] = player_mc.toy;
				ax[atom] = x;
				ay[atom] = y;
				if(GET_LITE_PHYS()) {
					lax[atom] = x;
					lay[atom] = y;
				}
			} else {
				power *= player_mc.idd == MP_myid ? GSPEED2 : GSPEED;
				atox[atom] = Number(atox[atom]) * (1 - power) + Number(player_mc.tox) * power;
				atoy[atom] = Number(atoy[atom]) * (1 - power) + Number(player_mc.toy) * power;
				ax[atom] = Number(ax[atom]) * (1 - power) + x * power;
				ay[atom] = Number(ay[atom]) * (1 - power) + y * power;
				if(GET_LITE_PHYS()) {
					lax[atom] = ax[atom];
					lay[atom] = ay[atom];
				}
			}
		}
		
		public function TurnBone3(atom:int, x:Number, y:Number, tox:Number, toy:Number) : void
		{
			atox[atom] = tox;
			atoy[atom] = toy;
			ax[atom] = x;
			ay[atom] = y;
			if(GET_LITE_PHYS()) {
				lax[atom] = x;
				lay[atom] = y;
			}
		}
		
		public function PAlert(param1:Number, param2:Number) : void
		{
			alert_i5 = 1;
			while(alert_i5 < playerstotal)
			{
				if(mens[alert_i5] && (mens[alert_i5].stability >= 0.3))
				{
					if(!mens[alert_i5].isplayer)
					{
						if(mens[alert_i5].hea > 0 && mens[alert_i5].hunt == -1)
						{
							alert_tes = Dist2D(param1,param2,mens[alert_i5].x,mens[alert_i5].y);
							if(alert_tes < 250 || alert_tes < screenX && TraceLine(mens[alert_i5].x,Number(mens[alert_i5].y) - 40,param1,param2))
							{
								if(mens[alert_i5].x > param1)
								{
									mens[alert_i5].side = -1;
								}
								else
								{
									mens[alert_i5].side = 1;
								}
								if(mens[alert_i5].botaction == 0)
								{
									mens[alert_i5].botaction = 3;
								}
							}
						}
					}
				}
				++alert_i5;
			}
		}
		
		public function UpdateAtomPathCache() : void
		{
			var _loc1_:* = undefined;
			var _loc2_:* = undefined;
			var _loc3_:* = undefined;
			var _loc4_:* = undefined;
			var _loc5_:* = undefined;
			_loc1_ = getTimer();
			_loc2_ = 0;
			while(_loc2_ < atotal)
			{
				_loc3_ = atom_pos_buffer[_loc2_];
				_loc4_ = ax[_loc2_];
				_loc5_ = ay[_loc2_];
				if(_loc3_ == undefined || _loc1_ > _loc3_.tim + 200 || Dist2D(_loc3_.x,_loc3_.y,_loc4_,_loc5_) > 250)
				{
					atom_pos_buffer[_loc2_] = _loc3_ = {
						"x":_loc4_,
						"y":_loc5_,
						"lx":_loc4_,
						"ly":_loc5_,
						"t":_loc1_
					};
				}
				else
				{
					_loc3_.lx = _loc3_.x;
					_loc3_.ly = _loc3_.y;
					_loc3_.x = _loc4_;
					_loc3_.y = _loc5_;
					_loc3_.tim = _loc1_;
				}
				_loc2_++;
			}
		}
		
		public function CheckHit(param1:int, param2:int) : Boolean
		{
			var _loc3_:* = undefined;
			_loc3_ = atom_pos_buffer[param2];
			if(_loc3_ == undefined)
			{
				return false;
			}
			pb2Bullet.csolver_lx = puls[param1].lx;
			pb2Bullet.csolver_ly = puls[param1].ly;
			pb2Bullet.csolver_tox1 = Number(puls[param1].nx) - Number(puls[param1].lx);
			pb2Bullet.csolver_toy1 = Number(puls[param1].ny) - Number(puls[param1].ly);
			pb2Bullet.csolver_maxx = Math.max(puls[param1].lx,puls[param1].nx);
			pb2Bullet.csolver_minx = Math.min(puls[param1].lx,puls[param1].nx);
			pb2Bullet.csolver_maxy = Math.max(puls[param1].ly,puls[param1].ny);
			pb2Bullet.csolver_miny = Math.min(puls[param1].ly,puls[param1].ny);
			if(pb2Bullet.csolver_maxx + 0 < Math.min(Number(_loc3_.x) - Number(arad[param2]),Number(_loc3_.lx) - Number(arad[param2])))
			{
				return false;
			}
			if(Number(pb2Bullet.csolver_minx) - 0 > Math.max(_loc3_.x + arad[param2],_loc3_.lx + arad[param2]))
			{
				return false;
			}
			if(pb2Bullet.csolver_maxy + 0 < Math.min(Number(_loc3_.y) - Number(arad[param2]),Number(_loc3_.ly) - Number(arad[param2])))
			{
				return false;
			}
			if(Number(pb2Bullet.csolver_miny) - 0 > Math.max(_loc3_.y + arad[param2],_loc3_.ly + arad[param2]))
			{
				return false;
			}
			return pb2Bullet._MovingSphereIntersection(_loc3_.x,_loc3_.y,_loc3_.lx,_loc3_.ly,arad[param2]);
		}
		
		public function TraceLine(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
		{
			if (DRAW_TRACE_LINES) {
				line_screen.graphics.lineStyle(1.5, 0x7F7F7F);
				line_screen.graphics.moveTo(param1, param2);
				line_screen.graphics.lineTo(param3, param4);
			}
			for(tracer_i4 = 0; tracer_i4 < boxestotal + doorstotal; ++tracer_i4)
			{
				if(tracer_i4 < boxestotal)
				{
					a_rectangleMinX = boxx[tracer_i4];
					a_rectangleMinY = boxy[tracer_i4];
					a_rectangleMaxX = boxx[tracer_i4] + boxw[tracer_i4];
					a_rectangleMaxY = boxy[tracer_i4] + boxh[tracer_i4];
				}
				else
				{
					a_rectangleMinX = doors[tracer_i4 - boxestotal].x;
					a_rectangleMinY = doors[tracer_i4 - boxestotal].y;
					a_rectangleMaxX = doors[tracer_i4 - boxestotal].x + doors[tracer_i4 - boxestotal].w;
					a_rectangleMaxY = doors[tracer_i4 - boxestotal].y + doors[tracer_i4 - boxestotal].h;
				}
				if(param1 < a_rectangleMinX)
				{
					if(param3 < a_rectangleMinX)
					{
						continue;
					}
				}
				if(param1 > a_rectangleMaxX)
				{
					if(param3 > a_rectangleMaxX)
					{
						continue;
					}
				}
				if(param2 < a_rectangleMinY)
				{
					if(param4 < a_rectangleMinY)
					{
						continue;
					}
				}
				if(param2 > a_rectangleMaxY)
				{
					if(param4 > a_rectangleMaxY)
					{
						continue;
					}
				}
				if(param1 > param3)
				{
					minX = param3;
					maxX = param1;
				}
				else
				{
					minX = param1;
					maxX = param3;
				}
				if(maxX > a_rectangleMaxX)
				{
					maxX = a_rectangleMaxX;
				}
				if(minX < a_rectangleMinX)
				{
					minX = a_rectangleMinX;
				}
				minY = param2;
				maxY = param4;
				dx = param3 - param1;
				if(Math_abs(dx) > 1e-7)
				{
					var a:Number = (param4 - param2) / dx;
					b = param2 - Number(a) * param1;
					minY = Number(a) * minX + b;
					maxY = Number(a) * maxX + b;
				}
				if(minY > maxY)
				{
					tmp2 = maxY;
					maxY = minY;
					minY = tmp2;
				}
				if(maxY > a_rectangleMaxY)
				{
					maxY = a_rectangleMaxY;
				}
				if(minY < a_rectangleMinY)
				{
					minY = a_rectangleMinY;
				}
				if(minX <= maxX)
				{
					if(minY <= maxY)
					{
						return false;
					}
				}
			}
			tracer_i4 = 0;
			for(; tracer_i4 < atotal; ++tracer_i4)
			{
				if(aio[tracer_i4] != -1)
				{
					if(arad[tracer_i4] > 40)
					{
						if(aof[tracer_i4] <= -200 && aof[tracer_i4] > -300 && Boolean(vehicles[-200 - Number(aof[tracer_i4])].dead))
						{
							if(vehicles[-200 - Number(aof[tracer_i4])].io)
							{
								a_rectangleMinX = Number(ax[tracer_i4]) - Number(arad[tracer_i4]);
								if(param1 < a_rectangleMinX)
								{
									if(param3 < a_rectangleMinX)
									{
										continue;
									}
								}
								a_rectangleMaxX = ax[tracer_i4] + arad[tracer_i4];
								if(param1 > a_rectangleMaxX)
								{
									if(param3 > a_rectangleMaxX)
									{
										continue;
									}
								}
								a_rectangleMinY = Number(ay[tracer_i4]) - Number(arad[tracer_i4]);
								if(param2 < a_rectangleMinY)
								{
									if(param4 < a_rectangleMinY)
									{
										continue;
									}
								}
								a_rectangleMaxY = ay[tracer_i4] + arad[tracer_i4];
								if(param2 > a_rectangleMaxY)
								{
									if(param4 > a_rectangleMaxY)
									{
										continue;
									}
								}
								if(param1 > param3)
								{
									minX = param3;
									maxX = param1;
								}
								else
								{
									minX = param1;
									maxX = param3;
								}
								if(maxX > a_rectangleMaxX)
								{
									maxX = a_rectangleMaxX;
								}
								if(minX < a_rectangleMinX)
								{
									minX = a_rectangleMinX;
								}
								minY = param2;
								maxY = param4;
								dx = param3 - param1;
								if(Math_abs(dx) > 1e-7)
								{
									a = (param4 - param2) / dx;
									b = param2 - Number(a) * param1;
									minY = Number(a) * minX + b;
									maxY = Number(a) * maxX + b;
								}
								if(minY > maxY)
								{
									tmp2 = maxY;
									maxY = minY;
									minY = tmp2;
								}
								if(maxY > a_rectangleMaxY)
								{
									maxY = a_rectangleMaxY;
								}
								if(minY < a_rectangleMinY)
								{
									minY = a_rectangleMinY;
								}
								if(minX <= maxX)
								{
									if(minY <= maxY)
									{
										return false;
									}
								}
							}
						}
					}
				}
			}
			return true;
		}
		
		public function TraceLineF_nopushers(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
		{
			tracer_i4 = 0;
			for(; tracer_i4 < boxestotal + doorstotal; ++tracer_i4)
			{
				if(tracer_i4 < boxestotal)
				{
					a_rectangleMinX = boxx[tracer_i4];
					a_rectangleMinY = boxy[tracer_i4];
					a_rectangleMaxX = boxx[tracer_i4] + boxw[tracer_i4];
					a_rectangleMaxY = boxy[tracer_i4] + boxh[tracer_i4];
				}
				else
				{
					a_rectangleMinX = doors[tracer_i4 - boxestotal].x;
					a_rectangleMinY = doors[tracer_i4 - boxestotal].y;
					a_rectangleMaxX = doors[tracer_i4 - boxestotal].x + doors[tracer_i4 - boxestotal].w;
					a_rectangleMaxY = doors[tracer_i4 - boxestotal].y + doors[tracer_i4 - boxestotal].h;
				}
				if(param1 < a_rectangleMinX)
				{
					if(param3 < a_rectangleMinX)
					{
						continue;
					}
				}
				if(param1 > a_rectangleMaxX)
				{
					if(param3 > a_rectangleMaxX)
					{
						continue;
					}
				}
				if(param2 < a_rectangleMinY)
				{
					if(param4 < a_rectangleMinY)
					{
						continue;
					}
				}
				if(param2 > a_rectangleMaxY)
				{
					if(param4 > a_rectangleMaxY)
					{
						continue;
					}
				}
				if(param1 > param3)
				{
					minX = param3;
					maxX = param1;
				}
				else
				{
					minX = param1;
					maxX = param3;
				}
				if(maxX > a_rectangleMaxX)
				{
					maxX = a_rectangleMaxX;
				}
				if(minX < a_rectangleMinX)
				{
					minX = a_rectangleMinX;
				}
				minY = param2;
				maxY = param4;
				dx = param3 - param1;
				if(Math_abs(dx) > 1e-7)
				{
					var a:Number = (param4 - param2) / dx;
					b = param2 - Number(a) * param1;
					minY = Number(a) * minX + b;
					maxY = Number(a) * maxX + b;
				}
				if(minY > maxY)
				{
					tmp2 = maxY;
					maxY = minY;
					minY = tmp2;
				}
				if(maxY > a_rectangleMaxY)
				{
					maxY = a_rectangleMaxY;
				}
				if(minY < a_rectangleMinY)
				{
					minY = a_rectangleMinY;
				}
				if(minX <= maxX)
				{
					if(minY <= maxY)
					{
						return false;
					}
				}
			}
			return true;
		}
		
		public function TraceLineF(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
		{
			tracer_i4 = 0;
			for(; tracer_i4 < boxestotal + doorstotal + pushstotal; ++tracer_i4)
			{
				if(tracer_i4 < boxestotal)
				{
					a_rectangleMinX = boxx[tracer_i4];
					a_rectangleMinY = boxy[tracer_i4];
					a_rectangleMaxX = boxx[tracer_i4] + boxw[tracer_i4];
					a_rectangleMaxY = boxy[tracer_i4] + boxh[tracer_i4];
				}
				else if(tracer_i4 - boxestotal < doorstotal)
				{
					a_rectangleMinX = doors[tracer_i4 - boxestotal].x;
					a_rectangleMinY = doors[tracer_i4 - boxestotal].y;
					a_rectangleMaxX = doors[tracer_i4 - boxestotal].x + doors[tracer_i4 - boxestotal].w;
					a_rectangleMaxY = doors[tracer_i4 - boxestotal].y + doors[tracer_i4 - boxestotal].h;
				}
				else
				{
					a_rectangleMinX = pushx[tracer_i4 - boxestotal - doorstotal];
					a_rectangleMinY = pushy[tracer_i4 - boxestotal - doorstotal];
					a_rectangleMaxX = pushw[tracer_i4 - boxestotal - doorstotal];
					a_rectangleMaxY = pushh[tracer_i4 - boxestotal - doorstotal];
				}
				if(param1 < a_rectangleMinX)
				{
					if(param3 < a_rectangleMinX)
					{
						continue;
					}
				}
				if(param1 > a_rectangleMaxX)
				{
					if(param3 > a_rectangleMaxX)
					{
						continue;
					}
				}
				if(param2 < a_rectangleMinY)
				{
					if(param4 < a_rectangleMinY)
					{
						continue;
					}
				}
				if(param2 > a_rectangleMaxY)
				{
					if(param4 > a_rectangleMaxY)
					{
						continue;
					}
				}
				if(param1 > param3)
				{
					minX = param3;
					maxX = param1;
				}
				else
				{
					minX = param1;
					maxX = param3;
				}
				if(maxX > a_rectangleMaxX)
				{
					maxX = a_rectangleMaxX;
				}
				if(minX < a_rectangleMinX)
				{
					minX = a_rectangleMinX;
				}
				minY = param2;
				maxY = param4;
				dx = param3 - param1;
				if(Math_abs(dx) > 1e-7)
				{
					var a:Number = (param4 - param2) / dx;
					b = param2 - Number(a) * param1;
					minY = Number(a) * minX + b;
					maxY = Number(a) * maxX + b;
				}
				if(minY > maxY)
				{
					tmp2 = maxY;
					maxY = minY;
					minY = tmp2;
				}
				if(maxY > a_rectangleMaxY)
				{
					maxY = a_rectangleMaxY;
				}
				if(minY < a_rectangleMinY)
				{
					minY = a_rectangleMinY;
				}
				if(minX <= maxX)
				{
					if(minY <= maxY)
					{
						return false;
					}
				}
			}
			return true;
		}
		
		public function TraceLine_no_doors(param1:Number, param2:Number, param3:Number, param4:Number) : Boolean
		{
			tracer_i4 = 0;
			for(; tracer_i4 < boxestotal; ++tracer_i4)
			{
				a_rectangleMinX = boxx[tracer_i4];
				if(param1 < a_rectangleMinX)
				{
					if(param3 < a_rectangleMinX)
					{
						continue;
					}
				}
				a_rectangleMaxX = boxx[tracer_i4] + boxw[tracer_i4];
				if(param1 > a_rectangleMaxX)
				{
					if(param3 > a_rectangleMaxX)
					{
						continue;
					}
				}
				a_rectangleMinY = boxy[tracer_i4];
				if(param2 < a_rectangleMinY)
				{
					if(param4 < a_rectangleMinY)
					{
						continue;
					}
				}
				a_rectangleMaxY = boxy[tracer_i4] + boxh[tracer_i4];
				if(param2 > a_rectangleMaxY)
				{
					if(param4 > a_rectangleMaxY)
					{
						continue;
					}
				}
				if(param1 > param3)
				{
					minX = param3;
					maxX = param1;
				}
				else
				{
					minX = param1;
					maxX = param3;
				}
				if(maxX > a_rectangleMaxX)
				{
					maxX = a_rectangleMaxX;
				}
				if(minX < a_rectangleMinX)
				{
					minX = a_rectangleMinX;
				}
				minY = param2;
				maxY = param4;
				dx = param3 - param1;
				if(Math_abs(dx) > 1e-7)
				{
					var a:Number = (param4 - param2) / dx;
					b = param2 - Number(a) * param1;
					minY = Number(a) * minX + b;
					maxY = Number(a) * maxX + b;
				}
				if(minY > maxY)
				{
					tmp2 = maxY;
					maxY = minY;
					minY = tmp2;
				}
				if(maxY > a_rectangleMaxY)
				{
					maxY = a_rectangleMaxY;
				}
				if(minY < a_rectangleMinY)
				{
					minY = a_rectangleMinY;
				}
				if(minX <= maxX)
				{
					if(minY <= maxY)
					{
						return false;
					}
				}
			}
			return true;
		}

		public function TraceLinePlayer(ignore:int, x1:Number, y1:Number, x2:Number, y2:Number) : Boolean
		{
			for(tracer_i4 = 0; tracer_i4 < playerstotal; tracer_i4++)
			{
				if (tracer_i4 == ignore || !mens[tracer_i4].visible) continue;
				a_rectangleMinX = Number(mens[tracer_i4].x) - 30;
				a_rectangleMinY = Number(mens[tracer_i4].y) - 102;
				a_rectangleMaxX = Number(mens[tracer_i4].x) + 30;
				a_rectangleMaxY = Number(mens[tracer_i4].y) + 50 - sitmax * Number(mens[tracer_i4].sit);

				if((x1 < a_rectangleMinX) && (x2 < a_rectangleMinX)) continue;
				if((x1 > a_rectangleMaxX) && (x2 > a_rectangleMaxX)) continue;
				if((y1 < a_rectangleMinY) && (y2 < a_rectangleMinY)) continue;
				if((y1 > a_rectangleMaxY) && (y2 > a_rectangleMaxY)) continue;
				if(x1 > x2)
				{
					minX = x2;
					maxX = x1;
				}
				else
				{
					minX = x1;
					maxX = x2;
				}
				if(maxX > a_rectangleMaxX) maxX = a_rectangleMaxX;
				if(minX < a_rectangleMinX) minX = a_rectangleMinX;
				minY = y1;
				maxY = y2;
				dx = x2 - x1;
				if(Math_abs(dx) > 1e-7)
				{
					var a:Number = (y2 - y1) / dx;
					b = y1 - Number(a) * x1;
					minY = Number(a) * minX + b;
					maxY = Number(a) * maxX + b;
				}
				if(minY > maxY)
				{
					tmp2 = maxY;
					maxY = minY;
					minY = tmp2;
				}
				if(maxY > a_rectangleMaxY) maxY = a_rectangleMaxY;
				if(minY < a_rectangleMinY) minY = a_rectangleMinY;

				if((minX <= maxX) && (minY <= maxY)) return false;
			}
			return true;
		}	

		public function TraceAllyLine(param1:int, param2:Number, param3:Number, param4:Number, param5:Number) : Boolean
		{
			
			if (DRAW_TRACE_LINES) {
				line_screen.graphics.lineStyle(2, 0x00FF00);
				line_screen.graphics.moveTo(param2, param3);
				line_screen.graphics.lineTo(param4, param5);
			}
			for(tracer_i4 = 0; tracer_i4 < playerstotal; ++tracer_i4)
			{
				if (!mens[tracer_i4]) continue;
				if(tracer_i4 != param1)
				{
					if(mens[param1].team == mens[tracer_i4].team && mens[param1].team != 0 && !PRO_BOTS)
					{
						if(tracer_i4 != mens[param1].hunt)
						{
							if(param1 != mens[tracer_i4].hunt)
							{
								if(!mens[tracer_i4].dying)
								{
									a_rectangleMinX = Number(mens[tracer_i4].x) - Math.abs(mens[tracer_i4].tox) - 10 - 20;
									a_rectangleMinY = Number(mens[tracer_i4].y) - Math.abs(mens[tracer_i4].toy) - 82 - 20;
									a_rectangleMaxX = mens[tracer_i4].x + Math.abs(mens[tracer_i4].tox) + 10 + 20;
									a_rectangleMaxY = mens[tracer_i4].y + Math.abs(mens[tracer_i4].toy) - Number(mens[tracer_i4].sit) * sitmax + 50;
									if(param2 < a_rectangleMinX)
									{
										if(param4 < a_rectangleMinX)
										{
											continue;
										}
									}
									if(param2 > a_rectangleMaxX)
									{
										if(param4 > a_rectangleMaxX)
										{
											continue;
										}
									}
									if(param3 < a_rectangleMinY)
									{
										if(param5 < a_rectangleMinY)
										{
											continue;
										}
									}
									if(param3 > a_rectangleMaxY)
									{
										if(param5 > a_rectangleMaxY)
										{
											continue;
										}
									}
									if(param2 > param4)
									{
										minX = param4;
										maxX = param2;
									}
									else
									{
										minX = param2;
										maxX = param4;
									}
									if(maxX > a_rectangleMaxX)
									{
										maxX = a_rectangleMaxX;
									}
									if(minX < a_rectangleMinX)
									{
										minX = a_rectangleMinX;
									}
									minY = param3;
									maxY = param5;
									dx = param4 - param2;
									if(Math_abs(dx) > 1e-7)
									{
										var a:Number = (param5 - param3) / dx;
										b = param3 - Number(a) * param2;
										minY = Number(a) * minX + b;
										maxY = Number(a) * maxX + b;
									}
									if(minY > maxY)
									{
										tmp2 = maxY;
										maxY = minY;
										minY = tmp2;
									}
									if(maxY > a_rectangleMaxY)
									{
										maxY = a_rectangleMaxY;
									}
									if(minY < a_rectangleMinY)
									{
										minY = a_rectangleMinY;
									}
									if(minX <= maxX)
									{
										if(minY <= maxY)
										{
											return false;
										}
									}
								}
							}
						}
					}
				}
			}
			for(tracer_i4 = 0; tracer_i4 < barrelstotal; ++tracer_i4)
			{
				tracer_ok = false;
				tracer_i5 = 0;
				while(tracer_i5 < playerstotal && !tracer_ok)
				{
					if(mens[tracer_i5] && mens[tracer_i5].io)
					{
						if(mens[param1].team == mens[tracer_i5].team && mens[param1].team != 0)
						{
							if(tracer_i5 != mens[param1].hunt)
							{
								if(param1 != mens[tracer_i5].hunt)
								{
									if(!mens[tracer_i5].dying)
									{
										if(Dist2D(mens[tracer_i5].x,mens[tracer_i5].y,barrels[tracer_i4].x,barrels[tracer_i4].y) < 150)
										{
											tracer_ok = true;
										}
									}
								}
							}
						}
					}
					++tracer_i5;
				}
				if(tracer_ok)
				{
					if(barrels[tracer_i4].hea > 0)
					{
						a_rectangleMinX = Number(barrels[tracer_i4].x) - 30;
						a_rectangleMinY = Number(barrels[tracer_i4].y) - 30;
						a_rectangleMaxX = barrels[tracer_i4].x + 30;
						a_rectangleMaxY = barrels[tracer_i4].y + 30;
						if(param2 < a_rectangleMinX)
						{
							if(param4 < a_rectangleMinX)
							{
								continue;
							}
						}
						if(param2 > a_rectangleMaxX)
						{
							if(param4 > a_rectangleMaxX)
							{
								continue;
							}
						}
						if(param3 < a_rectangleMinY)
						{
							if(param5 < a_rectangleMinY)
							{
								continue;
							}
						}
						if(param3 > a_rectangleMaxY)
						{
							if(param5 > a_rectangleMaxY)
							{
								continue;
							}
						}
						if(param2 > param4)
						{
							minX = param4;
							maxX = param2;
						}
						else
						{
							minX = param2;
							maxX = param4;
						}
						if(maxX > a_rectangleMaxX)
						{
							maxX = a_rectangleMaxX;
						}
						if(minX < a_rectangleMinX)
						{
							minX = a_rectangleMinX;
						}
						minY = param3;
						maxY = param5;
						dx = param4 - param2;
						if(Math_abs(dx) > 1e-7)
						{
							a = (param5 - param3) / dx;
							b = param3 - Number(a) * param2;
							minY = Number(a) * minX + b;
							maxY = Number(a) * maxX + b;
						}
						if(minY > maxY)
						{
							tmp2 = maxY;
							maxY = minY;
							minY = tmp2;
						}
						if(maxY > a_rectangleMaxY)
						{
							maxY = a_rectangleMaxY;
						}
						if(minY < a_rectangleMinY)
						{
							minY = a_rectangleMinY;
						}
						if(minX <= maxX)
						{
							if(minY <= maxY)
							{
								return false;
							}
						}
					}
				}
			}
			return true;
		}
		
		public function UpdateCurGun() : void
		{
			if(mens[MP_myid].char == 1 || mens[MP_myid].char >= 40 && mens[MP_myid].char <= 49)
			{
				if(mens[MP_myid].curwea > 0)
				{
					curA = guns[mens[MP_myid].curwea].model;
				}
				else
				{
					curA = "swords";
				}
			}
			if(mens[MP_myid].char == 3)
			{
				if(mens[MP_myid].curwea > 0)
				{
					curB = guns[mens[MP_myid].curwea].model;
				}
				else
				{
					curB = "swords";
				}
			}
		}
		
		public function CheckCross(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:int) : Boolean
		{
			if(DEBUG_MODE)
			{
				debug_screen.graphics.lineStyle(4,0);
				debug_screen.graphics.moveTo(param1,param2);
				debug_screen.graphics.lineTo(param3,param4);
				debug_screen.graphics.moveTo(param5,param6);
				debug_screen.graphics.lineTo(param7,param8);
				debug_screen.graphics.lineStyle(2,85);
				debug_screen.graphics.moveTo(param1,param2);
				debug_screen.graphics.lineTo(param3,param4);
				debug_screen.graphics.moveTo(param5,param6);
				debug_screen.graphics.lineTo(param7,param8);
			}
			v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
			retux = param5 + (param7 - param5) * v;
			retuy = param6 + (param8 - param6) * v;
			if((param3 < param1 ? param3 : param1) - 1 <= retux)
			{
				if((param3 > param1 ? param3 : param1) + 1 >= retux)
				{
					if((param4 < param2 ? param4 : param2) - 1 <= retuy)
					{
						if((param4 > param2 ? param4 : param2) + 1 >= retuy)
						{
							if((param5 < param7 ? param5 : param7) - 1 <= retux)
							{
								if((param5 > param7 ? param5 : param7) + 1 >= retux)
								{
									if((param6 < param8 ? param6 : param8) - 1 <= retuy)
									{
										if((param6 > param8 ? param6 : param8) + 1 >= retuy)
										{
											if(DEBUG_MODE)
											{
												debug_screen.graphics.lineStyle(4,0);
												debug_screen.graphics.moveTo(param1,param2);
												debug_screen.graphics.lineTo(param3,param4);
												debug_screen.graphics.moveTo(param5,param6);
												debug_screen.graphics.lineTo(param7,param8);
												debug_screen.graphics.lineStyle(2,255);
												debug_screen.graphics.moveTo(param1,param2);
												debug_screen.graphics.lineTo(param3,param4);
												debug_screen.graphics.moveTo(param5,param6);
												debug_screen.graphics.lineTo(param7,param8);
											}
											return true;
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		public function CheckCrossSimple(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
		{
			v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
			retux = param5 + (param7 - param5) * v;
			retuy = param6 + (param8 - param6) * v;
			if((param3 < param1 ? param3 : param1) - 1 <= retux)
			{
				if((param3 > param1 ? param3 : param1) + 1 >= retux)
				{
					if((param4 < param2 ? param4 : param2) - 1 <= retuy)
					{
						if((param4 > param2 ? param4 : param2) + 1 >= retuy)
						{
							if((param5 < param7 ? param5 : param7) - 1 <= retux)
							{
								if((param5 > param7 ? param5 : param7) + 1 >= retux)
								{
									if((param6 < param8 ? param6 : param8) - 1 <= retuy)
									{
										if((param6 > param8 ? param6 : param8) + 1 >= retuy)
										{
											return true;
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		public function CheckCrossSimpleOpti(param1:Number, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number) : Boolean
		{
			if((param1 > param3 ? param1 : param3) >= (param5 < param7 ? param5 : param7))
			{
				if((param1 < param3 ? param1 : param3) <= (param5 > param7 ? param5 : param7))
				{
					if((param2 > param4 ? param2 : param4) >= (param6 < param8 ? param6 : param8))
					{
						if((param2 < param4 ? param2 : param4) <= (param6 > param8 ? param6 : param8))
						{
							v = ((param1 - param3) * (param6 - param4) + (param2 - param4) * (param3 - param5)) / ((param2 - param4) * (param7 - param5) - (param1 - param3) * (param8 - param6));
							retux = param5 + (param7 - param5) * v;
							retuy = param6 + (param8 - param6) * v;
							if((param3 < param1 ? param3 : param1) - 1 <= retux)
							{
								if((param3 > param1 ? param3 : param1) + 1 >= retux)
								{
									if((param4 < param2 ? param4 : param2) - 1 <= retuy)
									{
										if((param4 > param2 ? param4 : param2) + 1 >= retuy)
										{
											if((param5 < param7 ? param5 : param7) - 1 <= retux)
											{
												if((param5 > param7 ? param5 : param7) + 1 >= retux)
												{
													if((param6 < param8 ? param6 : param8) - 1 <= retuy)
													{
														if((param6 > param8 ? param6 : param8) + 1 >= retuy)
														{
															return true;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return false;
		}
		
		public function TracePoint(param1:Number, param2:Number) : Boolean
		{
			for each(i2 in GetNearBoxBSP_at(param1,param2))
			{
				if(param1 >= boxx[i2])
				{
					if(param1 <= boxx[i2] + boxw[i2])
					{
						if(param2 >= boxy[i2])
						{
							if(param2 <= boxy[i2] + boxh[i2])
							{
								return false;
							}
						}
					}
				}
			}
			i2 = 0;
			while(i2 < doorstotal)
			{
				if(param1 >= doors[i2].x)
				{
					if(param1 <= doors[i2].x + doors[i2].w)
					{
						if(param2 >= doors[i2].y)
						{
							if(param2 <= doors[i2].y + doors[i2].h)
							{
								return false;
							}
						}
					}
				}
				++i2;
			}
			if(RAGDOLL_COLLIDE)
			{
				i2 = 0;
				while(i2 < atotal)
				{
					if(arad[i2] > 5)
					{
						if(aio[i2] == true || aio[i2] == false)
						{
							if(param1 > Number(ax[i2]) - Number(arad[i2]))
							{
								if(param1 < ax[i2] + arad[i2])
								{
									if(param2 > Number(ay[i2]) - Number(arad[i2]))
									{
										if(param2 < ay[i2] + arad[i2])
										{
											return false;
										}
									}
								}
							}
						}
					}
					++i2;
				}
			}
			return true;
		}
		
		public function TracePointOnlyBoxes(param1:Number, param2:Number) : Boolean
		{
			for each(tracep in GetNearBoxBSP_at(param1,param2))
			{
				if(param1 >= boxx[tracep])
				{
					if(param1 <= boxx[tracep] + boxw[tracep])
					{
						if(param2 >= boxy[tracep])
						{
							if(param2 <= boxy[tracep] + boxh[tracep])
							{
								return false;
							}
						}
					}
				}
			}
			return true;
		}
		
		public function TracePointNoRagdolls(param1:Number, param2:Number) : Boolean
		{
			for each(i3 in GetNearBoxBSP_at(param1,param2))
			{
				if(param1 >= boxx[i3])
				{
					if(param1 <= boxx[i3] + boxw[i3])
					{
						if(param2 >= boxy[i3])
						{
							if(param2 <= boxy[i3] + boxh[i3])
							{
								return false;
							}
						}
					}
				}
			}
			i3 = 0;
			while(i3 < doorstotal)
			{
				if(param1 >= doors[i3].x)
				{
					if(param1 <= doors[i3].x + doors[i3].w)
					{
						if(param2 >= doors[i3].y)
						{
							if(param2 <= doors[i3].y + doors[i3].h)
							{
								return false;
							}
						}
					}
				}
				++i3;
			}
			return true;
		}
		
		public function RedrawPsi(player_id:int) : void
		{
			var player_mc:player = mens[player_id];
			if(player_mc.notspawned)
			{
				return;
			}
			if(player_id >= 0)
			{
				if(player_mc.hea > 0)
				{
					if(player_mc.curwea == -1)
					{
						// Override default PSI swords.
						if(EASY_MODE && player_mc.team != mens[MP_myid].team && player_mc.dying || NO_PSI || player_mc.no_psi)
						{
							player_mc.arm1.lower.psi.visible = false;
							player_mc.arm2.lower.psi.visible = false;
						}
						else
						{
							player_mc.arm1.lower.psi.gotoAndStop(player_mc.mdl_psi1);
							player_mc.arm2.lower.psi.gotoAndStop(player_mc.mdl_psi2);
							player_mc.arm1.lower.psi.visible = true;
							player_mc.arm2.lower.psi.visible = true;
						}
					}
					else
					{
						player_mc.arm1.lower.psi.visible = false;
						player_mc.arm2.lower.psi.visible = false;
					}
				}
				else
				{
					player_mc.arm1.lower.psi.visible = false;
					player_mc.arm2.lower.psi.visible = false;
				}
				player_mc.head.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.head.scaleY = player_mc.scale;
				player_mc.body.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.body.scaleY = player_mc.scale;
				player_mc.arm1.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.arm1.scaleY = player_mc.scale;
				player_mc.arm2.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.arm2.scaleY = player_mc.scale;
				player_mc.leg1.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.leg1.scaleY = player_mc.scale;
				player_mc.leg2.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.leg2.scaleY = player_mc.scale;
				player_mc.toe.scaleX = Number(player_mc.side) * Number(player_mc.scale);
				player_mc.toe.scaleY = player_mc.scale;
			}
		}
		
		public function ChangedGun(player_id:int) : void
		{
			if(player_id >= 0)
			{
				if(mens[player_id].hea > 0)
				{
					mens[player_id].wep_pause = 1;
					if(player_id == MP_myid)
					{
						UpdateWeps();
					}
				}
				RedrawPsi(player_id);
			}
		}
		
		public function ChatNewMsg(textElement:String) : void
		{
			if(textElement.toLowerCase().indexOf("<img ") != -1 || textElement.toLowerCase().indexOf("<a ") != -1)
			{
				textElement = "&lt; Unsupported tag in message &gt;";
			}
			chat_i2 = 0;
			chat_i = 1;
			while(chat_i < 11)
			{
				if(gamechatbox2["item" + chat_i].y < gamechatbox2["item" + chat_i2].y)
				{
					chat_i2 = chat_i;
				}
				++chat_i;
			}
			chat_i3 = 0;
			chat_i = 1;
			while(chat_i < 11)
			{
				if(gamechatbox2["item" + chat_i].y > gamechatbox2["item" + chat_i3].y)
				{
					chat_i3 = chat_i;
				}
				++chat_i;
			}
			gamechatbox2["item" + chat_i2].y = gamechatbox2["item" + chat_i3].y + 19;
			gamechatbox2["item" + chat_i2].visible = true;
			gamechatbox2["item" + chat_i2].alpha = 1;
			gamechatbox2["item" + chat_i2].timer = 300;
			gamechatbox2["item" + chat_i2].txt.htmlText = "<b>" + textElement + "</b>";
			if(gamechatbox2["item" + chat_i2].y > 38)
			{
				chat_xx = gamechatbox2["item" + chat_i2].y;
				chat_i = 0;
				while(chat_i < 11)
				{
					gamechatbox2["item" + chat_i].y -= chat_xx;
					++chat_i;
				}
			}
		}
		
		public function CompressChat() : void
		{
			if(gamechatbox_text.length > 200)
			{
				if(gamechatbox_text.lastIndexOf("<br>",gamechatbox_text.length - 200) != -1)
				{
					gamechatbox_text = gamechatbox_text.slice(gamechatbox_text.lastIndexOf("<br>",gamechatbox_text.length - 200),gamechatbox_text.length);
				}
			}
		}
		
		public function GotoMap(param1:String) : void
		{
			NextMapTemp = param1;
			CUR_LOADING = param1;
			mupd.visible = true;
			mupd.ttt.gotoAndPlay(1);
			if(CACHED_MAPS[CUR_LOADING] != undefined)
			{
				UseLoadedMapData(CACHED_MAPS[CUR_LOADING]);
			}
			else
			{
				myRequest = new URLRequest(MP_server);
				myVariables = new URLVariables();
				myVariables.l = def_login;
				myVariables.p = def_password;
				myVariables.rq = "cmap";
				myVariables.cmap = param1;
				myVariables.qpack = "1.0";
				if(DEBUG_MODE)
				{
				}
				myRequest.method = URLRequestMethod.POST;
				myRequest.data = myVariables;
				myLoader.addEventListener(Event.COMPLETE,GotoMap_done);
				myLoader.addEventListener(IOErrorEvent.IO_ERROR,GotoMap_failed);
				myLoader.load(myRequest);
			}
		}
		
		public function GotoMap_failed(param1:IOErrorEvent) : void
		{
			myLoader.removeEventListener(Event.COMPLETE,GotoMap_done);
			myLoader.removeEventListener(IOErrorEvent.IO_ERROR,GotoMap_failed);
			if(currentLabel == "difch" || currentLabel == "menu")
			{
				if(DEBUG_MODE)
				{
				}
				++GET_TRIES;
				if(GET_TRIES < 3)
				{
					GotoMap(NextMapTemp);
				}
				else if(CACHED_MAPS[CUR_LOADING] != undefined)
				{
					UseLoadedMapData(CACHED_MAPS[CUR_LOADING]);
				}
				else if(GET_TRIES < 15)
				{
					GotoMap(NextMapTemp);
				}
				else
				{
					mupd.visible = false;
					mupd.ttt.gotoAndStop(1);
				}
			}
		}
		
		public function GotoMap_done(param1:Event) : void
		{
			myLoader.removeEventListener(Event.COMPLETE,GotoMap_done);
			myLoader.removeEventListener(IOErrorEvent.IO_ERROR,GotoMap_failed);
			if(myLoader.data == "<not_published />")
			{
				LAST_ERROR = "Map is not published";
				DropGameTimer();
				gotoAndStop("menu");
			}
			else
			{
				UseLoadedMapData(myLoader.data);
			}
		}
		
		public function UseLoadedMapData(param1:String) : void
		{
			if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits" || currentLabel == "gaming")
			{
				mapdata = param1;
				MP_mode = false;
				MP_myid = 0;
				MP_fps = 30;
				chat_lastid = -1;
				LEVEL_END_FORCE = "restart";
				darkness.visible = true;
				darkness.alpha = 1;
				if(currentLabel == "difch" || currentLabel == "menu" || currentLabel == "credits")
				{
					DropGameTimer();
					gotoAndStop("loading");
				}
			}
		}
		
		public function MP_attribute(param1:String, param2:String) : void
		{
			MP_send += "&" + param1 + "=" + param2;
		}
		
		public function MP_get() : void
		{
			var my_bullets:* = undefined;
			var i:* = undefined;
			var tr:* = undefined;
			var i3:int = 0;
			var i2:int = 0;
			try
			{
				if(MP_mode)
				{
					if(MP_spectator)
					{
						spawn = false;
					}
					if(spawn)
					{
						MP_waiting_for_answer = false;
						MP_attribute("tok", match_token);
						MP_attribute("room",MP_room);
						MP_attribute("myid",MP_myid.toString());
						MP_waiting_for_answer = true;
						MP_socket_send(MP_send);
					}
					else
					{
						MP_waiting_for_answer = false;
						if(!MP_spectator)
						{
							if(ENEMY_SENDER_master == MP_myid)
								{
								if(MP_gamestate == 0)
								{
									if(getTimer() > ENEMY_SENDER_last + 200)
									{
										if(!mens[ENEMY_SENDER_i].isplayer)
										{
											if(mens[ENEMY_SENDER_i].hea > 0)
											{
												MP_custom_events += ";e|" + MP_myid + "#" + ENEMY_SENDER_i + "#" + mens[ENEMY_SENDER_i].hea + "#" + Math.round(mens[ENEMY_SENDER_i].x) + "#" + Math.round(mens[ENEMY_SENDER_i].y) + "#" + Math.round(Number(mens[ENEMY_SENDER_i].tox) * 10) / 10 + "#" + Math.round(Number(mens[ENEMY_SENDER_i].toy) * 10) / 10 + "#" + Math.round(mens[ENEMY_SENDER_i].tarx) + "#" + Math.round(mens[ENEMY_SENDER_i].tary) + "#" + mens[ENEMY_SENDER_i].hunt + "#" + mens[ENEMY_SENDER_i].botaction;
											}
											else
											{
												MP_custom_events += ";e|" + MP_myid + "#" + ENEMY_SENDER_i + "#0";
											}
											ENEMY_SENDER_last = getTimer();
										}
										++ENEMY_SENDER_i;
										if(ENEMY_SENDER_i >= playerstotal) 
										{
											ENEMY_SENDER_i = 0;
										}
									}
								}
							}
							if(MP_favor_the_shooter)
							{
								if(MP_gamestate == 0)
								{
									my_bullets = [];
									i = 0;
									while(i <= pulsmax)
									{
										if(puls[i] != null)
										{
											if(puls[i].visible == true)
											{
												if(puls[i].master == MP_myid)
												{
													if(AllowExtraBulletClassSync(puls[i]))
													{
														my_bullets.push(puls[i]);
													}
												}
											}
										}
										i++;
									}
									if(my_bullets.length <= 5)
									{
										i = 0;
										while(i < my_bullets.length)
										{
											SyncBulletApprox(my_bullets[i]);
											i++;
										}
										MP_custom_events += ";ct|" + MP_myid;
									}
									else
									{
										tr = 0;
										while(tr < 5)
										{
											i = Math.floor(Math.random() * Number(my_bullets.length));
											SyncBulletApprox(my_bullets[i]);
											my_bullets.splice(i,1);
											tr++;
										}
									}
								}
							}
							i = 0;
							while(i < MP_myspecials_total)
							{
								if(MP_myspecials[i].stat == 3)
								{
									i2 = int(MP_myspecials[i].atom);
									if(puls[MP_myspecials[i].pul] == null || puls[MP_myspecials[i].pul] == undefined || !puls[MP_myspecials[i].pul].visible)
									{
										MP_myspecials[i].stat = 0;
									}
									else
									{
										MP_custom_events += ";gm|" + MP_myspecials[i].id_in_full_list + "#" + ax[i2] + "#" + ay[i2] + "#" + atox[i2] + "#" + atoy[i2] + "#" + (!!puls[MP_myspecials[i].pul].notbliped ? "0" : "1") + "#" + (!!puls[MP_myspecials[i].pul].visible ? "0" : "1");
									}
								}
								i++;
							}
							_mp_ping_rl = Number(getTimer()) - MP_ping1;
							if(_mp_ping_rl > MP_pl)
							{
								MP_pbug += Math.min(_mp_ping_rl - MP_pl,100);
								if(mens[MP_myid].dead || mens[MP_myid].lastshotby == -1 || Number(getTimer()) - Number(mens[MP_myid].whenlastshot) > 7000)
								{
									if(MP_pbug > 350)
									{
										if(!MP_pwarn)
										{
											MP_pwarn = true;
											DialogSay("Your connection speed is too low for this match. This match allows only players with pings lower than " + MP_pl + " (your is " + _mp_ping_rl + ")","#FFFF00");
										}
										if(MP_pbug > 450)
										{
											if(!MP_force_disconnect)
											{
												DialogSay("Disconnected. This match allows only players with pings lower than " + MP_pl + " (your is " + _mp_ping_rl + ")","#FF0000");
												MP_force_disconnect = true;
											}
										}
									}
								}
							}
							else
							{
								MP_pbug -= MP_pl - _mp_ping_rl;
								if(MP_pbug < 0)
								{
									MP_pbug = 0;
									MP_pwarn = false;
								}
							}
						}
						if (TO_SEND_REFRESH) {
							MP_custom_events += ";refresh|";
							TO_SEND_REFRESH = false;
						}
						MP_ping1 = getTimer();
						MP_send = "rq=g";
						MP_attribute("tok", match_token);
						MP_attribute("ce",MP_custom_events);
						MP_custom_events = "";
						if(!MP_spectator)
						{
							MP_attribute("p",MP_ping2.toString());
							if(MP_app && (mens[MP_myid].char == 5 || mens[MP_myid].char == 10 || mens[MP_myid].char == 12))
							{
								stable = false;
								unstable = 7;
								MP_attribute("cc","2");
							}
							else
							{
								MP_attribute("cc",mens[MP_myid].char + "," + mens[MP_myid].palette.join(""));
							}
							if(mens[MP_myid].hea > 0)
							{
								MP_attribute("sb",(Math.round(Number(mens[MP_myid].stability) * 100) / 100).toString());
								MP_attribute("hn",mens[MP_myid].hunt.toString());
								if(mens[MP_myid].stability > 0)
								{
									MP_attribute("x",Math.round(mens[MP_myid].x).toString());
									MP_attribute("y",Math.round(mens[MP_myid].y).toString());
									MP_attribute("sx",(Math.round(Number(mens[MP_myid].tox) * 100) / 100).toString());
									MP_attribute("sy",(Math.round(Number(mens[MP_myid].toy) * 100) / 100).toString());
								}
								else
								{
									MP_attribute("x",Math.round(ax[mens[MP_myid].b_toe]).toString());
									MP_attribute("y",Math.round(ay[mens[MP_myid].b_toe]).toString());
									MP_attribute("sx",Math.round(atox[mens[MP_myid].b_toe]).toString());
									MP_attribute("sy",Math.round(atoy[mens[MP_myid].b_toe]).toString());
									MP_attribute("xb",Math.round(ax[mens[MP_myid].b_body]).toString());
									MP_attribute("yb",Math.round(ay[mens[MP_myid].b_body]).toString());
									MP_attribute("sxb",Math.round(atox[mens[MP_myid].b_body]).toString());
									MP_attribute("syb",Math.round(atoy[mens[MP_myid].b_body]).toString());
								}
								MP_attribute("ax",mens[MP_myid].act_movex.toString());
								MP_attribute("ay",mens[MP_myid].act_movey.toString());
								MP_attribute("af",mens[MP_myid].act_fall.toString());
								MP_attribute("ix",Math.round(mens[MP_myid].tarx).toString());
								MP_attribute("iy",Math.round(mens[MP_myid].tary).toString());
								MP_attribute("f",!!mens[MP_myid].act_fire ? "true" : "false");
								MP_attribute("cw",mens[MP_myid].curwea.toString());
								i3 = 0;
								i2 = 0;
								while(i2 < gunstotal)
								{
									if(guns[i2].picken_by == MP_myid)
									{
										if(guns[i2].wep != -2)
										{
											MP_attribute("g" + i3, i2.toString());
											i3++;
										}
									}
									i2++;
								}
								if(MP_last_linked != -1 && vehicles[MP_last_linked].master == MP_myid)
								{
									MP_attribute("ic",MP_last_linked.toString());
								}
								else
								{
									MP_attribute("ic",mens[MP_myid].incar.toString());
								}
							}
							else
							{
								MP_attribute("x",Math.round(ax[mens[MP_myid].b_toe]).toString());
								MP_attribute("y",Math.round(ay[mens[MP_myid].b_toe]).toString());
								MP_attribute("sx",Math.round(atox[mens[MP_myid].b_toe]).toString());
								MP_attribute("sy",Math.round(atoy[mens[MP_myid].b_toe]).toString());
								MP_attribute("xb",Math.round(ax[mens[MP_myid].b_body]).toString());
								MP_attribute("yb",Math.round(ay[mens[MP_myid].b_body]).toString());
								MP_attribute("sxb",Math.round(atox[mens[MP_myid].b_body]).toString());
								MP_attribute("syb",Math.round(atoy[mens[MP_myid].b_body]).toString());
							}
							MP_attribute("ha",Math.round(mens[MP_myid].hp_arms).toString());
							MP_attribute("hl",Math.round(mens[MP_myid].hp_legs).toString());
							MP_attribute("hb",Math.round(mens[MP_myid].hp_body).toString());
							MP_attribute("hh",Math.round(mens[MP_myid].hp_head).toString());
							MP_attribute("he",Math.round(mens[MP_myid].hea).toString());
							MP_attribute("t",mens[MP_myid].team.toString());
							MP_attribute("dy",mens[MP_myid].dying.toString());
							MP_attribute("ps",mens[MP_myid].no_psi.toString());
							MP_attribute("st",(Math.round(Number(mens[MP_myid].sit) * 100) / 100).toString());
							MP_attribute("nk", mens[MP_myid].nick);
						}
						MP_socket_send(MP_send);
						MP_waiting_for_answer = true;
					}
					ENTER_TICKED = false;
				}
			}
			catch(e:Error)
			{
				NetCodeError("GET " + e);
			}
		}
		
		public function NetCodeError(param1:String) : void
		{
			if(MP_nick == ".:Eric Gurt:.")
			{
				if(gamechatbox2 != null)
				{
					ChatNewMsg("Error: " + param1);
				}
			}
		}
		
		public function ArmBone(param1:MovieClip, param2:Number) : void
		{
			if(param2 < 30)
			{
				trans = param2 / 30;
				minus_trans = 1 - trans;
				param1.lower.x = -14.6 * minus_trans - 13.1 * trans;
				param1.lower.y = 3.5 * minus_trans + 7.5 * trans;
				param1.lower.rotation = -63.3 * minus_trans - 54.3 * trans;
				param1.upper.rotation = 61.3 * minus_trans + 42.3 * trans;
			}
			else
			{
				trans = param2 / 30 - 1;
				minus_trans = 1 - trans;
				param1.lower.x = -13.1 * minus_trans - 3.05 * trans;
				param1.lower.y = 7.5 * minus_trans + 13.7 * trans;
				param1.lower.rotation = -54.3 * minus_trans;
				param1.upper.rotation = 42.3 * minus_trans;
			}
		}
		
		public function LegBone(param1:MovieClip, param2:Number, param3:Boolean, param4:Boolean) : void
		{
			var _loc5_:Number = NaN;
			var _loc6_:Number = NaN;
			var _loc7_:Number = NaN;
			var _loc8_:Number = NaN;
			var _loc9_:Number = NaN;
			var _loc10_:Number = NaN;
			var _loc11_:Number = NaN;
			var _loc12_:Number = NaN;
			var _loc13_:Number = NaN;
			var _loc14_:Number = NaN;
			_loc5_ = 5.35;
			_loc6_ = 8.95;
			_loc7_ = 40.4;
			_loc8_ = 8.7;
			_loc9_ = 6.75;
			_loc10_ = 65;
			_loc11_ = 9.1;
			_loc12_ = 7.85;
			_loc13_ = 85.3;
			_loc14_ = 1;
			if(param3)
			{
				_loc5_ = -4.4;
				_loc6_ = 6.25;
				_loc7_ = -4.6;
				_loc8_ = -5;
				_loc9_ = 0.35;
				_loc10_ = -3.2;
				_loc11_ = -6.1;
				_loc12_ = 2.4;
				_loc13_ = -10.7;
				_loc14_ = -1;
			}
			if(param2 < 60)
			{
				trans = param2 / 60;
				minus_trans = 1 - trans;
				param1.lower.x = -8.35 * minus_trans - 7.9 * trans;
				param1.lower.y = 9.75 * minus_trans + 13.25 * trans;
				param1.lower.rotation = 3.4 * minus_trans + 14 * trans;
				param1.middle.x = _loc11_ * minus_trans + _loc8_ * trans;
				param1.middle.y = _loc12_ * minus_trans + _loc9_ * trans;
				param1.middle.rotation = _loc13_ * minus_trans + _loc10_ * trans;
				param1.upper.rotation = -55.4 * minus_trans * _loc14_ - 55.4 * trans * _loc14_;
			}
			else if(param2 < 90)
			{
				trans = param2 / 30 - 2;
				minus_trans = 1 - trans;
				param1.lower.x = -7.9 * minus_trans - 6.9 * trans;
				param1.lower.y = 13.25 * minus_trans + 20.75 * trans;
				param1.lower.rotation = 14 * minus_trans + 6.8 * trans;
				param1.middle.x = _loc8_ * minus_trans + _loc5_ * trans;
				param1.middle.y = _loc9_ * minus_trans + _loc6_ * trans;
				param1.middle.rotation = _loc10_ * minus_trans + _loc7_ * trans;
				param1.upper.rotation = -55.4 * minus_trans * _loc14_ - 39.4 * trans * _loc14_;
			}
			else
			{
				trans = param2 / 30 - 3;
				minus_trans = 1 - trans;
				param1.lower.x = -6.9 * minus_trans - 4.35 * trans;
				param1.lower.y = 20.75 * minus_trans + 29.95 * trans;
				param1.lower.rotation = 6.8 * minus_trans;
				param1.middle.x = _loc5_ * minus_trans - 0.3 * trans;
				param1.middle.y = _loc6_ * minus_trans + 14.1 * trans;
				param1.middle.rotation = _loc7_ * minus_trans + 6.3 * trans;
				param1.upper.rotation = 8.5 * trans - 39.4 * minus_trans * _loc14_;
			}
		}
		
		public function ResetPsychoBlood() : void
		{
			if(PSYCHOBLOOD_MODE == 1)
			{
				i4 = 0;
				while(i4 < 4)
				{
					if(_root["pb" + i4].visible)
					{
						_root["pb" + i4].alpha = 0;
						_root["pb" + i4].visible = false;
					}
					++i4;
				}
			}
			else if(PSYCHOBLOOD_MODE == 2)
			{
				i4 = 0;
				while(i4 < 5)
				{
					if(_root["pb" + i4].visible)
					{
						_root["pb" + i4].alpha = 0;
						_root["pb" + i4].visible = false;
					}
					++i4;
				}
			}
		}
		
		public function AnnoyPL(param1:int, param2:String) : void
		{
			if(MP_ping2 < 150)
			{
				--mens[param1].blames;
				if(mens[param1].blames <= 0)
				{
					MP_custom_events += ";votekich|" + param1 + "#" + MP_myid;
					mens[param1].blames = 100;
				}
			}
		}
		
		public function UpdateHeroList(player_id:int) : void
		{
			var player_data:Array;
			var player_mc:player;
			if(player_id == MP_myid)
			{
				return;
			}
			player_data = last_mp_param;
			player_mc = mens[player_id];
			if(player_data["p" + player_id + "nk"] != undefined)
			{
				if(player_mc.hea <= 0 && MP_type == 2 && MP_allow_leaderboard_details)
				{
					hero[player_id].f1.text = player_data["p" + player_id + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"") + " [ dead ]";
				}
				else
				{
					hero[player_id].f1.text = player_data["p" + player_id + "nk"].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("&lt;").join("<").split("&gt;").join(">").split("&quot;").join("\"");
				}
				if(hero[player_id].f1.text === "Empty")
				{
					hero[player_id].f1.text = "Empty ";
				}
			}
			else
			{
				hero[player_id].f1.text = "Empty";
			}
			if(player_data["p" + player_id + "nk"] != "Empty")
			{
				str = "Team " + String(player_mc.team + 1);
				if(player_mc.team == 0)
				{
					str = "Alpha";
				}
				if(player_mc.team == 1)
				{
					str = "Beta";
				}
				if(player_mc.team == 2)
				{
					str = "Gamma";
				}
				if(player_mc.team == 3)
				{
					str = "Delta";
				}
				if(player_mc.team == 4)
				{
					str = "Zeta";
				}
				if(player_mc.team == 5)
				{
					str = "Lambda";
				}
				if(player_mc.team == 6)
				{
					str = "Sigma";
				}
				if(player_mc.team == 7)
				{
					str = "Omega";
				}
				if(player_mc.team == 8)
				{
					str = "Counter-Terrorists";
				}
				if(player_mc.team == 9)
				{
					str = "Terrorists";
				}
				if(player_mc.team == 10)
				{
					str = "Usurpation Forces";
				}
				if(player_mc.team == 11)
				{
					str = "Civil Security";
				}
				if(player_mc.team == 12)
				{
					str = "Red Team";
				}
				if(player_mc.team == 13)
				{
					str = "Blue Team";
				}
				if(player_mc.team == 14)
				{
					str = "Green Team";
				}
				if(player_mc.team == 15)
				{
					str = "White Team";
				}
				if(player_mc.team == 16)
				{
					str = "Black Team";
				}
				if(MP_type == 1 || !MP_allow_leaderboard_details)
				{
					str = "";
				}
				hero[player_id].f2.text = str;
				if(player_data["p" + player_id + "k"] != undefined)
				{
					hero[player_id].f3.text = MP_allow_leaderboard_details ? player_data["p" + player_id + "k"] : "-";
				}
				if(player_data["p" + player_id + "dd"] != undefined)
				{
					hero[player_id].f4.text = MP_allow_leaderboard_details ? player_data["p" + player_id + "dd"] : "-";
				}
				if(player_data["p" + player_id + "p"] != undefined)
				{
					hero[player_id].f5.text = player_data["p" + player_id + "p"];
				}
				if(player_mc.team == mens[MP_myid].team && MP_allow_leaderboard_details)
				{
					if(hero[player_id].currentFrame != 3 + hero_list_frame_offset)
					{
						hero[player_id].gotoAndStop(3 + hero_list_frame_offset);
					}
				}
				else if(hero[player_id].currentFrame != 1 + hero_list_frame_offset)
				{
					hero[player_id].gotoAndStop(1 + hero_list_frame_offset);
				}
			}
		}
		
		public function MP_get_done(param1:String) : void
		{
			var mp_error_addr:int = 0;
			var MP_match_playerstotal:int = 0;
			var lmapch:Boolean = false;
			var mdl:Array = null;
			var old_nick:* = undefined;
			var allow_see_chat:Boolean = false;
			var victim:int = 0;
			var datafrom:int = 0;
			var special_object:Object = null;
			var pul_object:int = 0;
			var best_i:int = 0;
			var best_dist:Number = NaN;
			var tdist:Number = NaN;
			var i4:* = undefined;
			var detonate:Boolean = false;
			var best_i4:int = 0;
			var best_di:Number = NaN;
			var di:Number = NaN;
			var extra_msg_offset:int = 0;
			var map_author:String = null;
			var GOT:String = param1;
			mp_error_addr = 0;
			try
			{
				MP_get_done_HAP = false;
				if(MP_mode)
				{
					if(MP_waiting_for_answer)
					{
						if(!MP_force_disconnect)
						{
							MP_waiting_for_answer = false;
							MP_ping_last = getTimer();
							mp_error_addr = 1001;
							if(herolist.visible)
							{
								if(!MP_spectator)
								{
									i = MP_myid;
									hero[i].f3.text = MP_kills;
									hero[i].f4.text = MP_deaths;
									hero[i].f5.text = MP_ping2;
								}
								xx = Math.floor((Number(getTimer()) - TIME_PLAYED_MULTI) / 1000);
								i4 = Math.floor(xx / 60 / 60);
								i3 = Math.floor(xx / 60 - i4 * 60);
								i2 = Math.floor(xx - i3 * 60 - i4 * 60 * 60);
								temp_str = "";
								temp = i4;
								if(i4 < 10)
								{
									temp_str += "0";
								}
								temp_str += temp + ":";
								temp = i3;
								if(i3 < 10)
								{
									temp_str += "0";
								}
								temp_str += temp + ":";
								temp = i2;
								if(i2 < 10)
								{
									temp_str += "0";
								}
								temp_str += temp;
								herolist.f6.text = temp_str;
								if(MP_deaths > 0)
								{
									herolist.f5.text = Math.round(MP_kills / MP_deaths * 100) / 100;
								}
								else
								{
									herolist.f5.text = "";
								}
							}
							if(DEBUG_MODE)
							{
							}
							array = GOT.split("&");
							param = new Array();
							last_mp_param = param;
							i = 0;
							while(i < array.length)
							{
								array[i] = array[i].split("=");
								param[array[i][0]] = array[i][1];
								++i;
							}
							mp_error_addr = 1002;
							if(param["dropped"] == "1")
							{
								++connection_lost_ping;
								if(connection_lost_ping > 15)
								{
									MP_force_disconnect = true;
									DialogSay("Excluded from current match (either due to being voted out, by Match Owner or due to connection issues).","#FF0000");
								}
							}
							else
							{
								connection_lost_ping = 0;
							}
							if(param["zt"] != undefined)
							{
								if(param["zt"] != "")
								{
									MP_gamestate = int(param["zt"]);
								}
							}
							mp_error_addr = 1003;
							if(param["refresh"] != undefined) {
								DEFAULT_MAP = param["mapdata"];
								DEFAULT_MAP = replace("[i]","&",DEFAULT_MAP);
								DEFAULT_MAP = replace("[eq]","=",DEFAULT_MAP);
								mapdata = DEFAULT_MAP;
								darkness.visible = true;
								darkness.alpha = 1;
								LEVEL_END_FORCE = "refresh";
							}
							if(param["rnd"] != undefined)
							{
								if(param["rnd"] != "")
								{
									param["rnd"] = int(param["rnd"]);
									if(param["rnd"] > MP_round)
									{
										MP_round = param["rnd"];
										atotal = startatotal;
										chtotal = startchtotal;
										++MP_enc_restarts;
										ResetPsychoBlood();
										i4 = 0;
										while(i4 < barrelstotal)
										{
											if(game.contains(barrels[i4]))
											{
												barrels[i4].visible = false;
												game.removeChild(barrels[i4]);
												barrels[i4] = null;
											}
											i4++;
										}
										barrelstotal = 0;
										i4 = 0;
										while(i4 < MP_startbarrels.length)
										{
											if(MP_startbarrels[i4].mdl == "bar_orange")
											{
												mc = game.addChildAt(new bar_orange(),game.numChildren) as MovieClip;
											}
											if(MP_startbarrels[i4].mdl == "bar_blue")
											{
												mc = game.addChildAt(new bar_blue(),game.numChildren) as MovieClip;
											}
											if(MP_startbarrels[i4].mdl == "bar_red")
											{
												mc = game.addChildAt(new bar_red(),game.numChildren) as MovieClip;
											}
											NoMouse(mc);
											mc.mdl = MP_startbarrels[i4].mdl;
											mc.x = MP_startbarrels[i4].x;
											mc.y = MP_startbarrels[i4].y;
											mc.tox = MP_startbarrels[i4].tox;
											mc.toy = MP_startbarrels[i4].toy;
											mc.master = -1;
											create_barrel(mc);
											i4++;
										}
										lmapch = false;
										i2 = 0;
										while(i2 < lampstotal)
										{
											if(lamps_power2[i2] == 0)
											{
												lamps_power2[i2] = 1;
												a_int = 0;
												while(a_int < flarestotal)
												{
													if(flare[a_int].x == lamps_x[i2])
													{
														if(flare[a_int].y == lamps_y[i2])
														{
															flare[a_int].scaleX = flare[a_int].scaleX = 1;
														}
													}
													++a_int;
												}
												lmapch = true;
											}
											++i2;
										}
										tnds = 10;
										if(lmapch)
										{
											UpdateLightmap(false);
										}
										i4 = 0;
										while(i4 < playerstotal)
										{
											if(mens[i4] && !mens[i4].isplayer)
											{
												Hurt_nopain(i4);
												mens[i4].x = mens[i4].startx;
												mens[i4].y = mens[i4].starty;
												mens[i4].tox = 0;
												mens[i4].toy = 0;
												mens[i4].stability = 1;
												mens[i4].hunt = -1;
												mens[i4].side = mens[i4].startside;
												mens[i4].team = mens[i4].startteam;
												mens[i4].char = mens[i4].startchar;
												mens[i4].botaction = mens[i4].startbotaction;
												mens[i4].dead = false;
												mens[i4].hea = mens[i4].hmax;
												mens[i4].dying = false;
												mens[i4].io = true;
												mens[i4].visible = true;
												mens[i4].alpha = 1;
												mens[i4].effects.length = 0;
												mens[i4].act_movex = 0;
												mens[i4].act_movey = 0;
												mens[i4].deadtim = 0;
												mens[i4].hp_head = new Number(Math.max(Number(mens[i4].hea) * 0.4,30));
												mens[i4].hp_body = new Number(Math.max(Number(mens[i4].hea) * 0.6,30));
												mens[i4].hp_legs = new Number(Math.max(Number(mens[i4].hea) * 0.5,30));
												mens[i4].hp_arms = new Number(Math.max(Number(mens[i4].hea) * 0.4,30));
												Hurt_nopain(i4);
												i5 = 0;
												while(i5 < atotal)
												{
													if(aof[i5] == i4)
													{
														lax[i5] = ax[i5] = mens[i4].startx;
														lay[i5] = ay[i5] = mens[i4].starty;
														atox[i5] = 0;
														atoy[i5] = 0;
														ablood[i5] = 0;
													}
													++i5;
												}
											}
											mens[i4].defih = 0;
											i4++;
										}
										mc = mens[MP_myid];
										if(!mc.dead)
										{
											MP_gbd = mens[MP_myid].curwea;
										}
										MP_myspecials = new Array();
										MP_myspecials_total = 0;
										MP_assigning_special = -1;
										MP_specials = new Array();
										shnades_next = 0;
										shnades_total = 0;
										shnades = new Array();
										mc.lastshotby = -1;
										mc.whenlastshot = 0;
										mc.hea = mens[MP_myid].hmax;
										mc.stability = 1;
										mc.tox = 0;
										mc.toy = 0;
										mc.x = mc.startx;
										mc.y = mc.starty;
										mc.hp_head = mens[MP_myid].hea;
										mc.hp_arms = mens[MP_myid].hea;
										mc.hp_legs = mens[MP_myid].hea;
										mc.hp_body = mens[MP_myid].hea;
										mc.curwea = -1;
										mc.dead = false;
										mc.dying = false;
										mc.effects.length = 0;
										grenades_total = MP_start_grenades_count;
										grenades_port_total = MP_start_grenades_port_count;
										grenades_sh_total = MP_start_grenades_sh_count;
										UpdateWeps();
										Hurt_nopain(MP_myid);
										SpawnPlayerImmediately(mens[MP_myid]);
										u = Number(ax[mens[MP_myid].b_toe]) - Number(mc.startx);
										v = Number(ay[mens[MP_myid].b_toe]) - Number(mc.starty);
										i4 = 0;
										while(i4 < atotal)
										{
											if(aof[i4] == MP_myid)
											{
												ax[i4] -= u;
												ay[i4] -= v;
												lax[i4] -= u;
												lay[i4] -= v;
												ablood[i4] = 0;
												atox[i4] = 0;
												atoy[i4] = 0;
												if(isNaN(ax[i4]))
												{
													ax[i4] = mc.startx;
													lax[i4] = mc.startx;
												}
												if(isNaN(ax[i4]))
												{
													ay[i4] = mc.starty;
													lay[i4] = mc.starty;
												}
											}
											i4++;
										}
										i4 = 0;
										while(i4 < doorstotal)
										{
											mc = doors[i4];
											mc.tarx = mc.s_tarx;
											mc.tary = mc.s_tary;
											mc.x = mc.s_x;
											mc.y = mc.s_y;
											mc.moving = mc.s_moving;
											mc.tox = 0;
											mc.toy = 0;
											mc.maxspeed = mc.s_maxspeed;
											UpdateDoorAttachments(mc as PB2Door, 0);
											i4++;
										}
										i4 = 0;
										while(i4 < triggerstotal)
										{
											triggers[i4].enabledd = triggers[i4].s_enabledd;
											triggers[i4].maxcalls = triggers[i4].s_maxcalls;
											i4++;
										}
										i4 = 0;
										while(i4 < timerstotal)
										{
											timers[i4].enabledd = timers[i4].s_enabledd;
											timers[i4].maxcalls = timers[i4].s_maxcalls;
											timers[i4].ddelay = timers[i4].s_ddelay;
											timers[i4].ticknew = 0;
											i4++;
										}
										i4 = -1;
										i2 = 0;
										while(i2 < gunstotal)
										{
											if(i2 >= MP_start_guns_total)
											{
												guns[i2].io = false;
												guns[i2].alpha = 0;
											}
											else
											{
												guns[i2].io = true;
												guns[i2].alpha = 1;
												guns[i2].floatframe = 2;
												guns[i2].gotoAndStop(2);
												guns[i2].deadtim = 0;
												if(guns[i2].picken_by != -1 && mens[guns[i2].picken_by])
												{
													if(!guns[i2].forcars)
													{
														if(mens[guns[i2].picken_by].curwea == i2)
														{
															mens[guns[i2].picken_by].curwea = -1;
														}
														guns[i2].picken_by = -1;
													}
												}
												guns[i2].scaleX = 1;
												guns[i2].scaleY = 1;
												guns[i2].av = guns[i2].stat_averange_min;
												lax[guns[i2].b_p1] = ax[guns[i2].b_p1] = guns[i2].startx + guns[i2].len1;
												lax[guns[i2].b_p2] = ax[guns[i2].b_p2] = guns[i2].startx + guns[i2].len2;
												lay[guns[i2].b_p1] = ay[guns[i2].b_p1] = guns[i2].starty;
												lay[guns[i2].b_p2] = ay[guns[i2].b_p2] = guns[i2].starty;
												atox[guns[i2].b_p1] = 0;
												atox[guns[i2].b_p2] = 0;
												atoy[guns[i2].b_p1] = 0;
												atoy[guns[i2].b_p2] = 0;
												WakeUpAtom(guns[i2].b_p1);
												WakeUpAtom(guns[i2].b_p2);
												MakeGunByClass(guns[i2].model,guns[i2],true);
												if(!MP_spectator)
												{
													if(guns[i2].wep != -2)
													{
														if(guns[i2].startx > Number(mens[MP_myid].x) - 40)
														{
															if(guns[i2].startx < mens[MP_myid].x + 40)
															{
																if(guns[i2].starty > Number(mens[MP_myid].y) - 90)
																{
																	if(guns[i2].starty < mens[MP_myid].y + 30)
																	{
																		ok = true;
																		i3 = 0;
																		while(i3 < gunstotal && ok)
																		{
																			if(guns[i3] && guns[i3].io)
																			{
																				if(i2 != i3)
																				{
																					if(!guns[i3].forcars)
																					{
																						if(guns[i3].picken_by == MP_myid && guns[i3].wep == guns[i2].wep)
																						{
																							ok = false;
																						}
																					}
																				}
																			}
																			++i3;
																		}
																		if(ok)
																		{
																			guns[i2].picken_by = MP_myid;
																			if(guns[i2].stat_power > 0)
																			{
																				i4 = i2;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
											++i2;
										}
										while(gunstotal > MP_start_guns_total && gunstotal - 1 >= 0 && (guns[gunstotal -1] == null || !guns[gunstotal - 1].io))
										{
											--gunstotal;
										}
										if(MP_enc_restarts == 1 || MP_gbd != -1 && guns[MP_gbd].picken_by != MP_myid)
										{
											mens[MP_myid].curwea = i4;
										}
										else
										{
											mens[MP_myid].curwea = MP_gbd;
										}
										ChangedGun(MP_myid);
										UpdateWeps();
										i = 0;
										while(i <= pulsmax)
										{
											if(puls[i] != null)
											{
												if(puls[i].visible == true)
												{
													if(game.contains(puls[i]))
													{
														puls[i].visible = false;
														game.removeChild(puls[i]);
														puls[i] = null;
													}
													else if(graphics_3d_front.contains(puls[i]))
													{
														puls[i].visible = false;
														graphics_3d_front.removeChild(puls[i]);
														puls[i] = null;
													}
												}
											}
											++i;
										}
										i = 0;
										while(i < vehiclestotal)
										{
											if(vehicles[i].io)
											{
												mc = vehicles[i];
												if(mc.typ == 5 || mc.typ == 6)
												{
													mc.master = -1;
												}
											}
											++i;
										}
										if(SCREEN_EFFECTS)
										{
											whitness.alpha = 1;
											whitness.visible = true;
										}
										GCTime();
									}
								}
							}
							mp_error_addr = 1004;
							players_online = 0;
							MP_match_playerstotal = 1;
							i = 0;
							while(i < MP_playerstotal)
							{
								if(!herolist.visible) {
									break;
								}
								if(i != MP_myid)
								{
									if(param["p" + i + "nk"] != undefined)
									{
										MP_match_playerstotal++;
										if(param["p" + i + "nk"] == "Empty")
										{
											hero[i].f2.text = "";
											hero[i].f3.text = "";
											hero[i].f4.text = "";
											hero[i].f5.text = "";
											hero[i].gotoAndStop(1 + hero_list_frame_offset);
											
										}
										else
										{
											++players_online;
										}
									}
								}
								++i;
							}
							mp_error_addr = 1005;
							i = MP_myid;
							if(!MP_spectator)
							{
								str = "Team " + String(mens[i].team + 1);
								if(mens[i].team == 0)
								{
									str = "Alpha";
								}
								if(mens[i].team == 1)
								{
									str = "Beta";
								}
								if(mens[i].team == 2)
								{
									str = "Gamma";
								}
								if(mens[i].team == 3)
								{
									str = "Delta";
								}
								if(mens[i].team == 4)
								{
									str = "Zeta";
								}
								if(mens[i].team == 5)
								{
									str = "Lambda";
								}
								if(mens[i].team == 6)
								{
									str = "Sigma";
								}
								if(mens[i].team == 7)
								{
									str = "Omega";
								}
								if(mens[i].team == 8)
								{
									str = "Counter-Terrorists";
								}
								if(mens[i].team == 9)
								{
									str = "Terrorists";
								}
								if(mens[i].team == 10)
								{
									str = "Usurpation Forces";
								}
								if(mens[i].team == 11)
								{
									str = "Civil Security";
								}
								if(mens[i].team == 12)
								{
									str = "Red Team";
								}
								if(mens[i].team == 13)
								{
									str = "Blue Team";
								}
								if(mens[i].team == 14)
								{
									str = "Green Team";
								}
								if(mens[i].team == 15)
								{
									str = "White Team";
								}
								if(mens[i].team == 16)
								{
									str = "Black Team";
								}
								if(MP_type == 1)
								{
									str = "";
								}
								hero[i].f2.text = str;
								if(param["k"] != undefined)
								{
									MP_kills = int(param["k"]);
								}
								if(param["dd"] != undefined)
								{
									MP_deaths = int(param["dd"]);
								}
							}
							mp_error_addr = 1006;
							if(MP_type == 3)
							{
								if(param["b"] != undefined)
								{
									team_blue.txtscore.text = int(param["b"]);
								}
								if(param["r"] != undefined)
								{
									team_red.txtscore.text = int(param["r"]);
								}
							}
							if(param["em"] != undefined) {
								ENEMY_SENDER_master = int(param["em"]);
							}
							mp_error_addr = 1007;
							i = 0;
							while(i < MP_playerstotal)
							{
								if(mens[i] && (i != MP_myid || MP_spectator))
								{
									i2 = mens[i].mp_packets;
									mens[i].mp_packets = int(param["p" + i + "_"]);
									mc = mens[i];
									if(mens[i].io)
									{
										if(!mens[i].dead)
										{
											if(mens[i].mp_aliveping + 350 < MP_ping_last)
											{
												mens[i].act_fire = false;
												if(MP_app)
												{
													if(mens[i].mp_aliveping + 500 < MP_ping_last)
													{
														if(mens[i].alpha > 0.4)
														{
															mens[i].alpha = 0.4;
														}
													}
												}
											}
										}
									}
									if(mens[i].mp_aliveping + 4000 > MP_ping_last)
									{
										mens[i].io = true;
										mens[i].visible = true;
									}
									else if(mens[i].io)
									{
										mens[i].hea = 0;
										mens[i].dead = true;
										mens[i].alpha = 1;
										mens[i].io = false;
										mens[i].visible = false;
										if(MP_app)
										{
											if(mens[i].lastshotby == MP_myid)
											{
												ExpTask(EXP_TYPE_DEATH_IN_APPROVED,mens[MP_myid].nick,true);
											}
										}
									}
									if(mens[i].mp_packets != i2)
									{
										if(param["p" + i + "lo"] != undefined)
										{
											mc.login_name = param["p" + i + "lo"];
											CheckIfPlayerInfoUpdateNeeded(mc);
											if(herolist.visible)
											{
												if(mc.login_name == "" || mc.login_name == ".guest")
												{
													hero[i].vbtn1.visible = false;
													hero[i].vbtn2.visible = false;
													hero[i].vbtn3.visible = false;
												}
												else
												{
													hero[i].vbtn1.visible = true;
													hero[i].vbtn2.visible = true;
													hero[i].vbtn3.visible = true;
												}
											}
										}
										if(param["p" + i + "nk"] != "Empty" && param["p" + i + "nk"] != undefined)
										{
											mc.mp_aliveping = getTimer();
											mc.ping = int(param["p" + i + "p"]);
											xx = Math.min(250,MP_ping2 + mc.ping) / 1000 * MP_fps;
										}
										if(param["p" + i + "nk"])
										{
											mc.nick = param["p" + i + "nk"].split("[eq]").join("=").split("[i]").join("|").split("[e]").join("&").split("&quot;").join("\"").split("&lt;").join("<").split("&gt;").join(">");
										}
										else
										{
											mc.nick = "pending nickname...";
										}
										if(herolist.visible)
										{
											UpdateHeroList(i);
										}
										if(param["p" + i + "x"] != undefined && param["p" + i + "sx"] != undefined && param["p" + i + "y"] != undefined && param["p" + i + "sy"] != undefined)
										{
											if(param["p" + i + "nk"] != "Empty")
											{
												xx = Math.min(250,MP_ping2 + mc.ping) / 1000 * MP_fps;
												xx2 = Number(param["p" + i + "x"]);
												yy2 = Number(param["p" + i + "y"]);
												u = xx2 + Number(param["p" + i + "sx"]) * xx;
												if(Boolean(mc.inwater) || Boolean(mc.stand))
												{
													v = yy2;
													u2 = Number(param["p" + i + "sy"]);
												}
												else
												{
													v = Number(param["p" + i + "y"]) + Number(param["p" + i + "sy"]) * xx + gravity * xx * xx / 2;
													u2 = Number(param["p" + i + "sy"]) + gravity * xx;
												}
												if(TraceLineF_nopushers(mc.x - 5,mc.y - 21,u,v - 21))
												{
													if(TraceLineF_nopushers(mc.x - 5,mc.y - 61,u,v - 61))
													{
														if(TraceLineF_nopushers(mc.x + 5,mc.y - 21,u,v - 21))
														{
															if(TraceLineF_nopushers(mc.x + 5,mc.y - 61,u,v - 61))
															{
																param["p" + i + "x"] = u;
																if(!mc.stand && !mc.inwater)
																{
																	param["p" + i + "y"] = v;
																	param["p" + i + "sy"] = u2;
																}
															}
														}
													}
												}
												if(param["p" + i + "xb"] != "" && param["p" + i + "xb"] != undefined && param["p" + i + "yb"] != "" && param["p" + i + "yb"] != undefined)
												{
													u = Number(param["p" + i + "xb"]) + Number(param["p" + i + "sxb"]) * xx;
													if(Boolean(mc.inwater) || Boolean(mc.stand))
													{
														v = Number(param["p" + i + "yb"]) + Number(param["p" + i + "syb"]) * xx;
														u2 = Number(param["p" + i + "syb"]);
													}
													else
													{
														v = Number(param["p" + i + "yb"]) + Number(param["p" + i + "syb"]) * xx + gravity * xx * xx / 2;
														u2 = Number(param["p" + i + "syb"]) + gravity * xx;
													}
													if(!MP_favor_the_shooter)
													{
														u2 = Number(param["p" + i + "syb"]);
														u2 = Number(param["p" + i + "syb"]) + gravity * xx;
													}
													if(TraceLineF_nopushers(Number(ax[mc.b_toe]) - 5,ay[mc.b_toe],u,v))
													{
														if(TraceLineF_nopushers(ax[mc.b_toe],Number(ay[mc.b_toe]) - 5,u,v))
														{
															if(TraceLineF_nopushers(ax[mc.b_toe] + 5,ay[mc.b_toe],u,v))
															{
																if(TraceLineF_nopushers(ax[mc.b_toe],ay[mc.b_toe] + 5,u,v))
																{
																	param["p" + i + "xb"] = u;
																	if(!mc.stand && !mc.inwater)
																	{
																		param["p" + i + "yb"] = v;
																		param["p" + i + "syb"] = u2;
																	}
																}
															}
														}
													}
												}
												xx2 = Number(param["p" + i + "x"]) - xx2;
												yy2 = Number(param["p" + i + "y"]) - yy2;
												if(!MP_favor_the_shooter)
												{
													mc.mp_offset_x = xx2;
													mc.mp_offset_y = yy2;
												}
												if(mc.hunt != int(param["p" + i + "hn"]))
												{
													Alerted(mc);
													mc.hunt = int(param["p" + i + "hn"]);
												}
												if(param["p" + i + "nk"] != "")
												{
													if(mc.gui.txt1.text != mc.nick)
													{
														SpawnPlayerImmediately(mc as player);
													}
												}
												if(param["p" + i + "cc"] != undefined)
												{
													mdl = param["p" + i + "cc"].split(",");
													i3 = mdl[0];
													if(mc.char != i3)
													{
														if(MP_app)
														{
															if(i3 == 5 || i3 == 10)
															{
																i3 = 2;
															}
														}
														mc.char = i3;
														mc.mdl_head = i3;
														if(i3 >= 40 && i3 <= 48)
														{
															i3 = 1;
														}
														if(i3 == 61)
														{
															i3 = 3;
														}
														mc.mdl_leg1_upper = i3;
														mc.mdl_leg1_middle = i3;
														mc.mdl_leg1_lower = i3;
														mc.mdl_leg2_upper = i3;
														mc.mdl_leg2_middle = i3;
														mc.mdl_leg2_lower = i3;
														mc.mdl_arm1_upper = i3;
														mc.mdl_arm1_lower = i3;
														mc.mdl_arm2_upper = i3;
														mc.mdl_arm2_lower = i3;
														mc.mdl_toe = i3;
														mc.mdl_body = i3;
														old_nick = mc.nick;
														UpdateCharProps(mc as player);
														SpawnPlayerImmediately(mc as player);
														mc.nick = old_nick;
													}
													if(mdl[1] != undefined)
													{
														if(mdl[1].charAt(0) != mc.palette[0] || mdl[1].charAt(1) != mc.palette[1] || mdl[1].charAt(2) != mc.palette[2] || mdl[1].charAt(3) != mc.palette[3])
														{
															mc.palette[0] = mdl[1].charAt(0);
															mc.palette[1] = mdl[1].charAt(1);
															mc.palette[2] = mdl[1].charAt(2);
															mc.palette[3] = mdl[1].charAt(3);
															UpdatePlayerColorMP(mc);
														}
													}
												}
												if(param["p" + i + "ha"] != "")
												{
													if(param["p" + i + "hl"] != "")
													{
														if(param["p" + i + "hb"] != "")
														{
															if(param["p" + i + "hh"] != "")
															{
																if(GetPlayerAllowLimbHPStabChange(mc))
																{
																	i4 = 0;
																	if((mc.hp_arms <= 0 || mc.brk_arms) && Number(param["p" + i + "ha"]) > 0)
																	{
																		i4 = 1;
																	}
																	else if((mc.hp_legs <= 0 || mc.brk_legs) && Number(param["p" + i + "hl"]) > 0)
																	{
																		i4 = 1;
																	}
																	else if((mc.hp_body <= 0 || mc.brk_body) && Number(param["p" + i + "hb"]) > 0)
																	{
																		i4 = 1;
																	}
																	else if((mc.hp_head <= 0 || mc.brk_head) && Number(param["p" + i + "hh"]) > 0)
																	{
																		i4 = 1;
																	}
																	if(mc.hp_arms > 0 && Number(param["p" + i + "ha"]) <= 0)
																	{
																		i4 = 2;
																	}
																	else if(mc.hp_legs > 0 && Number(param["p" + i + "hl"]) <= 0)
																	{
																		i4 = 2;
																	}
																	else if(mc.hp_body > 0 && Number(param["p" + i + "hb"]) <= 0)
																	{
																		i4 = 2;
																	}
																	else if(mc.hp_head > 0 && Number(param["p" + i + "hh"]) <= 0)
																	{
																		i4 = 2;
																	}
																	if(i4 == 1)
																	{
																		SpawnPlayerImmediately(mc as player);
																		Hurt_nopain(i);
																	}
																	mc.hp_arms = Number(param["p" + i + "ha"]);
																	mc.hp_legs = Number(param["p" + i + "hl"]);
																	mc.hp_body = Number(param["p" + i + "hb"]);
																	mc.hp_head = Number(param["p" + i + "hh"]);
																	if(i4 == 2)
																	{
																		Hurt(i);
																	}
																}
															}
														}
													}
												}
												if(param["p" + i + "he"] != "")
												{
													if(mc.real_hea > 0 && Number(param["p" + i + "he"]) <= 0)
													{
														mc.last_shoot_chance = true;
													}
													mc.hea = AdjustToPlayerAllowedHP(mc,Number(param["p" + i + "he"]));
													if(mc.real_hea <= 0 && Number(param["p" + i + "he"]) > 0)
													{
														mc.effects.length = 0;
													}
													mc.real_hea = Number(param["p" + i + "he"]);
												}
												if(MP_app)
												{
													if(mc.hea > mc.hmax)
													{
														AnnoyPL(i,"hp+");
													}
												}
												if(mc.hea > 0)
												{
													if(!mc.io || !mc.visible)
													{
														mc.dead = true;
													}
													else
													{
														mc.dead = false;
													}
													mc.io = true;
													mc.visible = true;
													if(mc.isGhost && !MP_app && !mens[MP_myid].dead && !mens[MP_myid].dead)
													{
														if(mc.team == mens[MP_myid].team)
														{
															mc.alpha = 0.5;
														}
													}
													else
													{
														mc.alpha = 1;
													}
													mc.deadtim = 0;
													if(param["p" + i + "st"] != undefined)
													{
														mc.sit = new Number(param["p" + i + "st"]);
													}
													if(Boolean(isNaN(mc.sit)) || mc.sit == undefined)
													{
													}
													if(param["p" + i + "sb"] != "")
													{
														if(GetPlayerAllowLimbHPStabChange(mc))
														{
															mc.stability = Number(param["p" + i + "sb"]);
														}
													}
													mc.mp_controlled = false;
													if(Number(param["p" + i + "sb"]) <= 0)
													{
														if(param["p" + i + "x"] != "" && param["p" + i + "x"] != undefined)
														{
															if(param["p" + i + "y"] != "" && param["p" + i + "y"] != undefined)
															{
																if(param["p" + i + "sx"] != "" && param["p" + i + "sx"] != undefined)
																{
																	if(param["p" + i + "sy"] != "" && param["p" + i + "sy"] != undefined)
																	{
																		if(param["p" + i + "xb"] != "" && param["p" + i + "xb"] != undefined)
																		{
																			if(param["p" + i + "yb"] != "" && param["p" + i + "yb"] != undefined)
																			{
																				if(param["p" + i + "sxb"] != "" && param["p" + i + "sxb"] != undefined)
																				{
																					if(param["p" + i + "syb"] != "" && param["p" + i + "syb"] != undefined)
																					{
																						mc.mp_controlled = !mc.dead || GetPlayerAllowLimbHPStabChange(mc);
																						mc.mp_time = 0;
																						mc.mp_x = Number(param["p" + i + "x"]);
																						mc.mp_y = Number(param["p" + i + "y"]);
																						mc.mp_tox = Number(param["p" + i + "sx"]);
																						mc.mp_toy = Number(param["p" + i + "sy"]);
																						mc.mp_x2 = Number(param["p" + i + "xb"]);
																						mc.mp_y2 = Number(param["p" + i + "yb"]);
																						mc.mp_tox2 = Number(param["p" + i + "sxb"]);
																						mc.mp_toy2 = Number(param["p" + i + "syb"]);
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
													if(param["p" + i + "dy"] != "")
													{
														if(param["p" + i + "dy"] == "true" || GetPlayerShouldBeDying(mc))
														{
															MakeDying(mc);
														}
														else
														{
															mc.dying = false;
														}
													}
													if(param["p" + i + "ps"] != "")
													{
														var no_psi = param["p" + i + "ps"] == "true";
														if (mc.no_psi != no_psi) {
															mc.no_psi = no_psi;
															ChangedGun(i);
														}
													}
													if(Number(param["p" + i + "sb"]) > 0)
													{
														if(param["p" + i + "x"] != "" && param["p" + i + "x"] != undefined)
														{
															if(param["p" + i + "y"] != "" && param["p" + i + "y"] != undefined)
															{
																if(param["p" + i + "sx"] != "" && param["p" + i + "sx"] != undefined)
																{
																	if(param["p" + i + "sy"] != "" && param["p" + i + "sy"] != undefined)
																	{
																		mc.x = Number(param["p" + i + "x"]);
																		mc.y = Number(param["p" + i + "y"]);
																		mc.tox = Number(param["p" + i + "sx"]);
																		mc.toy = Number(param["p" + i + "sy"]);
																		u = mc.x - Number(ax[mc.b_toe]);
																		v = mc.y - Number(ay[mc.b_toe]);
																		xx = VectorDist2D(u,v);
																		if(xx > 600 * Number(mc.scale) || !TraceLineF_nopushers(mc.x,mc.y - 41 * Number(mc.scale),ax[mc.b_toe],ay[mc.b_toe]))
																		{
																			ax[mc.b_toe] += u;
																			ay[mc.b_toe] += v;
																			ax[mc.b_body] += u;
																			ay[mc.b_body] += v;
																			ax[mc.b_head_start] += u;
																			ay[mc.b_head_start] += v;
																			ax[mc.b_head_end] += u;
																			ay[mc.b_head_end] += v;
																			ax[mc.b_arm1] += u;
																			ay[mc.b_arm1] += v;
																			ax[mc.b_arm2] += u;
																			ay[mc.b_arm2] += v;
																			ax[mc.b_leg1] += u;
																			ay[mc.b_leg1] += v;
																			ax[mc.b_leg2] += u;
																			ay[mc.b_leg2] += v;
																			if(GET_LITE_PHYS())
																			{
																				lax[mc.b_toe] += u;
																				lay[mc.b_toe] += v;
																				lax[mc.b_body] += u;
																				lay[mc.b_body] += v;
																				lax[mc.b_head_start] += u;
																				lay[mc.b_head_start] += v;
																				lax[mc.b_head_end] += u;
																				lay[mc.b_head_end] += v;
																				lax[mc.b_arm1] += u;
																				lay[mc.b_arm1] += v;
																				lax[mc.b_arm2] += u;
																				lay[mc.b_arm2] += v;
																				lax[mc.b_leg1] += u;
																				lay[mc.b_leg1] += v;
																				lax[mc.b_leg2] += u;
																				lay[mc.b_leg2] += v;
																			}
																		}
																		if(mc.hea >= dying_after)
																		{
																			mc.dying = false;
																		}
																	}
																}
															}
														}
													}
													if(!ANONYMOUS_MODE)
													{
														mc.gui.visible = true;
														mc.gui.alpha = 1;
													}
													if(param["p" + i + "ix"] != "")
													{
														if(param["p" + i + "iy"] != "")
														{
															mc.tarx = Number(param["p" + i + "ix"]);
															mc.tary = Number(param["p" + i + "iy"]);
														}
													}
													if(mens[i].mp_aliveping + 200 > MP_ping_last)
													{
														if(param["p" + i + "f"] != "")
														{
															if(param["p" + i + "f"] == "true")
															{
																mc.act_fire = true;
															}
															else
															{
																mc.act_fire = false;
															}
														}
														if(param["p" + i + "af"] != "")
														{
															mc.act_fall = param["p" + i + "af"] == "true";
														}
														if(param["p" + i + "ax"] != "")
														{
															if(param["p" + i + "ay"] != "")
															{
																mc.act_movex = int(param["p" + i + "ax"]);
																mc.act_movey = int(param["p" + i + "ay"]);
															}
														}
													}
													else
													{
														mc.act_fire = false;
														mc.act_movex = 0;
														mc.act_movey = 0;
													}
													if(param["p" + i + "ic"] != "")
													{
														i2 = int(param["p" + i + "ic"]);
														i3 = 0;
														while(i3 < vehiclestotal)
														{
															if(vehicles[i3].typ == 6)
															{
																if(vehicles[i3].master == i)
																{
																	if(i2 != i3)
																	{
																		vehicles[i3].master = -1;
																	}
																}
															}
															++i3;
														}
														if(i2 == -1)
														{
															mc.incar = -1;
														}
														else if(vehicles[i2].typ == 6)
														{
															if(vehicles[i2].master != MP_myid || MP_spectator)
															{
																vehicles[i2].master = i;
															}
														}
														else
														{
															mc.incar = i2;
														}
													}
													i3 = mc.curwea;
													if(param["p" + i + "cw"] != undefined && param["p" + i + "cw"] != "")
													{
														i2 = int(param["p" + i + "cw"]);
														if(i2 >= -1 && i2 < gunstotal)
														{
															if(MP_gamestate == 0 || i2 == -1 || i2 != -1 && guns[i2].picken_by == i)
															{
																mc.curwea = i2;
															}
														}
													}
													if(MP_gamestate == 0)
													{
														i4 = 0;
														while(i4 < gunstotal)
														{
															if(guns[i4].picken_by == i && i4 != mc.curwea)
															{
																guns[i4].picken_by = -1;
															}
															i4++;
														}
														i4 = 0;
														while(i4 < 10)
														{
															if(param["p" + i + "g" + i4] != undefined)
															{
																if(param["p" + i + "g" + i4] != "")
																{
																	if(param["p" + i + "g" + i4] != "-1")
																	{
																		if(param["p" + i + "g" + i4] != "-")
																		{
																			i2 = int(param["p" + i + "g" + i4]);
																			if(i2 >= 0 && i2 < gunstotal)
																			{
																				if(guns[i2].picken_by != -1 && mens[guns[i2].picken_by])
																				{
																					if(guns[i2].picken_by != i)
																					{
																						if(mens[guns[i2].picken_by].curwea == i2)
																						{
																							mens[guns[i2].picken_by].curwea = -1;
																							ChangedGun(guns[i2].picken_by);
																						}
																					}
																				}
																				if(guns[i2].picken_by == MP_myid && i != MP_myid)
																				{
																					if(mens[MP_myid].curwea == i2)
																					{
																						mens[MP_myid].curwea = -1;
																						ChangedGun(MP_myid);
																					}
																					guns[i2].picken_by = i;
																					UpdateWeps();
																				}
																				else
																				{
																					guns[i2].picken_by = i;
																				}
																			}
																		}
																	}
																}
															}
															i4++;
														}
													}
													if(i3 != mc.curwea || mc.curwea == -1 && !mc.arm1.lower.psi.visible)
													{
														ChangedGun(i);
													}
													if(param["p" + i + "t"] != "")
													{
														if(mc.team != int(param["p" + i + "t"]))
														{
															mc.team = int(param["p" + i + "t"]);
															UpdateTeamColor(mc);
														}
													}
													RedrawPsi(mc.idd);
												}
												else
												{
													mc.mp_controlled = false;
													if(param["p" + i + "x"] != "")
													{
														if(param["p" + i + "y"] != "")
														{
															if(param["p" + i + "sx"] != "")
															{
																if(param["p" + i + "sy"] != "")
																{
																	if(param["p" + i + "x"] != undefined)
																	{
																		if(param["p" + i + "y"] != undefined)
																		{
																			if(param["p" + i + "sx"] != undefined)
																			{
																				if(param["p" + i + "sy"] != undefined)
																				{
																					if(param["p" + i + "xb"] != "")
																					{
																						if(param["p" + i + "yb"] != "")
																						{
																							if(param["p" + i + "sxb"] != "")
																							{
																								if(param["p" + i + "syb"] != "")
																								{
																									if(param["p" + i + "xb"] != undefined)
																									{
																										if(param["p" + i + "yb"] != undefined)
																										{
																											if(param["p" + i + "sxb"] != undefined)
																											{
																												if(param["p" + i + "syb"] != undefined)
																												{
																													mc.mp_controlled = !mc.dead || GetPlayerAllowLimbHPStabChange(mc);
																													mc.mp_time = 0;
																													mc.mp_x = Number(param["p" + i + "x"]);
																													mc.mp_y = Number(param["p" + i + "y"]);
																													mc.mp_tox = Number(param["p" + i + "sx"]);
																													mc.mp_toy = Number(param["p" + i + "sy"]);
																													mc.mp_x2 = Number(param["p" + i + "xb"]);
																													mc.mp_y2 = Number(param["p" + i + "yb"]);
																													mc.mp_tox2 = Number(param["p" + i + "sxb"]);
																													mc.mp_toy2 = Number(param["p" + i + "syb"]);
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												if(Boolean(isNaN(mc.mp_tox)) || Boolean(isNaN(mc.mp_x)) || Boolean(isNaN(mc.x)) || Boolean(isNaN(mc.tox)))
												{
												}
											}
											else if(mc.io)
											{
												mc.hea = 0;
												mc.dead = true;
												mc.alpha = 1;
												mc.io = false;
												mc.visible = false;
											}
										}
									}
								}
								++i;
							}
							mp_error_addr = 1008;
							if(param["lastid"] != "" && param["lastid"] != undefined)
							{
								if(chat_lastid != int(param["lastid"]))
								{
									chat_lastid = int(param["lastid"]);
								}
							}
							mp_error_addr = 1009;
							if(param["evs"] != "" && param["evs"] != undefined)
							{
								while(param["evs"] != param["evs"].replace("[eq]","="))
								{
									param["evs"] = param["evs"].replace("[eq]","=");
								}
								array2 = param["evs"].split(";");
								array3 = new Array();
								for(i = 0; i < array2.length; ++i)
								{
									try
									{
										array2[i] = String(array2[i]).split("|");
										if(array2[i][0] == "chat" || array2[i][0] == "tchat")
										{
											if(array2[i][1] != "" && array2[i][1] != "undefined")
											{
												spawn_text_for = int(array2[i][1]);
												str = array2[i][2];
												if(DISPLAY_CHAT >= 1)
												{
													mcc = mens[spawn_text_for];
													if(MP_type == 1)
													{
														array2[i][0] = "chat";
													}
													if(array2[i][0] == "chat" || array2[i][0] == "tchat" && mcc.team == mens[MP_myid].team)
													{
														while(str != str.replace("[eq]","="))
														{
															str = str.replace("[eq]","=");
														}
														while(str != str.replace("[i]","|"))
														{
															str = str.replace("[i]","|");
														}
														while(str != str.replace("[dc]",";"))
														{
															str = str.replace("[dc]",";");
														}
														while(str != str.replace("[lt]","<"))
														{
															str = str.replace("[lt]","<");
														}
														while(str != str.replace("[gt]",">"))
														{
															str = str.replace("[gt]",">");
														}
														while(str != str.replace("[2q]","\""))
														{
															str = str.replace("[2q]","\"");
														}
														while(str != str.replace("[sl]","/"))
														{
															str = str.replace("[sl]","/");
														}
														while(str != str.replace("[rsl]","\\"))
														{
															str = str.replace("[rsl]","\\");
														}
														str = Censored(str);
														allow_see_chat = MP_let_alive_players_hear_dead || MP_spectator || mcc.dead == mens[MP_myid].dead || Boolean(mens[MP_myid].dead);
														if(allow_see_chat)
														{
															if(!ANONYMOUS_MODE)
															{
																PlaySound_full(s_chat);
															}
															Effect(ax[mcc.b_head_start],Number(ay[mcc.b_head_start]) - 25,20,0,0);
															while(str != str.replace("<","&lt;"))
															{
																str = str.replace("<","&lt;");
															}
															while(str != str.replace(">","&gt;"))
															{
																str = str.replace(">","&gt;");
															}
															if(!ANONYMOUS_MODE)
															{
																var prefix:String = array2[i][3];
																if (prefix != "") prefix += " ";
																prefix = prefix.split("[eq]").join("=")
																if(MP_type == 1)
																{
																	ChatNewMsg(prefix + "<font color=\"#78DBE2\">" + mcc.nick.split("<").join("&lt;").split(">").join("&gt;") + "</font><font color=\"#FFFFFF\">: " + str + "</font>");
																}
																else
																{
																	ok = mcc.dead;
																	ChatNewMsg(prefix + "<font color=\"" + (PREDEF_COLORS[mcc.team] != undefined ? PREDEF_COLORS[mcc.team] : "#78DBE2") + "\">" + (array2[i][0] == "tchat" ? "[Team Chat]" : "") + (Boolean(mcc.dead) && MP_type == 2 ? (MP_let_alive_players_hear_dead ? "*Dead* " : "[Dead-only] ") : "") + "(" + PREDEF_TEAMS[mcc.team] + ") " + mcc.nick.split("<").join("&lt;").split(">").join("&gt;") + "</font><font color=\"#FFFFFF\">: " + str + "</font>");
																}
															}
														}
													}
												}
												UserSays(spawn_text_for,str);
											}
										}
										if(array2[i][0] == "chat2")
										{
											if(array2[i][1] != "" && array2[i][1] != "undefined")
											{
												array2[i][1] = array2[i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
												ChatNewMsg(array2[i][1]);
											}
										}
										if(array2[i][0] == "user_connect") {
											if (on_user_connected_trigger != -1) {
												last_user_join = array2[i][1];
												EXEC_TRIGGER(on_user_connected_trigger, true);
											}
										}
										if(array2[i][0] == "user_disconnect") {
											if (on_user_disconnected_trigger != -1) {
												last_user_left = array2[i][1];
												EXEC_TRIGGER(on_user_disconnected_trigger, true);
											}
										}
										if(array2[i][0] == "chat3")
										{
											if(array2[i][1] != "" && array2[i][1] != "undefined")
											{
												array2[i][1] = array2[i][1].split("[i]").join("|").split("[e]").join("&").split("[eq]").join("=").split("[,]").join(";");
												ChatNewMsg(array2[i][1]);
												PlaySound_full(s_chat);
											}
										}
										if(array2[i][0] == "chat_bubble_for_player") {
											spawn_text_for = int(array2[i][1]);
											str = array2[i][2];
											while(str != str.replace("[eq]","=")) {
												str = str.replace("[eq]","=");
											}
											while(str != str.replace("[i]","|")) {
												str = str.replace("[i]","|");
											}
											while(str != str.replace("[dc]",";")) {
												str = str.replace("[dc]",";");
											}
											while(str != str.replace("[lt]","<")) {
												str = str.replace("[lt]","<");
											}
											while(str != str.replace("[gt]",">")) {
												str = str.replace("[gt]",">");
											}
											while(str != str.replace("[2q]","\"")) {
												str = str.replace("[2q]","\"");
											}
											while(str != str.replace("[sl]","/")) {
												str = str.replace("[sl]","/");
											}
											while(str != str.replace("[rsl]","\\")) {
												str = str.replace("[rsl]","\\");
											}
											mcc = mens[spawn_text_for];

											Effect(ax[mcc.b_head_start],Number(ay[mcc.b_head_start]) - 25,20,0,0);	
											
										}
										if(array2[i][0] == "spawnef")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												Effect(int(array3[0]),int(array3[1]),14,0,0);
											}
										}
										if(array2[i][0] == "b")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												victim = int(array3[1]);
												if(barrels[victim] != null)
												{
													if(barrels[victim].hea > 0)
													{
														barrels[victim].x = Number(array3[2]);
														barrels[victim].y = Number(array3[3]);
														barrels[victim].hea = 0;
														HurtBarrel(victim);
													}
												}
											}
										}
										if(array2[i][0] == "e")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												datafrom = int(array3[0]);
												if(datafrom != MP_myid)
												{
													victim = int(array3[1]);
													if(mens[victim] != null)
													{
														if(mens[victim].io)
														{
															if(!mens[victim].isplayer)
															{
																mens[victim].hea = Math.min(mens[victim].hea,Number(array3[2]));
																if(mens[victim].hea > 0)
																{
																	mens[victim].x = Number(array3[3]);
																	mens[victim].y = Number(array3[4]);
																	mens[victim].tox = Number(array3[5]);
																	mens[victim].toy = Number(array3[6]);
																	mens[victim].tarx = Number(array3[7]);
																	mens[victim].tary = Number(array3[8]);
																	mens[victim].hunt = int(array3[9]);
																	mens[victim].botaction = int(array3[10]);
																}
															}
														}
													}
												}
											}
										}
										if(array2[i][0] == "eh")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												victim = int(array3[0]);
												if(mens[victim] != null)
												{
													if(mens[victim].io)
													{
														if(!mens[victim].isplayer)
														{
															mens[victim].hea = Math.min(mens[victim].hea,Number(array3[1]));
															mens[victim].hp_head = Math.min(mens[victim].hp_head,Number(array3[2]));
															mens[victim].hp_body = Math.min(mens[victim].hp_body,Number(array3[3]));
															mens[victim].hp_arms = Math.min(mens[victim].hp_arms,Number(array3[4]));
															mens[victim].hp_legs = Math.min(mens[victim].hp_legs,Number(array3[5]));
														}
													}
												}
											}
										}
										if(array2[i][0] == "ef_dot")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												victim = int(array3[0]);
												if(mens[victim] != null)
												{
													if(mens[victim].io)
													{
														if(victim != MP_myid)
														{
															mens[victim].effects.push({
																"type":"DOT",
																"power":0,
																"duration":int(array3[1])
															});
														}
													}
												}
											}
										}
										if(array2[i][0] == "shgh")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												victim = int(array3[1]);
												special_object = MP_specials[victim];
												if(special_object == null)
												{
													i4 = 0;
													while(i4 < MP_myspecials_total)
													{
														if(MP_myspecials[i4].id_in_full_list == victim)
														{
															special_object = MP_myspecials[i4];
															break;
														}
														i4++;
													}
												}
												if(special_object != null)
												{
													pul_object = int(special_object.pul);
													if(puls[pul_object] != null)
													{
														if(puls[pul_object].hea > 0)
														{
															puls[pul_object].hea = Math.min(puls[pul_object].hea,Number(array3[2]));
															if(puls[pul_object].hea <= 0)
															{
																shnades[puls[pul_object].childsh].io = false;
																ExplodeShield(puls[pul_object].childsh);
															}
														}
													}
												}
											}
										}
										if(array2[i][0] == "gshot")
										{
											if(array2[i][1] != "")
											{
												array3 = array2[i][1].split("#");
												effcolor = int(array3[0]);
												if(effcolor != MP_myid || MP_spectator)
												{
													if(mens[effcolor])
													{
														if(MP_app)
														{
															if(mens[effcolor].hea >= mens[effcolor].hmax)
															{
																AnnoyPL(effcolor,"nod");
															}
														}
														if(HQ && !GET_LITE_PHYS())
														{
															i3 = aof[mens[effcolor].b_head_start];
															best_i = -1;
															best_dist = 0;
															i4 = 0;
															while(i4 < atotal)
															{
																if(aof[i4] == i3)
																{
																	tdist = Math_pow2(Number(ax[i4]) - Number(array3[1])) + Math_pow2(Number(ay[i4]) - Number(array3[2]));
																	if(best_i == -1 || tdist < best_dist)
																	{
																		best_i = i4;
																		best_dist = tdist;
																	}
																}
																i4++;
															}
															v = Math.max(0.3,Math.min(2,(130 - Number(mens[effcolor].hea)) / 70));
															if(best_i == mens[effcolor].b_head_start || best_i == mens[effcolor].b_head_end)
															{
																ablood[best_i] += v * 4;
															}
															else
															{
																ablood[best_i] += v * 2;
															}
														}
														FlowAt(Number(array3[1]),Number(array3[2]),0,Number(array3[3]),Number(array3[4]),Number(array3[5]));
														mc = mens[effcolor];
														if(SHOW_FRAG_MESSAGES)
														{
															if(int(array3[6]) == MP_myid)
															{
																if(effcolor != MP_myid)
																{
																	if(mens[int(array3[6])])
																	{
																		if(!mens[effcolor].dead)
																		{
																			if(SCREEN_EFFECTS)
																			{
																				whitness.alpha += 0.3;
																				whitness.visible = true;
																			}
																			if(array3[8] == undefined)
																			{
																				array3[8] = 30;
																			}
																			DamageReport(int(array3[8]));
																		}
																	}
																}
															}
														}
														if(array3[6] >= 0)
														{
															if(effcolor != array3[6])
															{
																GivePotentialExpSourceValue(mens[array3[6]],0.25);
															}
														}
														SimHitSound(mens[effcolor],Number(array3[1]),Number(array3[2]),Number(array3[7]));
														Hurt(effcolor);
													}
												}
											}
										}
										if(array2[i][0] == "heal")
										{
											if(MP_favor_the_shooter)
											{
												array3 = array2[i][1].split("#");
												array3[0] = int(array3[0]);
												if(array3[0] != MP_myid || MP_spectator)
												{
													if(mens[array3[0]])
													{
														if(mens[array3[1]])
														{
															array3[1] = int(array3[1]);
															array3[2] = Number(array3[2]);
															array3[3] = 0;
															array3[4];
															if(IsBulletHerePossible(ax[mens[array3[0]].b_body],ay[mens[array3[0]].b_body],array3[0],array3[1],ax[mens[array3[1]].b_body],ay[mens[array3[1]].b_body],-1,-1,false,array3[4]))
															{
																HealGunApplied(array3[1],mens[array3[0]],array3[2],array3[3],array3[4]);
															}
														}
													}
												}
											}
										}
										if(array2[i][0] == "w")
										{
											if(MP_favor_the_shooter)
											{
												array3 = array2[i][1].split("#");
												array3[0] = int(array3[0]);
												if(array3[0] != MP_myid || MP_spectator)
												{
													if(mens[array3[0]])
													{
														if(mens[array3[5]])
														{
															array3[1] = Number(array3[1]);
															array3[2] = array3[2] == "1";
															array3[3] = Number(array3[3]);
															array3[4] = Number(array3[4]);
															array3[5] = int(array3[5]);
															array3[6] = Number(array3[6]);
															array3[7] = Number(array3[7]);
															array3[8];
															i4 = 9;
															while(i4 < array3.length)
															{
																ApplyWaveDamageToPlayerAtom(array3[0],mens[array3[5]],array3[i4 + 0],array3[i4 + 1],array3[i4 + 2],array3[i4 + 3],array3[1],array3[2],array3[3],array3[4],array3[5] == MP_myid,array3[6],array3[7],-1,array3[8]);
																i4 += 4;
															}
														}
													}
												}
											}
										}
										if(array2[i][0] == "change_pw") {
											MP_pass = decode_packet(array2[i][1]);
										}
										if(array2[i][0] == "m_ow") {
											array3 = array2[i][1].split("#");
											level_variables[array3[0]] = array3[1];
											level_variable_changed(array3[0]);
										}
										if(array2[i][0] == "ct")
										{
											if(MP_favor_the_shooter)
											{
												array3 = array2[i][1].split("#");
												array3[0] = int(array3[0]);
												if(array3[0] != MP_myid || MP_spectator)
												{
													i4 = 0;
													while(i4 <= pulsmax)
													{
														if(puls[i4] != null)
														{
															if(puls[i4].visible == true)
															{
																if(puls[i4].master == array3[0])
																{
																	if(AllowExtraBulletClassSync(puls[i4]))
																	{
																		if(puls[i4].last_correct == undefined)
																		{
																			if(game.contains(puls[i4]))
																			{
																				if(puls[i4].attached != -1)
																				{
																					DisposeAtom(puls[i4].attached);
																				}
																				puls[i4].visible = false;
																				game.removeChild(puls[i4]);
																				puls[i4] = null;
																			}
																			else if(graphics_3d_front.contains(puls[i4]))
																			{
																				if(puls[i4].attached != -1)
																				{
																					DisposeAtom(puls[i4].attached);
																				}
																				puls[i4].visible = false;
																				graphics_3d_front.removeChild(puls[i4]);
																				puls[i4] = null;
																			}
																		}
																		else if(puls[i4].last_correct > 0)
																		{
																			--puls[i4].last_correct;
																		}
																		else
																		{
																			puls[i4].power = 0;
																		}
																	}
																}
															}
														}
														i4++;
													}
												}
											}
										}
										else if(array2[i][0] == "t")
										{
											if(MP_favor_the_shooter)
											{
												array3 = array2[i][1].split("#");
												array3[0] = int(array3[0]);
												array3[1] = Number(array3[1]);
												array3[2] = Number(array3[2]);
												array3[3] = int(array3[3]);
												detonate = false;
												if(array3[3] < 0)
												{
													array3[3] *= -1;
													detonate = true;
												}
												if(array3[0] != MP_myid || MP_spectator)
												{
													if(mens[array3[0]])
													{
														best_i4 = -1;
														best_di = 0;
														i4 = 0;
														while(i4 <= pulsmax)
														{
															if(puls[i4] != null)
															{
																if(puls[i4].visible == true)
																{
																	if(puls[i4].master == array3[0])
																	{
																		if(puls[i4].currentFrame == array3[3])
																		{
																			if(AllowExtraBulletClassSync(puls[i4]))
																			{
																				if(puls[i4].last_correct != 1)
																				{
																					di = Dist2D(puls[i4].x,puls[i4].y,array3[1],array3[2]);
																					if(di < 200)
																					{
																						if(best_i4 == -1 || best_di > di)
																						{
																							best_i4 = i4;
																							best_di = di;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
															i4++;
														}
														if(best_i4 != -1)
														{
															puls[best_i4].x = array3[1];
															puls[best_i4].y = array3[2];
															if(puls[best_i4].attached != -1)
															{
																ax[puls[best_i4].attached] = array3[1];
																ay[puls[best_i4].attached] = array3[2];
																WakeUpAtom(puls[best_i4].attached);
															}
															puls[best_i4].last_correct = 1;
															if(detonate)
															{
																puls[best_i4].power = 0;
															}
														}
													}
												}
											}
										}
										else if(array2[i][0] == "hit")
										{
											if(MP_favor_the_shooter)
											{
												array3 = array2[i][1].split("#");
												array3[0] = int(array3[0]);
												array3[1] = int(array3[1]);
												array3[2];
												array3[3] = Number(array3[3]);
												array3[4] = Number(array3[4]);
												array3[5] = int(array3[5]);
												array3[6] = Number(array3[6]);
												array3[7] = Number(array3[7]);
												array3[8] = Number(array3[8]);
												array3[9] = Number(array3[9]);
												array3[10] = int(array3[10]);
												array3[11];
												array3[12] = int(array3[12]);
												if(!(array3[0] == MP_myid && !MP_spectator))
												{
													if(mens[array3[1]])
													{
														if(mens[array3[0]])
														{
															GivePotentialExpSourceValue(mens[array3[0]],0.25);
															ApplyLimbDamageToPlayer(mens[array3[1]],array3[1],array3[2],array3[0],array3[3],array3[4],array3[5],array3[6],array3[7],array3[8],array3[9],array3[10],array3[11],true,mens[array3[1]].hea > 0,false,PlayerLocalAtomIDToGlobalAtomID(array3[12],mens[array3[1]]),array3[1] == MP_myid);
														}
													}
												}
											}
										}
										else if(array2[i][0] == "frag")
										{
											if(SHOW_FRAG_MESSAGES)
											{
												if(array2[i][1] != "" && array2[i][1] != undefined)
												{
													array3 = array2[i][1].split("#");
													array3[0] = int(array3[0]);
													array3[1] = int(array3[1]);
													if(array3[0] < 0)
													{
														continue;
													}
													if(array3[0] >= playerstotal)
													{
														continue;
													}
													if(array3[1] >= playerstotal)
													{
														continue;
													}
													if(!mens[array3[0]] || !mens[array3[0]].io)
													{
														continue;
													}
													if(array3[1] != -1)
													{
														if(array3[1] < -1)
														{
															continue;
														}
														if(!mens[array3[1]] || !mens[array3[1]].io)
														{
															continue;
														}
													}
													str = "";
													str4 = "";
													if(array3[0] != MP_myid || MP_spectator)
													{
														if(mens[array3[0]].hea > 0)
														{
															mens[array3[0]].hea = 0;
														}
														if(mens[array3[0]].ondeath != -1)
														{
															TRIGGER_PLAYER_INITIATOR = array3[0];
															TRIGGER_PLAYER_KILLER = array3[1];
															triggers[mens[array3[0]].ondeath].forcehyperjump = false;
															EXEC_TRIGGER(mens[array3[0]].ondeath);
														}
														if(mens[array3[0]].isplayer)
														{
															if(mens[array3[0]].voice.death.length > 0)
															{
																Say(mens[array3[0]],mens[array3[0]].voice.death[Math.floor(Math.random() * Number(mens[array3[0]].voice.death.length))],true);
															}
														}
													}
													MaybeInfoUpdateFor(array3[0]);
													MaybeInfoUpdateFor(array3[1]);
													if(array3[1] > 0)
													{
														GivePotentialExpSourceValue(mens[array3[1]],1);
													}
													if(array3[0] == MP_myid)
													{
														str4 = "<font color=\"#FF4444\">";
														++MP_real_deaths;
														if(MP_app)
														{
															ExpTask(EXP_TYPE_DEATH_IN_APPROVED,mens[array3[0]].nick,true);
														}
													}
													else if(mens[array3[0]].team == mens[MP_myid].team)
													{
														str4 = "<font color=\"#a61b1b\">";
													}
													else if(array3[1] == MP_myid)
													{
														str4 = "<font color=\"#44FF44\">";
														if(mens[array3[0]].team != mens[MP_myid].team)
														{
															if(MP_app && MP_mode && Boolean(mens[array3[0]].isplayer))
															{
																if(PlayerCanGiveExp(mens[array3[0]]))
																{
																	if(array3[2] == "item_grenade")
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_USING_GRENADE_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	else if(array3[2] == "nothing" || array3[2] == "wall" || array3[2] == "barrel" || array3[2] == "level" || array3[2] == "acid")
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_USING_WALL_OR_ACID_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	else if(array3[2] == "gun_defibrillator")
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_WITH_DEFIBRILLATOR_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	else if(array3[2] == "swords")
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_USING_SWORDS_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	else if(array3[3] == "head")
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_WITH_HEADSHOT_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	else
																	{
																		ExpTask(EXP_TYPE_KILL_IN_APPROVED,mens[array3[0]].nick,true);
																	}
																	extra_msg_offset = 1000;
																	if(mens[MP_myid].brk_legs)
																	{
																		ExpTask(EXP_TYPE_KILL_PLAYER_WITHOUT_LEGS_IN_APPROVED,mens[array3[0]].nick);
																	}
																	if(TraceLineF_nopushers(Number(ax[mens[array3[0]].b_toe]) - 5,ay[mens[array3[0]].b_toe],Number(ax[mens[array3[0]].b_toe]) - 50,ay[mens[array3[0]].b_toe] + 200))
																	{
																		if(TraceLineF_nopushers(ax[mens[array3[0]].b_toe] + 5,ay[mens[array3[0]].b_toe],ax[mens[array3[0]].b_toe] + 50,ay[mens[array3[0]].b_toe] + 200))
																		{
																			ExpTask(EXP_TYPE_KILL_PLAYER_MIDAIR_IN_APPROVED,mens[array3[0]].nick);
																		}
																	}
																	++MP_kills_in_a_row;
																	if(MP_kills_in_a_row > MP_kills_in_a_row_top)
																	{
																		MP_kills_in_a_row_top = MP_kills_in_a_row;
																		ExpTask(EXP_TYPE_STREAK,MP_kills_in_a_row.toString());
																	}
																}
																else
																{
																	ExpTask(EXP_TYPE_AFK_KILL,mens[array3[0]].nick,true);
																}
															}
														}
														else if(MP_app && MP_mode && Boolean(mens[array3[0]].isplayer))
														{
															ExpTask(EXP_TYPE_KILL_TEAMMATE_MP,mens[array3[0]].nick);
														}
														FragReport(mens[array3[0]].team == mens[MP_myid].team,mens[array3[0]]);
													}
													else
													{
														str4 = "<font color=\"#207933\">";
													}
													if(array3[1] != -1)
													{
														if(array3[0] == array3[1])
														{
															str3 = mens[array3[0]].nick.split("<").join("&lt;");
														}
														else
														{
															str3 = mens[array3[1]].nick.split("<").join("&lt;");
														}
													}
													else
													{
														str3 += "nothing";
													}
													str += mens[array3[0]].nick.split("<").join("&lt;");
													if((array3[2] == "nothing" || array3[0] == array3[1]) && array3[1] != -1 && array3[1] != array3[0])
													{
														if(array3[0] == array3[1])
														{
															i = Math.floor(Math.random() * (4 - 0.0001));
															if(i == 0)
															{
																str += " suicided";
															}
															if(i == 1)
															{
																str += " killed itself";
															}
															if(i == 2)
															{
																str += " become a victim of itself";
															}
															if(i == 3)
															{
																str += " made a mistake";
															}
														}
														else
														{
															str += " died";
														}
													}
													else if(array3[2] == "wall")
													{
														i = Math.floor(Number(array3[4]) * 30);
														if(array3[4] == undefined || array3[4] == "" || Number(array3[4]) >= 1)
														{
															i = 0;
														}
														if(i == 0)
														{
															str += " killed itself against the wall";
														}
														if(i == 1)
														{
															str += " rushed too fast";
														}
														if(i == 2)
														{
															str += " tried to go glitch through the wall";
														}
														if(i == 3)
														{
															str += " smeared on the wall";
														}
														if(i == 4)
														{
															str += " fell for the last time";
														}
														if(i == 5)
														{
															str += " broken";
														}
														if(i == 6)
														{
															str += " forgot its parachute";
														}
														if(i == 7)
														{
															str += " almost broken through the wall";
														}
														if(i == 8)
														{
															str += " met the wall at high speed";
														}
														if(i == 9)
														{
															str += "\'s guts now adorn the wall";
														}
														if(i == 10)
														{
															str += " flew into the wall";
														}
														if(i == 11)
														{
															str += " has been attacked by a wall";
														}
														if(i == 12)
														{
															str += " met the wall like its fate";
														}
														if(i == 13)
														{
															str += " chews granite";
														}
														if(i == 14)
														{
															str += " fell painfully";
														}
														if(i == 15)
														{
															str += " has been hammered like a nail";
														}
														if(i == 16)
														{
															str += " covers wall with its inner world";
														}
														if(i == 17)
														{
															str += " fails to break through the wall";
														}
														if(i == 18)
														{
															str = "Fast " + str + " was stopped by a slow wall";
														}
														if(i == 19)
														{
															str = "Wall was much stronger than " + str + "\'s head";
														}
														if(i == 20)
														{
															str += " merges into the wall";
														}
														if(i == 21)
														{
															str = "No one will envy " + str + " now";
														}
														if(i == 22)
														{
															str += " gets sleepy from wall attacks";
														}
														if(i == 23)
														{
															str += " goes for a nap";
														}
														if(i == 24)
														{
															str += " goes on a speed date with a concrete wall";
														}
														if(i == 25)
														{
															str += " leaves a huge spot on a wall";
														}
														if(i == 26)
														{
															try
															{
																map_author = CUR_CUSTOM_MAP.split("-")[0];
																if(map_author.charAt(map_author.length - 1) == "s")
																{
																	map_author += "\'";
																}
																else
																{
																	map_author += "\'s";
																}
																map_author = map_author.charAt(0).toUpperCase() + map_author.substr(1);
															}
															catch(e:Error)
															{
																str = "map maker\'s";
															}
															str = str + " is no match for " + map_author + " walls";
														}
														if(i == 27)
														{
															str = "Wall eliminates " + str;
														}
														if(i == 28)
														{
															str += " tries to find that station, lethally to himself";
														}
														if(i == 29)
														{
															str = "That blood stain is " + str;
														}
														if(array3[1] != -1)
														{
															if(array3[0] != -1)
															{
																if(array3[1] != array3[0])
																{
																	str += " thanks to " + str3;
																	if(mens[array3[0]].team == mens[array3[1]].team)
																	{
																		str = str3 + " killed its teammate " + mens[array3[0]].nick.split("<").join("&lt;");
																		str4 = "<font color=\"#FF4444\">";
																	}
																}
															}
														}
													}
													else if(array3[2] == "barrel")
													{
														i = Math.floor(Math.random() * (3 - 0.0001));
														if(i == 0)
														{
															str += " hugs explosive barrel";
														}
														if(i == 1)
														{
															str += " has been blown up by explosive barrel";
														}
														if(i == 2)
														{
															str += " has lost to explosive barrel";
														}
														if(array3[1] != -1)
														{
															if(array3[0] != -1)
															{
																str += " thanks to " + str3;
															}
														}
													}
													else if(array3[2] == "level")
													{
														str += " has died due to unexpected circumstances";
														if(array3[1] != -1)
														{
															if(array3[0] != -1)
															{
																str += " thanks to " + str3;
															}
														}
													}
													else if(array3[2] == "acid")
													{
														i = Math.floor(Math.random() * (5 - 0.0001));
														if(i == 0)
														{
															str += " dissolved";
														}
														if(i == 1)
														{
															str += " drank " + ACID_NAME.toLowerCase();
														}
														if(i == 2)
														{
															str += " has studied the properties of " + ACID_NAME.toLowerCase();
														}
														if(i == 3)
														{
															str += " bathed in " + ACID_NAME.toLowerCase();
														}
														if(i == 4)
														{
															str += " tried " + ACID_NAME.toLowerCase() + " on taste";
														}
														if(array3[1] != -1)
														{
															if(array3[0] != -1)
															{
																str += " thanks to " + str3;
															}
														}
													}
													else if(array3[1] != -1)
													{
														if(mens[array3[0]].team == mens[array3[1]].team)
														{
															if(array3[0] == array3[1])
															{
																str = str3 + " killed itself";
															}
															else
															{
																str = str3 + " killed its teammate " + mens[array3[0]].nick.split("<").join("&lt;");
															}
														}
														else if(array3[2] == "swords")
														{
															if(Math.random() > 0.5)
															{
																str = str3 + " sliced " + mens[array3[0]].nick.split("<").join("&lt;");
															}
															else
															{
																str = str3 + " cut " + mens[array3[0]].nick.split("<").join("&lt;");
															}
														}
														else if(array3[2] == "wave")
														{
															str = str3 + " eliminated " + mens[array3[0]].nick.split("<").join("&lt;");
														}
														else
														{
															str = str3 + " eliminated " + mens[array3[0]].nick.split("<").join("&lt;") + " via " + GunModelToGunName(array3[2]);
															if(array3[3] == "head")
															{
																str += " [ Headshot ]";
															}
														}
													}
													else
													{
														str += " died";
													}
													str5 = "";
													if(str4 != "")
													{
														str5 = "</font>";
													}
													str = str4 + str + str5;
													if(DISPLAY_CHAT >= 2 || DISPLAY_CHAT >= 1 && (array3[1] == MP_myid || array3[0] == MP_myid))
													{
														ChatNewMsg(str);
													}
												}
											}
										}
										else if(array2[i][0] == "exec")
										{
											if(array2[i][1] != "" && array2[i][1] != "undefined")
											{
												array3 = array2[i][1].split("#");
												if(int(array3[2]) != -1 && regions[int(array3[2])] && regions[int(array3[2])].use_on == PB2Region.USE_KEY_BUTTON || int(array3[1]) != MP_myid || MP_spectator)
												{
													TRIGGER_PLAYER_INITIATOR = int(array3[1]);
													if(array3.length > 3)
													{
														TRIGGER_PROJECTILE_POWER = Number(array3[3]);
													}
													else
													{
														TRIGGER_PROJECTILE_POWER = 0;
													}
													if(triggers[int(array3[0])])
													{
														triggers[int(array3[0])].forcehyperjump = true;
														EXEC_TRIGGER(int(array3[0]));
													}
												}
											}
										}
										else if(array2[i][0] == "sync") {
											if(ALLOW_VAR_SYNC) {
												if(array2[i][1] != "" && array2[i][1] != "undefined") {
													array3 = array2[i][1].split("#");
													
													varSynchronizer  = int(array3[0]);
													var syncType     = array3[1];
													var syncVar      = array3[2];
													var syncVal      = array3[3];

													callTriggerIfExists(syncVar, varSyncHooks)
													if (!varSyncApproved) {
														varSyncApproved = true;
														continue;
													}

													if(syncType == "r") {
														level_variables[syncVar] = syncVal;
														level_variable_changed(syncVar);
													}
													else if(syncType == "d") {
														if(level_variables[syncVar] == undefined || level_variables[syncVar] == "undefined" || level_variables[syncVar] == null || level_variables[syncVar] == "null" || Boolean(isNaN(level_variables[syncVar]))) {
															level_variables[syncVar] = syncVal;
															level_variable_changed(syncVar);
														}
													}
													else if(syncType == "x") {
														level_variables[syncVar] = Math.max(
															Number(syncVal),
															Number(level_variables[syncVar])
														);
														level_variable_changed(syncVar);
													}
													else if(syncType == "n") {
														level_variables[syncVar] = Math.min(
															Number(syncVal),
															Number(level_variables[syncVar])
														);
														level_variable_changed(syncVar);
													}
													else if(syncType == "l") {
														if(syncVal.length > (level_variables[syncVar] + "").length) {
															level_variables[syncVar] = syncVal;
															level_variable_changed(syncVar);
														}
													}
													callTriggerIfExists(syncVar, varSyncListeners);
												}
											}
										}
										else if(array2[i][0] == "srand") {
											array3 = array2[i][1].split("#");
											level_variables[array3[0]] = array3[1];
											level_variable_changed(array3[0]);
										}
										else if(array2[i][0] == "ss")
										{
											if(array2[i][1] != "" && array2[i][1] != undefined)
											{
												array3 = array2[i][1].split("#");
												if(int(array3[0]) != MP_myid)
												{
													if(mens[int(array3[0])])
													{
														mens[int(array3[0])].wea_shot = int(array3[3]);
														mens[int(array3[0])].mp_must_shoot_once = getTimer();
													}
												}
											}
										}
										else if(array2[i][0] == "acs")
										{
											if(array2[i][1] != "" && array2[i][1] != undefined)
											{
												array3 = array2[i][1].split("#");
												if(int(array3[0]) != MP_myid)
												{
													if(mens[int(array3[0])])
													{
														mens[int(array3[0])].mp_shot_correct = {
															"x":Number(array3[1]),
															"y":Number(array3[2]),
															"xx":Number(array3[3]),
															"time":getTimer()
														};
														if(Boolean(isNaN(mens[int(array3[0])].mp_shot_correct.x)) || Boolean(isNaN(mens[int(array3[0])].mp_shot_correct.y)) || Boolean(isNaN(mens[int(array3[0])].mp_shot_correct.xx)))
														{
															mens[int(array3[0])].mp_shot_correct = undefined;
														}
														mens[int(array3[0])].mp_must_shoot_once = getTimer();
													}
												}
											}
										}
										else if(array2[i][0] == "dd")
										{
											if(array2[i][1] != "" && array2[i][1] != undefined)
											{
												array3 = array2[i][1].split("#");
												mc = mens[int(array3[0])];
												if(int(array3[0]) != MP_myid || MP_spectator)
												{
													lax[mc.b_leg1] = ax[mc.b_leg1] = Number(array3[1]);
													lay[mc.b_leg1] = ay[mc.b_leg1] = Number(array3[2]);
													atox[mc.b_leg1] = Number(array3[3]);
													atoy[mc.b_leg1] = Number(array3[4]);
													lax[mc.b_leg2] = ax[mc.b_leg2] = Number(array3[5]);
													lay[mc.b_leg2] = ay[mc.b_leg2] = Number(array3[6]);
													atox[mc.b_leg2] = Number(array3[7]);
													atoy[mc.b_leg2] = Number(array3[8]);
													lax[mc.b_arm1] = ax[mc.b_arm1] = Number(array3[9]);
													lay[mc.b_arm1] = ay[mc.b_arm1] = Number(array3[10]);
													atox[mc.b_arm1] = Number(array3[11]);
													atoy[mc.b_arm1] = Number(array3[12]);
													lax[mc.b_arm2] = ax[mc.b_arm2] = Number(array3[13]);
													lay[mc.b_arm2] = ay[mc.b_arm2] = Number(array3[14]);
													atox[mc.b_arm2] = Number(array3[15]);
													atoy[mc.b_arm2] = Number(array3[16]);
													lax[mc.b_body] = ax[mc.b_body] = Number(array3[17]);
													lay[mc.b_body] = ay[mc.b_body] = Number(array3[18]);
													atox[mc.b_body] = Number(array3[19]);
													atoy[mc.b_body] = Number(array3[20]);
													lax[mc.b_toe] = ax[mc.b_toe] = Number(array3[21]);
													lay[mc.b_toe] = ay[mc.b_toe] = Number(array3[22]);
													atox[mc.b_toe] = Number(array3[23]);
													atoy[mc.b_toe] = Number(array3[24]);
													lax[mc.b_head_start] = ax[mc.b_head_start] = Number(array3[25]);
													lay[mc.b_head_start] = ay[mc.b_head_start] = Number(array3[26]);
													atox[mc.b_head_start] = Number(array3[27]);
													atoy[mc.b_head_start] = Number(array3[28]);
													lax[mc.b_head_end] = ax[mc.b_head_end] = Number(array3[29]);
													lay[mc.b_head_end] = ay[mc.b_head_end] = Number(array3[30]);
													atox[mc.b_head_end] = Number(array3[31]);
													atoy[mc.b_head_end] = Number(array3[32]);
													lax[mc.b_brk1] = ax[mc.b_brk1] = Number(array3[33]);
													lay[mc.b_brk1] = ay[mc.b_brk1] = Number(array3[34]);
													atox[mc.b_brk1] = Number(array3[35]);
													atoy[mc.b_brk1] = Number(array3[36]);
													lax[mc.b_brk2] = ax[mc.b_brk2] = Number(array3[37]);
													lay[mc.b_brk2] = ay[mc.b_brk2] = Number(array3[38]);
													atox[mc.b_brk2] = Number(array3[39]);
													atoy[mc.b_brk2] = Number(array3[40]);
												}
											}
										}
										else if(array2[i][0] == "gm")
										{
											array3 = array2[i][1].split("#");
											i2 = Number(array3[0]);
											if(MP_specials[i2] != null && MP_specials[i2] != undefined)
											{
												if(MP_specials[i2].refr != Number(array3[7]))
												{
													MP_specials[i2].refr = Number(array3[7]);
													ok = true;
													i3 = 0;
													while(i3 < MP_myspecials_total)
													{
														if(MP_myspecials[i3].stat == 3)
														{
															if(Number(array3[6]) == 1)
															{
																if(MP_myspecials[i3].id_in_full_list == i2)
																{
																	MP_myspecials[i3].stat = 0;
																}
															}
															ok = false;
														}
														++i3;
													}
													if(ok)
													{
														if(MP_specials[i2] != undefined)
														{
															if(MP_specials[i2] != null)
															{
																if(Number(array3[3]) != 0 || Number(array3[4]) != 0)
																{
																	if(MP_specials[i2].atom != -1)
																	{
																		atox[MP_specials[i2].atom] = Number(array3[3]);
																		atoy[MP_specials[i2].atom] = Number(array3[4]);
																		if(Number(array3[1]) != ax[MP_specials[i2].atom] || Number(array3[2]) != ay[MP_specials[i2].atom])
																		{
																			WakeUpAtom(MP_specials[i2].atom);
																			ax[MP_specials[i2].atom] = Number(array3[1]);
																			ay[MP_specials[i2].atom] = Number(array3[2]);
																			if(puls[MP_specials[i2].pul] != undefined)
																			{
																				if(puls[MP_specials[i2].pul] != null)
																				{
																					if(puls[MP_specials[i2].pul].nadekind == 3)
																					{
																						puls[MP_specials[i2].pul].stuckx = Number(array3[1]);
																						puls[MP_specials[i2].pul].stucky = Number(array3[2]);
																					}
																				}
																			}
																		}
																		else
																		{
																			ForceAtomSleep(MP_specials[i2].atom);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										else if(array2[i][0] == "gs")
										{
											array3 = array2[i][1].split("#");
											if(Number(array3[6]) != MP_myid || MP_spectator)
											{
												i2 = Number(array3[0]);
												xx = Number(array3[1]);
												yy = Number(array3[2]);
												xx2 = Number(array3[3]);
												yy2 = Number(array3[4]);
												i4 = int(array3[6]);
												i3 = Number(array3[5]);
												MP_specials[i2] = new Object();
												MP_specials[i2].refr = 0;
												if(puls[pulscur] != null)
												{
													if(game.contains(puls[pulscur]))
													{
														game.removeChild(puls[pulscur]);
														puls[pulscur] = null;
													}
												}
												puls[pulscur] = game.addChildAt(new lazer(),game.numChildren);
												NewBullet(puls[pulscur]);
												NoMouse(puls[pulscur]);
												puls[pulscur].lag = 0;
												PlaySound(s_nade_throw,xx,yy);
												puls[pulscur].thisis = "item_grenade";
												puls[pulscur].cclass = 6;
												puls[pulscur].notbliped = true;
												puls[pulscur].x = xx;
												puls[pulscur].y = yy;
												puls[pulscur].nx = xx;
												puls[pulscur].ny = yy;
												puls[pulscur].power = 3;
												puls[pulscur].maxpower = 3;
												puls[pulscur].knockback_multiplier = 1;
												if(mens[int(array3[6])] != null)
												{
													puls[pulscur].inwater = ainwater[mens[int(array3[6])].b_arm2] && wa_friction[ainwater_shape[mens[int(array3[6])].b_arm2]];
												}
												else
												{
													puls[pulscur].inwater = false;
												}
												puls[pulscur].lastin = 0;
												puls[pulscur].lastinbox = boxestotal;
												puls[pulscur].master = int(array3[6]);
												puls[pulscur].nadekind = i3;
												puls[pulscur].maxbulletlife = 60;
												if(i3 == 1)
												{
													// Inactive grenade projectile
													if(puls[pulscur].currentFrame != 11)
													{
														puls[pulscur].gotoAndStop(11);
													}
												}
												if(i3 == 2)
												{
													// Inactive portnade projectile
													if(puls[pulscur].currentFrame != 17)
													{
														puls[pulscur].gotoAndStop(17);
													}
												}
												if(i3 == 3)
												{
													// Inactive shield nade projectile
													if(puls[pulscur].currentFrame != 19)
													{
														puls[pulscur].gotoAndStop(19);
													}
													puls[pulscur].maxbulletlife = 60 + 30 * 60;
													puls[pulscur].hasexploded = false;
													puls[pulscur].radius = 0;
													puls[pulscur].hea = 10;
													puls[pulscur].heapo = 90;
													puls[pulscur].losthea = 0;
												}
												puls[pulscur].rotation = 90 - xx / Math.PI * 180;
												puls[pulscur].life = 0;
												puls[pulscur].spx = 0;
												puls[pulscur].spy = 0;
												puls[pulscur].attached = CreatePoint(puls[pulscur].x,puls[pulscur].y,puls[pulscur].spx,puls[pulscur].spy,3,true,8,-300 - pulscur);
												aactive[puls[pulscur].attached] = 1000;
												aactive[-300 - pulscur] = true;
												mens[int(array3[6])].arm_nade = puls[pulscur].attached;
												MP_specials[i2].pul = pulscur;
												MP_specials[i2].atom = puls[pulscur].attached;
												nextpul();
											}
										}
										else if(array2[i][0] == "gok")
										{
											array3 = array2[i][1].split("#");
											if(Number(array3[0]) == MP_myid && !MP_spectator)
											{
												if(StartMiniScenario(0))
												{
													++tnds;
													MP_assigning_special = Number(array3[1]);
													MP_myspecials[MP_assigning_special].stat = 2;
													MP_myspecials[MP_assigning_special].id_in_full_list = Number(array3[2]);
												}
											}
										}
									}
									catch(event_error:*)
									{
										ChatNewMsg("MPEventError: " + event_error.errorID + " :: " + array2[i].join("|").split("<").join("&lt;").split(">").join("&gt;"));
										continue;
									}
								}
							}
							mp_error_addr = 1010;
							if(herolist.visible)
							{
								herolist.f4.text = players_online + 1 + " / " + MP_playerstotal;
							}
							mp_error_addr = 1011;
							if(MP_mode)
							{
								if(!MP_force_disconnect)
								{
									MP_ping2 = (Number(getTimer()) - MP_ping1 + MP_ping2 * 10) / 11;
									if(Number(getTimer()) - MP_ping1 > 15)
									{
										MP_get();
									}
									else
									{
					 var tout = 15 - (Number(getTimer()) - MP_ping1);
					 if (tout < 0) tout = 0;
										setTimeout(function():*
										{
											VarChangePreventStart();
											MP_get();
											VarChangePreventEnd();
										},tout);
									}
								}
							}
						}
					}
				}
			}
			catch(e:Error)
			{
				ChatNewMsg("MPGeneralError: " + e.errorID + " :: " + e.message + " :: addr=" + mp_error_addr);
				NetCodeError("DONE: ERR = " + e);
			}
		}
		
		public function MorphWithTimeScale(from:Number, to:Number, mult:Number, speed:Number) : Number
		{
			mult = Math.pow(mult,speed);
			return to * (1 - mult) + from * mult;
		}
		
		public function limit(param1:Number, param2:Number, param3:Number) : Number
		{
			if(param2 < param1)
			{
				return param1;
			}
			if(param2 > param3)
			{
				return param3;
			}
			return param2;
		}
		
		// param 1 is a PB2 Player, 
		// Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4)
		public function Collision(param1:*, param2:int, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Number, param9:Boolean, param10:Number, param11:Number) : void
		{
			param7 = param4 - param3;
			param8 = param6 - param5;
			if(!param1.inwater)
			{
				if(param1.x >= param3 + 1)
				{
					if(param1.x <= param4 - 1)
					{
						if(param1.y >= param6 - sitmax * Number(param1.scale))
						{
							if(param1.y <= param6 + Number(param1.sit) * sitmax * Number(param1.scale))
							{
								hup = true;
							}
						}
					}
				}
				if(param1.sit != 0)
				{
					if(param1.x >= param3)
					{
						if(param1.x <= param4)
						{
							if(param1.y >= param6 - 5)
							{
								if(param1.y <= param6 + 5)
								{
									ok = true;
								}
							}
						}
					}
				}
			}
			if(MP_mode)
			{
				if(param1.tox > 0)
				{
					param4 += Number(param1.tox) * GSPEED2 * 2;
				}
				if(param1.tox < 0)
				{
					param3 += Number(param1.tox) * GSPEED2 * 2;
				}
				if(param1.toy > 0)
				{
					param6 += Number(param1.toy) * GSPEED2 * 2;
				}
				if(param1.toy < 0)
				{
					param5 += Number(param1.toy) * GSPEED2 * 2;
				}
			}
			else if(param2 == MP_myid)
			{
				param10 *= GSPEED / GSPEED2;
				param11 *= GSPEED / GSPEED2;
			}
			if(param1.x >= param3)
			{
				if(param1.x <= param4)
				{
					if(param1.y >= param5)
					{
						if(param1.y <= param6)
						{
							if(DEBUG_MODE)
							{
								debug_screen.graphics.lineStyle(2,16776960);
								debug_screen.graphics.moveTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
								debug_screen.graphics.lineTo(param1.x + PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
								debug_screen.graphics.lineTo(param1.x + PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * sitmax * Number(param1.scale));
								debug_screen.graphics.lineTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * sitmax * Number(param1.scale));
								debug_screen.graphics.lineTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
							}
							ok2 = true;
							if(param1.y < param5 + 42)
							{
								u = 0;
								v = 1;
								if(param1.x < param3 + PLAYER_WIDTH * Number(param1.scale) || param1.x > param4 - PLAYER_WIDTH * Number(param1.scale))
								{
									if(param1.x > (param3 + param4) / 2)
									{
										if(!TracePointOnlyBoxes(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale) - 5,param5 - 75 * Number(param1.scale)) || !TracePointOnlyBoxes(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale) - 5,param5 - 35 * Number(param1.scale)))
										{
											u = -1;
											v = 0;
										}
									}
									else if(!TracePointOnlyBoxes(param1.x + PLAYER_WIDTH * Number(param1.scale) + 5,param5 - 75 * Number(param1.scale)) || !TracePointOnlyBoxes(param1.x + PLAYER_WIDTH * Number(param1.scale) + 5,param5 - 35 * Number(param1.scale)))
									{
										u = 1;
										v = 0;
									}
								}
								if(v != 0)
								{
									if(param1.y > param5 + 15 * Number(param1.scale))
									{
										param1.tox *= 0.8;
									}
								}
							}
							else if(param1.y > param6 - 100 * Number(param1.scale))
							{
								u = 0;
								v = -1;
								if(param1.x > param4 - 20 * Number(param1.scale))
								{
									u = -1;
									v = 0;
								}
								if(param1.x < param3 + 20 * Number(param1.scale))
								{
									u = 1;
									v = 0;
								}
							}
							else
							{
								if(param7 > param8)
								{
									v = param5 + param8 * 0.5;
									param8 *= 0.5;
									u = Math.max(param3 + param8,Math.min(param4 - param8,Number(param1.x) - Number(param1.tox) * GSPEED));
								}
								else
								{
									u = param3 + param7 * 0.5;
									param7 *= 0.5;
									v = Math.max(param5 + param7,Math.min(param6 - param7,Number(param1.y) - 41 * Number(param1.scale) - Number(param1.toy) * GSPEED));
								}
								u -= Number(param1.x) - Number(param1.tox) * GSPEED;
								v -= Number(param1.y) - 41 * Number(param1.scale) - Number(param1.toy) * GSPEED;
							}
							if(Math_abs(u) > Math_abs(v))
							{
								if(Math_abs(Number(param1.tox) - param10) > 14 * Number(param1.mobility))
								{
									param1.stability -= Math_abs(Number(param1.tox) - param10) * 0.2;
								}
								if(Math_abs(Number(param1.tox) - param10) * GLOBAL_FALL_SENSITIVITY_MULT > 17)
								{
									PlaySound(s_body_fall,param1.x,param1.y);
									if(!MP_mode || MP_myid == param2 && !MP_spectator || !param1.isplayer)
									{
										effcolor = param2;
										if(u > 0)
										{
											FlowAt(param1.x + 20,Number(param1.y) - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
										}
										else
										{
											FlowAt(Number(param1.x) - 20,Number(param1.y) - Math.random() * 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
										}
										if(MP_mode && MP_myid == param2)
										{
											MP_custom_events += ";gshot|" + param2 + "#" + r2(param1.x + 20 * (u > 0 ? 1 : -1)) + "#" + r2(Number(param1.y) - Math.random() * 80) + "#" + r2(-3 + Math.random() * 6) + "#" + r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
										}
										if(MP_mode && (MP_type == 1 || MP_type == 3))
										{
											param1.hea -= Math_pow2(Number(param1.tox) - param10) * 0.1 * GLOBAL_FALL_DAMAGE_MULT;
											param1.hp_body -= Math_pow2(Number(param1.tox) - param10) * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
											param1.hp_legs -= Math_pow2(Number(param1.tox) - param10) * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
										}
										else
										{
											param1.hea -= Math_pow2(Number(param1.tox) - param10) * 0.2 * GLOBAL_FALL_DAMAGE_MULT;
											param1.hp_body -= Math_pow2(Number(param1.tox) - param10) * 0.1 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
											param1.hp_legs -= Math_pow2(Number(param1.tox) - param10) * 0.1 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
										}
										param1.lastshot = "body";
										param1.lastshotbygun = "wall";
										if(param2 == MP_myid)
										{
											HurtMyPlayer(u,0,Math_pow2(Number(param1.tox) - param10) * 0.1);
										}
										Hurt(param2);
									}
								}
								if(param1.hea > 0)
								{
									if(param1.act_movey == -1 && param6 > param1.y + 30 && (param2 != MP_myid && param1.isplayer || param2 == MP_myid && (u > 0 && param1.act_movex != 1 || u < 0 && param1.act_movex != -1)) && Math_abs(Number(param1.tox) - param10) > 6 && Math_abs(Number(param1.tox) - param10) < 16 && Number(param1.toy) - param11 > -8 && Number(param1.toy) - param11 < 4)
									{
										if(u < 0 && param1.x > (param3 + param4) / 2)
										{
											param1.tox = 7 * Number(param1.jump_scale) + param10;
										}
										else
										{
											param1.tox = -7 * Number(param1.jump_scale) + param10;
										}
										param1.toy = Math.min((param11 - 14 * Number(param1.jump_scale)) * 0.5,param1.toy);
										if(param2 == MP_myid)
										{
											incBadge(20);
										}
										TurnBone(param1.b_leg1,Number(param1.x) - Number(param1.tox) * 2 - 5 * Number(param1.scale),param1.y,param1,1);
										TurnBone(param1.b_leg2,Number(param1.x) - Number(param1.tox) * 2 + 5 * Number(param1.scale),param1.y,param1,1);
									}
									else
									{
										if(Math_abs(Number(param1.tox) - param10) < 4)
										{
											param1.tox = param10;
										}
										else
										{
											param1.toy = (param11 + Number(param1.toy) * 9) * 0.1;
										}
										if(u < 0)
										{
											if(param9)
											{
												param1.x = param4 + 1;
											}
											if(param9)
											{
												if(param1.tox < 0)
												{
													param1.tox = 0;
												}
											}
											param1.tox += Math_abs(Number(param1.tox) - param10) * 0.25;
										}
										else
										{
											if(param9)
											{
												param1.x = param3 - 1;
											}
											if(param9)
											{
												if(param1.tox > 0)
												{
													param1.tox = 0;
												}
											}
											param1.tox -= Math_abs(Number(param1.tox) - param10) * 0.25;
										}
									}
									if(param9)
									{
										if(u < 0)
										{
											rx = 1;
										}
										else
										{
											retux = 1;
										}
									}
								}
							}
							else
							{
								if(v < 0)
								{
									if(Math_abs(Number(param1.toy) - param11) > 12)
									{
										param1.stability -= Math_abs(Number(param1.toy) - param11) * 0.2;
									}
								}
								else if(Math_abs(Number(param1.toy) - param11) > 17)
								{
									param1.stability -= Math_abs(Number(param1.toy) - param11) * 0.05;
								}
								if(Math_abs(Number(param1.toy) - param11) * GLOBAL_FALL_SENSITIVITY_MULT > 17)
								{
									PlaySound(s_body_fall,param1.x,param1.y);
									if(!MP_mode || MP_myid == param2 && !MP_spectator || !param1.isplayer)
									{
										effcolor = param2;
										if(v < 0)
										{
											FlowAt(Number(param1.x) - 20 + Math.random() * 40,Number(param1.y) - 80,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
										}
										else
										{
											FlowAt(Number(param1.x) - 20 + Math.random() * 40,Number(param1.y) - 10,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
										}
										if(MP_mode && MP_myid == param2)
										{
											MP_custom_events += ";gshot|" + param2 + "#" + r2(Number(param1.x) - 20 + Math.random() * 40) + "#" + r2(v < 0 ? Number(param1.y) - 80 : Number(param1.y) - 10) + "#" + r2(-3 + Math.random() * 6) + "#" + r2(-3 + Math.random() * 6) + "#" + 5 + "#" + -1 + "#2" + "#" + 0;
										}
										if(v > 0)
										{
											if(MP_mode && (MP_type == 1 || MP_type == 3))
											{
												param1.hp_legs -= Math_pow2(Number(param1.toy) - param11) * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
												param1.hea -= Math_pow2(Number(param1.toy) - param11) * 0.1 * GLOBAL_FALL_DAMAGE_MULT;
											}
											else
											{
												param1.hp_legs -= Math_pow2(Number(param1.toy) - param11) * 0.1 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
												param1.hea -= Math_pow2(Number(param1.toy) - param11) * 0.2 * GLOBAL_FALL_DAMAGE_MULT;
											}
										}
										else if(MP_mode && (MP_type == 1 || MP_type == 3))
										{
											param1.hp_head -= Math_pow2(Number(param1.toy) - param11) * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
											param1.hea -= Math_pow2(Number(param1.toy) - param11) * 0.1 * GLOBAL_FALL_DAMAGE_MULT;
										}
										else
										{
											param1.hp_head -= Math_pow2(Number(param1.toy) - param11) * 0.1 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
											param1.hea -= Math_pow2(Number(param1.toy) - param11) * 0.2 * GLOBAL_FALL_DAMAGE_MULT;
										}
										param1.lastshot = "body";
										param1.lastshotbygun = "wall";
										if(param2 == MP_myid)
										{
											HurtMyPlayer(0,v,Math_pow2(Number(param1.toy) - param11) * 0.1);
										}
									}
									Hurt(param2);
								}
								if(param1.hea > 0)
								{
									if(!param1.stand)
									{
										param1.tox += (param10 / 6 - Number(param1.tox) / 6 / Number(param1.scale)) * thispulspeed * Number(param1.scale);
										if(param1.tox > param10 + 1.5 * thispulspeed * Number(param1.scale))
										{
											param1.tox -= 1.5 * thispulspeed * Number(param1.scale);
										}
										else if(param1.tox < param10 - 1.5 * thispulspeed * Number(param1.scale))
										{
											param1.tox += 1.5 * thispulspeed * Number(param1.scale);
										}
										else
										{
											param1.tox = param10;
										}
									}
									if(v < 0)
									{
										if(param9)
										{
											if(param1.toy < 0)
											{
												param1.toy = 0;
											}
										}
										param1.toy += (Math_abs(Number(param1.toy) - param11) + param11) * 0.25;
										ok = true;
										if(param9)
										{
											param1.y = param6 + 2;
										}
									}
									else
									{
										if(param9)
										{
											if(param11 < 0)
											{
												param1.toy = (param11 + param1.toy) * 0.5 + gravity;
											}
											else
											{
												param1.toy = param11;
											}
										}
										param1.stand = true;
										if(retuy != 1)
										{
											if(param9)
											{
												param1.y = param5 + 1;
											}
										}
									}
									if(param9)
									{
										if(v < 0)
										{
											retuy = 1;
										}
										else
										{
											ry = 1;
										}
									}
								}
							}
							if(DEBUG_MODE)
							{
								debug_screen.graphics.lineStyle(2,11206400);
								debug_screen.graphics.moveTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
								debug_screen.graphics.lineTo(param1.x + PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
								debug_screen.graphics.lineTo(param1.x + PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * sitmax * Number(param1.scale));
								debug_screen.graphics.lineTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - Number(param1.sit) * sitmax * Number(param1.scale));
								debug_screen.graphics.lineTo(Number(param1.x) - PLAYER_WIDTH * Number(param1.scale),Number(param1.y) - 82 * Number(param1.scale));
							}
						}
					}
				}
			}
		}
		
		public function UpdateTeamColor(param1:MovieClip) : void
		{
			if(MP_myid != param1.idd && !param1.textcolorchanged )
			{
				if(MP_myid < mens.length && mens[MP_myid] != null)
				{
					if(param1.team == mens[MP_myid].team)
					{
						param1.nick_color = color_friendly;
					}
					else
					{
						param1.nick_color = color_enemy;
					}
				}
			}
			else
			if(!param1.textcolorchanged)
			{
				param1.nick_color = color_player;
			}
			param1.gui.txt1.textColor = param1.nick_color;
		}
		
		public function ApplyPlayerRankText(player_mc:player) 
		{
				var html:String = player_mc.info.html;
				var clr:String = html.substr(19, 6);
				var color:int = parseInt(clr, 16)
				var new_filters:Array = new Array();
				var bevel:BevelFilter = new BevelFilter(4, 19, color, 1.0, color, 1.0, 23, 23, 1.07, BitmapFilterQuality.LOW,  BitmapFilterType.OUTER, false);
				new_filters[0] = player_mc.gui.txt2.filters[0];
				new_filters[1] = player_mc.gui.txt2.filters[1];
				new_filters[2] = bevel;
				player_mc.gui.txt2.htmlText = html;
				player_mc.gui.txt2.alpha = 0.8; //player_mc.idd == MP_myid ? 0.75 : 0.5;
				player_mc.gui.txt2.filters = new_filters;
		}
		

		public function SpawnPlayerImmediately(player_mc:player) : void
		{
			if(player_mc.notspawned)
			{
				player_mc.gotoAndStop(3);
				player_mc.gotoAndStop(2);
			}
			if(player_mc.info == undefined || SHOW_EXP_BAR == 1)
			{
				player_mc.gui.txt2.visible = false;
			}
			else
			{
			 ApplyPlayerRankText(player_mc);
			}
			if(MP_mode)
			{
				if(player_mc.idd == MP_myid)
				{
					CheckIfPlayerInfoUpdateNeeded(player_mc);
				}
			}
			player_mc.notspawned = false;
			player_mc.leg1.upper.gotoAndStop(player_mc.mdl_leg1_upper);
			// if (RASTERIZE_GRAPHICS) ForceRasterize(player_mc.leg1.upper);
			UpdateTeamColor(player_mc);
			player_mc.gui.txt1.text = player_mc.nick;
			if(MP_mode)
			{
				if(!player_mc.isplayer)
				{
					player_mc.gui.visible = false;
				}
				else if(ANONYMOUS_MODE)
				{
					if(player_mc.idd == MP_myid)
					{
						player_mc.gui.visible = true;
						if(player_mc.hea > 0)
						{
							player_mc.gui.alpha = 1;
						}
					}
				}
				else
				{
					player_mc.gui.visible = true;
					if(player_mc.hea > 0)
					{
						player_mc.gui.alpha = 1;
					}
				}
			}
			else
			{
				if(player_mc.team != mens[MP_myid].team || !PLAZMA_GAME)
				{
					player_mc.gui.visible = false;
				}
				else
				{
					player_mc.gui.visible = true;
					if(player_mc.hea > 0)
					{
						player_mc.gui.alpha = 1;
					}
				}
				i3 = -1;
				if(player_mc.char == 1)
				{
					i3 = 0;
				}
				if(player_mc.char == 3)
				{
					i3 = 1;
				}
				if(i3 != -1)
				{
					UpdatePlayerColorSP(player_mc,i3);
				}
			}
			if(player_mc.palette[0] != "-" || player_mc.palette[1] != "-" || player_mc.palette[2] != "-" || player_mc.palette[3] != "-")
			{
				UpdatePlayerColorMP(player_mc);
			}
			if(!player_mc.brk_legs)
			{
				player_mc.leg1.middle.gotoAndStop(player_mc.mdl_leg1_middle);
				player_mc.leg1.lower.gotoAndStop(player_mc.mdl_leg1_lower);
				/*if (RASTERIZE_GRAPHICS) {
					ForceRasterize(player_mc.leg1.middle);
					ForceRasterize(player_mc.leg1.lower);
				}*/
			}
			player_mc.leg2.upper.gotoAndStop(player_mc.mdl_leg2_upper);
			// if (RASTERIZE_GRAPHICS) ForceRasterize(player_mc.leg2.upper);
			if(!player_mc.brk_legs)
			{
				player_mc.leg2.middle.gotoAndStop(player_mc.mdl_leg2_middle);
				player_mc.leg2.lower.gotoAndStop(player_mc.mdl_leg2_lower);
				/*if (RASTERIZE_GRAPHICS) {
					ForceRasterize(player_mc.leg2.lower);
					ForceRasterize(player_mc.leg2.middle);
				}*/
			}
			player_mc.arm1.upper.gotoAndStop(player_mc.mdl_arm1_upper);
			// if (RASTERIZE_GRAPHICS) ForceRasterize(player_mc.arm1.upper);
			if(!player_mc.brk_arms)
			{
				player_mc.arm1.lower.gotoAndStop(player_mc.mdl_arm1_lower);
				/*if (RASTERIZE_GRAPHICS) {
					player_mc.arm1.lower.psi.visible = false;
					ForceRasterize(player_mc.arm1.lower, "psi");
					player_mc.arm1.lower.psi.visible = true;
					//RasterizeAllFrames(player_mc.arm1.lower.psi);
					player_mc.arm1.lower.psi.gotoAndStop(1);
					ForceRasterize(player_mc.arm1.lower.psi);
				}*/
			}
			player_mc.arm2.upper.gotoAndStop(player_mc.mdl_arm2_upper);
			// if (RASTERIZE_GRAPHICS) ForceRasterize(player_mc.arm2.upper);
			if(!player_mc.brk_arms)
			{
				player_mc.arm2.lower.gotoAndStop(player_mc.mdl_arm2_lower);
				/*if (RASTERIZE_GRAPHICS) {
					player_mc.arm2.lower.psi.visible = false;
					ForceRasterize(player_mc.arm2.lower, "psi");
					player_mc.arm2.lower.psi.visible = true;
					// RasterizeAllFrames(player_mc.arm2.lower.psi);
					player_mc.arm2.lower.psi.gotoAndStop(1);
					ForceRasterize(player_mc.arm2.lower.psi);
				}*/
			}
			if(!player_mc.brk_body)
			{
				player_mc.toe.gotoAndStop(player_mc.mdl_toe);
				player_mc.body.gotoAndStop(player_mc.mdl_body);
				/*if (RASTERIZE_GRAPHICS) {
					ForceRasterize(player_mc.toe);
					ForceRasterize(player_mc.body);
				}*/
				player_mc.toe.bloddy.visible = false;
			}
			if(!player_mc.brk_head)
			{
				player_mc.head.gotoAndStop(player_mc.mdl_head);
				//if (RASTERIZE_GRAPHICS) ForceRasterize(player_mc.head);
			}
			ChangedGun(player_mc.idd);
			RedrawPsi(player_mc.idd);
			if (player_mc.mdl3d) player_mc.mdl3d.fullUpdate(player_mc);
		}
		
		public function PhysHit(param1:int, param2:Number, param3:Number, param4:Number, param5:Number, param6:Number, param7:Number, param8:Object) : void
		{
			var _loc9_:Number = NaN;
			var _loc10_:Number = NaN;
			ok = false;
			cx = cy = 0;
			if(param8 == null)
			{
				_loc9_ = Number(ax[param1]) - Number(atox[param1]) * thispulspeed * extra_low_mult;
				_loc10_ = Number(ay[param1]) - Number(atoy[param1]) * thispulspeed * extra_low_mult;
			}
			else
			{
				_loc9_ = Number(param8.x);
				_loc10_ = Number(param8.y);
			}
			if(aof[param1] == MP_myid || aof[param1] == -1 || aactive[param1] == 1000)
			{
				if(atox[param1] > 0)
				{
					if(CheckCrossSimple(ax[param1],ay[param1],_loc9_,_loc10_,param2,param3,param2,param3 + param5))
					{
						ax[param1] = retux;
						ok = true;
						cx = 1;
						if(ay[param1] >= param3 + arad[param1] + 30)
						{
							if(ay[param1] <= param3 - Number(arad[param1]) + param5 - 30)
							{
								pres_left = true;
								pres_ok = true;
							}
						}
					}
				}
				else if(CheckCrossSimple(ax[param1],ay[param1],_loc9_,_loc10_,param2 + param4,param3,param2 + param4,param3 + param5))
				{
					ax[param1] = retux;
					ok = true;
					cx = -1;
					if(ay[param1] >= param3 + arad[param1] + 30)
					{
						if(ay[param1] <= param3 - Number(arad[param1]) + param5 - 30)
						{
							pres_right = true;
							pres_ok = true;
						}
					}
				}
				if(atoy[param1] > 0)
				{
					if(CheckCrossSimple(ax[param1],ay[param1],_loc9_,_loc10_,param2,param3,param2 + param4,param3))
					{
						ay[param1] = retuy;
						ok = true;
						cy = 1;
						if(ax[param1] >= param2 + arad[param1] + 30)
						{
							if(ax[param1] <= param2 - Number(arad[param1]) + param4 - 30)
							{
								pres_top = true;
								pres_ok = true;
							}
						}
					}
				}
				else if(CheckCrossSimple(ax[param1],ay[param1],_loc9_,_loc10_,param2,param3 + param5,param2 + param4,param3 + param5))
				{
					ay[param1] = retuy;
					ok = true;
					cy = -1;
					if(ax[param1] >= param2 + arad[param1] + 30)
					{
						if(ax[param1] <= param2 - Number(arad[param1]) + param4 - 30)
						{
							pres_bottom = true;
							pres_ok = true;
						}
					}
				}
			}
			if(!ok)
			{
				if(ax[param1] >= param2 - Number(arad[param1]))
				{
					if(ax[param1] <= param2 + arad[param1] + param4)
					{
						if(ay[param1] >= param3 - Number(arad[param1]) - 1)
						{
							if(ay[param1] <= param3 + arad[param1] + param5)
							{
								ok = true;
							}
						}
					}
				}
			}
			if(ok)
			{
				xx = 0;
				if(TracePointNoRagdolls(Number(ax[param1]) - Number(atox[param1]) * thispulspeed,Number(ay[param1]) - Number(atoy[param1]) * thispulspeed))
				{
					xx = 1;
					if(thispulspeed > 1)
					{
						xx *= thispulspeed;
					}
				}
				if(cx == 0 && cy == 0)
				{
					if(param5 < param4)
					{
						cx = Math.max(param2 + param5 / 2,Math.min(param2 + param4 - param5 / 2,Number(ax[param1]) - Number(atox[param1]) * xx));
						cy = param3 + param5 / 2;
					}
					else
					{
						cy = Math.max(param3 + param4 / 2,Math.min(param3 + param5 - param4 / 2,Number(ay[param1]) - Number(atoy[param1]) * xx));
						cx = param2 + param4 / 2;
					}
					cx = cx - Number(ax[param1]) + Number(atox[param1]) * xx;
					cy = cy - Number(ay[param1]) + Number(atoy[param1]) * xx;
				}
				if(Math_abs(cx) < Math_abs(cy))
				{
					xx = Math_abs(Number(atox[param1]) - param6);
					yy = Math_abs(Number(atoy[param1]) - param7);
				}
				else
				{
					xx = Math_abs(Number(atoy[param1]) - param7);
					yy = Math_abs(Number(atox[param1]) - param6);
				}
				if(yy > 14)
				{
					PAlert(Number(ax[param1]) - Number(atox[param1]),Number(ay[param1]) - Number(atoy[param1]));
				}
				if(amat[param1] == 0)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
						if(yy > 7)
						{
							i3 = int(Math.random() * 4);
							if(mens[aof[param1]].armored == 2)
							{
								if(i3 == 0)
								{
									PlaySound(s_robo_step1,ax[param1],ay[param1]);
								}
								else if(i3 == 1)
								{
									PlaySound(s_robo_step2,ax[param1],ay[param1]);
								}
								else if(i3 == 2)
								{
									PlaySound(s_robo_step3,ax[param1],ay[param1]);
								}
								else if(i3 == 3)
								{
									PlaySound(s_robo_step4,ax[param1],ay[param1]);
								}
							}
							else if(i3 == 0)
							{
								PlaySound(s_step1,ax[param1],ay[param1]);
							}
							else if(i3 == 1)
							{
								PlaySound(s_step2,ax[param1],ay[param1]);
							}
							else if(i3 == 2)
							{
								PlaySound(s_step3,ax[param1],ay[param1]);
							}
							else if(i3 == 3)
							{
								PlaySound(s_step4,ax[param1],ay[param1]);
							}
						}
					}
				}
				else if(amat[param1] == 1)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
						if(mens[aof[param1]].armored == 2)
						{
							if(xx > yy + 2)
							{
								PlaySound(s_metal0,ax[param1],ay[param1]);
							}
							else if(yy > 4)
							{
								if(yy < 6)
								{
									PlaySound(s_metal1,ax[param1],ay[param1]);
								}
								else if(yy < 8)
								{
									PlaySound(s_metal2,ax[param1],ay[param1]);
								}
								else
								{
									PlaySound(s_metal3,ax[param1],ay[param1]);
								}
							}
						}
						else if(xx > yy + 2)
						{
							PlaySound(s_body0,ax[param1],ay[param1]);
						}
						else if(yy > 4)
						{
							if(yy < 6)
							{
								PlaySound(s_body1,ax[param1],ay[param1]);
							}
							else if(yy < 8)
							{
								PlaySound(s_body2,ax[param1],ay[param1]);
							}
							else
							{
								PlaySound(s_body3,ax[param1],ay[param1]);
							}
						}
					}
				}
				else if(amat[param1] == 2)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
						if(yy > 4)
						{
							if(yy < 6)
							{
								PlaySound(s_wea1,ax[param1],ay[param1]);
							}
							else
							{
								PlaySound(s_wea2,ax[param1],ay[param1]);
							}
						}
					}
				}
				else if(amat[param1] == 3)
				{
					if(yy > 10)
					{
						if(barrels[-100 - Number(aof[param1])].hea > 0)
						{
							barrels[-100 - Number(aof[param1])].hea -= Math_abs(atoy[param1]) * 1;
							HurtBarrel(-100 - Number(aof[param1]));
						}
					}
				}
				else if(amat[param1] == 4)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
					}
				}
				else if(amat[param1] == 5 || amat[param1] == 6 || amat[param1] == 7)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
						if(xx > yy + 2)
						{
							if(amat[param1] == 5)
							{
								PlaySound(s_steel_hor,ax[param1],ay[param1]);
								Effect(ax[param1],ay[param1],8,0,0);
							}
						}
						else if(yy > 3)
						{
							if(amat[param1] == 5)
							{
								if(yy < 6)
								{
									PlaySound(s_steel_low,ax[param1],ay[param1]);
								}
								else if(yy < 14)
								{
									PlaySound(s_steel_med,ax[param1],ay[param1]);
								}
								else
								{
									PlaySound(s_steel_hard,ax[param1],ay[param1]);
								}
							}
							else if(amat[param1] == 6)
							{
								if(yy > 8 && atoy[param1] > 0)
								{
									PlaySound(s_walker_step,ax[param1],ay[param1]);
									atoy[param1] = 1;
								}
							}
							else if(yy > 11)
							{
								if(Math.random() > 0.5)
								{
									PlaySound(s_capsule_hit1,ax[param1],ay[param1]);
								}
								else
								{
									PlaySound(s_capsule_hit2,ax[param1],ay[param1]);
								}
							}
						}
						if(yy > 14)
						{
							Effect(ax[param1],ay[param1],8,0,0);
							Effect(ax[param1],ay[param1],8,0,0);
							Effect(ax[param1],ay[param1],8,0,0);
							Effect(ax[param1],ay[param1],8,0,0);
							Effect(ax[param1],ay[param1],8,0,0);
							if(amat[param1] != 6)
							{
								vehicles[-Number(aof[param1]) - 200].hea -= yy * yy / 13;
							}
						}
					}
				}
				else if(amat[param1] == 8)
				{
					if(yy > 5)
					{
						if(aof[param1] != -1 && puls[-Number(aof[param1]) - 300].currentFrame == 52)
						{
							PlaySound(s_grenade_wet,ax[param1],ay[param1]);
						}
						else
						{
							PlaySound(s_grenade,ax[param1],ay[param1]);
						}
					}
					if(aof[param1] != -1)
					{
						if(puls[-Number(aof[param1]) - 300].currentFrame == 42 || puls[-Number(aof[param1]) - 300].currentFrame == 49 || puls[-Number(aof[param1]) - 300].currentFrame == 55)
						{
							puls[-Number(aof[param1]) - 300].life = puls[-Number(aof[param1]) - 300].maxbulletlife + 1;
							atox[param1] = 0;
							atoy[param1] = 0;
						}
						if(puls[-Number(aof[param1]) - 300].currentFrame == 45 || puls[-Number(aof[param1]) - 300].currentFrame == 52)
						{
							atox[param1] = 0;
							atoy[param1] = 0;
							if(Math_abs(cx) > Math_abs(cy))
							{
								ax[param1] += cx > 0 ? 1 : -1;
							}
							else
							{
								ay[param1] += cy > 0 ? 1 : -1;
							}
						}
					}
				}
				else if(amat[param1] == 9)
				{
					if(acollided[param1] == 0)
					{
						acollided[param1] = 1;
						if(xx > yy + 2)
						{
							PlaySound(s_box_hor,ax[param1],ay[param1]);
						}
						else if(yy > 3)
						{
							if(yy < 6)
							{
								PlaySound(s_box_low,ax[param1],ay[param1]);
							}
							else if(yy < 8)
							{
								PlaySound(s_box_med,ax[param1],ay[param1]);
							}
							else
							{
								PlaySound(s_box_hard,ax[param1],ay[param1]);
							}
						}
						if(yy > 12)
						{
							vehicles[-Number(aof[param1]) - 200].hea -= yy * yy / 13;
						}
					}
				}
				else if(amat[param1] == 10)
				{
					if(yy > 5)
					{
						PlaySound(s_robo_bug_hit,ax[param1],ay[param1]);
					}
				}
				if(amat[param1] == 1 || amat[param1] == 0)
				{
					if(mens[aof[param1]].stability < 0 || mens[aof[param1]].hea <= 0)
					{
						if(yy * GLOBAL_FALL_SENSITIVITY_MULT > 18)
						{
							PlaySound(s_body_fall,ax[param1],ay[param1]);
							if(!MP_mode || MP_myid == aof[param1] && !MP_spectator || !mens[aof[param1]].isplayer)
							{
								if(MP_mode && (MP_type == 1 || MP_type == 3))
								{
									mens[aof[param1]].hea -= yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT;
								}
								else
								{
									mens[aof[param1]].hea -= yy * yy * 0.1 * GLOBAL_FALL_DAMAGE_MULT;
								}
								if(param1 == mens[aof[param1]].b_leg1 || param1 == mens[aof[param1]].b_leg2)
								{
									mens[aof[param1]].hp_legs -= yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
								}
								else if(param1 == mens[aof[param1]].b_body || param1 == mens[aof[param1]].b_toe)
								{
									mens[aof[param1]].hp_body -= yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
								}
								else if(param1 == mens[aof[param1]].b_head_end || param1 == mens[aof[param1]].b_head_start)
								{
									mens[aof[param1]].hp_head -= yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
									if(MP_mode && (MP_type == 1 || MP_type == 3))
									{
										mens[aof[param1]].hea -= yy * yy * 0.1 * GLOBAL_FALL_DAMAGE_MULT;
									}
									else
									{
										mens[aof[param1]].hea -= yy * yy * 0.2 * GLOBAL_FALL_DAMAGE_MULT;
									}
								}
								else if(param1 == mens[aof[param1]].b_arm1 || param1 == mens[aof[param1]].b_arm2)
								{
									mens[aof[param1]].hp_arms -= yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT * GLOBAL_FALL_DAMAGE_MULT_LIMBS;
								}
								mens[aof[param1]].lastshot = "body";
								mens[aof[param1]].lastshotbygun = "wall";
								effcolor = aof[param1];
								FlowAt(ax[param1],ay[param1],0,-Number(atox[param1]),-Number(atoy[param1]),3);
								if(MP_mode && MP_myid == aof[param1])
								{
									MP_custom_events += ";gshot|" + aof[param1] + "#" + r2(ax[param1]) + "#" + r2(ay[param1]) + "#" + r2(-Number(atox[param1])) + "#" + r2(-Number(atoy[param1])) + "#" + 3 + "#" + -1 + "#2" + "#" + 0;
								}
								Hurt(aof[param1]);
								if(aof[param1] == MP_myid)
								{
									HurtMyPlayer(atox[param1],atoy[param1],yy * yy * 0.05 * GLOBAL_FALL_DAMAGE_MULT);
								}
							}
						}
					}
				}
				if(Math_abs(cx) > Math_abs(cy))
				{
					if(around[param1])
					{
						atoy[param1] *= Math.pow(0.95,thispulspeed);
					}
					else
					{
						atoy[param1] = (param7 + Number(atoy[param1]) * 5) / 6;
						if(atoy[param1] > param7 + gravity * 1)
						{
							atoy[param1] -= gravity * 1;
						}
						else if(atoy[param1] < param7 - gravity * 1)
						{
							atoy[param1] += gravity * 1;
						}
						else
						{
							atoy[param1] = param7;
						}
					}
					if(cx < 0)
					{
						ax[param1] = param2 + param4 + arad[param1];
						lax[param1] = param2 + param4 + arad[param1];
						atox[param1] = Math_abs(atox[param1]) * 0.5;
						if(ay[param1] >= param3 + arad[param1] + 30)
						{
							if(ay[param1] <= param3 - Number(arad[param1]) + param5 - 30)
							{
								pres_right = true;
								pres_ok = true;
							}
						}
					}
					else
					{
						ax[param1] = param2 - Number(arad[param1]);
						lax[param1] = param2 - Number(arad[param1]);
						atox[param1] = -Math_abs(atox[param1]) * 0.5;
						if(ay[param1] >= param3 + arad[param1] + 30)
						{
							if(ay[param1] <= param3 - Number(arad[param1]) + param5 - 30)
							{
								pres_left = true;
								pres_ok = true;
							}
						}
					}
				}
				else
				{
					if(around[param1])
					{
						atox[param1] *= Math.pow(0.95,thispulspeed);
					}
					else
					{
						atox[param1] = (param6 + Number(atox[param1]) * 5) / 6;
						if(amat[param1] == 6)
						{
							atox[param1] = param6;
						}
						if(atox[param1] > param6 + gravity * 1)
						{
							atox[param1] -= gravity * 1;
						}
						else if(atox[param1] < param6 - gravity * 1)
						{
							atox[param1] += gravity * 1;
						}
						else
						{
							atox[param1] = param6;
						}
					}
					if(cy < 0)
					{
						ay[param1] = param3 + arad[param1] + param5;
						lay[param1] = param3 + arad[param1] + param5;
						atoy[param1] = param7 + Math_abs(Number(atoy[param1]) - param7) * 0.5;
						if(ax[param1] >= param2 + arad[param1] + 30)
						{
							if(ax[param1] <= param2 - Number(arad[param1]) + param4 - 30)
							{
								pres_bottom = true;
								pres_ok = true;
							}
						}
					}
					else
					{
						if(amat[param1] == 6)
						{
							ay[param1] = param3 - Number(arad[param1]) + 2;
							lay[param1] = param3 - Number(arad[param1]) + 2;
							if(atoy[param1] > 0)
							{
								atoy[param1] = 1;
							}
						}
						else
						{
							ay[param1] = param3 - Number(arad[param1]);
							lay[param1] = param3 - Number(arad[param1]);
							atoy[param1] = param7 - Math_abs(Number(atoy[param1]) - param7) * 0.5;
						}
						if(ax[param1] >= param2 + arad[param1] + 30)
						{
							if(ax[param1] <= param2 - Number(arad[param1]) + param4 - 30)
							{
								pres_top = true;
								pres_ok = true;
							}
						}
					}
				}
			}
		}
		
		public function MeasureStart(param1:uint) : void
		{
		}
		
		public function MeasureStop(param1:uint) : void
		{
		}
		
		public function MeasuresReset() : void
		{
		}
		
		public function MeasuresMaybePrint() : void
		{
			var _loc1_:uint = 0;
		}
		
		public function Physics() : void
		{
			EXT.startMeasure(2);

			if(GET_LITE_PHYS()) // If game is on low physics (low physics setting turned on AND not in an APPROVED & MULTIPLAYER match.)
			{
				// LITE_PHYS_tim toggles between true and false every render.
				if(LITE_PHYS_tim)
				{
					LITE_PHYS_from = 0;
				}
				else
				{
					LITE_PHYS_from = 1;
				}
				extra_low_mult = 2;
			}
			else // If game is on high physics
			{
				LITE_PHYS_from = 0;
				extra_low_mult = 1;
			}

			// Looping through all the atoms in the PB2 world. 
			// Every entity that has physics properties (characters, guns, vehicles, decorations, ..) is made up of atoms
			// Atoms are individual components like a circle that is responsible for physics like collision detection..
			for(i = 0; i < atotal; i++)
			{
				// EVEN OR ODD CHECK
				if(GET_LITE_PHYS() && Math.ceil(Number(aof[i]) / 2 - Math.floor(Number(aof[i]) / 2)) == LITE_PHYS_from)
				{
					MeasureStart(0);
					if(aio[i] == true)
					{
						if(!MP_mode || TraceLineF_nopushers(ax[i],ay[i],lax[i] + atox[i],lay[i] + atoy[i]))
						{
							ax[i] = lax[i] + Number(atox[i]) * GSPEED;
							ay[i] = lay[i] + Number(atoy[i]) * GSPEED;
						}
					}
					MeasureStop(0);
				}
				else if(aio[i] != -1)
				{
					MeasureStart(1);
					if(aof[i] == MP_myid)
					{
						thispulspeed = GSPEED2;
					}
					else
					{
						thispulspeed = GSPEED;
					}
					if(GET_LITE_PHYS())
					{
						thispulspeed *= 2;
						lax[i] = ax[i];
						lay[i] = ay[i];
					}
					if(aactive[i] == 1000 || Boolean(aactive[aof[i]]))
					{
						MeasureStart(4);
						if(RAGDOLL_COLLIDE && (MP_gamestate != 2 || !MP_mode))
						{
							if(arad[i] > 1)
							{
								if(aio[i] != -1)
								{
									if(amat[i] != -1)
									{
										for(i2 = i + 1; i2 < atotal; i2++)
										{
											MeasureStart(2);
											var _loc1_:Number = arad[i] + arad[i2];
											if(ax[i] > Number(ax[i2]) - _loc1_)
											{
												if(ax[i] < ax[i2] + _loc1_)
												{
													if(ay[i] > Number(ay[i2]) - _loc1_)
													{
														if(ay[i] < ay[i2] + _loc1_)
														{
															if(aof[i] != aof[i2])
															{
																if(aio[i2] == true || aio[i] == true)
																{
																	if(Boolean(aactive[aof[i2]]) || aactive[i2] == 1000)
																	{
																		if(aio[i2] != -1)
																		{
																			if(amat[i2] != -1)
																			{
																				if(arad[i2] > 1)
																				{
																					if(aof[i] < 0 || mens[aof[i]].incar == -1)
																					{
																						if(aof[i2] < 0 || mens[aof[i2]].incar == -1)
																						{
																							MeasureStop(2);
																							xx = Dist2D(ax[i],ay[i],ax[i2],ay[i2]);
																							if(xx > 1)
																							{
																								if(xx < _loc1_)
																								{
																									MeasureStart(3);
																									cx = (ax[i] + ax[i2]) * 0.5;
																									cy = (ay[i] + ay[i2]) * 0.5;
																									offset_balance = arad[i2] / (arad[i] + arad[i2]);
																									temp_coef = 20 / xx * (GSPEED < 2 ? GSPEED : 2) * (arad[i] + arad[i2] - xx) / (arad[i] + arad[i2]);
																									yy = offset_balance * temp_coef;
																									atox[i] += (Number(ax[i]) - cx) * yy;
																									atoy[i] += (Number(ay[i]) - cy) * yy;
																									ax[i] += (Number(ax[i]) - cx) * yy;
																									ay[i] += (Number(ay[i]) - cy) * yy;
																									yy = (1 - offset_balance) * temp_coef;
																									atox[i2] += (Number(ax[i2]) - cx) * yy;
																									atoy[i2] += (Number(ay[i2]) - cy) * yy;
																									ax[i2] += (Number(ax[i2]) - cx) * yy;
																									ay[i2] += (Number(ay[i2]) - cy) * yy;
																									cx = (atox[i] + atox[i2]) * 0.5;
																									cy = (atoy[i] + atoy[i2]) * 0.5;
																									atox[i] = (Number(atox[i]) * 3 + cx) * 0.25;
																									atoy[i] = (Number(atoy[i]) * 3 + cy) * 0.25;
																									atox[i2] = (Number(atox[i2]) * 3 + cx) * 0.25;
																									atoy[i2] = (Number(atoy[i2]) * 3 + cy) * 0.25;
																									if(arad[i2] > 25 && arad[i] > 25)
																									{
																										acollided[i] = 1;
																										acollided[i2] = 1;
																										if(amat[i] == 6)
																										{
																											atoy[i] -= 0.2;
																										}
																										if(amat[i2] == 6)
																										{
																											atoy[i2] -= 0.2;
																										}
																									}
																									if(VectorDist2D(atox[i],atoy[i]) + VectorDist2D(atox[i2],atoy[i2]) > 2 * (GSPEED > 1 ? GSPEED : 1) * (GET_LITE_PHYS() ? 2 : 1))
																									{
																										WakeUpAtom(i2);
																										WakeUpAtom(i);
																									}
																									else
																									{
																										ForceAtomSleep(i2);
																										ForceAtomSleep(i);
																									}
																									MeasureStop(3);
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
						MeasureStop(4);
						if(aio[i] == true)
						{
							MeasureStart(5);
							ax[i] += Number(atox[i]) * thispulspeed;
							ay[i] += Number(atoy[i]) * thispulspeed;
							i2 = 0;
							while(i2 < pushstotal)
							{
								if(ax[i] > pushx[i2])
								{
									if(ax[i] < pushw[i2])
									{
										if(ay[i] > pushy[i2])
										{
											if(ay[i] < pushh[i2])
											{
												atox[i] += Number(pushtox[i2]) * thispulspeed;
												atoy[i] += Number(pushtoy[i2]) * thispulspeed;
											}
										}
									}
								}
								++i2;
							}
							if(ay[i] > g_maxy)
							{
								atox[i] *= 0.5;
								atoy[i] *= 0.5;
								atoy[i] -= gravity * 2;
							}
							xx = VectorDist2D(atox[i],atoy[i]);
							if(ainwater[i])
							{
								xx *= 2;
							}
							if(GSPEED > 1)
							{
								xx /= GSPEED;
							}
							if(GET_LITE_PHYS())
							{
								xx /= 2;
							}
							if(xx < gravity * 2.5)
							{
								atim[i] += GSPEED;
								if(atim[i] > 10)
								{
									ForceAtomSleep(i);
								}
							}
							else if(ax[i] > render_minX && ax[i] < render_maxX && ay[i] > render_minY && ay[i] < render_maxY)
							{
								atim[i] = 0;
							}
							else if(xx < gravity * 3)
							{
								atim[i] += GSPEED;
								if(atim[i] > 20)
								{
									ForceAtomSleep(i);
								}
							}
							if(acollided[i] == 1)
							{
								acollided[i] = 2;
							}
							else
							{
								acollided[i] = 0;
							}
							ok = false;
							i2 = 0;
							while(i2 < waterstotal && !ok)
							{
								if(ax[i] > wax[i2])
								{
									if(ax[i] < wax[i2] + waw[i2])
									{
										if(ay[i] > way[i2])
										{
											if(ay[i] < way[i2] + wah[i2])
											{
												ok = true;
												u = way[i2];
												ainwater_shape[i] = i2;
											}
										}
									}
								}
								++i2;
							}
							if(ok)
							{
								if(!ainwater[i])
								{
									if(wa_friction[ainwater_shape[i]])
									{
										if(xx > 4)
										{
											Effect(ax[i],u,3,0,atoy[i]);
										}
									}
									ainwater[i] = true;
								}
								if(wa_friction[ainwater_shape[i]])
								{
									if(aof[i] >= 0)
									{
										if(mens[aof[i]].hea > 0)
										{
											atoy[i] -= gravity * thispulspeed;
										}
										else
										{
											atoy[i] -= gravity * 1.5 * thispulspeed;
										}
									}
									else
									{
										atoy[i] -= gravity * 0.5 * thispulspeed;
									}
									if(amat[i] == 4 || amat[i] == 5)
									{
										atoy[i] -= gravity * thispulspeed;
									}
									atox[i] *= Math.pow(0.9,thispulspeed);
									atoy[i] *= Math.pow(0.9,thispulspeed);
								}
								else
								{
									atoy[i] -= gravity * thispulspeed;
								}
							}
							else if(ainwater[i])
							{
								if(wa_friction[ainwater_shape[i]])
								{
									if(xx > 4)
									{
										Effect(ax[i],ay[i],3,0,atoy[i]);
									}
								}
								ainwater[i] = false;
							}
							if(aof[i] >= 0 && mens[aof[i]].incar == -1)
							{
								if(ablood[i] > 0)
								{
									if(ablood[i] > 10)
									{
										ablood[i] = 10;
									}
									else if(Boolean(mens[aof[i]].dead) || !mens[aof[i]].dying)
									{
										ablood[i] -= 0.2 * thispulspeed;
									}
									if(Math.random() > 0.8)
									{
										if(mens[aof[i]].armored < 2)
										{
											effcolor = aof[i];
											FlowAt(ax[i],ay[i],0,atox[i],atoy[i],1);
										}
										else
										{
											Effect(ax[i],ay[i],8,0,-2);
										}
									}
								}
							}
							pres_ok = false;
							pres_left = pres_right = pres_top = pres_bottom = false;
							near_atom = GetNearBoxBSP_at(ax[i],ay[i]);
							f_ok = true;
							f_min = gravity * thispulspeed;
							MeasureStop(5);
							MeasureStart(6);
							for each(i2 in near_atom)
							{
								if(ax[i] >= boxx[i2] && ax[i] <= boxx[i2] + boxw[i2] && ay[i] + arad[i] + thispulspeed >= boxy[i2] && ay[i] <= boxy[i2] + boxh[i2])
								{
									f_ok = false;
									f_min = Math.min(boxy[i2] - (ay[i] + arad[i]),f_min);
									break;
								}
							}
							if(f_ok)
							{
								atoy[i] += f_min;
							}
							MeasureStop(6);
							MeasureStart(7);
							var _loc2_:Object = GetAtomOriginalPosition(i);
							if(amat[i] != 1 && amat[i] != 0 || (amat[i] == 1 || amat[i] == 0) && mens[aof[i]].incar == -1)
							{
								for each(i2 in near_atom)
								{
									PhysHit(i,boxx[i2],boxy[i2],boxw[i2],boxh[i2],0,0,_loc2_);
								}
								i2 = 0;
								while(i2 < doorstotal)
								{
									PhysHit(i,doors[i2].x,doors[i2].y,doors[i2].w,doors[i2].h,doors[i2].tox,doors[i2].toy,_loc2_);
									++i2;
								}
							}
							MeasureStop(7);
							MeasureStart(8);
							if(pres_ok)
							{
								if(aof[i] >= 0 && aof[i] < 100)
								{
									if(mens[aof[i]] && mens[aof[i]].io)
									{
										mc = mens[aof[i]];
										if(!MP_mode || !mc.isplayer || aof[i] == MP_myid)
										{
											if(mc.stability <= 0)
											{
												if(pres_left && pres_right || pres_top && pres_bottom)
												{
													mc.stability = Math.min(mc.stability,-0.1);
													if(mc.pressure > 10)
													{
														if(i == mc.b_body || i == mc.b_toe)
														{
															mc.hp_body = 0;
															mc.hea = 0;
															Hurt(aof[i]);
														}
														if(Boolean(mc.dying) || Boolean(mc.dead))
														{
															if(i == mc.b_leg1 || i == mc.b_leg2)
															{
																mc.hp_legs = 0;
																Hurt(aof[i]);
															}
															if(i == mc.b_head_end)
															{
																mc.hp_head = 0;
																Hurt(aof[i]);
															}
															if(i == mc.b_arm1 || i == mc.b_arm2)
															{
																mc.hp_arms = 0;
																Hurt(aof[i]);
															}
														}
														if(mc.team != mens[MP_myid].team)
														{
															incBadge(8);
														}
													}
													else
													{
														if(mc.pressure == 0)
														{
															Hurt(aof[i]);
														}
														mc.pressure += Math.ceil(4 * GSPEED);
													}
												}
												else if(!mc.dead)
												{
													if(mc.pressure > 0)
													{
														mc.pressure -= Math.ceil(2 * GSPEED);
													}
												}
											}
										}
									}
								}
							}
							MeasureStop(8);
						}
						else if(aio[i] == false)
						{
							atox[i] = 0;
							atoy[i] = 0;
						}
					}
					else if(TracePointNoRagdolls(ax[i],ay[i] + arad[i] + 3))
					{
						atox[i] *= 0.98;
						atoy[i] *= 0.98;
					}
					else
					{
						ForceAtomSleep(i);
					}
					MeasureStop(1);
				}
			}
			MeasuresMaybePrint();
			EXT.stopMeasure(2);
			Physics2();
		}
		
		public function Physics2() : void
		{
			EXT.startMeasure(3);
			phys_stress = 0;
			phys_got_stress = true;
			while(phys_stress < 4 && phys_got_stress)
			{
				phys_got_stress = false;
				i2 = 0;
				while(i2 < chtotal)
				{
					if(chio[i2] != -1)
					{
						if(aactive[chP[i2]] == 1000 || Boolean(aactive[aof[chP[i2]]]))
						{
							if(chio[i2] == true || chio[i2] == false)
							{
								if(DEBUG_MODE)
								{
									ok = false;
								}
								if(aio[chP[i2]] == 2 || aio[chC[i2]] == 2)
								{
									chio[i2] = 2;
								}
								if(aio[chP[i2]] == -1 || aio[chC[i2]] == -1)
								{
									chio[i2] = -1;
									DisposeAtom(chP[i2]);
									DisposeAtom(chC[i2]);
								}
								if(chio[i2] == true || chio[i2] == false)
								{
									if(aio[chP[i2]] == false && aio[chC[i2]] == false)
									{
										chio[i2] = false;
									}
									else
									{
										chio[i2] = true;
										WakeUpAtom(chP[i2],false);
										WakeUpAtom(chC[i2],false);
									}
								}
								if(chio[i2] == true)
								{
									cx = (ax[chP[i2]] + ax[chC[i2]]) * 0.5;
									cy = (ay[chP[i2]] + ay[chC[i2]]) * 0.5;
									if(aof[chP[i2]] == MP_myid)
									{
										thispulspeed = GSPEED2;
									}
									else
									{
										thispulspeed = GSPEED;
									}
									if(GET_LITE_PHYS())
									{
										thispulspeed *= 2;
									}
									xx = Dist2D(ax[chP[i2]],ay[chP[i2]],ax[chC[i2]],ay[chC[i2]]);
									yy = Math_abs(xx - Number(chdef[i2])) * Number(chdamp[i2]) * 0.5;
									if(MP_mode)
									{
										if(thispulspeed > 1)
										{
											yy /= thispulspeed * thispulspeed;
										}
									}
									else if(thispulspeed > 1)
									{
										yy /= thispulspeed;
									}
									if(xx < 1)
									{
										xx = 1;
									}
									if(xx > chdef[i2])
									{
										if(chtypa[i2] == 0 || chtypa[i2] == 2)
										{
											u = (Number(ax[chP[i2]]) - Number(ax[chC[i2]])) / xx * yy;
											v = (Number(ay[chP[i2]]) - Number(ay[chC[i2]])) / xx * yy;
											atox[chC[i2]] += u;
											atoy[chC[i2]] += v;
											atox[chP[i2]] -= u;
											atoy[chP[i2]] -= v;
											if(DEBUG_MODE)
											{
												ok = true;
											}
										}
									}
									else if(xx < chdef[i2])
									{
										if(chtypa[i2] == 0 || chtypa[i2] == 1)
										{
											u = (Number(ax[chP[i2]]) - Number(ax[chC[i2]])) / xx * yy;
											v = (Number(ay[chP[i2]]) - Number(ay[chC[i2]])) / xx * yy;
											atox[chC[i2]] -= u;
											atoy[chC[i2]] -= v;
											atox[chP[i2]] += u;
											atoy[chP[i2]] += v;
											if(DEBUG_MODE)
											{
												ok = true;
											}
										}
									}
									if(chdamp[i2] == 1)
									{
										if(chtypa[i2] == 0 || xx > chdef[i2] && chtypa[i2] == 2 || xx < chdef[i2] && chtypa[i2] == 1)
										{
											u = (Number(ax[chP[i2]]) - cx) * Number(chdef[i2]) / xx;
											v = (Number(ay[chP[i2]]) - cy) * Number(chdef[i2]) / xx;
											ax[chP[i2]] = cx + u;
											ay[chP[i2]] = cy + v;
											ax[chC[i2]] = cx - u;
											ay[chC[i2]] = cy - v;
										}
									}
									if(chtypa[i2] == 0 || chtypa[i2] == 2)
									{
										if(xx > chdef[i2] + 10 || xx > Number(chdef[i2]) * 1.5 + 5 || xx < Number(chdef[i2]) * 0.75 - 5)
										{
											if(!TracePointNoRagdolls(cx,cy))
											{
												ax[chP[i2]] += cx - Number(ax[chC[i2]]);
												ay[chP[i2]] += cy - Number(ay[chC[i2]]);
												ax[chC[i2]] += cx - Number(ax[chC[i2]]);
												ay[chC[i2]] += cy - Number(ay[chC[i2]]);
												atox[chP[i2]] *= 0.5;
												atoy[chP[i2]] *= 0.5;
												atox[chC[i2]] *= 0.5;
												atoy[chC[i2]] *= 0.5;
											}
										}
									}
								}
								if(DEBUG_MODE)
								{
									if(ok)
									{
										debug_screen.graphics.lineStyle((Number(arad[chP[i2]]) * 2 * 2 + Number(arad[chC[i2]]) * 2) / 3,16711680,0.1);
										debug_screen.graphics.moveTo(ax[chP[i2]],ay[chP[i2]]);
										debug_screen.graphics.lineTo((ax[chC[i2]] + ax[chP[i2]]) / 2,(ay[chC[i2]] + ay[chP[i2]]) / 2);
										debug_screen.graphics.lineStyle((Number(arad[chP[i2]]) * 2 + Number(arad[chC[i2]]) * 2 * 2) / 3,16711680,0.1);
										debug_screen.graphics.moveTo((ax[chC[i2]] + ax[chP[i2]]) / 2,(ay[chC[i2]] + ay[chP[i2]]) / 2);
										debug_screen.graphics.lineTo(ax[chC[i2]],ay[chC[i2]]);
									}
									debug_screen.graphics.lineStyle(1,16776960,1);
									debug_screen.graphics.moveTo(ax[chP[i2]],ay[chP[i2]]);
									debug_screen.graphics.lineTo(ax[chC[i2]],ay[chC[i2]]);
								}
							}
						}
					}
					++i2;
				}
				i2 = 0;
				while(i2 < chtotal && !phys_got_stress)
				{
					if(chio[i2] != -1)
					{
						if(aactive[chP[i2]] == 1000 || Boolean(aactive[aof[chP[i2]]]))
						{
							if(chio[i2] == true)
							{
								if(chdamp[i2] == 1)
								{
									xx = Dist2D(ax[chP[i2]],ay[chP[i2]],ax[chC[i2]],ay[chC[i2]]);
									if(chtypa[i2] == 0 || xx > chdef[i2] && chtypa[i2] == 2 || xx < chdef[i2] && chtypa[i2] == 1)
									{
										yy = Math.abs(Number(chdef[i2]) - xx);
										if(yy > 15 && yy > Number(chdef[i2]) * 0.5)
										{
											++phys_stress;
											phys_got_stress = true;
										}
									}
								}
							}
						}
					}
					++i2;
				}
			}
			if(GET_LITE_PHYS())
			{
				i = 0;
				while(i < atotal)
				{
					if(aio[i] != -1)
					{
						xx = ax[i];
						yy = ay[i];
						ax[i] = (ax[i] + lax[i]) / 2;
						ay[i] = (ay[i] + lay[i]) / 2;
						lax[i] = xx;
						lay[i] = yy;
					}
					++i;
				}
			}
			if(DEBUG_MODE)
			{
				debug_screen.graphics.lineStyle()
				for (i = 0; i < atotal; i++) {
					if(aio[i] != -1) {
						if (aio[i]) {
							debug_screen.graphics.beginFill(0x00FF00, 0.3);
						} else {
							debug_screen.graphics.beginFill(0x000000, 0.5);
						}
						debug_screen.graphics.drawCircle(ax[i], ay[i], arad[i]);
					}
				}
				debug_screen.graphics.endFill();
			}
			EXT.stopMeasure(3);
		}
		
		public function StartMiniScenario(param1:int) : Boolean
		{
			if(mini_scenario_cur == -1)
			{
				mini_scenario_cur = param1;
				mini_scenario_phase = 0;
				return true;
			}
			return false;
		}
		
		public function k_down(param1:KeyboardEvent) : void
		{
			var _loc2_:int = 0;
			var _loc3_:String = null;
			var _loc4_:int = 0;
			var _loc5_:* = undefined;
			var _loc6_:String = null;
			var _loc7_:Number = NaN;
			var _loc8_:Number = NaN;
			VarChangePreventStart();
			if (LUA != null) {
				luaKeyDownListeners.dispatch(LUA.toInteger(param1.keyCode));
			}
			if(last_key_code != param1.keyCode)
			{
				last_key_code = param1.keyCode;
				keys_are_being_pressed = true;
			}
			if(param1.keyCode == Keyboard.CONTROL)
			{
				key_ctrl = true;
			}
			if(currentLabel == "intro")
			{
				if(param1.keyCode == 27)
				{
					// intr.removeChild(vidobj);
					// nc.close();
					// ns.close();
					gotoAndStop("ads");
				}
			}
			if(currentLabel == "loginform")
			{
				if(param1.keyCode == 13 || param1.keyCode == 32 && stage.focus != flogin && stage.focus != fpassword)
				{
					proceed();
				}
			}
			if(currentLabel == "gaming")
			{
				if(param1.keyCode == 112)
				{
					TakeScreenShot(0,0.75);
				}
				else if(!MP_mode)
				{
					if(param1.keyCode == 113)
					{
						TakeScreenShot(0,0.5);
					}
					else if(param1.keyCode == 114)
					{
						TakeScreenShot(0,0.25);
					}
					else if(param1.keyCode == 115)
					{
						TakeScreenShot(0,0.1);
					}
				}
				if (param1.keyCode == 116) { // F5
					SHOW_DEBUG = !SHOW_DEBUG;
					// acceleratedRenderer.DEBUG( SHOW_DEBUG ); // AIR ONLY
					debug_times.visible = SHOW_DEBUG;
				}
				if (param1.keyCode == 117 && !gamemenu.visible) { // F6
					RENDERING_3D = !RENDERING_3D;
					game.visible = !RENDERING_3D;
					game.alpha = 1;
					graphics_3d.visible = !RENDERING_3D;
					graphics_3d_front.visible = !RENDERING_3D;
					sky.visible = !RENDERING_3D;
				}
				if(param1.keyCode == 27)
				{
					if(!gamemenu.visible)
					{
						if(!MP_mode)
						{
							system_non_stop = false;
							if(MP_myid < playerstotal && !mens[MP_myid].dead)
							{
								pauze.visible = true;
							}
							stoped_by_focus = false;
						}
						gamemenu.visible = true;
						myCursor.alpha = 1;
					}
					else if(conmenu_set.visible)
					{
						conmenu_set.visible = false;
					}
					else if(conmenu.visible)
					{
						conmenu.visible = false;
					}
					else
					{
						if(!MP_mode)
						{
							system_non_stop = true;
							if(MP_myid < playerstotal && !mens[MP_myid].dead)
							{
								pauze.visible = false;
							}
						}
						gamemenu.visible = false;
					}
					SCREEN_BLUR = gamemenu.visible;
					updateBlur();
				}
				if(trigger_to_key_binds_down[param1.keyCode] != undefined)
				{
					EXEC_TRIGGER(trigger_to_key_binds_down[param1.keyCode]);
				}
				if(param1.keyCode == 9 || param1.keyCode == 35)
				{
					if(MP_mode)
					{
						if(!herolist.visible)
						{
							_loc2_ = 0;
							while(_loc2_ < MP_playerstotal)
							{
								UpdateHeroList(_loc2_);
								_loc2_++;
							}
							herolist.visible = true;
						}
					}
					else if(CASUAL_MODE)
					{
						ok = true;
						_loc2_ = MP_myid;
						i4 = _loc2_ + 1;
						while(i4 != _loc2_ && ok)
						{
							if(i4 >= playerstotal)
							{
								i4 = 0;
							}
							else
							{
								if(mens[i4] && mens[i4].io)
								{
									if(mens[i4].team == mens[MP_myid].team)
									{
										if(mens[i4].hea > 0)
										{
											if(!mens[i4].dying)
											{
												ok = false;
												MP_myid = i4;
												GSPEED = 0.01;
												new_active.visible = true;
												new_active.gotoAndPlay(1);
												PlaySound_full(s_team_switch);
												mens[i4].isplayer = true;
												mens[_loc2_].isplayer = false;
												UpdateWeps();
											}
										}
									}
								}
								++i4;
							}
						}
					}
				}
				if(MP_spectator)
				{
					VarChangePreventEnd();
					return;
				}
				if(param1.keyCode == 13 || MP_mode && param1.keyCode == 84 && !MP_chat_input)
				{
					if(MP_chat_input && param1.keyCode == 13)
					{
						if (LUA != null) {
							try {
								luaChatListeners.dispatch(LUA.makeString(gamechat_input_text));
							} catch (err:Error) {
								EmitScriptError(err);
							}
						}
						MP_chat_input = false;
						chat_win.gamechat_input.text = "";
						if(!MP_mode || gamechat_input_text == "bot 1" || gamechat_input_text == "bot 0")
						{
							if(gamechat_input_text.length > 0)
							{
								if(false/*FORCE_CUSTOM_MAP*/) // Disable chatting on custom map, only cheats
								{
									ChatNewMsg("<font color=\"#78DBE2\">" + mens[MP_myid].nick + "</font><font color=\"#FFFFFF\">: " + gamechat_input_text + "</font>");
									PlaySound_full(s_chat);
									UserSays(MP_myid,gamechat_input_text);
								}
								else
								{
									ChatNewMsg(new_nick2 + gamechat_input_text);
									ok = true;
									if(gamechat_input_text == "god 1" || gamechat_input_text == "god")
									{
										mens[MP_myid].hmax *= 100000;
										mens[MP_myid].hea = mens[MP_myid].hmax;
										if(mens[MP_myid].dead)
										{
											mens[MP_myid].dead = false;
										}
										if(mens[MP_myid].dying)
										{
											mens[MP_myid].dying = false;
										}
										Hurt_nopain(MP_myid);
										ok = false;
									}
									if(gamechat_input_text == "raster") {
										mc = mens[MP_myid]
										ForceRasterize(mc.head);
										ForceRasterize(mc.leg1);
										ForceRasterize(mc.leg2);
										ForceRasterize(mc.arm1);
										ForceRasterize(mc.arm2);
										ForceRasterize(mc.toe);
									}
									if(gamechat_input_text == "upload raster") {
										uploading_rasters = !uploading_rasters;
										ChatNewMsg("bash: Status of uploading raster is now: " + (uploading_rasters ? "ON" : "OFF"));
										ok = false;
									}
									if(gamechat_input_text == "gm")
									{
										ARCADE_GAME_MODE = !ARCADE_GAME_MODE;
										ok = false;
									}
									if(gamechat_input_text == "grow")
									{
										SetPlayerScale(mens[MP_myid],Number(mens[MP_myid].scale) * 1.25);
										mens[MP_myid].hmax *= 1.25 * 1.25;
										mens[MP_myid].hea *= 1.25 * 1.25;
										game_scale /= 1.25;
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text == "shrink")
									{
										SetPlayerScale(mens[MP_myid],Number(mens[MP_myid].scale) / 1.25);
										mens[MP_myid].hmax /= 1.25 * 1.25;
										mens[MP_myid].hea /= 1.25 * 1.25;
										game_scale *= 1.25;
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text == "grow enemies")
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && _loc2_ != MP_myid)
											{
												SetPlayerScale(mens[_loc2_],Number(mens[_loc2_].scale) * 1.25);
												mens[_loc2_].hmax *= 1.25 * 1.25;
												mens[_loc2_].hea *= 1.25 * 1.25;
											}
											_loc2_++;
										}
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text == "shrink enemies")
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && _loc2_ != MP_myid)
											{
												SetPlayerScale(mens[_loc2_],Number(mens[_loc2_].scale) / 1.25);
												mens[_loc2_].hmax /= 1.25 * 1.25;
												mens[_loc2_].hea /= 1.25 * 1.25;
											}
											_loc2_++;
										}
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text.indexOf("give ") == 0)
									{
										_loc3_ = gamechat_input_text.substr(5);
										mc = MakeGunByClass(_loc3_,{
											"x":mens[MP_myid].x,
											"y":mens[MP_myid].y,
											"upg":3,
											"command":-1
										});
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text.indexOf("skin enemies ") == 0)
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && _loc2_ != MP_myid)
											{
												_loc4_ = int(gamechat_input_text.substr(13));
												mc = mens[_loc2_];
												mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
												mc.char = _loc4_;
												mc.mdl_head = mc.char;
												mc.mdl_leg1_upper = mc.char;
												mc.mdl_leg1_middle = mc.char;
												mc.mdl_leg1_lower = mc.char;
												mc.mdl_leg2_upper = mc.char;
												mc.mdl_leg2_middle = mc.char;
												mc.mdl_leg2_lower = mc.char;
												mc.mdl_arm1_upper = mc.char;
												mc.mdl_arm1_lower = mc.char;
												mc.mdl_arm2_upper = mc.char;
												mc.mdl_arm2_lower = mc.char;
												mc.mdl_toe = mc.char;
												mc.mdl_body = mc.char;
												mc.alpha = 1;
												UpdateCharProps(mc as player);
												SpawnPlayerImmediately(mc as player);
											}
											_loc2_++;
										}
									}
									else if(gamechat_input_text.indexOf("skin ") == 0)
									{
										_loc2_ = MP_myid;
										_loc4_ = int(gamechat_input_text.substr(5));
										mc = mens[_loc2_];
										mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "-";
										mc.char = _loc4_;
										mc.mdl_head = mc.char;
										mc.mdl_leg1_upper = mc.char;
										mc.mdl_leg1_middle = mc.char;
										mc.mdl_leg1_lower = mc.char;
										mc.mdl_leg2_upper = mc.char;
										mc.mdl_leg2_middle = mc.char;
										mc.mdl_leg2_lower = mc.char;
										mc.mdl_arm1_upper = mc.char;
										mc.mdl_arm1_lower = mc.char;
										mc.mdl_arm2_upper = mc.char;
										mc.mdl_arm2_lower = mc.char;
										mc.mdl_toe = mc.char;
										mc.mdl_body = mc.char;
										mc.alpha = 1;
										UpdateCharProps(mc as player);
										SpawnPlayerImmediately(mc as player);
									}
									if(gamechat_input_text == "quick start")
									{
										CMPG_money = 999999;
										if(LEVELS_PASSED < LEVELS_TOTAL)
										{
											LEVELS_PASSED = LEVELS_TOTAL;
										}
										IM_A_CHEATER = true;
										ok = false;
									}
									if(gamechat_input_text.indexOf("hero1skin ") != -1)
									{
										skin_model[0] = int(gamechat_input_text.split(" ")[1]);
										ok = false;
									}
									if(gamechat_input_text.indexOf("hero2skin ") != -1)
									{
										skin_model[1] = int(gamechat_input_text.split(" ")[1]);
										ok = false;
									}
									if(gamechat_input_text == "no players")
									{
										playerstotal = 1;
										MP_myid = 0;
										ok = false;
									}
									if(gamechat_input_text == "no barrels")
									{
										barrelstotal = 0;
										ok = false;
									}
									if(gamechat_input_text == "no vehicles")
									{
										vehiclestotal = 0;
										ok = false;
									}
									if(gamechat_input_text == "no lights" || gamechat_input_text == "no lamps")
									{
										lampstotal = 0;
										ok = false;
									}
									if(gamechat_input_text == "no guns")
									{
										gunstotal = 0;
										ok = false;
									}
									if(gamechat_input_text == "debug" || gamechat_input_text == "debug 1")
									{
										DEBUG_MODE = true;
										debug_screen.visible = true;
										ok = false;
									}
									if(gamechat_input_text == "debug 0")
									{
										DEBUG_MODE = false;
										debug_screen.graphics.clear();
										debug_screen.visible = false;
										ok = false;
									}
									if(gamechat_input_text == "lines")
									{
										DRAW_TRACE_LINES = !DRAW_TRACE_LINES;
										line_screen.graphics.clear();
										line_screen.visible = DRAW_TRACE_LINES;
										ok = false;
									}
									if(gamechat_input_text == "god 0")
									{
										mens[MP_myid].hea /= 100000;
										mens[MP_myid].hmax /= 100000;
										Hurt_nopain(MP_myid);
										ok = false;
									}
									if(gamechat_input_text == "headshot")
									{
										xx = mens[MP_myid].hea;
										mens[MP_myid].hp_head = 0;
										Hurt(MP_myid);
										mens[MP_myid].hea = xx;
										mens[MP_myid].dead = false;
										mens[MP_myid].dying = false;
										mens[MP_myid].stability = -2;
										atoy[mens[MP_myid].b_head_end] -= 10;
										atox[mens[MP_myid].b_head_end] -= Number(mens[MP_myid].side) * 5;
										ok = false;
									}
									if(gamechat_input_text == "friends")
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && mens[_loc2_].io)
											{
												mens[_loc2_].team = 0;
											}
											_loc2_++;
										}
										ok = false;
									}
									if(gamechat_input_text == "dm")
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && mens[_loc2_].io)
											{
												mens[_loc2_].team = _loc2_;
											}
											_loc2_++;
										}
										ok = false;
									}
									if(gamechat_input_text == "kill enemies")
									{
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											if(mens[_loc2_] && mens[_loc2_].io)
											{
												if(mens[_loc2_].team != mens[MP_myid].team)
												{
													mens[_loc2_].hea = 0;
													Hurt_nopain(_loc2_);
												}
											}
											_loc2_++;
										}
										ok = false;
									}
									if(gamechat_input_text == "hyper jump")
									{
										mens[MP_myid].toy = -25;
										ok = false;
									}
									if(gamechat_input_text == "over fast")
									{
										MP_fps = DEFAULT_FPS * 5;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "uber fast")
									{
										MP_fps = DEFAULT_FPS * 4;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "extra fast")
									{
										MP_fps = DEFAULT_FPS * 3;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "very fast")
									{
										MP_fps = DEFAULT_FPS * 2;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "faster")
									{
										MP_fps = DEFAULT_FPS * 1.5;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "fast")
									{
										MP_fps = DEFAULT_FPS * 1.25;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "normal")
									{
										MP_fps = DEFAULT_FPS;
										ok = false;
										SP_unlimit_framerate = false;
									}
									if(gamechat_input_text == "slow")
									{
										MP_fps = DEFAULT_FPS * 0.75;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "slower")
									{
										MP_fps = DEFAULT_FPS * 0.5;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "very slow")
									{
										MP_fps = DEFAULT_FPS * 0.25;
										ok = false;
										SP_unlimit_framerate = true;
									}
									if(gamechat_input_text == "zoom 100")
									{
										game_scale = 1;
										ok = false;
									}
									if(gamechat_input_text == "zoom 200")
									{
										game_scale = 2;
										ok = false;
									}
									if(gamechat_input_text == "zoom 50")
									{
										game_scale = 0.5;
										ok = false;
									}
									if(gamechat_input_text == "zoom 25")
									{
										game_scale = 0.25;
										ok = false;
									}
									if(gamechat_input_text == "give all")
									{
										_loc2_ = 0;
										while(_loc2_ < inventoryC.length)
										{
											mc = MakeGunByClass(inventoryC[_loc2_].mdl,{
												"x":mens[MP_myid].x,
												"y":mens[MP_myid].y,
												"upg":inventoryC[_loc2_].upg,
												"command":-1
											});
											_loc2_++;
										}
										if(!FORCE_CUSTOM_MAP)
										{
											IM_A_CHEATER = true;
										}
										ok = false;
									}
									if(gamechat_input_text == "render 0")
									{
										game.alpha = 0;
										graphics_3d_front.visible = false;
										graphics_3d.visible = false;
										sky.visible = false;
										ok = false;
									}
									if(gamechat_input_text == "render 1")
									{
										game.alpha = 1;
										graphics_3d_front.visible = true;
										graphics_3d.visible = true;
										sky.visible = true;
										ok = false;
									}
									if(gamechat_input_text == "r1game") {
										sky.visible = false;
										graphics_3d.visible = false;
										game.visible = true;
										graphics_3d_front.visible = false;
										ChatNewMsg("bash: rendering only game layer");
										ok = false;
									}
									if(gamechat_input_text == "r1g3d") {
										sky.visible = false;
										graphics_3d.visible = true;
										game.visible = false;
										graphics_3d_front.visible = false;
										ChatNewMsg("bash: rendering only graphics_3d layer");
										ok = false;
									}
									if(gamechat_input_text == "r1g3df") {
										sky.visible = false;
										graphics_3d.visible = false;
										game.visible = false;
										graphics_3d_front.visible = true;
										ChatNewMsg("bash: rendering only graphics_3d_front layer");
										ok = false;
									}
									if(gamechat_input_text == "r1sky") {
										sky.visible = true;
										graphics_3d.visible = false;
										game.visible = false;
										graphics_3d_front.visible = false;
										ChatNewMsg("bash: rendering only sky layer");
										ok = false;
									}
									if(gamechat_input_text == "rall") {
										sky.visible = true;
										graphics_3d.visible = true;
										game.visible = true;
										graphics_3d_front.visible = true;
										ChatNewMsg("bash: rendering all layers");
										ok = false;
									}
									if(gamechat_input_text == "rgame") {
										game.visible = !game.visible;
										ChatNewMsg("bash: render of game layer is now: " + (game.visible ? "ON" : "OFF"));
										ok = false;
									}
									if(gamechat_input_text == "rg3df") {
										graphics_3d_front.visible = !graphics_3d_front.visible;
										ChatNewMsg("bash: render of graphics_3d_front layer is now: " + (graphics_3d_front.visible ? "ON" : "OFF"));
										ok = false;
									}
									if(gamechat_input_text == "rg3d") {
										graphics_3d.visible = !graphics_3d.visible;
										ChatNewMsg("bash: render of graphics_3d layer is now: " + (graphics_3d.visible ? "ON" : "OFF"));
										ok = false;
									}
									if(gamechat_input_text == "rsky") {
										sky.visible = !sky.visible;
										ChatNewMsg("bash: render of sky layer is now: " + (sky.visible ? "ON" : "OFF"));
										ok = false;
									}
									if(gamechat_input_text == "bot 1")
									{
										MP_half_bot = true;
										if(MP_mode)
										{
											EASY_MODE = true;
											PRO_BOTS = false;
											LOW_HPS = false;
										}
										ok = false;
									}
									if(gamechat_input_text == "bot 0")
									{
										MP_half_bot = false;
										ok = false;
									}
									if(gamechat_input_text == "passnone") {
										LEVELS_PASSED = 1;
										ok = false;
									}
									if(gamechat_input_text == "passall") {
										LEVELS_PASSED = 42;
										ok = false;
									}
									if(gamechat_input_text == "kill")
									{
										mens[MP_myid].hp_head = 0;
										Hurt(MP_myid);
										mens[MP_myid].hea = 0;
										ok = false;
									}
									if(ok)
									{
										ChatNewMsg("bash: " + gamechat_input_text + ": command not found");
										PlaySound_full(s_chat);
									}
									else
									{
										BADGES_ENABLED = false;
									}
									if(IM_A_CHEATER)
									{
										IM_A_CHEATER = false;
										// ShowNoAch();
										// SaveGame();
									}
									UserSays(MP_myid,gamechat_input_text);
								}
							}
						}
						else
						{
							ok = true;
							if(gamechat_input_text == "-kill")
							{
								mens[MP_myid].hp_head = 0;
								Hurt(MP_myid);
								mens[MP_myid].hea = 0;
								ok = false;
							}
							if(gamechat_input_text.substr(0,5) == "-ping")
							{
								if(Number(getTimer()) - LAST_VOTE > 60000)
								{
									_loc5_ = Number(gamechat_input_text.substr(6,gamechat_input_text.length));
									if(Boolean(isNaN(_loc5_)) || !isNaN(_loc5_) && (_loc5_ < 10 || _loc5_ > 1000))
									{
										DialogSay("\'\'" + gamechat_input_text.substr(6,gamechat_input_text.length) + "\'\' is not a correct ping value.","#FFFF00");
										if(!isNaN(_loc5_) && (_loc5_ < 10 || _loc5_ > 1000))
										{
											LAST_VOTE = getTimer();
										}
									}
									else
									{
										MP_custom_events += ";voteping|" + gamechat_input_text.substr(6,gamechat_input_text.length);
										LAST_VOTE = getTimer();
									}
								}
								else
								{
									DialogSay("You will be allowed to vote again in " + Math.ceil((60000 - (Number(getTimer()) - LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
								}
							}
							if(MP_type == 3)
							{
								if(gamechat_input_text == "-blue")
								{
									mc = mens[MP_myid];
									if(Number(getTimer()) - Number(mc.whenlastshot) > 7000)
									{
										mc.lastshotby = -1;
									}
									if(mc.dead || mc.lastshotby == -1 || mc.lastshotby == MP_myid)
									{
										mc.team = 13;
										mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "B";
										spawn = false;
										mc.hea = 0;
										mc.mdl_head = mc.char;
										mc.mdl_leg1_upper = mc.char;
										mc.mdl_leg1_middle = mc.char;
										mc.mdl_leg1_lower = mc.char;
										mc.mdl_leg2_upper = mc.char;
										mc.mdl_leg2_middle = mc.char;
										mc.mdl_leg2_lower = mc.char;
										mc.mdl_arm1_upper = mc.char;
										mc.mdl_arm1_lower = mc.char;
										mc.mdl_arm2_upper = mc.char;
										mc.mdl_arm2_lower = mc.char;
										mc.mdl_toe = mc.char;
										mc.mdl_body = mc.char;
										UpdateCharProps(mc as player);
										ok = false;
										UpdateTeamTable();
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											UpdateTeamColor(mens[_loc2_]);
											_loc2_++;
										}
									}
									else
									{
										DialogSay("Can\'t change team during fight.","#FFFF00");
									}
								}
								if(gamechat_input_text == "-red")
								{
									mc = mens[MP_myid];
									if(Number(getTimer()) - Number(mc.whenlastshot) > 7000)
									{
										mc.lastshotby = -1;
									}
									if(mc.dead || mc.lastshotby == -1 || mc.lastshotby == MP_myid)
									{
										mc.team = 12;
										mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "R";
										spawn = false;
										mc.hea = 0;
										mc.mdl_head = mc.char;
										mc.mdl_leg1_upper = mc.char;
										mc.mdl_leg1_middle = mc.char;
										mc.mdl_leg1_lower = mc.char;
										mc.mdl_leg2_upper = mc.char;
										mc.mdl_leg2_middle = mc.char;
										mc.mdl_leg2_lower = mc.char;
										mc.mdl_arm1_upper = mc.char;
										mc.mdl_arm1_lower = mc.char;
										mc.mdl_arm2_upper = mc.char;
										mc.mdl_arm2_lower = mc.char;
										mc.mdl_toe = mc.char;
										mc.mdl_body = mc.char;
										UpdateCharProps(mc as player);
										ok = false;
										UpdateTeamTable();
										_loc2_ = 0;
										while(_loc2_ < playerstotal)
										{
											UpdateTeamColor(mens[_loc2_]);
											_loc2_++;
										}
									}
									else
									{
										DialogSay("Can\'t change team during fight.","#FFFF00");
									}
								}
							}
							if(ok)
							{
								if(gamechat_input_text.length > 0)
								{
									MP_last_message_patience -= (Number(getTimer()) - MP_last_message) / 550;
									if(MP_last_message_patience < 0)
									{
										MP_last_message_patience = 0;
									}
									MP_last_message_patience += 20000 / Math.max(300,Number(getTimer()) - MP_last_message);
									MP_last_message = getTimer();
									if(MP_pass == "")
									{
										if(MP_last_message_patience > 110)
										{
											if(mens[MP_myid].dead || mens[MP_myid].lastshotby == -1 || Number(getTimer()) - Number(mens[MP_myid].whenlastshot) > 7000)
											{
												DialogSay("Disconnected. You didn\'t stopped it, so we are sorry","#FF0000");
												MP_force_disconnect = true;
											}
										}
										else if(MP_last_message_patience > 90)
										{
											DialogSay("Please don\'t send messages so quickly. You will be disconnected if you will continue","#FFFF00");
										}
										else if(MP_last_message_patience > 80)
										{
											DialogSay("Please don\'t send messages so quickly. It is not allowed","#FFFF00");
										}
									}
									while(gamechat_input_text != gamechat_input_text.replace("=","[eq]"))
									{
										gamechat_input_text = gamechat_input_text.replace("=","[eq]");
									}
									while(gamechat_input_text != gamechat_input_text.replace("|","[i]"))
									{
										gamechat_input_text = gamechat_input_text.replace("|","[i]");
									}
									while(gamechat_input_text != gamechat_input_text.replace(";","[dc]"))
									{
										gamechat_input_text = gamechat_input_text.replace(";","[dc]");
									}
									while(gamechat_input_text != gamechat_input_text.replace("<","[lt]"))
									{
										gamechat_input_text = gamechat_input_text.replace("<","[lt]");
									}
									while(gamechat_input_text != gamechat_input_text.replace(">","[gt]"))
									{
										gamechat_input_text = gamechat_input_text.replace(">","[gt]");
									}
									while(gamechat_input_text != gamechat_input_text.replace("\"","[2q]"))
									{
										gamechat_input_text = gamechat_input_text.replace("\"","[2q]");
									}
									while(gamechat_input_text != gamechat_input_text.replace("/","[sl]"))
									{
										gamechat_input_text = gamechat_input_text.replace("/","[sl]");
									}
									while(gamechat_input_text != gamechat_input_text.replace("\\","[rsl]"))
									{
										gamechat_input_text = gamechat_input_text.replace("\\","[rsl]");
									}
									if(MP_chat_input_for == "all")
									{
										MP_custom_events += ";chat|" + gamechat_input_text;
									}
									else if(MP_chat_input_for == "team")
									{
										MP_custom_events += ";tchat|" + gamechat_input_text;
									}
									if(DISPLAY_CHAT < 1)
									{
										if(MP_mode)
										{
											DialogSay("Note: You\'ve said something, but you have \'\'DISPLAY CHAT\'\' set to \'\'NO\'\' in your Graphics & Gameplay settings.","#FFFF00");
										}
									}
								}
							}
						}
						chat_win.visible = false;
					}
					else if(true || LEVELS_PASSED >= LEVELS_TOTAL || MP_mode || FORCE_CUSTOM_MAP)
					{
						MP_chat_input = true;
						if(MP_mode && param1.keyCode == 84)
						{
							MP_chat_input_for = "team";
						}
						else
						{
							MP_chat_input_for = "all";
						}
						chat_win.gamechat_input.text = "";
						gamechat_input_text = "";
						chat_win.chatmode.gotoAndStop(MP_chat_input_for);
						chat_win.visible = true;
					}
					else
					{
						ChatNewMsg("E: Access denied; complete all campaign levels first");
					}
				}
				else if(MP_chat_input)
				{
					if(param1.keyCode == 8)
					{
						gamechat_input_text = gamechat_input_text.slice(0,gamechat_input_text.length - 1);
						chat_win.gamechat_input.htmlText = "<b>" + gamechat_input_text + "</b>";
					}
					else
					{
						_loc6_ = String.fromCharCode(param1.charCode);
						if(allowedText.indexOf(_loc6_) != -1)
						{
							gamechat_input_text += _loc6_;
							chat_win.gamechat_input.htmlText = "<b>" + gamechat_input_text.split("<").join("&lt;").split(">").join("&gt;") + "</b>";
						}
					}
				}
				else
				{
					if(param1.keyCode == 65 || param1.keyCode == 37)
					{
						key_left = true;
					}
					if(param1.keyCode == 68 || param1.keyCode == 39)
					{
						key_right = true;
					}
					if(param1.keyCode == 32 || param1.keyCode == 82)
					{
						if(LEVEL_END_FORCE != "" && LEVEL_END_FORCE != "complete" && LEVEL_END_FORCE != "credits")
						{
							if(!MP_mode)
							{
								if(darkness.alpha > 0.02)
								{
									darkness.visible = true;
									darkness.alpha = 1;
									if(LEVEL_END_FORCE == "failed")
									{
										LEVEL_END_FORCE = "restart";
									}
								}
							}
						}
					}
					if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
					{
						key_up = true;
					}
					if(param1.keyCode == 71 || param1.keyCode == 96)
					{
						if(!MP_mode)
						{
							StartMiniScenario(0);
						}
						else if(MP_type != 2 || MP_gamestate == 0)
						{
							if(grenades_total > 0)
							{
								if(mini_scenario_cur == -1 && !mens[MP_myid].dead && !mens[MP_myid].brk_arms)
								{
									MP_myspecials[MP_myspecials_total] = new Object();
									MP_myspecials[MP_myspecials_total].stat = 1;
									MP_myspecials[MP_myspecials_total].id_in_full_list = -1;
									MP_myspecials[MP_myspecials_total].nadekind = 1;
									MP_custom_events += ";gren|1#" + MP_myspecials_total;
									++MP_myspecials_total;
								}
							}
						}
					}
					if(MP_mode)
					{
						if(MP_type != 2 || MP_gamestate == 0)
						{
							if(param1.keyCode == 67)
							{
								if(grenades_port_total > 0)
								{
									if(mini_scenario_cur == -1 && !mens[MP_myid].dead && !mens[MP_myid].brk_arms)
									{
										MP_myspecials[MP_myspecials_total] = new Object();
										MP_myspecials[MP_myspecials_total].stat = 1;
										MP_myspecials[MP_myspecials_total].id_in_full_list = -1;
										MP_myspecials[MP_myspecials_total].nadekind = 2;
										MP_custom_events += ";gren|2#" + MP_myspecials_total;
										++MP_myspecials_total;
									}
								}
							}
							if(param1.keyCode == 90)
							{
								if(grenades_sh_total > 0)
								{
									if(mini_scenario_cur == -1 && !mens[MP_myid].dead && !mens[MP_myid].brk_arms)
									{
										MP_myspecials[MP_myspecials_total] = new Object();
										MP_myspecials[MP_myspecials_total].stat = 1;
										MP_myspecials[MP_myspecials_total].id_in_full_list = -1;
										MP_myspecials[MP_myspecials_total].nadekind = 3;
										MP_custom_events += ";gren|3#" + MP_myspecials_total;
										++MP_myspecials_total;
									}
								}
							}
						}
					}
					if(param1.keyCode == 86 || param1.keyCode == 8)
					{
						key_grab = true;
					}
					if(param1.keyCode == 81)
					{
						if(last_gun_b4_psi != -1)
						{
							if(last_gun_b4_psi < gunstotal)
							{
								mc = guns[last_gun_b4_psi];
								if(mc.picken_by == MP_myid && !mc.forcars)
								{
									if(mc.model != "item_grenade" || mc.wep >= 0)
									{
										i4 = mens[MP_myid].curwea;
										mens[MP_myid].curwea = last_gun_b4_psi;
										last_gun_b4_psi = i4;
										ChangedGun(MP_myid);
									}
								}
							}
						}
						else
						{
							i4 = mens[MP_myid].curwea;
							mens[MP_myid].curwea = last_gun_b4_psi;
							last_gun_b4_psi = i4;
							ChangedGun(MP_myid);
						}
					}
					if(param1.keyCode == 70)
					{
					}
					if(!MP_mode)
					{
						if(param1.keyCode == 80)
						{
							if(system_non_stop)
							{
								system_non_stop = false;
								if(!mens[MP_myid].dead)
								{
									pauze.visible = true;
								}
							}
							else
							{
								system_non_stop = true;
								if(!mens[MP_myid].dead)
								{
									pauze.visible = false;
								}
							}
							stoped_by_focus = false;
						}
					}
					if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
					{
						key_down = true;
					}
					if((param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13) && (!INLAG || !lock_lag_controls))
					{
						key_grenade = true;
					}
					if(param1.keyCode == 69 || param1.keyCode == 45)
					{
						key_pick = true;
					}
					if(param1.keyCode == 88 && (!INLAG || !lock_lag_controls))
					{
						key_fall = true;
					}
					if(param1.keyCode == 90) {
						var limitHit = usedTimeWarps == maxTimeWarps && maxTimeWarps != -1;
						if (limitHit) {
							if (HELL_MODE) {
								DialogSay("[Hell Mode]: Your timewarp ended.", "#FF0000");
								timeshift = 0;
							}else {
								if (maxTimewarpHitTrigger != -1) {
									EXEC_TRIGGER(maxTimewarpHitTrigger, true);
								}
							}
						}
						if(!key_alt && !MP_mode && !limitHit) {
							key_alt = true;
							if(timeshift > 0)
							{
								timeshift = 0;
								timeshiftch = s_slow_up.play(0,0,vol);
								if(SCREEN_EFFECTS)
								{
									whitness.alpha += 1;
									whitness.visible = true;
								}
							}
							else if(ALLOW_TIMESHIFT)
							{
								if(energy > 10)
								{
									if(!mens[MP_myid].dead)
									{
										energy -= 10;
										timeshift = 1;
										usedTimeWarps++;
										timeshiftch = s_slow_down.play(0,0,vol);
										if(SCREEN_EFFECTS)
										{
											whitness.alpha += 1;
											whitness.visible = true;
										}
									}
								}
							}
						}
					}
					if(param1.keyCode == 34)
					{
						if(!key_alt)
						{
							if(!MP_mode)
							{
								key_alt = true;
								if(timeshift > 0)
								{
									timeshift = 0;
									timeshiftch = s_slow_up.play(0,0,vol);
									if(SCREEN_EFFECTS)
									{
										whitness.alpha += 1;
										whitness.visible = true;
									}
								}
							}
						}
					}
					if(param1.keyCode == 33)
					{
						if(!key_alt)
						{
							if(!MP_mode)
							{
								key_alt = true;
								if(timeshift <= 0)
								{
									if(ALLOW_TIMESHIFT)
									{
										if(energy > 10)
										{
											if(!mens[MP_myid].dead)
											{
												energy -= 10;
												timeshift = 1;
												timeshiftch = s_slow_down.play(0,0,vol);
												if(SCREEN_EFFECTS)
												{
													whitness.alpha += 1;
													whitness.visible = true;
												}
											}
										}
									}
								}
							}
						}
					}
					if(KINETIC_MODULE_ENABLED)
					{
						if(param1.keyCode == 67)
						{
							if(!key_kinetic)
							{
								key_kinetic = true;
								cinetic_target = -1;
								_loc7_ = -1;
								_loc2_ = 0;
								while(_loc2_ < atotal)
								{
									if(aio[_loc2_] == true || aio[_loc2_] == false)
									{
										if(aof[_loc2_] >= 0 && aof[_loc2_] < 100 && mens[aof[_loc2_]].incar == -1 && aof[_loc2_] != MP_myid || aof[_loc2_] >= 100 || aof[_loc2_] > -200 && aof[_loc2_] <= -100 || aof[_loc2_] < 0 && aof[_loc2_] > -100 && !guns[-Number(aof[_loc2_]) - 1].forcars && guns[-Number(aof[_loc2_]) - 1].alpha > 0)
										{
											if(arad[_loc2_] < 16)
											{
												if(arad[_loc2_] > 0)
												{
													if((_loc8_ = Dist2D(ax[_loc2_],ay[_loc2_],mens[MP_myid].tarx,mens[MP_myid].tary)) < arad[_loc2_] + 40)
													{
														ok = true;
														if(aactive[_loc2_] != 1000)
														{
															if(aof[_loc2_] < 0 && aof[_loc2_] > -100)
															{
																if(guns[-Number(aof[_loc2_]) - 1].picken_by != -1 && mens[guns[-Number(aof[_loc2_]) - 1].picken_by])
																{
																	if(!guns[-Number(aof[_loc2_]) - 1].forcars)
																	{
																		if(guns[-Number(aof[_loc2_]) - 1].picken_by == MP_myid || mens[guns[-Number(aof[_loc2_]) - 1].picken_by].team != mens[MP_myid].team)
																		{
																			ok = false;
																		}
																	}
																}
															}
														}
														if(ok)
														{
															if(_loc8_ < _loc7_ || _loc7_ == -1)
															{
																cinetic_target = _loc2_;
																_loc7_ = _loc8_;
															}
														}
													}
												}
											}
										}
									}
									_loc2_++;
								}
							}
						}
					}
					if(mens[MP_myid].hea > 0)
					{
						if(param1.keyCode >= 48 && param1.keyCode <= 57 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
						{
							if(param1.keyCode == 48 || param1.keyCode == 167 || param1.keyCode == 192 || param1.keyCode == 0)
							{
								if(mens[MP_myid].curwea != -1)
								{
									last_gun_b4_psi = mens[MP_myid].curwea;
									mens[MP_myid].curwea = -1;
									ChangedGun(MP_myid);
									UpdateCurGun();
								}
							}
							else
							{
								_loc2_ = 0;
								while(_loc2_ < gunstotal)
								{
									if(guns[_loc2_] && guns[_loc2_].io)
									{
										mc = guns[_loc2_];
										if(mc.picken_by == MP_myid && !mc.forcars)
										{
											if(mc.wep == param1.keyCode - 48)
											{
												if(mens[MP_myid].curwea != _loc2_)
												{
													last_gun_b4_psi = mens[MP_myid].curwea;
													mens[MP_myid].curwea = _loc2_;
													ChangedGun(MP_myid);
													UpdateCurGun();
												}
											}
										}
									}
									_loc2_++;
								}
							}
						}
					}
				}
			}
			VarChangePreventEnd();
		}
		
		public function onMouseWheelEvent(param1:MouseEvent) : void
		{
			VarChangePreventStart();
			if(MOUSE_WHEEL)
			{
				if(currentLabel == "gaming")
				{
					if(!MP_spectator)
					{
						if(!OVERSCROLL || getTimer() > let_scroll_last + 150)
						{
							let_scroll_last = getTimer();
							if(mens[MP_myid].hea > 0)
							{
								ok = true;
								last_gun_b4_psi = mens[MP_myid].curwea;
								if(mens[MP_myid].curwea == -1)
								{
									i = -1;
								}
								else
								{
									i = guns[mens[MP_myid].curwea].wep;
								}
								if(param1.delta > 0)
								{
									i2 = 1;
								}
								else
								{
									i2 = -1;
								}
								i3 = mens[MP_myid].curwea;
								while(ok)
								{
									i += i2;
									if(i > 9)
									{
										i = -1;
									}
									if(i < -1)
									{
										i = 9;
									}
									if(i == -1)
									{
										mens[MP_myid].curwea = -1;
										ok = false;
										ChangedGun(MP_myid);
										UpdateCurGun();
									}
									else
									{
										i4 = 0;
										while(i4 < gunstotal)
										{
											if(guns[i4] && guns[i4].io)
											{
												mc = guns[i4];
												if(mc.picken_by == MP_myid && !mc.forcars)
												{
													if(mc.wep == i)
													{
														mens[MP_myid].curwea = i4;
														ok = false;
														ChangedGun(MP_myid);
														UpdateCurGun();
													}
												}
											}
											++i4;
										}
									}
								}
							}
						}
					}
				}
			}
			VarChangePreventEnd();
		}
		
		public function k_up(param1:KeyboardEvent) : void
		{
			VarChangePreventStart();
			if (LUA != null) {
				luaKeyUpListeners.dispatch(LUA.toInteger(param1.keyCode));
			}
			if(param1.keyCode == Keyboard.CONTROL)
			{
				key_ctrl = false;
			}
			if(currentLabel == "gaming")
			{
				if(trigger_to_key_binds_up[param1.keyCode] != undefined)
				{
					EXEC_TRIGGER(trigger_to_key_binds_up[param1.keyCode]);
				}
				if(param1.keyCode == 65 || param1.keyCode == 37)
				{
					key_left = false;
				}
				if(param1.keyCode == 68 || param1.keyCode == 39)
				{
					key_right = false;
				}
				if(param1.keyCode == 87 || param1.keyCode == 38 || param1.keyCode == 32)
				{
					key_up = false;
				}
				if(param1.keyCode == 83 || param1.keyCode == 40 || param1.keyCode == 17)
				{
					key_down = false;
				}
				if(param1.keyCode == 71 || param1.keyCode == 96 || param1.keyCode == 13)
				{
					key_grenade = false;
				}
				if(param1.keyCode == 69 || param1.keyCode == 45)
				{
					key_pick = false;
				}
				if(param1.keyCode == 88)
				{
					key_fall = false;
				}
				if(param1.keyCode == 90 || param1.keyCode == 34 || param1.keyCode == 33)
				{
					key_alt = false;
				}
				if(param1.keyCode == 9 || param1.keyCode == 35)
				{
					if(MP_mode)
					{
						herolist.visible = false;
					}
				}
				if(param1.keyCode == 67)
				{
					key_kinetic = false;
				}
				if(param1.keyCode == 71)
				{
					key_grenade = false;
				}
				if(param1.keyCode == 86 || param1.keyCode == 8)
				{
					key_grab = false;
				}
			}
			VarChangePreventEnd();
		}
		
		public function m_press(event:MouseEvent) : void
		{
			if (currentLabel != 'gaming') return;
			var mouseX:Number = EXT.mouseX;
			var mouseY:Number = EXT.mouseY;
			VarChangePreventStart();
			if(!Disable_next_click)
			{
				is_firing = true;
			}
			else
			{
				Disable_next_click = false;
			}
			if(mouseY < 50)
			{
				if(pcg.hitTestPoint(mouseX,mouseY,false))
				{
					if(key_ctrl)
					{
						is_firing = false;
						PlaySound_full(ss_info_act);
						key_ctrl = false;
						try
						{
							navigateToURL(new URLRequest("http://www.coolbuddy.com"),"_blank");
						}
						catch(e:Error)
						{
						}
					}
					else
					{
						DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
					}
				}
				if(qmenu.hitTestPoint(mouseX,mouseY,false))
				{
					if(key_ctrl)
					{
						is_firing = false;
						PlaySound_full(ss_info_act);
						key_ctrl = false;
						if(!gamemenu.visible)
						{
							if(!MP_mode)
							{
								system_non_stop = false;
								if(!mens[MP_myid].dead)
								{
									pauze.visible = true;
								}
								stoped_by_focus = false;
							}
							gamemenu.visible = true;
							myCursor.alpha = 1;
							SCREEN_BLUR = true;
							updateBlur();
						}
					}
					else
					{
						DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
					}
				}
			}
			if(MP_mode)
			{
				if(herolist.visible)
				{
					i = 0;
					while(i < MP_playerstotal)
					{
						if(hero[i].alpha > 0.1)
						{
							if(hero[i].f1.text != "Empty")
							{
								if(mouseX >= herolist.x + hero[i].x + hero[i].vbtn1.x)
								{
									if(mouseX <= herolist.x + hero[i].x + hero[i].vbtn1.x + 25 * Number(hero[i].vbtn1.scaleX))
									{
										if(mouseY >= herolist.y + hero[i].y + hero[i].vbtn1.y)
										{
											if(mouseY <= herolist.y + hero[i].y + hero[i].vbtn1.y + 25 * Number(hero[i].vbtn1.scaleY))
											{
												PlaySound_full(ss_info_act);
												is_firing = false;
												DialogSay("Visiting profile page of \'\'" + mens[i].login_name + "\'\'...","#FFFF00");
												try
												{
													navigateToURL(new URLRequest("http://www.plazmaburst2.com/?s=7&ac=" + mens[i].login_name),"_blank");
												}
												catch(e:Error)
												{
												}
											}
										}
									}
								}
								if(mouseX >= herolist.x + hero[i].x + hero[i].vbtn2.x)
								{
									if(mouseX <= herolist.x + hero[i].x + hero[i].vbtn2.x + 25 * Number(hero[i].vbtn2.scaleX))
									{
										if(mouseY >= herolist.y + hero[i].y + hero[i].vbtn2.y)
										{
											if(mouseY <= herolist.y + hero[i].y + hero[i].vbtn2.y + 25 * Number(hero[i].vbtn2.scaleY))
											{
												is_firing = false;
												PlaySound_full(ss_info_act);
												if(Number(getTimer()) - LAST_VOTE > 3000)
												{
													MP_custom_events += ";votekick|" + i + "#" + MP_myid;
													LAST_VOTE = getTimer();
												}
												else
												{
													DialogSay("You will be allowed to vote again in " + Math.ceil((3000 - (Number(getTimer()) - LAST_VOTE)) / 1000) + " seconds.","#FFFF00");
												}
											}
										}
									}
								}
								if(mouseX >= herolist.x + hero[i].x + hero[i].vbtn3.x)
								{
									if(mouseX <= herolist.x + hero[i].x + hero[i].vbtn3.x + 25 * Number(hero[i].vbtn3.scaleX))
									{
										if(mouseY >= herolist.y + hero[i].y + hero[i].vbtn3.y)
										{
											if(mouseY <= herolist.y + hero[i].y + hero[i].vbtn3.y + 25 * Number(hero[i].vbtn3.scaleY))
											{
												PlaySound_full(ss_info_act);
												is_firing = false;
												if(Boolean(mens[MP_myid].dead) || MP_spectator)
												{
													death_cam = i;
												}
												else
												{
													DialogSay("Death Camera can be changed to different players only when you are dead.","#FFFF00");
												}
											}
										}
									}
								}
							}
						}
						++i;
					}
				}
				if(MP_type == 3)
				{
					if(team_blue.hitTestPoint(mouseX,mouseY,false))
					{
						if(key_ctrl)
						{
							PlaySound_full(ss_info_act);
							key_ctrl = false;
							mc = mens[MP_myid];
							if(Number(getTimer()) - Number(mc.whenlastshot) > 7000)
							{
								mc.lastshotby = -1;
							}
							if(mc.dead || mc.lastshotby == -1 || mc.lastshotby == MP_myid)
							{
								mc.team = 13;
								mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "B";
								spawn = false;
								mc.hea = 0;
								mc.mdl_head = mc.char;
								mc.mdl_leg1_upper = mc.char;
								mc.mdl_leg1_middle = mc.char;
								mc.mdl_leg1_lower = mc.char;
								mc.mdl_leg2_upper = mc.char;
								mc.mdl_leg2_middle = mc.char;
								mc.mdl_leg2_lower = mc.char;
								mc.mdl_arm1_upper = mc.char;
								mc.mdl_arm1_lower = mc.char;
								mc.mdl_arm2_upper = mc.char;
								mc.mdl_arm2_lower = mc.char;
								mc.mdl_toe = mc.char;
								mc.mdl_body = mc.char;
								UpdateCharProps(mc as player);
								UpdateTeamTable();
								i = 0;
								while(i < playerstotal)
								{
									UpdateTeamColor(mens[i]);
									++i;
								}
							}
							else
							{
								DialogSay("Can\'t change team during fight.","#FFFF00");
							}
						}
						else
						{
							DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
						}
					}
					if(team_red.hitTestPoint(mouseX,mouseY,false))
					{
						if(key_ctrl)
						{
							PlaySound_full(ss_info_act);
							key_ctrl = false;
							mc = mens[MP_myid];
							if(Number(getTimer()) - Number(mc.whenlastshot) > 7000)
							{
								mc.lastshotby = -1;
							}
							if(mc.dead || mc.lastshotby == -1 || mc.lastshotby == MP_myid)
							{
								mc.team = 12;
								mc.palette[0] = mc.palette[1] = mc.palette[2] = mc.palette[3] = "R";
								spawn = false;
								mc.hea = 0;
								mc.mdl_head = mc.char;
								mc.mdl_leg1_upper = mc.char;
								mc.mdl_leg1_middle = mc.char;
								mc.mdl_leg1_lower = mc.char;
								mc.mdl_leg2_upper = mc.char;
								mc.mdl_leg2_middle = mc.char;
								mc.mdl_leg2_lower = mc.char;
								mc.mdl_arm1_upper = mc.char;
								mc.mdl_arm1_lower = mc.char;
								mc.mdl_arm2_upper = mc.char;
								mc.mdl_arm2_lower = mc.char;
								mc.mdl_toe = mc.char;
								mc.mdl_body = mc.char;
								UpdateCharProps(mc as player);
								UpdateTeamTable();
								i = 0;
								while(i < playerstotal)
								{
									UpdateTeamColor(mens[i]);
									++i;
								}
							}
							else
							{
								DialogSay("Can\'t change team during fight.","#FFFF00");
							}
						}
						else
						{
							DialogSay("Hold \'\'Ctrl\'\' (\'\'Cmd\'\') key to press this button","#FFFF00");
						}
					}
				}
			}
			VarChangePreventEnd();
		}
		
		public function m_release(param1:Event) : void
		{
			is_firing = false;
		}
		
		public function mov2(param1:MouseEvent) : void
		{
			if(!stoped_by_focus)
			{
				if(!param1.buttonDown)
				{
					is_firing = false;
				}
			}
		}
		
		public function mouseLeaveListener(param1:Event) : void
		{
			if(game_focus_ever_lost)
			{
				return;
			}
			game_focus_ever_lost = true;
			if(currentLabel == "gaming")
			{
				if(!MP_mode)
				{
					system_non_stop = false;
					stoped_by_focus = true;
					if(!mens[MP_myid].dead)
					{
						pauze.visible = true;
					}
				}
			}
		}
		
		public function mouseMoveListener(param1:Event) : void
		{
			if(!game_focus_ever_lost)
			{
				return;
			}
			game_focus_ever_lost = false;
			if(currentLabel == "gaming")
			{
				if(!MP_mode)
				{
					if(!gamemenu.visible)
					{
						if(stoped_by_focus)
						{
							system_non_stop = true;
						}
						if(!mens[MP_myid].dead)
						{
							pauze.visible = false;
						}
					}
				}
				key_left = false;
				key_right = false;
				key_up = false;
				key_down = false;
				key_grenade = false;
				key_pick = false;
				key_alt = false;
				key_grab = false;
				key_kinetic = false;
				key_fall = false;
				if(!MP_mode)
				{
					Disable_next_click = true;
				}
			}
		}
		
		public function r2(param1:Number) : String
		{
			return String(Math.round(param1 * 100) / 100);
		}
		
		public function DoorLogic() : void
		{
			for (i = 0; i < doorstotal; i++)
			{
				var door:PB2Door = doors[i];
				if(door.moving)
				{
					xx2 = Dist2D(door.tarx, door.tary, door.x, door.y);
					yy2 = door.maxspeed;
					if(door.forcehyperjump_float > 0)
					{
						door.forcehyperjump_float -= 0.1;
						yy2 = yy2 * 0.9 + yy2 * MP_ping2 / c_sim_rt2 * 0.1;
					}
					if(xx2 <= yy2 + 1)
					{
						door.stopMoving();
						for (i2 = 0; i2 < regionstotal; i2++) {
							if(regions[i2].use_on == PB2Region.USE_DOOR)
							{
								if(door.x == regions[i2].x)
								{
									if(door.y == regions[i2].y)
									{
										if(door.w == regions[i2].w)
										{
											if(door.h == regions[i2].h)
											{
												if(regions[i2].use_target != -1)
												{
													triggers[regions[i2].use_target].forcehyperjump = false;
													EXEC_TRIGGER(regions[i2].use_target);
												}
											}
										}
									}
								}
							}
						}
					}
					else
					{
						door.tox = (Number(door.tarx) - Number(door.x)) / xx2;
						door.toy = (Number(door.tary) - Number(door.y)) / xx2;
						door.x += Number(door.tox) * yy2 * GSPEED;
						door.y += Number(door.toy) * yy2 * GSPEED;
						i2 = 0;
						while(i2 < atotal)
						{
							if(aio[i2] == false)
							{
								if(ax[i2] > Number(door.x) - Math_abs(Number(door.tox) * yy2) - Number(arad[i2]) - 10)
								{
									if(ay[i2] > Number(door.y) - Math_abs(Number(door.toy) * yy2) - Number(arad[i2]) - 10)
									{
										if(ax[i2] < door.x + door.w + Math_abs(Number(door.tox) * yy2) + arad[i2] + 10)
										{
											if(ay[i2] < door.y + door.h + Math_abs(Number(door.toy) * yy2) + arad[i2] + 10)
											{
												WakeUpAtom(i2);
											}
										}
									}
								}
							}
							++i2;
						}
						door.tox *= door.maxspeed;
						door.toy *= door.maxspeed;
					}
					UpdateDoorAttachments(door, yy2);
				}
			}
		}
		
		public function UpdateDoorAttachments(door:PB2Door, unfreeze_speed:Number) : void
		{
			for each (var attach:Object in attachments) {
				if(attach.parent === door)
				{
					if(attach.type === 0)
					{
						attach.child.moving = false;
						attach.child.x = door.x + attach.dx;
						attach.child.y = door.y + attach.dy;
						attach.child.tox = door.tox;
						attach.child.toy = door.toy;
						i2 = 0;
						while(i2 < atotal)
						{
							if(aio[i2] == false)
							{
								if(ax[i2] > Number(attach.x) - Math_abs(Number(attach.tox) * unfreeze_speed) - Number(arad[i2]) - 10)
								{
									if(ay[i2] > Number(attach.y) - Math_abs(Number(attach.toy) * unfreeze_speed) - Number(arad[i2]) - 10)
									{
										if(ax[i2] < attach.x + attach.w + Math_abs(Number(attach.tox) * unfreeze_speed) + arad[i2] + 10)
										{
											if(ay[i2] < attach.y + attach.h + Math_abs(Number(attach.toy) * unfreeze_speed) + arad[i2] + 10)
											{
												WakeUpAtom(i2);
											}
										}
									}
								}
							}
							++i2;
						}
					}
					else if(attach.type == 1 || attach.type == 2 || attach.type == 4)
					{
						attach.child.x = door.x + attach.dx;
						attach.child.y = door.y + attach.dy;
						if(attach.type == 2)
						{
							if(attach.child.onMove)
							{
								attach.child.onMove();
							}
						}
					}
					else if(attach.type == 3)
					{
						pushx[attach.child] = door.x + attach.dx;
						pushy[attach.child] = door.y + attach.dy;
						pushw[attach.child] = door.x + attach.dx2;
						pushh[attach.child] = door.y + attach.dy2;
					}
					else if(attach.type == 5)  { // Water attachment requires more than just moving the MovieClip
						wax[attach.id] = attach.child.x = door.x + attach.dx;
						way[attach.id] = attach.child.y = door.y + attach.dy;
					}
				}
			}
		}
		
		public function BulletLogic() : void
		{
			var bul_id:int = 0;
			var i2:int = 0;
			var i5:int = 0;
			var _loc14_:int = 0;
			var _loc19_:Number = NaN;
			var _loc20_:Number = NaN;
			var _loc21_:Boolean = false;
			var _loc22_:Boolean = false;
			bul_id = 0;

			while(bul_id <= pulsmax)
			{
				// not null
				if(puls[bul_id] != null)
				{
					// visible
					if(puls[bul_id].visible == true)
					{
						// if the bullet too weak LMAO make it invisible
						if(puls[bul_id].power <= 0)
						{
							i6 = -1;
							puls[bul_id].visible = false;
						}

						// no lag delay, meaning this is in new netcode or SP.
						if(puls[bul_id].lag <= 0)
						{
							// in this while loop,
							// i7 is 0 for bullets.
							// i7 ranges from 0 - 6 for swords
							// i7 ranges from 0 - bullet life for rails
							// i7 is probably used to determine the number of times this particular while loop iterates.
							i7 = 0;
							
							while(
								(
									// Rails AND i7 == 0 or not in water
									puls[bul_id].cclass == Projectile.RAILS && (i7 == 0 || !puls[bul_id].inwater) 
									|| 
									// Swords
									puls[bul_id].cclass == Projectile.SWORDS 
									|| 
									// i7 lesser than lag
									(i7 < -Number(puls[bul_id].lag) || i7 == 0)
								) && puls[bul_id].visible 
								|| 
								puls[bul_id].cclass != Projectile.RAILS && i7 == 0 
								|| 
								puls[bul_id].power > 4 && puls[bul_id].cclass == Projectile.BULLET && i7 <= 1 && puls[bul_id].visible 
								|| 
								puls[bul_id].currentFrame == Projectile.INVISIBLE_BULLET && puls[bul_id].visible
							){
								RegisterPossibleBullet(puls[bul_id]);
								puls[bul_id].lag = 0;
								if(puls[bul_id].cclass == Projectile.RAILS || puls[bul_id].cclass == Projectile.SWORDS)
								{
									thispulspeed = 1;
								}
								else if(puls[bul_id].master == MP_myid)
								{
									thispulspeed = GSPEED2;
								}
								else
								{
									thispulspeed = GSPEED;
								}

								// this if statement is run from 0 - bullet lifespan times (default 60, so 61 times)
								if(puls[bul_id].cclass == Projectile.RAILS)
								{
									// i2 ranges from 0 to pulsmax
									// scans the current rail with all existing bullets, whether this bullet exist and is of ENERGY tyoe
									// not sure what the purpose is for though, rail and energy projectile synergy / interaction?
									i2 = 0;
									while(i2 <= pulsmax)
									{
										if(bul_id != i2)
										{
											if(puls[i2] != null)
											{
												
												if(puls[i2].visible == true)
												{
													
													if(mens[puls[i2].master] && mens[puls[bul_id].master] && (mens[puls[i2].master].team != mens[puls[bul_id].master].team))
													{
														if(puls[i2].lastin != puls[bul_id].master)
														{
															if(puls[i2].cclass == Projectile.ENERGY)
															{

																rx = Number(puls[bul_id].nx) - Number(puls[bul_id].lx);
																ry = Number(puls[bul_id].ny) - Number(puls[bul_id].ly);
																xx = VectorDist2D(rx,ry);
																rx /= xx;
																ry /= xx;
																x3 = puls[i2].nx + ry * 10;
																y3 = Number(puls[i2].ny) - rx * 10;
																x4 = Number(puls[i2].nx) - ry * 10;
																y4 = puls[i2].ny + rx * 10;
																xx = puls[bul_id].nx;
																yy = puls[bul_id].ny;
																xx2 = puls[bul_id].lx;
																yy2 = puls[bul_id].ly;
																rx = undefined;
																ry = undefined;
																v = ((xx - xx2) * (y3 - yy2) + (yy - yy2) * (xx2 - x3)) / ((yy - yy2) * (x4 - x3) - (xx - xx2) * (y4 - y3));
																retux = x3 + (x4 - x3) * v;
																retuy = y3 + (y4 - y3) * v;
																if((xx2 < xx ? xx2 : xx) - 1 <= retux)
																{
																	if((xx2 > xx ? xx2 : xx) + 1 >= retux)
																	{
																		if((yy2 < yy ? yy2 : yy) - 1 <= retuy)
																		{
																			if((yy2 > yy ? yy2 : yy) + 1 >= retuy)
																			{
																				if((x3 < x4 ? x3 : x4) - 1 <= retux)
																				{
																					if((x3 > x4 ? x3 : x4) + 1 >= retux)
																					{
																						if((y3 < y4 ? y3 : y4) - 1 <= retuy)
																						{
																							if((y3 > y4 ? y3 : y4) + 1 >= retuy)
																							{
																								if(i6 != -2)
																								{
																									if(0 == rx || Dist2D(rx,ry,puls[bul_id].lx,puls[bul_id].ly) > Dist2D(retux,retuy,puls[bul_id].lx,puls[bul_id].ly))
																									{
																										rx = retux;
																										ry = retuy;
																										cx = puls[i2].power;
																										if(puls[bul_id].power > 0)
																										{
																											puls[i2].power -= Number(puls[bul_id].power) * 0.5;
																										}
																										if(cx > 0)
																										{
																											puls[bul_id].power -= cx * 3;
																										}
																										if(puls[i2].power < 0.5)
																										{
																											puls[i2].life = puls[i2].maxbulletlife + 1;
																											puls[i2].power = 0;
																										}
																										if(puls[bul_id].power < 0.5)
																										{
																											puls[bul_id].visible = false;
																											puls[bul_id].power = 0;
																										}
																										Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																										Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																										Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										i2++;
									}
								}
								if(puls[bul_id].cclass != 6 && puls[bul_id].cclass != Projectile.GRENADE)
								{
									i2 = 0;
									while(i2 <= pulsmax)
									{
										if(bul_id != i2)
										{
											if(puls[i2] != null)
											{
												if(puls[i2].visible == true)
												{
													if(puls[i2].cclass == 6 || puls[i2].cclass == 4)
													{
														if(puls[bul_id].lastin != -300 - i2)
														{
															i3 = puls[i2].attached;
															if(puls[bul_id].nx > Number(ax[i3]) - 5 - Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
															{
																if(puls[bul_id].nx < ax[i3] + 5 + Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
																{
																	if(puls[bul_id].ny > Number(ay[i3]) - 5 - Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
																	{
																		if(puls[bul_id].ny < ay[i3] + 5 + Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
																		{
																			if(CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,Number(ax[i3]) - 5,Number(ay[i3]) - 5,ax[i3] + 5,ay[i3] + 5,bul_id) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[i3] + 5,Number(ay[i3]) - 5,Number(ax[i3]) - 5,ay[i3] + 5,bul_id))
																			{
																				puls[bul_id].lastin = -300 - i2;
																				atox[i3] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) / Number(arad[i3]) * Number(puls[bul_id].knockback_multiplier);
																				atoy[i3] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) / Number(arad[i3]) * Number(puls[bul_id].knockback_multiplier);
																				WakeUpAtom(i3);
																				Effect(puls[bul_id].x,puls[bul_id].y,1,puls[bul_id].power,0);
																				Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																				puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) - 0.5);
																				if(puls[bul_id].power < 0.4)
																				{
																					puls[bul_id].visible = false;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										i2++;
									}
								}
								if(puls[bul_id].cclass == Projectile.SWORDS)
								{
									i2 = 0;
									while(i2 <= pulsmax)
									{
										if(bul_id != i2)
										{
											if(puls[i2] != null)
											{
												if(puls[i2].visible == true)
												{
													if(mens[puls[i2].master] && mens[puls[bul_id].master] && (mens[puls[i2].master].team != mens[puls[bul_id].master].team))
													{
														if(puls[i2].lastin != puls[bul_id].master)
														{
															if(puls[i2].cclass == 0 || puls[i2].currentFrame == 14)
															{
																if(Dist2D(puls[bul_id].x,puls[bul_id].y,puls[i2].x,puls[i2].y) < 30)
																{
																	if(puls[i2].currentFrame == 14)
																	{
																		puls[i2].dead = true;
																	}
																	else
																	{
																		u = VectorDist2D(puls[bul_id].spx,puls[bul_id].spy);
																		v = VectorDist2D(puls[i2].spx,puls[i2].spy);
																		puls[i2].spx = Number(puls[bul_id].spx) / u * 2 + Number(puls[i2].spx) / v - 0.15 + Math.random() * 0.3;
																		puls[i2].spy = Number(puls[bul_id].spy) / u * 2 + Number(puls[i2].spy) / v - 0.15 + Math.random() * 0.3;
																		xx = VectorDist2D(puls[i2].spx,puls[i2].spy);
																		puls[i2].spx /= xx;
																		puls[i2].spy /= xx;
																		puls[i2].spx *= v;
																		puls[i2].spy *= v;
																		puls[i2].master = puls[bul_id].master;
																		puls[i2].lastin = puls[bul_id].master;
																		puls[i2].rotation = 270 - Math.atan2(puls[i2].spx,puls[i2].spy) / Math.PI * 180;
																		rx = (puls[bul_id].x + puls[i2].x) / 2;
																		ry = (puls[bul_id].y + puls[i2].y) / 2;
																		Effect(rx,ry,1,puls[bul_id].power,0);
																		Effect(rx,ry,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																		Effect(rx,ry,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																		Effect(rx,ry,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
																		if(mens[puls[bul_id].master].isGhost)
																		{
																			if(mens[puls[bul_id].master].alpha < 0.3)
																			{
																				mens[puls[bul_id].master].alpha = 0.3;
																			}
																		}
																		if(puls[bul_id].master == MP_myid)
																		{
																			incBadge(9);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										i2++;
									}
								}
								if(puls[bul_id].inwater)
								{
									if(puls[bul_id].cclass == Projectile.BULLET)
									{
										thispulspeed *= 0.3;
									}
									if(puls[bul_id].cclass == Projectile.ROCKETS)
									{
										thispulspeed *= 0.5;
									}
									if(puls[bul_id].cclass == Projectile.GRENADE || puls[bul_id].cclass == 6)
									{
										puls[bul_id].spy -= gravity * 0.5 * thispulspeed;
										puls[bul_id].spx *= 0.9 * thispulspeed;
										puls[bul_id].spy *= 0.9 * thispulspeed;
									}
								}
								puls[bul_id].lx = Number(puls[bul_id].nx) - Number(puls[bul_id].spx) * 0.5;
								puls[bul_id].ly = Number(puls[bul_id].ny) - Number(puls[bul_id].spy) * 0.5;
								puls[bul_id].x += Number(puls[bul_id].spx) * thispulspeed;
								puls[bul_id].y += Number(puls[bul_id].spy) * thispulspeed;
								puls[bul_id].nx = puls[bul_id].x + Number(puls[bul_id].spx) * 0.5;
								puls[bul_id].ny = puls[bul_id].y + Number(puls[bul_id].spy) * 0.5;
								if(puls[bul_id].life == 0)
								{
									puls[bul_id].alpha = 1;
								}
								puls[bul_id].life += thispulspeed;
								if(puls[bul_id].life > puls[bul_id].maxbulletlife)
								{
									puls[bul_id].visible = false;
								}
								if(puls[bul_id].cclass == Projectile.GRENADE || puls[bul_id].cclass == 6)
								{
									puls[bul_id].spx = atox[puls[bul_id].attached];
									puls[bul_id].spy = atoy[puls[bul_id].attached];
									puls[bul_id].x = ax[puls[bul_id].attached];
									puls[bul_id].y = ay[puls[bul_id].attached];
									if(puls[bul_id].currentFrame != 14)
									{
										if(puls[bul_id].cclass == 6)
										{
											if(puls[bul_id].life > 50)
											{
												if(puls[bul_id].notbliped)
												{
													puls[bul_id].notbliped = false;
													if(puls[bul_id].nadekind == 1)
													{
														puls[bul_id].gotoAndStop(13);
														PlaySound(s_grenade_act,puls[bul_id].x,puls[bul_id].y);
													}
													if(puls[bul_id].nadekind == 2)
													{
														puls[bul_id].gotoAndStop(18);
														PlaySound(s_portnade_act2,puls[bul_id].x,puls[bul_id].y);
													}
													if(puls[bul_id].nadekind == 3)
													{
														puls[bul_id].gotoAndStop(20);
														PlaySound(s_shnade_act,puls[bul_id].x,puls[bul_id].y);
													}
												}
											}
											if(puls[bul_id].nadekind == 3)
											{
												if(puls[bul_id].life > 60)
												{
													if(puls[bul_id].hasexploded)
													{
														if(puls[bul_id].life > puls[bul_id].maxbulletlife)
														{
															puls[bul_id].hea = 0;
														}
														if(puls[bul_id].hea > 0)
														{
															if(!shnades[puls[bul_id].childsh].io)
															{
																puls[bul_id].hea = 0;
															}
															puls[bul_id].base.scaleX = puls[bul_id].base.scaleY = Number(puls[bul_id].radius) / 100;
															puls[bul_id].radius = (150 + Number(puls[bul_id].radius) * 4 / GSPEED) / (1 + 4 / GSPEED);
															puls[bul_id].losthea -= 10 * GSPEED;
															if(puls[bul_id].losthea < 0)
															{
																puls[bul_id].losthea = 0;
															}
															if(puls[bul_id].heapo > 0)
															{
																puls[bul_id].hea += Number(puls[bul_id].heapo) - Math.max(Number(puls[bul_id].heapo) - GSPEED * 5,0);
																puls[bul_id].heapo -= GSPEED * 5;
															}
															puls[bul_id].base.ounr.alpha = (Number(puls[bul_id].radius) / 150 * 0.1 + Number(puls[bul_id].losthea) * 0.1) * (1 - (100 - Number(puls[bul_id].hea)) / 100 * Math.random());
															puls[bul_id].base.innr.alpha = Number(puls[bul_id].radius) / 150 * Number(puls[bul_id].losthea) * 10 * Number(puls[bul_id].base.ounr.alpha) * (90 - Number(puls[bul_id].heapo)) / 90 + Number(puls[bul_id].heapo) / 90;
															atox[puls[bul_id].attached] = 0;
															atoy[puls[bul_id].attached] = 0;
															ax[puls[bul_id].attached] = puls[bul_id].stuckx;
															ay[puls[bul_id].attached] = puls[bul_id].stucky;
															shnades[puls[bul_id].childsh].x = puls[bul_id].stuckx;
															shnades[puls[bul_id].childsh].y = puls[bul_id].stucky;
															shnades[puls[bul_id].childsh].radius = puls[bul_id].radius;
														}
														else
														{
															ExplodeShield(puls[bul_id].childsh);
															atoy[puls[bul_id].attached] -= GSPEED * 2;
															atim[puls[bul_id].attached] = 0;
															DisposeAtom(puls[bul_id].attached);
															shnades[puls[bul_id].childsh].io = false;
															puls[bul_id].visible = false;
														}
													}
													else
													{
														puls[bul_id].hasexploded = true;
														PlaySound(s_shnade_explode,puls[bul_id].x,puls[bul_id].y);
														puls[bul_id].gotoAndStop(21);
														puls[bul_id].base.ounr.alpha = 0;
														puls[bul_id].base.innr.alpha = 0;
														puls[bul_id].stuckx = puls[bul_id].x;
														puls[bul_id].stucky = puls[bul_id].y;
														puls[bul_id] = graphics_3d_front.addChildAt(puls[bul_id],graphics_3d_front.numChildren);
														shnades[shnades_next] = new Object();
														shnades[shnades_next].io = true;
														shnades[shnades_next].x = puls[bul_id].stuckx;
														shnades[shnades_next].y = puls[bul_id].stucky;
														shnades[shnades_next].radius = 0;
														puls[bul_id].childsh = shnades_next;
														shnades[shnades_next].parentish = bul_id;
														nextsh();
													}
												}
											}
										}
									}
								}
								xx = puls[bul_id].nx;
								yy = puls[bul_id].ny;
								xx2 = puls[bul_id].lx;
								yy2 = puls[bul_id].ly;
								i2 = 0;
								while(i2 < shnades_total)
								{
									if(shnades[i2].io)
									{
										if(xx > Number(shnades[i2].x) - Number(shnades[i2].radius) - 100)
										{
											if(xx < shnades[i2].x + shnades[i2].radius + 100)
											{
												if(yy > Number(shnades[i2].y) - Number(shnades[i2].radius) - 100)
												{
													if(yy < shnades[i2].y + shnades[i2].radius + 100)
													{
														if(Dist2D(xx,yy,shnades[i2].x,shnades[i2].y) < shnades[i2].radius)
														{
															if(Dist2D(xx2,yy2,shnades[i2].x,shnades[i2].y) >= shnades[i2].radius)
															{
																i3 = shnades[i2].parentish;
																var bul_dir:Number;
																var speed:Number;
																var _loc7_:Number;
																var _loc8_:Number;
																var _loc9_:Number;
																var _loc10_:Number;
																if(puls[bul_id].cclass == Projectile.GRENADE || puls[bul_id].cclass == 6)
																{
																	bul_dir = Math.atan2(puls[bul_id].spy,puls[bul_id].spx);
																	speed = VectorDist2D(puls[bul_id].spy,puls[bul_id].spx);
																	_loc7_ = Math.atan2(yy - Number(puls[i3].y),xx - Number(puls[i3].x));
																	_loc8_ = Dist2D(xx,yy,puls[i3].x,puls[i3].y);
																	ax[puls[bul_id].attached] = puls[i3].x + Math.cos(_loc7_) * (_loc8_ + 2);
																	ay[puls[bul_id].attached] = puls[i3].y + Math.sin(_loc7_) * (_loc8_ + 2);
																	_loc9_ = Math.atan2(Math.sin(_loc7_ - bul_dir),Math.cos(_loc7_ - bul_dir));
																	atox[puls[bul_id].attached] -= Math.cos(_loc7_) * speed * Math.cos(_loc9_) * 2;
																	atoy[puls[bul_id].attached] -= Math.sin(_loc7_) * speed * Math.cos(_loc9_) * 2;
																	if(speed > 4)
																	{
																		PlaySound(s_shnade_hit_low,puls[bul_id].x,puls[bul_id].y);
																		puls[i3].losthea += 1 * 8;
																	}
																	if((_loc10_ = VectorDist2D(puls[bul_id].spy,puls[bul_id].spx)) > speed * 1.01)
																	{
																		atox[puls[bul_id].attached] = Number(atox[puls[bul_id].attached]) / _loc10_ * speed;
																		atoy[puls[bul_id].attached] = Number(atoy[puls[bul_id].attached]) / _loc10_ * speed;
																	}
																}
																else
																{
																	var _loc11_:Number = Number(puls[i3].hea);
																	var _loc12_:Number = Number(puls[bul_id].power);
																	_loc7_ = Math.atan2(yy - Number(puls[i3].y),xx - Number(puls[i3].x));
																	bul_dir = Math.atan2(puls[bul_id].spy,puls[bul_id].spx);
																	_loc9_ = Math.atan2(Math.sin(_loc7_ - bul_dir),Math.cos(_loc7_ - bul_dir));
																	_loc8_ = Dist2D(xx,yy,puls[i3].x,puls[i3].y);
																	if(puls[bul_id].cclass == 0 && -Math.cos(_loc9_) < 1 / 2 || puls[bul_id].cclass == 2)
																	{
																		speed = VectorDist2D(puls[bul_id].spy,puls[bul_id].spx);
																		puls[bul_id].spx -= Math.cos(_loc7_) * speed * Math.cos(_loc9_) * 2;
																		puls[bul_id].spy -= Math.sin(_loc7_) * speed * Math.cos(_loc9_) * 2;
																		if((_loc10_ = VectorDist2D(puls[bul_id].spy,puls[bul_id].spx)) > 0)
																		{
																			puls[bul_id].spx = Number(puls[bul_id].spx) / _loc10_ * speed;
																			puls[bul_id].spy = Number(puls[bul_id].spy) / _loc10_ * speed;
																		}
																		_loc12_ *= 0.5;
																		if(puls[bul_id].cclass == Projectile.RAILS)
																		{
																			// RED RAIL
																			if(puls[bul_id].currentFrame == 29)
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,21,puls[bul_id].rotation,0);
																			}
																			// CYAN LASER
																			else if(puls[bul_id].currentFrame == 51)
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,24,puls[bul_id].rotation,0);
																			}
																			// ORANGE RAIL
																			else if(puls[bul_id].currentFrame == 40)
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,22,puls[bul_id].rotation,0);
																			}
																			// Poison rail
																			else if(puls[bul_id].currentFrame == 48 || puls[bul_id].currentFrame == 22)
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,23,puls[bul_id].rotation,0);
																			}
																			// Lite Rail
																			else if(puls[bul_id].maxpower < 5)
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,5,puls[bul_id].rotation,0);
																			}
																			// Heavy rail
																			else
																			{
																				Effect(puls[bul_id].x,puls[bul_id].y,17,puls[bul_id].rotation,0);
																			}
																			Effect(puls[i3].x + Math.cos(_loc7_) * _loc8_,puls[i3].y + Math.sin(_loc7_) * _loc8_,6,0,0);
																		}
																	}
																	cx = _loc12_;
																	if(puls[bul_id].cclass == Projectile.RAILS)
																	{
																		i5 = 0;
																		while(i5 < Math.sqrt(cx) * 2 || i5 < 3)
																		{
																			Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * cx * 0.03 * Math.random(),-Number(puls[bul_id].spy) * cx * 0.03 * Math.random());
																			i5++;
																		}
																	}
																	else
																	{
																		i5 = 0;
																		while(i5 < Math.sqrt(cx) * 2 || i5 < 3)
																		{
																			Effect(puls[i3].x + Math.cos(_loc7_) * _loc8_,puls[i3].y + Math.sin(_loc7_) * _loc8_,8,-Number(puls[bul_id].spx) * cx * 0.03 * Math.random(),-Number(puls[bul_id].spy) * cx * 0.03 * Math.random());
																			i5++;
																		}
																	}
																	puls[i3].hea -= _loc12_ * 8;
																	puls[i3].losthea += _loc12_ * 8;
																	i4 = -1;
																	i4 = 0;
																	while(i4 < MP_specials.length)
																	{
																		if(MP_specials[i4] != undefined && MP_specials[i4].pul == i3)
																		{
																			// found = true;
																			break;
																		}
																		++i4;
																	}
																	if(i4 == MP_specials.length)
																	{
																		i4 = 0;
																		while(i4 < MP_myspecials_total)
																		{
																			if(MP_specials[i4] != undefined && MP_myspecials[i4].pul == i3)
																			{
																				i4 = MP_myspecials[i4].id_in_full_list;
																				// found = true;
																				break;
																			}
																			++i4;
																		}
																	}
																	MP_custom_events += ";shgh|" + puls[bul_id].master + "#" + i4 + "#" + puls[i3].hea + "#" + _loc12_ * 8;
																	if(puls[i3].hea <= 0)
																	{
																		shnades[i2].io = false;
																		ExplodeShield(i2);
																		_loc12_ = -Number(puls[i3].hea) / 8;
																	}
																	if(_loc12_ > 0)
																	{
																		if(shnades[i2].io)
																		{
																			if(_loc12_ > 1.2)
																			{
																				PlaySound(s_shnade_hit,puls[bul_id].x,puls[bul_id].y);
																			}
																			else
																			{
																				PlaySound(s_shnade_hit_low,puls[bul_id].x,puls[bul_id].y);
																			}
																		}
																		puls[bul_id].power -= _loc12_;
																	}
																	if(puls[bul_id].power < 0.4)
																	{
																		puls[bul_id].visible = false;
																	}
																	else
																	{
																		puls[bul_id].rotation = 270 - Math.atan2(puls[bul_id].spx,puls[bul_id].spy) / Math.PI * 180;
																		puls[bul_id].lastin = -1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
									i2++;
								}
								rx = undefined;
								ry = undefined;
								i6 = -1;
								if(puls[bul_id].cclass != 4)
								{
									for each(i2 in GetNearBoxBSP_at(puls[bul_id].x,puls[bul_id].y))
									{
										if(puls[bul_id].lastinbox != i2)
										{
											if(puls[bul_id].x >= Number(boxx[i2]) - Math_abs(puls[bul_id].spx) * thispulspeed)
											{
												if(puls[bul_id].x <= boxx[i2] + boxw[i2] + Math_abs(puls[bul_id].spx) * thispulspeed)
												{
													if(puls[bul_id].y >= Number(boxy[i2]) - Math_abs(puls[bul_id].spy) * thispulspeed)
													{
														if(puls[bul_id].y <= boxy[i2] + boxh[i2] + Math_abs(puls[bul_id].spy) * thispulspeed)
														{
															i3 = 0;
															while(i3 < 4)
															{
																if(puls[bul_id].spx > 0 && i3 == 2 || puls[bul_id].spx < 0 && i3 == 1 || puls[bul_id].spy > 0 && i3 == 0 || puls[bul_id].spy < 0 && i3 == 3)
																{
																	if(i3 == 0)
																	{
																		x3 = boxx[i2];
																		y3 = boxy[i2];
																		x4 = boxx[i2] + boxw[i2];
																		y4 = boxy[i2];
																	}
																	else if(i3 == 1)
																	{
																		x3 = boxx[i2] + boxw[i2];
																		y3 = boxy[i2];
																		x4 = boxx[i2] + boxw[i2];
																		y4 = boxy[i2] + boxh[i2];
																	}
																	else if(i3 == 2)
																	{
																		x3 = boxx[i2];
																		y3 = boxy[i2];
																		x4 = boxx[i2];
																		y4 = boxy[i2] + boxh[i2];
																	}
																	else
																	{
																		x3 = boxx[i2];
																		y3 = boxy[i2] + boxh[i2];
																		x4 = boxx[i2] + boxw[i2];
																		y4 = boxy[i2] + boxh[i2];
																	}
																	v = ((xx - xx2) * (y3 - yy2) + (yy - yy2) * (xx2 - x3)) / ((yy - yy2) * (x4 - x3) - (xx - xx2) * (y4 - y3));
																	retux = x3 + (x4 - x3) * v;
																	retuy = y3 + (y4 - y3) * v;
																	if((xx2 < xx ? xx2 : xx) - 1 <= retux)
																	{
																		if((xx2 > xx ? xx2 : xx) + 1 >= retux)
																		{
																			if((yy2 < yy ? yy2 : yy) - 1 <= retuy)
																			{
																				if((yy2 > yy ? yy2 : yy) + 1 >= retuy)
																				{
																					if(boxx[i2] - 1 <= retux)
																					{
																						if(boxx[i2] + 1 + boxw[i2] >= retux)
																						{
																							if(boxy[i2] - 1 <= retuy)
																							{
																								if(boxy[i2] + 1 + boxh[i2] >= retuy)
																								{
																									if(i6 != -2)
																									{
																										if(i6 == -1 || Dist2D(rx,ry,puls[bul_id].lx,puls[bul_id].ly) > Dist2D(retux,retuy,puls[bul_id].lx,puls[bul_id].ly))
																										{
																											rx = retux;
																											ry = retuy;
																											i6 = i3;
																											puls[bul_id].lastinbox = i2;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																++i3;
															}
														}
													}
												}
											}
											if(i6 == -1)
											{
												if(puls[bul_id].x >= boxx[i2])
												{
													if(puls[bul_id].x <= boxx[i2] + boxw[i2])
													{
														if(puls[bul_id].y >= boxy[i2])
														{
															if(puls[bul_id].y <= boxy[i2] + boxh[i2])
															{
																rx = puls[bul_id].x;
																ry = puls[bul_id].y;
																i6 = -2;
																puls[bul_id].lastinbox = i2;
															}
														}
													}
												}
											}
										}
									}
									i2 = 0;
									while(i2 < doorstotal)
									{
										if(puls[bul_id].lastinbox != -1 - i2)
										{
											if(puls[bul_id].x >= Number(doors[i2].x) - Math_abs(puls[bul_id].spx) * thispulspeed)
											{
												if(puls[bul_id].x <= doors[i2].x + doors[i2].w + Math_abs(puls[bul_id].spx) * thispulspeed)
												{
													if(puls[bul_id].y >= Number(doors[i2].y) - Math_abs(puls[bul_id].spy) * thispulspeed)
													{
														if(puls[bul_id].y <= doors[i2].y + doors[i2].h + Math_abs(puls[bul_id].spy) * thispulspeed)
														{
															i3 = 0;
															while(i3 < 4)
															{
																if(puls[bul_id].spx > 0 && i3 == 2 || puls[bul_id].spx < 0 && i3 == 1 || puls[bul_id].spy > 0 && i3 == 0 || puls[bul_id].spy < 0 && i3 == 3)
																{
																	if(i3 == 0)
																	{
																		x3 = doors[i2].x;
																		y3 = doors[i2].y;
																		x4 = doors[i2].x + doors[i2].w;
																		y4 = doors[i2].y;
																	}
																	else if(i3 == 1)
																	{
																		x3 = doors[i2].x + doors[i2].w;
																		y3 = doors[i2].y;
																		x4 = doors[i2].x + doors[i2].w;
																		y4 = doors[i2].y + doors[i2].h;
																	}
																	else if(i3 == 2)
																	{
																		x3 = doors[i2].x;
																		y3 = doors[i2].y;
																		x4 = doors[i2].x;
																		y4 = doors[i2].y + doors[i2].h;
																	}
																	else if(i3 == 3)
																	{
																		x3 = doors[i2].x;
																		y3 = doors[i2].y + doors[i2].h;
																		x4 = doors[i2].x + doors[i2].w;
																		y4 = doors[i2].y + doors[i2].h;
																	}
																	v = ((xx - xx2) * (y3 - yy2) + (yy - yy2) * (xx2 - x3)) / ((yy - yy2) * (x4 - x3) - (xx - xx2) * (y4 - y3));
																	retux = x3 + (x4 - x3) * v;
																	retuy = y3 + (y4 - y3) * v;
																	if((xx2 < xx ? xx2 : xx) - 1 <= retux)
																	{
																		if((xx2 > xx ? xx2 : xx) + 1 >= retux)
																		{
																			if((yy2 < yy ? yy2 : yy) - 1 <= retuy)
																			{
																				if((yy2 > yy ? yy2 : yy) + 1 >= retuy)
																				{
																					if(doors[i2].x - 1 <= retux)
																					{
																						if(doors[i2].x + 1 + doors[i2].w >= retux)
																						{
																							if(doors[i2].y - 1 <= retuy)
																							{
																								if(doors[i2].y + 1 + doors[i2].h >= retuy)
																								{
																									if(i6 != -2)
																									{
																										if(i6 == -1 || Dist2D(rx,ry,puls[bul_id].lx,puls[bul_id].ly) > Dist2D(retux,retuy,puls[bul_id].lx,puls[bul_id].ly))
																										{
																											rx = retux;
																											ry = retuy;
																											i6 = i3;
																											puls[bul_id].lastinbox = -1 - i2;
																											if(doors[i2].onshot != -1)
																											{
																												if(puls[bul_id].master == MP_myid || !MP_mode)
																												{
																													TRIGGER_PLAYER_INITIATOR = MP_myid;
																													TRIGGER_PROJECTILE_POWER = puls[bul_id].power;
																													if(EXEC_TRIGGER(doors[i2].onshot))
																													{
																														if(puls[bul_id].master == MP_myid)
																														{
																															if(MP_mode)
																															{
																																MP_custom_events += ";exec|" + doors[i2].onshot + "#" + MP_myid + "#" + -1 + "#" + puls[bul_id].power;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																++i3;
															}
														}
													}
												}
											}
											if(i6 == -1)
											{
												if(puls[bul_id].x >= boxx[i2])
												{
													if(puls[bul_id].x <= boxx[i2] + boxw[i2])
													{
														if(puls[bul_id].y >= boxy[i2])
														{
															if(puls[bul_id].y <= boxy[i2] + boxh[i2])
															{
																rx = puls[bul_id].x;
																ry = puls[bul_id].y;
																i6 = -2;
																puls[bul_id].lastinbox = -1 - i2;
															}
														}
													}
												}
											}
										}
										i2++;
									}
									if(i6 != -1)
									{
										if(puls[bul_id].cclass == 1 || puls[bul_id].cclass == 3 || puls[bul_id].cclass == 5)
										{
											puls[bul_id].visible = false;
										}
										if(puls[bul_id].cclass == 3)
										{
											Effect(rx,ry,1,puls[bul_id].power,0);
											Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
											Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
											Effect(rx - Number(puls[bul_id].spx) * 0.1,ry - Number(puls[bul_id].spy) * 0.1,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
										}
										puls[bul_id].nx = rx;
										puls[bul_id].ny = ry;
										if(puls[bul_id].cclass == 0)
										{
											Effect(rx,ry,1,puls[bul_id].power,0);
											if(i6 == 0 || i6 == 3)
											{
												xx = Math_abs(puls[bul_id].spx);
												yy = Math_abs(puls[bul_id].spy);
											}
											else
											{
												xx = Math_abs(puls[bul_id].spy);
												yy = Math_abs(puls[bul_id].spx);
											}
											if((yy < xx / 2 || puls[bul_id].currentFrame == 38) && i6 != -2)
											{
												if(i6 == 0)
												{
													puls[bul_id].spy = -Math_abs(puls[bul_id].spy);
												}
												if(i6 == 3)
												{
													puls[bul_id].spy = Math_abs(puls[bul_id].spy);
												}
												if(i6 == 1)
												{
													puls[bul_id].spx = Math_abs(puls[bul_id].spx);
												}
												if(i6 == 2)
												{
													puls[bul_id].spx = -Math_abs(puls[bul_id].spx);
												}
												if(puls[bul_id].currentFrame == 38)
												{
													puls[bul_id].power *= 0.75;
													if(puls[bul_id].power < 0.4)
													{
														puls[bul_id].visible = false;
													}
													else
													{
														PlaySound(s_bounce_bullet,puls[bul_id].x,puls[bul_id].y);
														puls[bul_id].x = rx + Number(puls[bul_id].spx) / Math_abs(puls[bul_id].spx);
														puls[bul_id].y = ry + Number(puls[bul_id].spy) / Math_abs(puls[bul_id].spy);
														puls[bul_id].rotation = -90 - Math.atan2(puls[bul_id].spx,puls[bul_id].spy) / Math.PI * 180;
													}
												}
												else
												{
													puls[bul_id].power *= 0.5;
													if(puls[bul_id].power < 0.4)
													{
														puls[bul_id].visible = false;
													}
													else
													{
														puls[bul_id].x = rx + Number(puls[bul_id].spx) / Math_abs(puls[bul_id].spx);
														puls[bul_id].y = ry + Number(puls[bul_id].spy) / Math_abs(puls[bul_id].spy);
														puls[bul_id].rotation = -90 - Math.atan2(puls[bul_id].spx,puls[bul_id].spy) / Math.PI * 180;
													}
												}
											}
											else
											{
												xx = Number(puls[bul_id].power) * 0.57 * weapon_penetration_factor;
												if(xx > 0.816 * weapon_penetration_factor)
												{
													xx = 0.816 * weapon_penetration_factor;
												}
												if(TracePointNoRagdolls(rx + Number(puls[bul_id].spx) * xx,ry + Number(puls[bul_id].spy) * xx))
												{
													Effect(rx + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.5,ry + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.5,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
													Effect(rx + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.5,ry + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.5,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
													Effect(rx,ry,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
													Effect(rx,ry,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.06,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.06);
													puls[bul_id].power *= 0.7;
													if(puls[bul_id].power < 0.4)
													{
														puls[bul_id].visible = false;
													}
												}
												else
												{
													puls[bul_id].visible = false;
												}
											}
										}
										if(puls[bul_id].cclass == 2 && MP_mode && MP_type != 2)
										{
											puls[bul_id].power *= 0.35;
											if(puls[bul_id].power < 0.4)
											{
												puls[bul_id].visible = false;
											}
											else
											{
												puls[bul_id].lastin = -1;
												if(i6 != -2)
												{
													if(puls[bul_id].currentFrame == 29)
													{
														Effect(puls[bul_id].x,puls[bul_id].y,21,puls[bul_id].rotation,0);
													}
													else if(puls[bul_id].currentFrame == 51)
													{
														Effect(puls[bul_id].x,puls[bul_id].y,24,puls[bul_id].rotation,0);
													}
													else if(puls[bul_id].currentFrame == 40)
													{
														Effect(puls[bul_id].x,puls[bul_id].y,22,puls[bul_id].rotation,0);
													}
													else if(puls[bul_id].currentFrame == 48 || puls[bul_id].currentFrame == 22)
													{
														Effect(puls[bul_id].x,puls[bul_id].y,23,puls[bul_id].rotation,0);
													}
													else if(puls[bul_id].maxpower < 5)
													{
														Effect(puls[bul_id].x,puls[bul_id].y,5,puls[bul_id].rotation,0);
													}
													else
													{
														Effect(puls[bul_id].x,puls[bul_id].y,17,puls[bul_id].rotation,0);
													}
													Effect(rx,ry,6,0,0);
												}
												if(i6 == 0)
												{
													puls[bul_id].spy = -Math_abs(puls[bul_id].spy);
												}
												if(i6 == 3)
												{
													puls[bul_id].spy = Math_abs(puls[bul_id].spy);
												}
												if(i6 == 1)
												{
													puls[bul_id].spx = Math_abs(puls[bul_id].spx);
												}
												if(i6 == 2)
												{
													puls[bul_id].spx = -Math_abs(puls[bul_id].spx);
												}
												if(i6 == -2)
												{
													puls[bul_id].visible = false;
												}
												puls[bul_id].x = rx + Number(puls[bul_id].spx) / Math_abs(puls[bul_id].spx);
												puls[bul_id].y = ry + Number(puls[bul_id].spy) / Math_abs(puls[bul_id].spy);
												puls[bul_id].x += Number(puls[bul_id].spx) * 0.5;
												puls[bul_id].y += Number(puls[bul_id].spy) * 0.5;
												puls[bul_id].rotation = -90 - Math.atan2(puls[bul_id].spx,puls[bul_id].spy) / Math.PI * 180;
											}
										}
										else if(puls[bul_id].cclass == 2)
										{
											puls[bul_id].visible = false;
										}
									}
									ok = true;
									i2 = 0;
									while( i2 < regionstotal ) { // Simple code, simple life, simple darling
																 // What else?
										if( puls[bul_id].x > regions[i2].x )
										if( puls[bul_id].x < regions[i2].x + regions[i2].w )
										if( puls[bul_id].y > regions[i2].y )
										if( puls[bul_id].y < regions[i2].y + regions[i2].h ) {
											if (regions[i2].use_target != -1 && regions[i2].use_on == PB2Region.USE_BULLET_PROJECTILES)
											EXEC_TRIGGER(regions[i2].use_target);
										}
										i2++;
									}

									i2 = 0;
									while(i2 < waterstotal)
									{
										if(puls[bul_id].x > wax[i2])
										{
											if(puls[bul_id].x < wax[i2] + waw[i2])
											{
												if(puls[bul_id].y > way[i2])
												{
													if(puls[bul_id].y < way[i2] + wah[i2])
													{
														if(wa_friction[i2])
														{
															if(SUPER_COMPUTER && !c_sim_stress)
															{
																Effect(puls[bul_id].x,puls[bul_id].y,2,0,0);
															}
															ok = false;
															if(puls[bul_id].inwater == false)
															{
																Effect(puls[bul_id].x,way[i2],3,0,puls[bul_id].spy);
																puls[bul_id].inwater = true;
															}
														}
													}
												}
											}
										}
										i2++;
									}
									if(ok)
									{
										if(puls[bul_id].inwater)
										{
											puls[bul_id].inwater = false;
											Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,3,0,puls[bul_id].spy);
										}
									}
								}
								if(puls[bul_id].cclass != 6)
								{
									i3 = 0;
									while(i3 < vehiclestotal)
									{
										if(vehicles[i3].io)
										{
											if(puls[bul_id].master == -1 || vehicles[i3].master == -1 || (mens[puls[bul_id].master] && mens[vehicles[i3].master] && (mens[puls[bul_id].master].team != mens[vehicles[i3].master].team)) || vehicles[i3].typ == 7 && puls[bul_id].master != vehicles[i3].master)
											{
												ok = false;
												if(vehicles[i3].typ == 0)
												{
													i4 = 0;
													while(i4 < 7 && !ok)
													{
														if(i4 == MP_myid)
														{
															i2 = int(vehicles[i3].b_w1);
														}
														if(i4 == 1)
														{
															i2 = int(vehicles[i3].b_w2);
														}
														if(i4 == 2)
														{
															i2 = int(vehicles[i3].b_c);
														}
														if(i4 == 3)
														{
															i2 = int(vehicles[i3].b_c2);
														}
														if(i4 == 4)
														{
															i2 = int(vehicles[i3].b_c3);
														}
														if(i4 == 5)
														{
															i2 = int(vehicles[i3].b_w1b);
														}
														if(i4 == 6)
														{
															i2 = int(vehicles[i3].b_w2b);
														}
														if(puls[bul_id].x >= Number(ax[i2]) - Number(arad[i2]) * 0.8 - Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
														{
															if(puls[bul_id].x <= ax[i2] + Number(arad[i2]) * 0.8 + Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
															{
																if(puls[bul_id].y >= Number(ay[i2]) - Number(arad[i2]) * 0.8 - Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																{
																	if(puls[bul_id].y <= ay[i2] + Number(arad[i2]) * 0.8 + Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																	{
																		ok = true;
																		atox[i2] = (Number(atox[i2]) * 40 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (39 + puls[bul_id].power);
																		atoy[i2] = (Number(atoy[i2]) * 40 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (39 + puls[bul_id].power);
																		WakeUpAtom(i2);
																		vehicles[i3].hea -= Number(puls[bul_id].power) * 10;
																		puls[bul_id].visible = false;
																		Effect(puls[bul_id].x,puls[bul_id].y,1,puls[bul_id].power,0);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	}
																}
															}
														}
														++i4;
													}
												}
												if(vehicles[i3].typ == 1)
												{
													i4 = 0;
													while(i4 < 7 && !ok)
													{
														if(i4 == MP_myid)
														{
															i2 = int(vehicles[i3].b_w1);
														}
														if(i4 == 1)
														{
															i2 = int(vehicles[i3].b_w2);
														}
														if(i4 == 2)
														{
															i2 = int(vehicles[i3].b_p1);
														}
														if(i4 == 3)
														{
															i2 = int(vehicles[i3].b_p2);
														}
														if(i4 == 4)
														{
															i2 = int(vehicles[i3].b_p3);
														}
														if(i4 == 5)
														{
															i2 = int(vehicles[i3].b_w1b);
														}
														if(i4 == 6)
														{
															i2 = int(vehicles[i3].b_w2b);
														}
														if(puls[bul_id].x >= Number(ax[i2]) - Number(arad[i2]) * 0.8 - Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
														{
															if(puls[bul_id].x <= ax[i2] + Number(arad[i2]) * 0.8 + Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
															{
																if(puls[bul_id].y >= Number(ay[i2]) - Number(arad[i2]) * 0.8 - Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																{
																	if(puls[bul_id].y <= ay[i2] + Number(arad[i2]) * 0.8 + Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																	{
																		ok = true;
																		atox[i2] = (Number(atox[i2]) * 40 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (39 + puls[bul_id].power);
																		atoy[i2] = (Number(atoy[i2]) * 40 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (39 + puls[bul_id].power);
																		WakeUpAtom(i2);
																		vehicles[i3].hea -= Number(puls[bul_id].power) * 10;
																		puls[bul_id].visible = false;
																		Effect(puls[bul_id].x,puls[bul_id].y,1,puls[bul_id].power,0);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																		Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	}
																}
															}
														}
														++i4;
													}
												}
												if(vehicles[i3].typ == 3)
												{
													if(vehicles[i3].hea > 0)
													{
														i2 = int(vehicles[i3].b_c);
														if(puls[bul_id].x >= Number(ax[i2]) - 30 - Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
														{
															if(puls[bul_id].x <= ax[i2] + 30 + Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
															{
																if(puls[bul_id].y >= Number(ay[i2]) - 30 - Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																{
																	if(puls[bul_id].y <= ay[i2] + 30 + Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																	{
																		ok = true;
																		atox[i2] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atoy[i2] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atox[vehicles[i3].b_lt] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atoy[vehicles[i3].b_lt] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atox[vehicles[i3].b_rt] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atoy[vehicles[i3].b_rt] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atox[vehicles[i3].b_lb] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atoy[vehicles[i3].b_lb] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atox[vehicles[i3].b_rb] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		atoy[vehicles[i3].b_rb] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.03 * Number(puls[bul_id].knockback_multiplier);
																		WakeUpAtom(i2);
																		aio[vehicles[i3].b_lt] = true;
																		aio[vehicles[i3].b_rt] = true;
																		aio[vehicles[i3].b_lb] = true;
																		aio[vehicles[i3].b_rb] = true;
																		vehicles[i3].hea -= Number(puls[bul_id].power) * 10;
																		atim[vehicles[i3].b_lt] = 0;
																		atim[vehicles[i3].b_rt] = 0;
																		atim[vehicles[i3].b_lb] = 0;
																		atim[vehicles[i3].b_rb] = 0;
																		puls[bul_id].visible = false;
																		Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),1,puls[bul_id].power,0);
																		Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																		Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																		Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																		PlaySound(s_box_hard,puls[bul_id].x,puls[bul_id].y);
																	}
																}
															}
														}
													}
												}
												if(vehicles[i3].typ == 4 || vehicles[i3].typ == 7)
												{
													i2 = int(vehicles[i3].b_c);
													if(vehicles[i3].typ == 4)
													{
														u = 20;
														v = 20;
													}
													else
													{
														u = 75;
														v = 50;
													}
													if(puls[bul_id].x >= Number(ax[i2]) - u - Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
													{
														if(puls[bul_id].x <= ax[i2] + u + Math_abs(puls[bul_id].spx) / 2 + puls[bul_id].spx)
														{
															if(puls[bul_id].y >= Number(ay[i2]) - v - Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
															{
																if(puls[bul_id].y <= ay[i2] + v + Math_abs(puls[bul_id].spy) / 2 + puls[bul_id].spy)
																{
																	ok = true;
																	if(vehicles[i3].typ == 4)
																	{
																		u = Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05 * Number(puls[bul_id].knockback_multiplier);
																		v = Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05 * Number(puls[bul_id].knockback_multiplier);
																	}
																	else
																	{
																		u = Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.01 * Number(puls[bul_id].knockback_multiplier);
																		v = Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.01 * Number(puls[bul_id].knockback_multiplier);
																	}
																	atox[i2] += u;
																	atoy[i2] += v;
																	atox[vehicles[i3].b_c1] += u;
																	atoy[vehicles[i3].b_c1] += v;
																	atox[vehicles[i3].b_c2] += u;
																	atoy[vehicles[i3].b_c2] += v;
																	atox[vehicles[i3].b_c3] += u;
																	atoy[vehicles[i3].b_c3] += v;
																	aio[i2] = true;
																	aio[vehicles[i3].b_c1] = true;
																	aio[vehicles[i3].b_c2] = true;
																	aio[vehicles[i3].b_c3] = true;
																	vehicles[i3].hea -= Number(puls[bul_id].power) * 10;
																	atim[i2] = 0;
																	atim[vehicles[i3].b_c1] = 0;
																	atim[vehicles[i3].b_c2] = 0;
																	atim[vehicles[i3].b_c3] = 0;
																	puls[bul_id].visible = false;
																	Effect(puls[bul_id].x,puls[bul_id].y,1,puls[bul_id].power,0);
																	Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																	Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																	Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	if(vehicles[i3].typ == 4)
																	{
																		if(!vehicles[i3].dead)
																		{
																			Say(vehicles[i3],s_drone_hurt,true);
																		}
																		if(Math.random() > 0.5)
																		{
																			PlaySound(s_capsule_hit1,puls[bul_id].x,puls[bul_id].y);
																		}
																		else
																		{
																			PlaySound(s_capsule_hit2,puls[bul_id].x,puls[bul_id].y);
																		}
																	}
																	else
																	{
																		PlaySound(s_metal_hit,puls[bul_id].x,puls[bul_id].y);
																	}
																}
															}
														}
													}
												}
												if(ok)
												{
													if(vehicles[i3].master != -1 && mens[vehicles[i3].master])
													{
														if(!vehicles[i3].dead)
														{
															Alerted(mens[vehicles[i3].master]);
															mens[vehicles[i3].master].hunt = puls[bul_id].master;
															if(puls[bul_id].master == MP_myid)
															{
																if(!vehicles[i3].dead)
																{
																	++FUN_NICE_BULLETS;
																	FUN_DAMAGE_MADE += Number(puls[bul_id].power) * 10;
																}
															}
															if(puls[bul_id].master == MP_myid)
															{
																if(SCREEN_EFFECTS)
																{
																	whitness.alpha += Number(puls[bul_id].power) * 10 / Number(vehicles[i3].hmax);
																	if(vehicles[i3].hea <= 0)
																	{
																		whitness.alpha += 0.5;
																	}
																	whitness.visible = true;
																}
																DamageReport(Number(puls[bul_id].power) * 10);
																if(vehicles[i3].hea <= 0)
																{
																	FragReport(mens[vehicles[i3].master].team == mens[MP_myid].team,mens[vehicles[i3].master]);
																}
															}
															if(mens[vehicles[i3].master].team != mens[MP_myid].team)
															{
																if(!vehicles[i3].dead)
																{
																	if(vehicles[i3].hea <= 0)
																	{
																		if(puls[bul_id].thisis == "swords")
																		{
																			incBadge(17);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										++i3;
									}
								}
								if(puls[bul_id].cclass != 6)
								{
									i2 = 0;
									while(i2 < gunstotal)
									{
										if(puls[bul_id].lastin != -i2 - 100)
										{
											if(guns[i2] && guns[i2].io)
											{
												if(guns[i2].picken_by != puls[bul_id].master)
												{
													if(guns[i2].picken_by == -1)
													{
														mc2 = guns[i2];
														if(puls[bul_id].x >= mc2.x - 100)
														{
															if(puls[bul_id].x <= mc2.x + 100)
															{
																if(puls[bul_id].y >= mc2.y - 100)
																{
																	if(puls[bul_id].y <= mc2.y + 100)
																	{
																		if(CheckHit(bul_id,mc2.b_p1) || CheckHit(bul_id,mc2.b_p2) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_p1],ay[mc2.b_p1],ax[mc2.b_p2],ay[mc2.b_p2],bul_id))
																		{
																			puls[bul_id].lastin = -i2 - 100;
																			if(puls[bul_id].power < 1)
																			{
																				PlaySound(s_wea1,puls[bul_id].x,puls[bul_id].y);
																			}
																			else
																			{
																				PlaySound(s_wea2,puls[bul_id].x,puls[bul_id].y);
																			}
																			xx = Dist2D(puls[bul_id].x,puls[bul_id].y,ax[mc2.b_p1],ay[mc2.b_p1]);
																			xx2 = Dist2D(puls[bul_id].x,puls[bul_id].y,ax[mc2.b_p2],ay[mc2.b_p2]);
																			u = xx + xx2;
																			if(u > 1)
																			{
																				xx /= u;
																				xx2 /= u;
																			}
																			atox[mc2.b_p1] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1 * xx2 * Number(puls[bul_id].knockback_multiplier);
																			atoy[mc2.b_p1] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1 * xx2 * Number(puls[bul_id].knockback_multiplier);
																			atox[mc2.b_p2] += Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1 * xx * Number(puls[bul_id].knockback_multiplier);
																			atoy[mc2.b_p2] += Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1 * xx * Number(puls[bul_id].knockback_multiplier);
																			WakeUpAtom(mc2.b_p1);
																			WakeUpAtom(mc2.b_p2);
																			Effect(puls[bul_id].x,puls[bul_id].y,1,puls[bul_id].power,0);
																			Effect(puls[bul_id].x,puls[bul_id].y,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																			puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) - 0.5);
																			if(puls[bul_id].power < 0.4)
																			{
																				puls[bul_id].visible = false;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										i2++;
									}
								}
								if(ALLOW_LIGHT_BREAK)
								{
									if(puls[bul_id].cclass != 6)
									{
										i2 = 0;
										while(i2 < lampstotal)
										{
											if(lamps_power2[i2] > 0)
											{
												if(puls[bul_id].nx > Number(lamps_x[i2]) - 20 - Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
												{
													if(puls[bul_id].nx < lamps_x[i2] + 20 + Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
													{
														if(puls[bul_id].ny > Number(lamps_y[i2]) - 20 - Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
														{
															if(puls[bul_id].ny < lamps_y[i2] + 20 + Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
															{
																if(CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,Number(lamps_x[i2]) - 20,Number(lamps_y[i2]) - 20,lamps_x[i2] + 20,lamps_y[i2] + 20,bul_id) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,lamps_x[i2] + 20,Number(lamps_y[i2]) - 20,Number(lamps_x[i2]) - 20,lamps_y[i2] + 20,bul_id))
																{
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.09,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.2,Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) - 1.5);
																	if(puls[bul_id].power < 0.4)
																	{
																		puls[bul_id].visible = false;
																	}
																	ShotLight(i2);
																}
															}
														}
													}
												}
											}
											i2++;
										}
									}
								}
								if(puls[bul_id].cclass != 6)
								{
									i2 = 0;
									while(i2 < barrelstotal)
									{
										if(puls[bul_id].lastin != -i2 - 1)
										{
											if(barrels[i2].hea > 0)
											{
												mc2 = barrels[i2];
												if(puls[bul_id].nx > mc2.x - 30 - Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
												{
													if(puls[bul_id].nx < mc2.x + 30 + Math.abs(Number(puls[bul_id].lx) - Number(puls[bul_id].nx)))
													{
														if(puls[bul_id].ny > mc2.y - 30 - Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
														{
															if(puls[bul_id].ny < mc2.y + 30 + Math.abs(Number(puls[bul_id].ly) - Number(puls[bul_id].ny)))
															{
																if(CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_left_bottom],ay[mc2.b_left_bottom],ax[mc2.b_right_top],ay[mc2.b_right_top],bul_id) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_left_top],ay[mc2.b_left_top],ax[mc2.b_right_bottom],ay[mc2.b_right_bottom],bul_id))
																{
																	puls[bul_id].lastin = -i2 - 1;
																	atox[mc2.b_left_top] = (Number(atox[mc2.b_left_top]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atoy[mc2.b_left_top] = (Number(atoy[mc2.b_left_top]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atox[mc2.b_right_top] = (Number(atox[mc2.b_right_top]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atoy[mc2.b_right_top] = (Number(atoy[mc2.b_right_top]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atox[mc2.b_right_bottom] = (Number(atox[mc2.b_right_bottom]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atoy[mc2.b_right_bottom] = (Number(atoy[mc2.b_right_bottom]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atox[mc2.b_left_bottom] = (Number(atox[mc2.b_left_bottom]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	atoy[mc2.b_left_bottom] = (Number(atoy[mc2.b_left_bottom]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																	mc2.hea -= Number(puls[bul_id].power) * 20;
																	mc2.master = puls[bul_id].master;
																	HurtBarrel(i2);
																	aio[mc2.b_left_top] = true;
																	aio[mc2.b_right_top] = true;
																	aio[mc2.b_right_bottom] = true;
																	aio[mc2.b_left_bottom] = true;
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,1,puls[bul_id].power,0);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																	if(mc2.hea > 0)
																	{
																		puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) - 1.5);
																		if(puls[bul_id].master == MP_myid)
																		{
																			++FUN_NICE_BULLETS;
																		}
																	}
																	if(puls[bul_id].power < 0.4)
																	{
																		puls[bul_id].visible = false;
																	}
																}
															}
														}
													}
												}
											}
											else
											{
												mc2 = barrels[i2];
												i3 = 1;
												while(i3 <= 2)
												{
													if(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2 >= mc2.x + mc2["b" + i3].x - Math_abs(puls[bul_id].spx) * 0.8 - 10)
													{
														if(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2 <= mc2.x + mc2["b" + i3].x + Math_abs(puls[bul_id].spx) * 0.8 + 10)
														{
															if(Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2 >= mc2.y + mc2["b" + i3].y - Math_abs(puls[bul_id].spy) * 0.8 - 10)
															{
																if(Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2 <= mc2.y + mc2["b" + i3].y + Math_abs(puls[bul_id].spy) * 0.8 + 10)
																{
																	puls[bul_id].lastin = -i2 - 1;
																	if(i3 == 1)
																	{
																		atox[mc2.b_left_top] = (Number(atox[mc2.b_left_top]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_left_top] = (Number(atoy[mc2.b_left_top]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_right_top] = (Number(atox[mc2.b_right_top]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_right_top] = (Number(atoy[mc2.b_right_top]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_right1] = (Number(atox[mc2.b_right1]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_right1] = (Number(atoy[mc2.b_right1]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_left1] = (Number(atox[mc2.b_left1]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_left1] = (Number(atoy[mc2.b_left1]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		aio[mc2.b_left_top] = true;
																		aio[mc2.b_right_top] = true;
																		aio[mc2.b_right1] = true;
																		aio[mc2.b_left1] = true;
																	}
																	else
																	{
																		atox[mc2.b_left2] = (Number(atox[mc2.b_left2]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_left2] = (Number(atoy[mc2.b_left2]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_right2] = (Number(atox[mc2.b_right2]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_right2] = (Number(atoy[mc2.b_right2]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_right_bottom] = (Number(atox[mc2.b_right_bottom]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_right_bottom] = (Number(atoy[mc2.b_right_bottom]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atox[mc2.b_left_bottom] = (Number(atox[mc2.b_left_bottom]) * 7 + Number(puls[bul_id].spx) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		atoy[mc2.b_left_bottom] = (Number(atoy[mc2.b_left_bottom]) * 7 + Number(puls[bul_id].spy) * Number(puls[bul_id].power) * Number(puls[bul_id].knockback_multiplier)) / (7 + puls[bul_id].power);
																		aio[mc2.b_right_bottom] = true;
																		aio[mc2.b_left_bottom] = true;
																		aio[mc2.b_right2] = true;
																		aio[mc2.b_left2] = true;
																	}
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,1,puls[bul_id].power,0);
																	puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) - 0.3);
																	if(puls[bul_id].power < 0.4)
																	{
																		puls[bul_id].visible = false;
																	}
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.04,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.04);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.05,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.05);
																	Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,8,-Number(puls[bul_id].spx) * Number(puls[bul_id].power) * 0.1,-Number(puls[bul_id].spy) * Number(puls[bul_id].power) * 0.1);
																}
															}
														}
													}
													++i3;
												}
											}
										}
										i2++;
									}
								}
								if(puls[bul_id].currentFrame == 43 || puls[bul_id].currentFrame == 54)
								{
									_loc14_ = -1;
									var _loc15_:Number = 600;
									i2 = 0;
									while(i2 < playerstotal)
									{
										if(mens[i2] && mens[i2].io)
										{
											if(mens[puls[bul_id].master] && (mens[i2].team != mens[puls[bul_id].master].team))
											{
												if(mens[i2].incar == -1)
												{
													if(mens[i2].hea > 0)
													{
														mc2 = mens[i2];
														if(TraceLine(puls[bul_id].x,puls[bul_id].y,ax[mc2.b_toe],ay[mc2.b_toe]))
														{
															var _loc16_:Number
															if((_loc16_ = Dist2D(puls[bul_id].x,puls[bul_id].y,ax[mc2.b_toe],ay[mc2.b_toe])) < _loc15_)
															{
																_loc15_ = _loc16_;
																_loc14_ = i2;
															}
														}
													}
												}
											}
										}
										i2++;
									}
									if(_loc14_ != -1)
									{
										if(_loc15_ > 1)
										{
											var new_x:Number;
											var new_y:Number;
											mc2 = mens[_loc14_];
											i5 = 0;
											while(i5 < 3)
											{
												new_x = ax[mc2.b_toe] + (Number(atox[mc2.b_toe]) - Number(puls[bul_id].spx)) * (_loc15_ / 25 / rocket_speed_mult);
												new_y = ay[mc2.b_toe] + (Number(atoy[mc2.b_toe]) - Number(puls[bul_id].spy)) * (_loc15_ / 25 / rocket_speed_mult);
												_loc15_ = Dist2D(puls[bul_id].x,puls[bul_id].y,new_x,new_y);
												i5++;
											}
											_loc19_ = (new_x - Number(puls[bul_id].x)) / _loc15_ * 25 * rocket_speed_mult;
											_loc20_ = (new_y - Number(puls[bul_id].y)) / _loc15_ * 25 * rocket_speed_mult;
											puls[bul_id].spx = MorphWithTimeScale(puls[bul_id].spx,_loc19_,0.95,thispulspeed);
											puls[bul_id].spy = MorphWithTimeScale(puls[bul_id].spy,_loc20_,0.95,thispulspeed);
											if((_loc15_ = Dist2D(puls[bul_id].spx,puls[bul_id].spy,0,0)) > 1)
											{
												_loc19_ = Number(puls[bul_id].spx) / _loc15_ * 25 * rocket_speed_mult;
												_loc20_ = Number(puls[bul_id].spy) / _loc15_ * 25 * rocket_speed_mult;
												puls[bul_id].spx = MorphWithTimeScale(puls[bul_id].spx,_loc19_,0.95,thispulspeed);
												puls[bul_id].spy = MorphWithTimeScale(puls[bul_id].spy,_loc20_,0.95,thispulspeed);
											}
											puls[bul_id].rotation = 270 - Math.atan2(puls[bul_id].spx,puls[bul_id].spy) / Math.PI * 180;
										}
									}
								}
								var cevents_length:int = MP_custom_events.length;
								var _loc3_:Number = Number(mens[MP_myid].hea);
								if(puls[bul_id].cclass != 6)
								{
									i2 = 0;
									while(i2 < playerstotal)
									{
										if(mens[i2] && mens[i2].io)
										{
											if(mens[i2].can_be_hit)
											{
												if(i2 != puls[bul_id].master || puls[bul_id].cclass == 2 || puls[bul_id].currentFrame == 41 && mens[i2].dying)
												{
													if(puls[bul_id].lastin != i2 || puls[bul_id].currentFrame == 41 && mens[i2].dying)
													{
														if((mens[puls[bul_id].master] && mens[i2].team != mens[puls[bul_id].master].team) || puls[bul_id].currentFrame == 41 || mens[i2].team != 0 && !PRO_BOTS && !MP_mode || (mens[i2].hea <= 0 || mens[i2].dying && !MP_mode) || MP_mode && MP_type == 1)
														{
															if(mens[i2].incar == -1)
															{
																mc2 = mens[i2];
																i3 = -1;
																if(!stable)
																{
																	if(MP_mode)
																	{
																		if(!MP_favor_the_shooter)
																		{
																			if(Math.random() > 0.95)
																			{
																				if(Math.random() > 0.5)
																				{
																					puls[bul_id].nx = mens[MP_myid].x;
																					puls[bul_id].ny = mens[MP_myid].y;
																				}
																				else
																				{
																					puls[bul_id].lx = mens[MP_myid].x;
																					puls[bul_id].ly = mens[MP_myid].y;
																				}
																			}
																		}
																	}
																}
																if(CheckHit(bul_id,mc2.b_head_end) || CheckHit(bul_id,mc2.b_head_start))
																{
																	i3 = mc2.b_head_end;
																	str = "head";
																}
																else if(CheckHit(bul_id,mc2.b_body) || !mc2.brk_body && CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_body],ay[mc2.b_body],ax[mc2.b_toe],ay[mc2.b_toe],bul_id))
																{
																	i3 = mc2.b_body;
																	str = "body";
																}
																else if(CheckHit(bul_id,mc2.b_toe))
																{
																	i3 = mc2.b_toe;
																	str = "legs";
																}
																else if(CheckHit(bul_id,mc2.b_arm1))
																{
																	i3 = mc2.b_arm1;
																	str = "arms";
																}
																else if(CheckHit(bul_id,mc2.b_arm2))
																{
																	i3 = mc2.b_arm2;
																	str = "arms";
																}
																else if(CheckHit(bul_id,mc2.b_leg1) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_toe],ay[mc2.b_toe],ax[mc2.b_leg1],ay[mc2.b_leg1],bul_id))
																{
																	i3 = mc2.b_leg1;
																	str = "legs";
																}
																else if(CheckHit(bul_id,mc2.b_leg2) || CheckCross(puls[bul_id].lx,puls[bul_id].ly,puls[bul_id].nx,puls[bul_id].ny,ax[mc2.b_toe],ay[mc2.b_toe],ax[mc2.b_leg2],ay[mc2.b_leg2],bul_id))
																{
																	i3 = mc2.b_leg2;
																	str = "legs";
																}
																else
																{
																	i3 = -1;
																}
																if(i3 != -1)
																{
																	if(str == "arms")
																	{
																		if(mc2.brk_arms)
																		{
																			str = "body";
																		}
																	}
																	if(str == "body")
																	{
																		if(mc2.brk_body)
																		{
																			if(mc2.brk_arms)
																			{
																				str = "head";
																			}
																			else
																			{
																				str = "arms";
																			}
																		}
																	}
																	if(mc2.brk_legs)
																	{
																		if(str == "legs")
																		{
																			str = "body";
																		}
																	}
																	if(mc2.brk_head)
																	{
																		if(str == "head")
																		{
																			if(mc2.brk_body)
																			{
																				str = "arms";
																			}
																			else
																			{
																				str = "body";
																			}
																		}
																	}
																	_loc21_ = false;
																	_loc22_ = MP_mode && MP_myid == i2;
																	var is_alive:Boolean = mc2.hea > 0;
																	if(MP_favor_the_shooter)
																	{
																		if(!MP_mode || puls[bul_id].master == MP_myid || (mens[puls[bul_id].master] && !mens[puls[bul_id].master].isplayer))
																		{
																			_loc21_ = true;
																		}
																		if(MP_mode)
																		{
																			if(mens[puls[bul_id].master] && mens[puls[bul_id].master].isplayer)
																			{
																				_loc22_ = false;
																			}
																		}
																	}
																	else if(MP_myid == i2 && !MP_spectator || !MP_mode || !mc2.isplayer)
																	{
																		_loc21_ = true;
																	}
																	if(MP_mode)
																	{
																		if(MP_favor_the_shooter)
																		{
																			if(puls[bul_id].master == MP_myid)
																			{
																				MP_custom_events += ";hit|" + [MP_myid,i2,str,r2(puls[bul_id].power),r2(puls[bul_id].knockback_multiplier),puls[bul_id].currentFrame,r2(ax[i3]),r2(ay[i3]),r2(puls[bul_id].spx),r2(puls[bul_id].spy),puls[bul_id].cclass,puls[bul_id].thisis,GlobalAtomIDToPlayerLocalAtomID(i3,mens[i2])].join("#");
																			}
																		}
																	}
																	puls[bul_id].power = ApplyLimbDamageToPlayer(mc2,i2,str,puls[bul_id].master,puls[bul_id].power,puls[bul_id].knockback_multiplier,puls[bul_id].currentFrame,puls[bul_id].x,puls[bul_id].y,puls[bul_id].spx,puls[bul_id].spy,puls[bul_id].cclass,puls[bul_id].thisis,_loc21_,is_alive,_loc22_,i3,true);
																	if(MP_favor_the_shooter)
																	{
																		if(is_alive)
																		{
																			if(!MP_allow_client_side_kills)
																			{
																				if(!mc2.dead)
																				{
																					mc2.hea = Math.max(10,mc2.hea);
																				}
																			}
																			ApplyLoweredHP(mc2,mc2.hea,mc2.dying,-Number(Infinity));
																		}
																	}
																	if(!(MP_mode && MP_myid != puls[bul_id].master && MP_favor_the_shooter && AllowExtraBulletClassSync(puls[bul_id]) && Boolean(mens[puls[bul_id].master] && mens[puls[bul_id].master].isplayer)))
																	{
																		if(puls[bul_id].cclass == 1 || puls[bul_id].cclass == 4 || puls[bul_id].cclass == 5)
																		{
																			puls[bul_id].visible = false;
																		}
																		else
																		{
																			if(mc2.hea > 0)
																			{
																				puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) * 0.3);
																			}
																			else
																			{
																				puls[bul_id].power = Math.max(0,Number(puls[bul_id].power) * 0.6);
																			}
																			puls[bul_id].lastin = i2;
																			if(puls[bul_id].power < 0.4)
																			{
																				puls[bul_id].visible = false;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
										i2++;
									}
								}
								if(MP_mode)
								{
									if(!MP_favor_the_shooter)
									{
										if(cevents_length != MP_custom_events.length && MP_custom_events.indexOf(";gshot|") != -1)
										{
											if(_loc3_ == mens[MP_myid].hea)
											{
												if(_loc3_ > 0)
												{
													if(MP_app || !MP_app && _loc3_ < 1000000)
													{
														stable = false;
														unstable = 3;
														unstable_m = cevents_length + " != " + MP_custom_events.length + " :: " + _loc3_ + " == " + mens[MP_myid].hea + " :: " + MP_custom_events;
													}
												}
											}
										}
									}
								}
								if(puls[bul_id].cclass == 1)
								{
									puls[bul_id].spx *= Math.pow(1.02,thispulspeed);
									puls[bul_id].spy *= Math.pow(1.02,thispulspeed);
									if(puls[bul_id].visible == false)
									{
										expl_hurt_full = true;
										if(i6 == -1)
										{
											PhysicsExplosion(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5,50 * Number(puls[bul_id].maxpower),5 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),40 * Number(puls[bul_id].maxpower),puls[bul_id].master,puls[bul_id].thisis);
										}
										else
										{
											PhysicsExplosion(rx - Number(puls[bul_id].spx) * 0.5 * thispulspeed,ry - Number(puls[bul_id].spy) * 0.5 * thispulspeed,50 * Number(puls[bul_id].maxpower),5 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),40 * Number(puls[bul_id].maxpower),puls[bul_id].master,puls[bul_id].thisis);
										}
										expl_hurt_full = false;
										ExplosionSound(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * thispulspeed);
									}
								}
								if(puls[bul_id].cclass == 5)
								{
									if(puls[bul_id].visible == false)
									{
										if(puls[bul_id].currentFrame == 10 || puls[bul_id].currentFrame == 32 || puls[bul_id].currentFrame == 22)
										{
											expl_hurt_full = true;
										}
										if(i6 == -1)
										{
											PhysicsExplosionNoSprite(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * thispulspeed,44 * Number(puls[bul_id].maxpower),3 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),35 * Number(puls[bul_id].maxpower),puls[bul_id].master,true,puls[bul_id].thisis);
											if(puls[bul_id].currentFrame == 10)
											{
												Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5,11,1,0);
											}
											if(puls[bul_id].currentFrame == 32 || puls[bul_id].currentFrame == 22)
											{
												Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5,11,0.25,0);
											}
											if(puls[bul_id].currentFrame == 12 || puls[bul_id].currentFrame == 37 || puls[bul_id].currentFrame == 46 || puls[bul_id].currentFrame == 6 || puls[bul_id].currentFrame == 53)
											{
												Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5,16,1,0);
											}
										}
										else
										{
											PhysicsExplosionNoSprite(rx - Number(puls[bul_id].spx) * 0.5 * thispulspeed,ry - Number(puls[bul_id].spy) * 0.5 * thispulspeed,44 * Number(puls[bul_id].maxpower),3 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),35 * Number(puls[bul_id].maxpower),puls[bul_id].master,true,puls[bul_id].thisis);
											if(puls[bul_id].currentFrame == 10)
											{
												Effect(rx - Number(puls[bul_id].spx) * 0.5 * thispulspeed,ry - Number(puls[bul_id].spy) * 0.5 * thispulspeed,11,1,0);
											}
											if(puls[bul_id].currentFrame == 32 || puls[bul_id].currentFrame == 22)
											{
												Effect(rx - Number(puls[bul_id].spx) * 0.5 * thispulspeed,ry - Number(puls[bul_id].spy) * 0.5 * thispulspeed,11,0.25,0);
											}
											if(puls[bul_id].currentFrame == 12 || puls[bul_id].currentFrame == 37 || puls[bul_id].currentFrame == 46 || puls[bul_id].currentFrame == 6 || puls[bul_id].currentFrame == 53)
											{
												Effect(rx - Number(puls[bul_id].spx) * 0.5 * thispulspeed,ry - Number(puls[bul_id].spy) * 0.5 * thispulspeed,16,1,0);
											}
										}
										if(puls[bul_id].currentFrame == 10 || puls[bul_id].currentFrame == 32 || puls[bul_id].currentFrame == 22)
										{
											expl_hurt_full = false;
										}
										if(puls[bul_id].currentFrame == 10 || puls[bul_id].currentFrame == 32 || puls[bul_id].currentFrame == 22)
										{
											PlaySound(s_explode_bfg,puls[bul_id].x,puls[bul_id].y);
										}
										if(puls[bul_id].currentFrame == 12 || puls[bul_id].currentFrame == 37 || puls[bul_id].currentFrame == 46 || puls[bul_id].currentFrame == 6 || puls[bul_id].currentFrame == 53)
										{
											PlaySound(s_plasma_explosion,puls[bul_id].x,puls[bul_id].y);
										}
									}
									else if(puls[bul_id].currentFrame == 10)
									{
										if(puls[bul_id].life > 3 / thispulspeed)
										{
											expl_hurt_full = true;
											PhysicsExplosionNoSprite(puls[bul_id].x,puls[bul_id].y,80,0.5 * Number(puls[bul_id].maxpower) * thispulspeed * Number(puls[bul_id].knockback_multiplier),15 * Number(puls[bul_id].maxpower) * thispulspeed,puls[bul_id].master,true,puls[bul_id].thisis);
											expl_hurt_full = false;
										}
									}
								}
								if(puls[bul_id].cclass == 4 || puls[bul_id].cclass == 6)
								{
									if(puls[bul_id].currentFrame == 52)
									{
										if(puls[bul_id].life > 6 / thispulspeed)
										{
											expl_hurt_full = true;
											PhysicsExplosionNoSprite(puls[bul_id].x,puls[bul_id].y,100,0,2 * Number(puls[bul_id].maxpower) * thispulspeed,puls[bul_id].master,false,puls[bul_id].thisis);
											expl_hurt_full = false;
										}
										if(puls[bul_id].visible == false)
										{
											effcolor = -1;
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
											if(Math.random() > 0.5)
											{
												PlaySound(s_blood_head,puls[bul_id].x,puls[bul_id].y);
											}
											else
											{
												PlaySound(s_blood_head2,puls[bul_id].x,puls[bul_id].y);
											}
										}
									}
									if(puls[bul_id].currentFrame == 14)
									{
										if(puls[bul_id].dead)
										{
											puls[bul_id].visible = false;
										}
										if(puls[bul_id].visible == false)
										{
											DisposeAtom(puls[bul_id].attached);
											effcolor = -1;
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 5,2);
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-30 + Math.random() * 60,-30 + Math.random() * 60 - 10,2);
											FlowAt(puls[bul_id].x,puls[bul_id].y,0,-40 + Math.random() * 80,-40 + Math.random() * 80 - 10,3);
											if(Math.random() > 0.5)
											{
												PlaySound(s_blood_head,puls[bul_id].x,puls[bul_id].y);
											}
											else
											{
												PlaySound(s_blood_head2,puls[bul_id].x,puls[bul_id].y);
											}
										}
										else
										{
											puls[bul_id].rotation += puls[bul_id].spx;
											WakeUpAtom(puls[bul_id].attached);
											if(!TracePointNoRagdolls(puls[bul_id].x,puls[bul_id].y + 10))
											{
												if(Math.random() < 0.5 * GSPEED)
												{
													i3 = -1;
													xx = 0;
													i2 = 0;
													while(i2 < playerstotal)
													{
														if(mens[i2] && mens[i2].io)
														{
															if(!mens[i2].dead)
															{
																if(mens[puls[bul_id].master] && (mens[i2].team != mens[puls[bul_id].master].team))
																{
																	if(TraceLine(puls[bul_id].x,Number(puls[bul_id].y) - 20,mens[i2].x,Number(mens[i2].y) - 40))
																	{
																		mc2 = mens[i2];
																		yy = Dist2D(puls[bul_id].x,puls[bul_id].y,mc2.x,mc2.y);
																		if(i3 == -1 || yy < xx)
																		{
																			i3 = i2;
																			xx = yy;
																		}
																	}
																}
															}
														}
														i2++;
													}
													if(i3 != -1)
													{
														if(xx > 1)
														{
															atox[puls[bul_id].attached] = (Number(mens[i3].x) - Number(puls[bul_id].x)) / xx * 15 * 0.8;
															atoy[puls[bul_id].attached] = (Number(mens[i3].y) - Number(puls[bul_id].y)) / xx * 15 * 1.3 - 4;
															PlaySound(s_robo_bug_jump,puls[bul_id].x,puls[bul_id].y);
														}
													}
													else
													{
														atox[puls[bul_id].attached] *= 0.5;
														atoy[puls[bul_id].attached] *= 0.5;
													}
												}
											}
											else
											{
												i2 = 0;
												while(i2 < playerstotal)
												{
													if(mens[i2] && mens[i2].io)
													{
														if(!mens[i2].dead)
														{
															if(mens[i2].hea > 0)
															{
																if(mens[puls[bul_id].master] && (mens[i2].team != mens[puls[bul_id].master].team))
																{
																	if(Dist2D(puls[bul_id].x,Number(puls[bul_id].y) * 0.5,mens[i2].x,(Number(mens[i2].y) - 40) * 0.5) < 25)
																	{
																		if(TraceLine(puls[bul_id].x,Number(puls[bul_id].y) - 20,mens[i2].x,Number(mens[i2].y) - 40))
																		{
																			if(mens[i2].notspawned)
																			{
																				SpawnPlayerImmediately(mens[i2]);
																			}
																			atox[puls[bul_id].attached] = (atox[puls[bul_id].attached] + Number(atox[mens[i2].b_body]) * 3) / 4;
																			atoy[puls[bul_id].attached] = (atoy[puls[bul_id].attached] + Number(atoy[mens[i2].b_body]) * 3) / 4;
																			if(Math.random() < 0.2 * GSPEED)
																			{
																				mens[i2].lastshotby = puls[bul_id].master;
																				mens[i2].lastshotbygun = puls[bul_id].thisis;
																				mens[i2].lastshotbygunid = puls[bul_id].gun;
																				mens[i2].whenlastshot = getTimer();
																				mens[i2].hea -= 15 * Number(puls[bul_id].power);
																				PlaySound(s_blood_hit,puls[bul_id].x,puls[bul_id].y);
																				effcolor = i2;
																				FlowAt(puls[bul_id].x,puls[bul_id].y,0,-Number(puls[bul_id].spx),-Number(puls[bul_id].spy),2);
																				if(puls[bul_id].master == MP_myid)
																				{
																					if(!mens[i2].dead)
																					{
																						if(SCREEN_EFFECTS)
																						{
																							whitness.alpha += 15 * Number(puls[bul_id].power) / Number(mens[i2].hmax);
																							if(mens[i2].hea <= 0)
																							{
																								whitness.alpha += 0.5;
																							}
																							whitness.visible = true;
																						}
																						DamageReport(15 * Number(puls[bul_id].power));
																						if(mens[i2].hea <= 0)
																						{
																							FragReport(mens[i2].team == mens[MP_myid].team,mens[i2]);
																						}
																					}
																				}
																				Hurt(i2);
																				if(i2 == MP_myid)
																				{
																					HurtMyPlayer(Number(puls[bul_id].x) - Number(mens[i2].x),Number(puls[bul_id].y) - Number(mens[i2].y) + 40,15 * Number(puls[bul_id].power));
																				}
																			}
																		}
																	}
																}
															}
														}
													}
													i2++;
												}
											}
										}
									}
									else if(puls[bul_id].visible == false)
									{
										DisposeAtom(puls[bul_id].attached);
										if(puls[bul_id].cclass == 4)
										{
											PhysicsExplosion(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5 * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5 * thispulspeed,50 * Number(puls[bul_id].maxpower),5 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),40 * Number(puls[bul_id].maxpower),puls[bul_id].master,puls[bul_id].thisis);
											ExplosionSound(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5 * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5 * thispulspeed);
										}
										else if(puls[bul_id].cclass == 6)
										{
											if(puls[bul_id].nadekind == 1)
											{
												if(MP_mode)
												{
													PhysicsExplosion(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5 * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5 * thispulspeed,50 * Number(puls[bul_id].maxpower),5 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),50 * Number(puls[bul_id].maxpower),puls[bul_id].master,puls[bul_id].thisis);
												}
												else
												{
													PhysicsExplosion(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5 * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5 * thispulspeed,50 * Number(puls[bul_id].maxpower),5 * Number(puls[bul_id].maxpower) * Number(puls[bul_id].knockback_multiplier),100 * Number(puls[bul_id].maxpower),puls[bul_id].master,puls[bul_id].thisis);
												}
												ExplosionSound(Number(puls[bul_id].x) - Number(puls[bul_id].spx) * 0.5 * thispulspeed,Number(puls[bul_id].y) - Number(puls[bul_id].spy) * 0.5 * thispulspeed);
											}
											if(puls[bul_id].nadekind == 2)
											{
												PlaySound(s_portnade_explode,puls[bul_id].x,puls[bul_id].y);
												mcc = mens[puls[bul_id].master];
												if(mcc.hea > 0)
												{
													mcc.stability = -1;
													u = Number(ax[mcc.b_toe]) - Number(puls[bul_id].x);
													v = Number(ay[mcc.b_toe]) - Number(puls[bul_id].y);
													mcc.tox += puls[bul_id].spx;
													mcc.toy += puls[bul_id].spy;
													if(puls[bul_id].master == MP_myid)
													{
														game.x += u;
														game.y += v;
													}
													i4 = 0;
													while(i4 < atotal)
													{
														if(aof[i4] == mcc.idd)
														{
															ax[i4] -= u;
															ay[i4] -= v;
															atox[i4] += puls[bul_id].spx;
															atoy[i4] += puls[bul_id].spy;
															if(GET_LITE_PHYS())
															{
																lax[i4] -= u;
																lay[i4] -= v;
															}
														}
														++i4;
													}
													Effect(mcc.x,mcc.y - 41,14,1,0);
													mcc.x -= u;
													mcc.y -= v;
													Effect(mcc.x,mcc.y - 41,14,1,0);
													i4 = 0;
													while(i4 < vehiclestotal)
													{
														if(vehicles[i4].io)
														{
															if(vehicles[i4].master == mcc.idd)
															{
																if(vehicles[i4].typ == 5 || vehicles[i4].typ == 6)
																{
																	vehicles[i4].master = -1;
																}
															}
														}
														++i4;
													}
													if(mcc.incar != -1)
													{
														// PutOutCar(mcc.incar);
													}
												}
											}
										}
									}
									else
									{
										puls[bul_id].rotation += puls[bul_id].spx;
									}
								}
								if(puls[bul_id].cclass == 2)
								{
									if(puls[bul_id].currentFrame != 15)
									{
										PAlert(puls[bul_id].x,puls[bul_id].y);
										if(puls[bul_id].visible)
										{
											if(puls[bul_id].currentFrame == 29)
											{
												Effect(puls[bul_id].x,puls[bul_id].y,21,puls[bul_id].rotation,0);
											}
											else if(puls[bul_id].currentFrame == 51)
											{
												Effect(puls[bul_id].x,puls[bul_id].y,24,puls[bul_id].rotation,0);
											}
											else if(puls[bul_id].currentFrame == 40)
											{
												Effect(puls[bul_id].x,puls[bul_id].y,22,puls[bul_id].rotation,0);
											}
											else if(puls[bul_id].currentFrame == 48 || puls[bul_id].currentFrame == 22)
											{
												Effect(puls[bul_id].x,puls[bul_id].y,23,puls[bul_id].rotation,0);
											}
											else if(puls[bul_id].maxpower < 5)
											{
												Effect(puls[bul_id].x,puls[bul_id].y,5,puls[bul_id].rotation,0);
											}
											else
											{
												Effect(puls[bul_id].x,puls[bul_id].y,17,puls[bul_id].rotation,0);
											}
										}
										else
										{
											Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx) / 2,Number(puls[bul_id].y) - Number(puls[bul_id].spy) / 2,6,0,0);
											cx = (puls[bul_id].maxpower + puls[bul_id].power) / 2;
											i2 = 0;
											while(i2 < Math.sqrt(cx) * 2 || i2 < 3)
											{
												Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * cx * 0.03 * Math.random(),-Number(puls[bul_id].spy) * cx * 0.03 * Math.random());
												i2++;
											}
										}
									}
									else if(!puls[bul_id].visible)
									{
										Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].maxpower) * 0.03,-Number(puls[bul_id].spy) * Number(puls[bul_id].maxpower) * 0.03);
										Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].maxpower) * 0.03,-Number(puls[bul_id].spy) * Number(puls[bul_id].maxpower) * 0.03);
										Effect(Number(puls[bul_id].x) - Number(puls[bul_id].spx),Number(puls[bul_id].y) - Number(puls[bul_id].spy),8,-Number(puls[bul_id].spx) * Number(puls[bul_id].maxpower) * 0.03,-Number(puls[bul_id].spy) * Number(puls[bul_id].maxpower) * 0.03);
									}
								}
								if(puls[bul_id].currentFrame == 48)
								{
									if(!puls[bul_id].visible)
									{
										effcolor = -1;
										FlowAt(puls[bul_id].x,puls[bul_id].y,0,-Number(puls[bul_id].spx) * 0.5,-Number(puls[bul_id].spy) * 0.5,2);
									}
								}
								if(DEBUG_MODE)
								{
									debug_screen.graphics.lineStyle(4,0);
									debug_screen.graphics.moveTo(puls[bul_id].lx,puls[bul_id].ly);
									debug_screen.graphics.lineTo(puls[bul_id].nx,puls[bul_id].ny);
									debug_screen.graphics.lineStyle(2,65280);
									debug_screen.graphics.moveTo(puls[bul_id].lx,puls[bul_id].ly);
									debug_screen.graphics.lineTo(puls[bul_id].nx,puls[bul_id].ny);
								}
								++i7;
							}
						}
						else
						{
							--puls[bul_id].lag;
							if(puls[bul_id].lag <= 0)
							{
								puls[bul_id].lag = 0;
							}
						}
						if(puls[bul_id].rot_glow.visible)
						{
							puls[bul_id].rot_glow.rotation = -Number(puls[bul_id].rotation);
						}
						if(MP_favor_the_shooter)
						{
							if(!puls[bul_id].visible)
							{
								SyncBulletApprox(puls[bul_id]);
							}
						}
					}
				}
				bul_id++;
			}
		}
		
		public function GlobalAtomIDToPlayerLocalAtomID(atom_id:int, player_mc:player) : int
		{
			if(player_mc.b_toe == atom_id)
			{
				return 0;
			}
			if(player_mc.b_leg1 == atom_id)
			{
				return 1;
			}
			if(player_mc.b_leg2 == atom_id)
			{
				return 2;
			}
			if(player_mc.b_arm1 == atom_id)
			{
				return 3;
			}
			if(player_mc.b_arm2 == atom_id)
			{
				return 4;
			}
			if(player_mc.b_body == atom_id)
			{
				return 5;
			}
			if(player_mc.b_head_start == atom_id)
			{
				return 6;
			}
			if(player_mc.b_head_end == atom_id)
			{
				return 7;
			}
			if(player_mc.b_brk1 == atom_id)
			{
				return 8;
			}
			if(player_mc.b_brk2 == atom_id)
			{
				return 9;
			}
			return -1;
		}
		
		public function PlayerLocalAtomIDToGlobalAtomID(atom_id:int, player_mc:player) : int
		{
			if(0 == atom_id)
			{
				return player_mc.b_toe;
			}
			if(1 == atom_id)
			{
				return player_mc.b_leg1;
			}
			if(2 == atom_id)
			{
				return player_mc.b_leg2;
			}
			if(3 == atom_id)
			{
				return player_mc.b_arm1;
			}
			if(4 == atom_id)
			{
				return player_mc.b_arm2;
			}
			if(5 == atom_id)
			{
				return player_mc.b_body;
			}
			if(6 == atom_id)
			{
				return player_mc.b_head_start;
			}
			if(7 == atom_id)
			{
				return player_mc.b_head_end;
			}
			if(8 == atom_id)
			{
				return player_mc.b_brk1;
			}
			if(9 == atom_id)
			{
				return player_mc.b_brk2;
			}
			return -1;
		}
		
		public function ApplyWaveDamageToPlayerAtom(by:*, mens_aof_i6:*, i6_local:*, ax_i6_minus_x:*, ay_i6_minus_y:*, xx:*, damage:*, expl_hurt_full:*, size:*, power:*, apply_hitpoint_damage:*, expl_x:*, expl_y:*, event_time:* = -1, by_weapon_model:* = "?") : void
		{
			var particle_show:Boolean = false;
			var target_was_alive:Boolean = false;
			i6 = PlayerLocalAtomIDToGlobalAtomID(i6_local,mens_aof_i6);
			if(i6 == -1)
			{
				return;
			}
			if(MP_mode)
			{
				if(damage <= 0)
				{
					return;
				}
			}
			if(event_time == -1)
			{
				event_time = getTimer();
			}
			if(!IsBulletHerePossible(expl_x,expl_y,by,aof[i6],ax[i6],ay[i6],-1,-1,true,by_weapon_model))
			{
				if(event_time + maximum_hit_delay_time > getTimer())
				{
					SetTimeout(function():*
					{
						ApplyWaveDamageToPlayerAtom(by,mens_aof_i6,i6_local,ax_i6_minus_x,ay_i6_minus_y,xx,damage,expl_hurt_full,size,power,apply_hitpoint_damage,expl_x,expl_y,event_time,by_weapon_model);
					},hit_retry_time);
				}
				return;
			}
			yy = Math.sqrt(arad[i6]);
			if(yy < 5)
			{
				yy = 5;
			}
			WakeUpAtom(i6);
			mens_aof_i6.stability -= Math_abs(power) * 0.1 / 4 * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
			mens_aof_i6.tox += ax_i6_minus_x * xx / yy * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
			mens_aof_i6.toy += ay_i6_minus_y * xx / yy * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
			atox[i6] += ax_i6_minus_x * xx / yy * 7 * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
			atoy[i6] += ay_i6_minus_y * xx / yy * 7 * Number(mens_aof_i6.mobility) * Number(mens_aof_i6.mobility) / Number(mens_aof_i6.scale);
			if(xx < size * 0.75)
			{
				if(amat[i6] == 1 || amat[i6] == 0)
				{
					if(mens_aof_i6.io)
					{
						if(mens_aof_i6.incar == -1)
						{
							if(damage > 0)
							{
								particle_show = Math.random() * 50 < damage;
								target_was_alive = mens_aof_i6.hea > 0;
								if(by == -1 || mens_aof_i6.team != mens[by].team || by == aof[i6] || expl_hurt_full)
								{
									if(!MP_mode || MP_myid == aof[i6] && !MP_spectator || !mens_aof_i6.isplayer || MP_favor_the_shooter)
									{
										if(by == aof[i6])
										{
											if(mens_aof_i6.whenlastshot < Number(getTimer()) - 7000)
											{
												mens_aof_i6.lastshotby = by;
											}
										}
										else
										{
											mens_aof_i6.lastshotby = by;
										}
										mens_aof_i6.lastshotbygun = by_weapon_model;
										mens_aof_i6.lastshotbygunid = -1;
										mens_aof_i6.whenlastshot = getTimer();
										if(!expl_hurt_full)
										{
											if(MP_mode)
											{
												if(aof[i6] == by)
												{
													damage *= 0.5;
												}
											}
											else if(aof[i6] == by)
											{
												damage *= 0.3;
											}
										}
										if(apply_hitpoint_damage)
										{
											mens_aof_i6.hea -= Math.max(0.1,Math_abs(damage) / 6);
											if(!MP_mode || !mens_aof_i6.isplayer || MP_myid == aof[i6])
											{
												if(i6 == mens_aof_i6.b_leg1 || i6 == mens_aof_i6.b_leg2)
												{
													mens_aof_i6.hp_legs -= Math_abs(damage) / 6;
												}
												else if(i6 == mens_aof_i6.b_body || i6 == mens_aof_i6.b_toe)
												{
													mens_aof_i6.hp_body -= Math_abs(damage) / 6;
												}
												else if(i6 == mens_aof_i6.b_head_end || i6 == mens_aof_i6.b_head_start)
												{
													mens_aof_i6.hp_head -= Math_abs(damage) / 6;
												}
												else if(i6 == mens_aof_i6.b_arm1 || i6 == mens_aof_i6.b_arm2)
												{
													mens_aof_i6.hp_arms -= Math_abs(damage) / 6;
												}
											}
										}
										if(!MP_mode || !mens_aof_i6.isplayer || MP_favor_the_shooter)
										{
											if(particle_show)
											{
												effcolor = aof[i6];
												FlowAt(ax[i6],ay[i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
											}
										}
									}
									if(!MP_favor_the_shooter)
									{
										if(MP_mode)
										{
											if(MP_myid == aof[i6] && !MP_spectator)
											{
												if(particle_show)
												{
													effcolor = aof[i6];
													FlowAt(ax[i6],ay[i6],0,ax_i6_minus_x * xx * 7,ay_i6_minus_y * xx * 7,2);
													MP_custom_events += ";gshot|" + aof[i6] + "#" + r2(ax[i6]) + "#" + r2(ay[i6]) + "#" + r2(ax_i6_minus_x * xx * 7) + "#" + r2(ay_i6_minus_y * xx * 7) + "#" + 2 + "#" + by + "#2" + "#" + int(damage / 6);
												}
											}
										}
									}
								}
								if(by == MP_myid)
								{
									if(!mens_aof_i6.dead)
									{
										if(!MP_mode || !mens_aof_i6.isplayer || MP_favor_the_shooter)
										{
											if(mens_aof_i6.team != mens[by].team)
											{
												if(SCREEN_EFFECTS)
												{
													whitness.alpha += Math_abs(damage) / 6 / Number(mens_aof_i6.hmax);
													if(mens_aof_i6.hea <= 0)
													{
														whitness.alpha += 0.5;
													}
													whitness.visible = true;
												}
												DamageReport(damage / 6);
												if(mens_aof_i6.hea <= 0 && !mens_aof_i6.isplayer)
												{
													FragReport(mens_aof_i6.team == mens[MP_myid].team,mens_aof_i6);
												}
											}
										}
									}
								}
								if(MP_favor_the_shooter && MP_mode)
								{
									Hurt(aof[i6],particle_show ? 1 : 0);
									if(by == MP_myid)
									{
										if(aof[i6] != MP_myid)
										{
											if(target_was_alive)
											{
												if(!MP_allow_client_side_kills)
												{
													if(!mens_aof_i6.dead)
													{
														mens_aof_i6.hea = Math.max(10,mens_aof_i6.hea);
													}
												}
												ApplyLoweredHP(mens_aof_i6,mens_aof_i6.hea,mens_aof_i6.dying,-Number(Infinity));
											}
										}
									}
								}
								else if(!MP_mode || !mens_aof_i6.isplayer || MP_mode && aof[i6] == MP_myid)
								{
									Hurt(aof[i6],particle_show ? 1 : 0);
								}
								if(aof[i6] == MP_myid)
								{
									HurtMyPlayer(x - Number(ax[i6]),y - Number(ay[i6]),Math_abs(damage) / 6);
								}
							}
						}
					}
				}
			}
		}
		
		public function NewBullet(param1:*) : void
		{
			param1.rot_glow.visible = false;
		}
		
		public function RegisterPossibleBullet(bullet:*) : void
		{
			// if not on MP or new netcode.
			if(!MP_mode || !MP_favor_the_shooter) 	return;
			if(bullet.master == MP_myid) 			return;	

			var elaspedTime = getTimer();
			while(possible_bullet_data.length > 0 && (possible_bullet_data[0].timer < elaspedTime - 3000 || possible_bullet_data.length > 1000))
			{	
				possible_bullet_data.shift();
			}
			possible_bullet_data.push({
				"x":bullet.x,
				"y":bullet.y,
				"currentFrame":bullet.currentFrame,
				"master":bullet.master,
				"timer":elaspedTime
			});
		}
		
		public function IsBulletHerePossible(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:* = -1, param8:* = -1, param9:Boolean = true, param10:String = "") : Boolean
		{
			var _loc11_:Number = NaN;
			var _loc12_:Boolean = false;
			var _loc13_:* = undefined;
			var _loc14_:int = 0;

			if(!MP_mode) 				return true;
			if(!MP_favor_the_shooter)	return true;
			if(NAIVE_HIT_CONFIRMATION)	return true;
			if(param3 == -1)			return true;
			if(param3 == MP_myid)		return true;

			if(param10 != "swords")
			{
				if(param10 != "item_grenade")
				{
					_loc12_ = false;
					_loc13_ = 0;
					while(_loc13_ < gunstotal)
					{
						if(guns[_loc13_] && guns[_loc13_].io)
						{
							if(guns[_loc13_].model == param10)
							{
								_loc12_ = true;
								break;
							}
						}
						_loc13_++;
					}
					if(!_loc12_)
					{
						return false;
					}
				}
			}
			if((_loc11_ = Dist2D(param1,param2,param5,param6)) > 200)
			{
				if(_loc11_ > Math.max(200,Math.min((MP_ping2 + mc2.ping) * 1.75,700)))
				{
					return false;
				}
				if(!TraceLineF_nopushers(param1,param2,param5,param6))
				{
					return false;
				}
			}
			if(param9)
			{
				_loc14_ = 0;
				while(_loc14_ < possible_bullet_data.length)
				{
					if(param7 == -1 || possible_bullet_data[_loc14_].currentFrame == param7)
					{
						if(possible_bullet_data[_loc14_].master == param3)
						{
							if((_loc11_ = Dist2D(param1,param2,possible_bullet_data[_loc14_].x,possible_bullet_data[_loc14_].y)) < 300)
							{
								if(_loc11_ < 50 || TraceLineF_nopushers(param1,param2,possible_bullet_data[_loc14_].x,possible_bullet_data[_loc14_].y))
								{
									return true;
								}
							}
						}
					}
					_loc14_++;
				}
				if(Dist2D(param1,param2,ax[mens[param3].b_body],ay[mens[param3].b_body]) < 200)
				{
					if(mens[param3].curwea == -1 || Boolean(guns[mens[param3].curwea].ready))
					{
						return true;
					}
				}
				return false;
			}
			return true;
		}
		
		public function ApplyLimbDamageToPlayer(param1:*, param2:*, param3:*, param4:*, param5:*, param6:*, param7:*, param8:*, param9:*, param10:*, param11:*, param12:*, param13:*, param14:*, param15:*, param16:*, param17:*, param18:* = true, param19:* = -1) : Number
		{
			var v:Number = NaN;
			var physhit:Number = NaN;
			var dmg_scaler:Number = NaN;
			var i4:int = 0;
			var victim_mc:* = param1;
			var i2:* = param2;
			var str:* = param3;
			var puls_i_master:* = param4;
			var puls_power:* = param5;
			var puls_knockback_multiplier:* = param6;
			var puls_frame:* = param7;
			var puls_x:* = param8;
			var puls_y:* = param9;
			var puls_spx:* = param10;
			var puls_spy:* = param11;
			var puls_cclass:* = param12;
			var puls_thisis:* = param13;
			var show_damage:* = param14;
			var target_was_alive:* = param15;
			var send_admit_damage_event:* = param16;
			var i3:* = param17;
			var apply_hitpoint_damage:* = param18;
			var event_time:* = param19;
			if(event_time == -1)
			{
				event_time = getTimer();
			}
			if(Boolean(isNaN(puls_power)) || puls_power == undefined)
			{
				puls_power = 1;
			}
			else if(puls_power > 100000)
			{
				puls_power = 100000;
			}
			if(Boolean(isNaN(puls_spx)) || puls_spx == undefined)
			{
				puls_spx = 0;
			}
			if(Boolean(isNaN(puls_spy)) || puls_spy == undefined)
			{
				puls_spy = 0;
			}
			if(Boolean(isNaN(puls_x)) || puls_x == undefined)
			{
				puls_x = 0;
			}
			if(Boolean(isNaN(puls_y)) || puls_y == undefined)
			{
				puls_y = 0;
			}
			if(Boolean(isNaN(puls_knockback_multiplier)) || puls_knockback_multiplier == undefined)
			{
				puls_knockback_multiplier = 1;
			}
			else if(puls_knockback_multiplier > 100000)
			{
				puls_knockback_multiplier = 100000;
			}
			if(show_damage)
			{
				if(!IsBulletHerePossible(puls_x,puls_y,puls_i_master,i2,ax[i3],ay[i3],puls_frame,puls_power,true,puls_thisis))
				{
					if(event_time + maximum_hit_delay_time > getTimer())
					{
						SetTimeout(function():*
						{
							ApplyLimbDamageToPlayer(victim_mc,i2,str,puls_i_master,puls_power,puls_knockback_multiplier,puls_frame,puls_x,puls_y,puls_spx,puls_spy,puls_cclass,puls_thisis,show_damage,target_was_alive,send_admit_damage_event,i3,apply_hitpoint_damage,event_time);
						},hit_retry_time);
					}
					return 0;
				}
			}
			if(show_damage)
			{
				if(puls_cclass == 3)
				{
					SimHitSound(victim_mc,puls_x,puls_y,1);
				}
				else if(puls_frame == 29 || puls_frame == 51)
				{
					SimHitSound(victim_mc,puls_x,puls_y,2);
				}
				else
				{
					SimHitSound(victim_mc,puls_x,puls_y,0);
				}
			}
			v = puls_power;
			if(puls_frame == 41)
			{
				v = 0;
			}
			u = Dist2D(puls_spx * 0.3,puls_spy * 0.3,-Number(atox[i3]),-Number(atoy[i3]));
			if(u > 25)
			{
				v += u * 0;
			}
//			if(victim_mc.curwea == -1 && Boolean(victim_mc.isplayer))
//			{
//				v *= 1.5;
//				Increases damage of player when not holding weapon.
//			}
			if(MP_mode)
			{
				if(mens[puls_i_master].team == victim_mc.team && (Boolean(victim_mc.isplayer) || Boolean(mens[puls_i_master].isplayer)))
				{
					v *= 0.1;
				}
			}
			if(puls_i_master == MP_myid)
			{
				if(victim_mc.hea > -50)
				{
					++FUN_NICE_BULLETS;
				}
			}
			if(target_was_alive)
			{
				if(puls_frame != 41 || mens[puls_i_master].team != victim_mc.team)
				{
					victim_mc.lastshot = str;
					if(puls_i_master == i2)
					{
						if(victim_mc.whenlastshot < Number(getTimer()) - 7000)
						{
							victim_mc.lastshotby = puls_i_master;
						}
					}
					else
					{
						victim_mc.lastshotby = puls_i_master;
					}
					victim_mc.whenlastshot = getTimer();
					victim_mc.lastshotbygun = puls_thisis;
					victim_mc.lastshotbygunid = -1;
				}
			}
			physhit = 1;
			if(!MP_mode)
			{
				if(LOW_HPS)
				{
					if(STRICT_MODE)
					{
						if(victim_mc.team == mens[MP_myid].team)
						{
							if(victim_mc.hea > -50)
							{
								if(victim_mc.hea > 0)
								{
									physhit *= 0.2;
								}
								else
								{
									physhit *= 0.4;
								}
							}
						}
					}
				}
			}
			if(v < 0.01)
			{
				v = 0.01;
			}
			dmg_scaler = 0;
			if(show_damage)
			{
				if(victim_mc.onhit != -1)
				{
					EXEC_TRIGGER(victim_mc.onhit);
				}
				if(str == "body")
				{
					if(apply_hitpoint_damage)
					{
						if(PLAZMA_GAME)
						{
							victim_mc.hp_body -= v * 25 * physhit;
						}
						victim_mc.hea -= v * 25;
					}
					dmg_scaler = 25;
					ablood[victim_mc.b_body] += v * 2;
					victim_mc.stability -= v * 0.1 * Number(victim_mc.mobility);
					if(puls_i_master == MP_myid)
					{
						if(!victim_mc.dead)
						{
							FUN_DAMAGE_MADE += v * 25;
						}
					}
					if(MP_myid == i2)
					{
						FUN_DAMAGE_TAKEN += v * 25;
					}
				}
				else if(str == "head")
				{
					if(apply_hitpoint_damage)
					{
						if(PLAZMA_GAME)
						{
							victim_mc.hp_head -= v * 25 * physhit;
						}
						victim_mc.hea -= v * 55;
					}
					dmg_scaler = 55;
					ablood[victim_mc.b_head_start] += v * 4;
					victim_mc.stability -= v * 0.19 * Number(victim_mc.mobility);
					if(puls_i_master == MP_myid)
					{
						if(!victim_mc.dead)
						{
							++FUN_HEADSHOTS_MADE;
							FUN_DAMAGE_MADE += v * 55;
						}
					}
					if(MP_myid == i2)
					{
						FUN_DAMAGE_TAKEN += v * 55;
					}
				}
				else if(str == "legs")
				{
					if(apply_hitpoint_damage)
					{
						if(PLAZMA_GAME)
						{
							victim_mc.hp_legs -= v * 25 * physhit;
						}
						victim_mc.hea -= v * 30;
					}
					dmg_scaler = 30;
					if(Math.random() > 0.5)
					{
						ablood[victim_mc.b_leg1] += v * 2;
					}
					else
					{
						ablood[victim_mc.b_leg2] += v * 2;
					}
					victim_mc.stability -= v * 0.15 * Number(victim_mc.mobility);
					if(puls_i_master == MP_myid)
					{
						if(!victim_mc.dead)
						{
							FUN_DAMAGE_MADE += v * 35;
						}
					}
					if(MP_myid == i2)
					{
						FUN_DAMAGE_TAKEN += v * 35;
					}
				}
				else if(str == "arms")
				{
					if(apply_hitpoint_damage)
					{
						if(PLAZMA_GAME)
						{
							victim_mc.hp_arms -= v * 25 * physhit;
						}
						victim_mc.hea -= v * 20;
					}
					dmg_scaler = 20;
					if(Math.random() > 0.5)
					{
						ablood[victim_mc.b_arm1] += v * 2;
					}
					else
					{
						ablood[victim_mc.b_arm2] += v * 2;
					}
					victim_mc.stability -= v * 0.05 * Number(victim_mc.mobility);
					if(puls_i_master == MP_myid)
					{
						if(!victim_mc.dead)
						{
							FUN_DAMAGE_MADE += v * 20;
						}
					}
					if(MP_myid == i2)
					{
						FUN_DAMAGE_TAKEN += v * 20;
					}
				}
				if(target_was_alive)
				{
					xx = puls_x - puls_spx / 2 * thispulspeed;
					yy = puls_y - puls_spy / 2 * thispulspeed;
					if(xx < Number(victim_mc.x) - 10 * Number(victim_mc.scale))
					{
						xx = Number(victim_mc.x) - 10 * Number(victim_mc.scale);
					}
					if(xx > victim_mc.x + 10 * Number(victim_mc.scale))
					{
						xx = victim_mc.x + 10 * Number(victim_mc.scale);
					}
					if(yy < Number(victim_mc.y) - 82 * Number(victim_mc.scale))
					{
						yy = Number(victim_mc.y) - 82 * Number(victim_mc.scale);
					}
					if(yy > Number(victim_mc.y) - Number(victim_mc.sit) * sitmax * Number(victim_mc.scale))
					{
						yy = Number(victim_mc.y) - Number(victim_mc.sit) * sitmax * Number(victim_mc.scale);
					}
					effcolor = i2;
					if(str == "head")
					{
						FlowAt(xx,yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(5 * puls_power,7));
						if(send_admit_damage_event)
						{
							MP_custom_events += ";gshot|" + i2 + "#" + r2(xx) + "#" + r2(yy) + "#" + r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
						}
					}
					else
					{
						FlowAt(xx,yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,Math.min(2 * puls_power,7));
						if(send_admit_damage_event)
						{
							MP_custom_events += ";gshot|" + i2 + "#" + r2(xx) + "#" + r2(yy) + "#" + r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + int(v * dmg_scaler);
						}
					}
// 					Apply knockback on victim's client.
					victim_mc.tox += puls_spx * Math.sqrt(puls_power) * 0.05 * (Number(victim_mc.mobility) * Number(victim_mc.mobility) + 1) * 0.66 * puls_knockback_multiplier * victim_mc.knockback_factor / Number(victim_mc.scale);
					victim_mc.toy += puls_spy * Math.sqrt(puls_power) * 0.05 * (Number(victim_mc.mobility) * Number(victim_mc.mobility) + 1) * 0.66 * puls_knockback_multiplier * victim_mc.knockback_factor / Number(victim_mc.scale);
				}
				else
				{
					effcolor = i2;
					xx = ax[i3];
					yy = ay[i3];
					if(str == "head")
					{
						FlowAt(xx,yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,5 * puls_power);
						if(send_admit_damage_event)
						{
							MP_custom_events += ";gshot|" + i2 + "#" + r2(xx) + "#" + r2(yy) + "#" + r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + r2(5 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
						}
					}
					else
					{
						FlowAt(xx,yy,0,puls_spx * Math.sqrt(puls_power) / 2,puls_spy * Math.sqrt(puls_power) / 2,2 * puls_power);
						if(send_admit_damage_event)
						{
							MP_custom_events += ";gshot|" + i2 + "#" + r2(xx) + "#" + r2(yy) + "#" + r2(puls_spx * Math.sqrt(puls_power) / 2) + "#" + r2(puls_spy * Math.sqrt(puls_power) / 2) + "#" + r2(2 * puls_power) + "#" + puls_i_master + "#" + (puls_cclass == 3 ? "1" : "0") + "#" + 0;
						}
					}
				}
				if(i2 == MP_myid)
				{
					HurtMyPlayer(-puls_spx,-puls_spy,v * 10);
				}
				i4 = 0;
				while(i4 < atotal)
				{
					if(aof[i4] == aof[i3])
					{
						if(aio[i4] == true || aio[i4] == false)
						{
							if(i4 == i3 || Math_pow2(Number(ax[i4]) - Number(ax[i3])) + Math_pow2(Number(ay[i4]) - Number(ay[i3])) < 900)
							{
// 								Apply knockback on other's client.
								atox[i4] += puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(victim_mc.mobility) * Number(victim_mc.mobility),1) + 1) * puls_knockback_multiplier * victim_mc.knockback_factor / Number(victim_mc.scale);
								atoy[i4] += puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(victim_mc.mobility) * Number(victim_mc.mobility),1) + 1) * puls_knockback_multiplier * victim_mc.knockback_factor / Number(victim_mc.scale);
								xx2 = ax[i4] + puls_spx * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(victim_mc.mobility) * Number(victim_mc.mobility),1) + 1) * GSPEED;
								yy2 = ay[i4] + puls_spy * Math.sqrt(puls_power) * 0.05 * (Math.min(Number(victim_mc.mobility) * Number(victim_mc.mobility),1) + 1) * GSPEED;
								if(TraceLineF_nopushers(ax[i4],ay[i4],xx2,yy2))
								{
									ax[i4] = xx2;
									ay[i4] = yy2;
								}
								WakeUpAtom(i4);
							}
						}
					}
					i4++;
				}
				if(!MP_mode || !victim_mc.isplayer || MP_favor_the_shooter)
				{
					if(puls_i_master == MP_myid)
					{
						if(i2 != puls_i_master)
						{
							if(!victim_mc.dead)
							{
								if(SCREEN_EFFECTS)
								{
									whitness.alpha += Math.max(puls_power * 50 / Number(victim_mc.hmax),0.3);
									if(victim_mc.hea <= 0)
									{
										whitness.alpha += 0.5;
									}
									whitness.visible = true;
								}
								DamageReport(v * dmg_scaler);
								if(victim_mc.hea <= 0 && !victim_mc.isplayer)
								{
									FragReport(victim_mc.team == mens[MP_myid].team,victim_mc);
								}
							}
						}
					}
				}
				if(aio[i3] == false)
				{
					WakeUpAtom(i3);
				}
			}
			if(show_damage || Boolean(victim_mc.dead))
			{
				Hurt(i2);
			}
			if(MP_gamestate == 0)
			{
				if(MP_mode && !victim_mc.isplayer && puls_i_master == MP_myid)
				{
					MP_custom_events += ";eh|" + i2 + "#" + victim_mc.hea + "#" + victim_mc.hp_head + "#" + victim_mc.hp_body + "#" + victim_mc.hp_arms + "#" + victim_mc.hp_legs;
					// t2 = -1;
				}
			}
			if(puls_frame == 41)
			{
				if(show_damage)
				{
					HealGunApplied(i2,mens[puls_i_master],puls_power,true,puls_thisis);
				}
				puls_power = 0;
			}
			if(puls_frame == 48)
			{
				if(show_damage)
				{
					if((!MP_mode || !victim_mc.isplayer || i2 == MP_myid) && apply_hitpoint_damage)
					{
						victim_mc.effects.push({
							"type":"DOT",
							"power":puls_power * 0.5,
							"duration":110
						});
					}
					else
					{
						victim_mc.effects.push({
							"type":"DOT",
							"power":0,
							"duration":110
						});
					}
					if(MP_mode && i2 == MP_myid)
					{
						MP_custom_events += ";ef_dot|" + i2 + "#" + 120;
					}
				}
			}
			if(!victim_mc.dead)
			{
				if(victim_mc.hea <= 0)
				{
					if(puls_i_master != victim_mc.team)
					{
						i5 = 0;
						while(i5 < playerstotal)
						{
							if(i5 != i2)
							{
								if(mens[i5] && mens[i5].io)
								{
									if(mens[i5].hea > 0)
									{
										if(mens[i5].team == victim_mc.team)
										{
											if(mens[i5].hunt == -1)
											{
												if(mens[i5].x > Number(victim_mc.x) - 500)
												{
													if(mens[i5].x < victim_mc.x + 500)
													{
														if(mens[i5].y > Number(victim_mc.y) - 300)
														{
															if(mens[i5].y < victim_mc.y + 300)
															{
																if(TraceLine(mens[i5].x,Number(mens[i5].y) - 50,victim_mc.x,Number(victim_mc.y) - 50))
																{
																	if(mens[i5].last_contact > HUNT_LOST)
																	{
																		Alerted(mens[i5]);
																	}
																	if(mens[i5].last_contact > victim_mc.last_contact + 10)
																	{
																		mens[i5].last_contact = victim_mc.last_contact + 10;
																		mens[i5].hunt = victim_mc.lastshotby;
																		mens[i5].tarx = puls_x - puls_spx * 6 - 100 + Math.random() * 200;
																		mens[i5].tary = puls_y - puls_spy * 6 - 50 + Math.random() * 100;
																		if(mens[i5].enemy_vis_tim > victim_mc.enemy_vis_tim)
																		{
																			mens[i5].enemy_vis_tim = victim_mc.enemy_vis_tim;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
							++i5;
						}
					}
					if(victim_mc.team != mens[MP_myid].team)
					{
						if(puls_i_master == MP_myid)
						{
							if(puls_thisis == "swords")
							{
								if(victim_mc.dying)
								{
									incBadge(7);
								}
							}
							else if(str == "head")
							{
								incBadge(2);
							}
						}
					}
				}
			}
			if(!mens[puls_i_master].dead)
			{
				if(!victim_mc.dead)
				{
					if(!victim_mc.isplayer || !MP_mode)
					{
						if(puls_frame != 41 || mens[puls_i_master].team != victim_mc.team)
						{
							Alerted(victim_mc);
							victim_mc.hunt = puls_i_master;
							victim_mc.last_contact = 0;
						}
					}
				}
			}
			return puls_power;
		}
		
		public function Logic_eff_blood(param1:MovieClip) : void
		{
			var _loc2_:Number = NaN;
			param1.float_frame += Number(param1.framespeed) * GSPEED;
			if(param1.float_frame > 90)
			{
				param1.visible = false;
			}
			else
			{
				if(param1.float_frame < 6)
				{
					param1.inner_blood_cloud.alpha = 1 - Number(param1.float_frame) / 6;
				}
				else if(param1.inner_blood_cloud.visible)
				{
					param1.inner_blood_cloud.visible = false;
				}
				if(param1.float_frame < 20)
				{
					param1.inner_blood_detail1.alpha = 1 - Number(param1.float_frame) / 20;
					param1.inner_blood_detail1.x = param1.inner_blood_detail1.y = -6 * (1 - Number(param1.float_frame) / 20);
				}
				else if(param1.inner_blood_detail1.visible)
				{
					param1.inner_blood_detail1.visible = false;
				}
				if(param1.float_frame < 15)
				{
					param1.inner_blood_detail2.alpha = 1 - Number(param1.float_frame) / 15;
					param1.inner_blood_detail2.y = -8 * (1 - Number(param1.float_frame) / 15);
				}
				else if(param1.inner_blood_detail2.visible)
				{
					param1.inner_blood_detail2.visible = false;
				}
				if(param1.float_frame < 20)
				{
					_loc2_ = Number(param1.float_frame) / 20;
					param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 2 * (1 - _loc2_) + 1 * _loc2_;
				}
				else if(param1.float_frame < 85)
				{
					if(param1.inner_blood_detail3.scaleY != 1)
					{
						param1.inner_blood_detail3.scaleX = param1.inner_blood_detail3.scaleY = 1;
					}
				}
				else
				{
					param1.inner_blood_detail3.alpha = 1 - (Number(param1.float_frame) - 85) / 5;
				}
			}
		}
		
		public function Logic_eff_blood_sprite(param1:MovieClip) : void
		{
			var _loc2_:Number = NaN;
			param1.float_frame += Number(param1.framespeed) * GSPEED;
			if(param1.float_frame > 35)
			{
				param1.visible = false;
			}
			else
			{
				_loc2_ = 1 - Math.pow(1 - Number(param1.float_frame) / 35,2);
				param1.inner_blood_splat1.scaleX = 0.179 * (1 - _loc2_) + 0.864 * _loc2_;
				param1.inner_blood_splat1.scaleY = 0.179 * (1 - _loc2_) + 1.163 * _loc2_;
				param1.inner_blood_splat1.alpha = 1 - _loc2_;
				if(param1.float_frame < 5)
				{
					_loc2_ = Number(param1.float_frame) / 5;
					param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1 - _loc2_ + 1.88 * _loc2_;
					param1.inner_blood_splat2.alpha = 1 - _loc2_ + 0.59 * _loc2_;
				}
				else if(param1.float_frame < 15)
				{
					_loc2_ = (Number(param1.float_frame) - 5) / 10;
					param1.inner_blood_splat2.scaleX = param1.inner_blood_splat2.scaleY = 1.88 * (1 - _loc2_) + 3.11 * _loc2_;
					param1.inner_blood_splat2.alpha = 0.59 * (1 - _loc2_);
				}
				else if(param1.inner_blood_splat2.visible)
				{
					param1.inner_blood_splat2.visible = false;
				}
				if(param1.float_frame < 4)
				{
					_loc2_ = Number(param1.float_frame) / 4;
					param1.inner_blood_splat3.scaleX = 0.307 * (1 - _loc2_) + 0.554 * _loc2_;
					param1.inner_blood_splat3.scaleY = 0.307 * (1 - _loc2_) + 0.636 * _loc2_;
					param1.inner_blood_splat3.alpha = 1 - _loc2_ + 0.71 * _loc2_;
				}
				else if(param1.float_frame < 4)
				{
					_loc2_ = (Number(param1.float_frame) - 4) / 31;
					param1.inner_blood_splat3.scaleX = 0.554 * (1 - _loc2_) + 0.815 * _loc2_;
					param1.inner_blood_splat3.scaleY = 0.636 * (1 - _loc2_) + 1.096 * _loc2_;
					param1.inner_blood_splat3.alpha = 0.71 * (1 - _loc2_);
				}
			}
		}
		
		/* 
			Animates effect particle based on the particle's typ
		*/
		public function EffectsLogic() : void
		{
			var _loc1_:int = 0;
			var aef:Object;
			i = 0;
			while(i < maxef)
			{
				// null check || visibility check
				if(!ef[i] || !ef[i].visible){
					i++;
					continue;
				}

				aef = ef[i];

				// 	regex exp: ef\[.+?\].expl 
				// 	is not found anywhere else other than here. therefore its an unused custom property.

				// if(ef[i].typ == 0)
				// {
				// 	if(ef[i].expl != undefined)
				// 	{
				// 		if(ef[i].expl != null)
				// 		{
				// 			if(ef[i].contains(ef[i].expl))
				// 			{
				// 				MeasureStart(9);
				// 				ef[i].expl.gotoAndStop(Math.min(ef[i].expl.totalFrames,ef[i].expl.currentFrame + Math.ceil(Number(ef[i].framespeed) * GSPEED)));
				// 				MeasureStop(9);
				// 			}
				// 		}
				// 	}
				// }

				if(ef[i].typ == 1 || ef[i].typ == 4)
				{
					ok = true;
					for each(i2 in GetNearBoxBSP_at(ef[i].x,ef[i].y))
					{
						if(ef[i].x > boxx[i2])
						{
							if(ef[i].x < boxx[i2] + boxw[i2])
							{
								if(ef[i].y > boxy[i2])
								{
									if(ef[i].y < boxy[i2] + boxh[i2])
									{
										ok = false;
										break;
									}
								}
							}
						}
					}
					if(ok)
					{
						ef[i].x += Number(ef[i].tox) * GSPEED;
						ef[i].y += Number(ef[i].toy) * GSPEED;
						ef[i].toy += gravity * GSPEED;
						if(ef[i].typ == 1)
						{
							ef[i].rotation += Number(ef[i].toang) * GSPEED;
						}
						else
						{
							ef[i].rotation = -Math.atan2(ef[i].tox,ef[i].toy) / Math.PI * 180;
						}
					}
					ok = false;
					i2 = 0;
					while(i2 < waterstotal && !ok)
					{
						if(ef[i].x > wax[i2])
						{
							if(ef[i].x < wax[i2] + waw[i2])
							{
								if(ef[i].y > way[i2])
								{
									if(ef[i].y < way[i2] + wah[i2])
									{
										if(wa_friction[i2])
										{
											ok = true;
										}
									}
								}
							}
						}
						++i2;
					}
					if(ok)
					{
						if(ef[i].typ == 1)
						{
							ef[i].tox *= Math.pow(0.9,GSPEED);
							ef[i].toy *= Math.pow(0.9,GSPEED);
							ef[i].toy -= gravity * 1.1 * GSPEED;
							ef[i].toang = Math.pow(0.9,GSPEED);
						}
						else
						{
							ef[i].visible = false;
						}
					}
					if(ef[i].typ == 1)
					{
						MeasureStart(10);
						if(ef[i].inner_blood_cloud == undefined)
						{
							_loc1_ = Math.ceil(Number(ef[i].framespeed) * GSPEED);
							while(_loc1_ > 0)
							{
								ef[i].nextFrame();
								_loc1_--;
							}
						}
						else
						{
							Logic_eff_blood(ef[i]);
						}
						MeasureStop(10);
					}
				}
				if(ef[i].typ == 2)
				{
					ef[i].x += -1 + Math.random() * 2;
					ef[i].y -= gravity * 5;
					ok = false;
					i2 = 0;
					while(i2 < waterstotal && !ok)
					{
						if(ef[i].x > wax[i2])
						{
							if(ef[i].x < wax[i2] + waw[i2])
							{
								if(ef[i].y > way[i2])
								{
									if(ef[i].y < way[i2] + wah[i2])
									{
										if(wa_friction[i2])
										{
											ok = true;
											break;
										}
									}
								}
							}
						}
						++i2;
					}
					if(ok)
					{
						for each(i2 in GetNearBoxBSP_at(ef[i].x,ef[i].y))
						{
							if(ef[i].x > boxx[i2])
							{
								if(ef[i].x < boxx[i2] + boxw[i2])
								{
									if(ef[i].y > boxy[i2])
									{
										if(ef[i].y < boxy[i2] + boxh[i2])
										{
											ok = false;
											break;
										}
									}
								}
							}
						}
					}
					if(!ok)
					{
						ef[i].visible = false;
					}
				}
				if(ef[i].typ == 3)
				{
					ef[i].x += Number(ef[i].tox) * GSPEED;
					ef[i].y += Number(ef[i].toy) * GSPEED;
					ef[i].toy += gravity * GSPEED;
					ok = true;
					i2 = 0;
					while(i2 < waterstotal && ok)
					{
						if(ef[i].x > wax[i2])
						{
							if(ef[i].x < wax[i2] + waw[i2])
							{
								if(ef[i].y > way[i2])
								{
									if(ef[i].y < way[i2] + wah[i2])
									{
										if(wa_friction[i2])
										{
											ef[i].visible = false;
											ok = false;
										}
									}
								}
							}
						}
						++i2;
					}
					ok = true;
					for each(i2 in GetNearBoxBSP_at(ef[i].x,ef[i].y))
					{
						if(ef[i].x > boxx[i2])
						{
							if(ef[i].x < boxx[i2] + boxw[i2])
							{
								if(ef[i].y > boxy[i2])
								{
									if(ef[i].y < boxy[i2] + boxh[i2])
									{
										ef[i].tox = 0;
										ef[i].toy = 0;
										ok = false;
										break;
									}
								}
							}
						}
					}
				}
				if(ef[i].typ == 5)
				{
					ok = false;
					for each(i2 in GetNearBoxBSP_at(ef[i].x,ef[i].y))
					{
						if(ef[i].x > boxx[i2])
						{
							if(ef[i].x < boxx[i2] + boxw[i2])
							{
								if(ef[i].y > boxy[i2])
								{
									if(ef[i].y < boxy[i2] + boxh[i2])
									{
										ok = true;
										break;
									}
								}
							}
						}
					}
					if(ok)
					{
						ef[i].tox *= Math.pow(0.5,GSPEED);
						ef[i].toy *= Math.pow(0.5,GSPEED);
						ef[i].alpha -= 50 * GSPEED;
						if(ef[i].alpha < 0)
						{
							ef[i].visible = false;
						}
					}
					ef[i].x += Number(ef[i].tox) * GSPEED;
					ef[i].y += Number(ef[i].toy) * GSPEED;
					ef[i].toy += gravity * GSPEED;
					MeasureStart(11);
					if(ef[i].inner_blood_splat1 == undefined)
					{
						_loc1_ = Math.ceil(Number(ef[i].framespeed) * GSPEED);
						while(_loc1_ > 0)
						{
							ef[i].nextFrame();
							_loc1_--;
						}
					}
					else
					{
						Logic_eff_blood_sprite(ef[i]);
					}
					MeasureStop(11);
				}
				if(ef[i].typ == 6)
				{
					if(Math.abs(Number(ef[i].x) - Number(ax[mens[ef[i].attached].b_head_start])) < 200)
					{
						if(Math.abs(ef[i].y - (Number(ay[mens[ef[i].attached].b_head_start]) - 30)) < 200)
						{
							ef[i].x = (Number(ax[mens[ef[i].attached].b_head_start]) * GSPEED + Number(ef[i].x) * 5) / (5 + GSPEED);
							ef[i].y = ((Number(ay[mens[ef[i].attached].b_head_start]) - 30) * GSPEED + Number(ef[i].y) * 5) / (5 + GSPEED);
						}
					}
					if(ef[i].totalFrames < 90)
					{
						if(ef[i].currentFrame > 20 + Number(ef[i].msgtext.text.length) * 2)
						{
							ef[i].alpha -= GSPEED * 0.1;
							if(ef[i].alpha < 0)
							{
								ef[i].visible = false;
							}
						}
					}
				}
				++i;
			}
		}
		
		public function PlayerLogic() : void
		{
			var i:int = 0;
			var traceA:* = undefined;
			var traceB:* = undefined;
			var target_dx:Number = NaN;
			var target_dy:Number = NaN;
			var target_di:Number = NaN;
			var cx:Number = NaN;
			var cy:Number = NaN;
			var radians:Number = NaN;
			var intens:Number = NaN;
			var fine_rad:Number = NaN;
			var last_act_fire:Boolean = false;
			var betterdist:Number = NaN;
			var betteri:int = 0;
			var newdis:Number = NaN;
			var init_shot_rot:Number = NaN;
			var ping_limited:Number = NaN;
			var correct_not_fine:Boolean = false;
			var step:Number = NaN;
			var side:Number = NaN;
			var bullet_dist:Number = NaN;
			var water_friction:Boolean = false;
			var dot_effects:Boolean = false;
			var e:int = 0;
			var target_frame:int = 0;
			var ef:Object = null;
			var inverse_legs:Boolean = false;
			var dx:Number = NaN;
			var dy:Number = NaN;
			var di:Number = NaN;
			var mc:player;
			i = 0;
			while(i < playerstotal)
			{
				if(mens[i] && mens[i].io)
				{
					thispulspeed = (i == MP_myid || HELL_MODE) ? GSPEED2 : GSPEED; 
					if(mens[i].team == mens[MP_myid].team || PRO_BOTS || Boolean(mens[i].isplayer))
					{
						if(!mens[i].dying)
						{
							if(!mens[i].dead)
							{
								if(mens[i].hea > 0)
								{
									if(Number(mens[i].regentim) * thispulspeed < 180 * GLOBAL_REGEN_DELAY * mens[i].regen_delay)
									{
										++mens[i].regentim;
									}
									if(Number(mens[i].regentim) * thispulspeed > 30 * GLOBAL_REGEN_DELAY * mens[i].regen_delay)
									{
										if(mens[i].hea < mens[i].hmax)
										{
											if(!ARCADE_GAME_MODE)
											{
												if(Number(mens[i].regentim) * thispulspeed > 60 * GLOBAL_REGEN_DELAY * mens[i].regen_delay)
												{
													mens[i].hea = Math.min(mens[i].hea + 1 * GLOBAL_REGEN_SPEED * mens[i].regen_speed,mens[i].hmax);
													if(MP_mode && Boolean(mens[i].isplayer))
													{
														IncludeRegenInHPLimit(mens[i],1 * GLOBAL_REGEN_SPEED * mens[i].regen_speed);
													}
												}
											}
											else if(Number(mens[i].regentim) * thispulspeed < 60 * GLOBAL_REGEN_DELAY * mens[i].regen_delay)
											{
												mens[i].hea = Math.min(mens[i].hea + 1 * GLOBAL_REGEN_SPEED * mens[i].regen_speed,mens[i].hmax);
												if(MP_mode && Boolean(mens[i].isplayer))
												{
													IncludeRegenInHPLimit(mens[i],1 * GLOBAL_REGEN_SPEED * mens[i].regen_speed);
												}
											}
											else if(Number(mens[i].regentim) * thispulspeed < 90 * GLOBAL_REGEN_DELAY * mens[i].regen_delay)
											{
												mens[i].hea = Math.min(mens[i].hea + 2 * GLOBAL_REGEN_SPEED * mens[i].regen_speed,mens[i].hmax);
												if(MP_mode && Boolean(mens[i].isplayer))
												{
													IncludeRegenInHPLimit(mens[i],2 * GLOBAL_REGEN_SPEED * mens[i].regen_speed);
												}
											}
											else
											{
												mens[i].hea = Math.min(mens[i].hea + 4 * GLOBAL_REGEN_SPEED * mens[i].regen_speed,mens[i].hmax);
												if(MP_mode && Boolean(mens[i].isplayer))
												{
													IncludeRegenInHPLimit(mens[i],4 * GLOBAL_REGEN_SPEED * mens[i].regen_speed);
												}
											}
										}
									}
								}
							}
						}
					}
					if 
					(
						mens[i].brk_body && 
							(
								ax[mens[i].b_body] > render_minX && 
								ax[mens[i].b_body] < render_maxX && 
								ay[mens[i].b_body] > render_minY && 
								ay[mens[i].b_body] < render_maxY || 
								ax[mens[i].b_toe] > render_minX && 
								ax[mens[i].b_toe] < render_maxX && 
								ay[mens[i].b_toe] > render_minY && 
								ay[mens[i].b_toe] < render_maxY
							)

						|| 

						!mens[i].brk_body &&

							ax[mens[i].b_body] > render_minX && ax[mens[i].b_body] < render_maxX && 
							ay[mens[i].b_body] > render_minY && ay[mens[i].b_body] < render_maxY 

							|| 

							mens[i].x > render_minX && mens[i].x < render_maxX && 
							mens[i].y > render_minY && mens[i].y < render_maxY 

							||

							mens[i].isplayer       || mens[i].hunt != -1 || !mens[i].isplayer &&
							mens[i].botaction == 1 || mens[i].incar != -1 && aactive[-200 - Number(mens[i].incar)]
					)
					{
						aactive[i] = true;
						mc = mens[i];
						if(!mc.isplayer || i == MP_myid || !MP_mode)
						{
							mc.real_hea = mc.hea;
						}
						if(mc.notspawned)
						{
							SpawnPlayerImmediately(mc as player);
						}
						if(MP_mode)
						{
							VerifyMP(mc.b_body); //-7
							VerifyMP(mc.b_toe); //-7
							VerifyMP(mc.b_leg1); //-7
							VerifyMP(mc.b_leg2); //-7
							VerifyMP(mc.b_arm1); //-7
							VerifyMP(mc.b_arm2); //-7
							VerifyMP(mc.b_head_start); //-7
							VerifyMP(mc.b_head_end); //-7
							if(isNaN(mc.hea))
							{
								mc.hea = 0;
							}
							if(isNaN(mc.real_hea))
							{
								mc.real_hea = mc.hea;
							}
						}
						if(MP_gamestate != 1 || !mc.dead)
						{
							if(mc.isplayer)
							{
								if(mc.mp_controlled)
								{
									if(!mc.brk_body)
									{
										target_dx = Number(mens[i].mp_x2) - Number(mens[i].mp_x);
										target_dy = Number(mens[i].mp_y2) - Number(mens[i].mp_y);
										target_di = target_dx * target_dx + target_dy * target_dy;
										if(target_di > 1)
										{
											target_di = Math.sqrt(target_di);
											cx = (ax[mens[i].b_body] + ax[mens[i].b_toe]) / 2;
											cy = (ay[mens[i].b_body] + ay[mens[i].b_toe]) / 2;
											radians = Math.atan2(Number(ax[mens[i].b_body]) - Number(ax[mens[i].b_toe]),Number(ay[mens[i].b_body]) - Number(ay[mens[i].b_toe])) - Math.atan2(target_dx,target_dy);
											while(radians > Math.PI)
											{
												radians -= Math.PI * 2;
											}
											while(radians < -Math.PI)
											{
												radians += Math.PI * 2;
											}
											if(Math.abs(radians) > Math.PI * 0.25)
											{
												var rotate:Function = function(atom_id:int):void
												{
													var cos:Number = Math.cos(-radians);
													var sin:Number = Math.sin(-radians);
													var nx:Number = cos * (Number(ax[atom_id]) - cx) + sin * (Number(ay[atom_id]) - cy) + cx;
													var ny:Number = cos * (Number(ay[atom_id]) - cy) - sin * (Number(ax[atom_id]) - cx) + cy;
													atox[atom_id] += (nx - Number(ax[atom_id])) * 0.5;
													atoy[atom_id] += (ny - Number(ay[atom_id])) * 0.5;
													ax[atom_id] = nx;
													ay[atom_id] = ny;
												};
												radians *= 0.1 * GSPEED;
												rotate(mens[i].b_toe);
												rotate(mens[i].b_leg1);
												rotate(mens[i].b_leg2);
												rotate(mens[i].b_body);
												rotate(mens[i].b_head_start);
												rotate(mens[i].b_head_end);
												rotate(mens[i].b_arm1);
												rotate(mens[i].b_arm2);
												cx = Number(ax[mens[i].b_body]);
												cy = Number(ay[mens[i].b_body]);
												radians *= -1;
												rotate(mens[i].b_arm1);
												rotate(mens[i].b_arm2);
											}
										}
									}
									u = Number(mens[i].mp_x) - Number(ax[mens[i].b_toe]);
									v = Number(mens[i].mp_y) - Number(ay[mens[i].b_toe]);
									u2 = Number(mens[i].mp_x2) - Number(ax[mens[i].b_body]);
									v2 = Number(mens[i].mp_y2) - Number(ay[mens[i].b_body]);
									mens[i].mp_time += GSPEED / 30 * 1000;
									if(mens[i].mp_time > mens[i].ping)
									{
										mc.mp_controlled = false;
									}
									xx = VectorDist2D(u,v);
									xx2 = VectorDist2D(u2,v2);
									traceA = xx < 30 || TraceLineF_nopushers(mens[i].mp_x,mens[i].mp_y,ax[mens[i].b_toe],ay[mens[i].b_toe]);
									traceB = xx2 < 30 || TraceLineF_nopushers(mens[i].mp_x2,mens[i].mp_y2,ax[mens[i].b_body],ay[mens[i].b_body]);
									if(!mc.brk_body && xx < 400 && traceA || mc.brk_body && xx < 100 && xx2 < 100 && traceA && traceB)
									{
										intens = 0.75 / 2;
										fine_rad = 10;
										if(mc.brk_body)
										{
											intens *= 0.5 / 2;
											fine_rad = 20;
										}
										if(xx > fine_rad)
										{
											TurnMPBone2(mens[i].b_toe,u,v,mens[i].mp_tox,mens[i].mp_toy,GSPEED * 0.2 * intens);
											TurnMPBone2(mens[i].b_leg1,u,v,mens[i].mp_tox,mens[i].mp_toy,GSPEED * 0.1 * intens);
											TurnMPBone2(mens[i].b_leg2,u,v,mens[i].mp_tox,mens[i].mp_toy,GSPEED * 0.1 * intens);
											WakeUpAtom(mens[i].b_toe,true);
											WakeUpAtom(mens[i].b_leg1,true);
											WakeUpAtom(mens[i].b_leg2,true);
										}
										else
										{
											atox[mens[i].b_toe] *= 0.8;
											atoy[mens[i].b_toe] *= 0.8;
											atox[mens[i].b_leg1] *= 0.8;
											atoy[mens[i].b_leg1] *= 0.8;
											atox[mens[i].b_leg2] *= 0.8;
											atoy[mens[i].b_leg2] *= 0.8;
										}
										if(VectorDist2D(u2,v2) > fine_rad)
										{
											TurnMPBone2(mens[i].b_body,u2,v2,mens[i].mp_tox2,mens[i].mp_toy2,GSPEED * 0.2 * intens);
											TurnMPBone2(mens[i].b_head_start,u2,v2,mens[i].mp_tox2,mens[i].mp_toy2,GSPEED * 0.1 * intens);
											TurnMPBone2(mens[i].b_head_end,u2,v2,mens[i].mp_tox2,mens[i].mp_toy2,GSPEED * 0.1 * intens);
											TurnMPBone2(mens[i].b_arm1,u2,v2,mens[i].mp_tox2,mens[i].mp_toy2,GSPEED * 0.1 * intens);
											TurnMPBone2(mens[i].b_arm2,u2,v2,mens[i].mp_tox2,mens[i].mp_toy2,GSPEED * 0.1 * intens);
											WakeUpAtom(mens[i].b_body,true);
											WakeUpAtom(mens[i].b_head_start,true);
											WakeUpAtom(mens[i].b_head_end,true);
											WakeUpAtom(mens[i].b_arm1,true);
											WakeUpAtom(mens[i].b_arm2,true);
										}
										else
										{
											atox[mens[i].b_body] *= 0.8;
											atoy[mens[i].b_body] *= 0.8;
											atox[mens[i].b_head_start] *= 0.8;
											atoy[mens[i].b_head_start] *= 0.8;
											atox[mens[i].b_head_end] *= 0.8;
											atoy[mens[i].b_head_end] *= 0.8;
											atox[mens[i].b_arm1] *= 0.8;
											atoy[mens[i].b_arm1] *= 0.8;
											atox[mens[i].b_arm2] *= 0.8;
											atoy[mens[i].b_arm2] *= 0.8;
										}
									}
									else
									{
										WakeUpAtom(mens[i].b_toe,true);
										WakeUpAtom(mens[i].b_leg1,true);
										WakeUpAtom(mens[i].b_leg2,true);
										WakeUpAtom(mens[i].b_body,true);
										WakeUpAtom(mens[i].b_head_start,true);
										WakeUpAtom(mens[i].b_head_end,true);
										WakeUpAtom(mens[i].b_arm1,true);
										WakeUpAtom(mens[i].b_arm2,true);
										ax[mens[i].b_toe] += u;
										ay[mens[i].b_toe] += v;
										ax[mens[i].b_leg1] += u;
										ay[mens[i].b_leg1] += v;
										ax[mens[i].b_leg2] += u;
										ay[mens[i].b_leg2] += v;
										ax[mens[i].b_body] += u2;
										ay[mens[i].b_body] += v2;
										ax[mens[i].b_head_start] += u2;
										ay[mens[i].b_head_start] += v2;
										ax[mens[i].b_head_end] += u2;
										ay[mens[i].b_head_end] += v2;
										ax[mens[i].b_arm1] += u2;
										ay[mens[i].b_arm1] += v2;
										ax[mens[i].b_arm2] += u2;
										ay[mens[i].b_arm2] += v2;
										if(mc.b_brk1 != mc.b_body)
										{
											ax[mens[i].b_brk1] += u2;
											ay[mens[i].b_brk1] += v2;
										}
										if(mc.b_brk2 != mc.b_body)
										{
											ax[mens[i].b_brk2] += u;
											ay[mens[i].b_brk2] += v;
										}
										if(GET_LITE_PHYS())
										{
											lax[mens[i].b_toe] += u;
											lay[mens[i].b_toe] += v;
											lax[mens[i].b_leg1] += u;
											lay[mens[i].b_leg1] += v;
											lax[mens[i].b_leg2] += u;
											lay[mens[i].b_leg2] += v;
											lax[mens[i].b_body] += u2;
											lay[mens[i].b_body] += v2;
											lax[mens[i].b_head_start] += u2;
											lay[mens[i].b_head_start] += v2;
											lax[mens[i].b_head_end] += u2;
											lay[mens[i].b_head_end] += v2;
											lax[mens[i].b_arm1] += u2;
											lay[mens[i].b_arm1] += v2;
											lax[mens[i].b_arm2] += u2;
											lay[mens[i].b_arm2] += v2;
											if(mc.b_brk1 != mc.b_body)
											{
												lax[mens[i].b_brk1] += u2;
												lay[mens[i].b_brk1] += v2;
											}
											if(mc.b_brk2 != mc.b_body)
											{
												lax[mens[i].b_brk2] += u;
												lay[mens[i].b_brk2] += v;
											}
										}
									}
								}
							}
						}
						if(MP_mode)
						{
							VerifyMP(mc.b_body); //-6
							VerifyMP(mc.b_toe); //-6
							VerifyMP(mc.b_leg1); //-6
							VerifyMP(mc.b_leg2); //-6
							VerifyMP(mc.b_arm1); //-6
							VerifyMP(mc.b_arm2); //-6
							VerifyMP(mc.b_head_start); //-6
							VerifyMP(mc.b_head_end); //-6
						}

						// Behavior
						if(mc.hea > 0)
						{
							i2 = 0;
							while(i2 < regionstotal)
							{
								if(regions[i2].use_on != PB2Region.USE_NONE)
								{
									if(mc.x > regions[i2].x)
									{
										if(mc.x < regions[i2].x + regions[i2].w)
										{
											if(mc.y - 41 > regions[i2].y)
											{
												if(mc.y - 41 < regions[i2].y + regions[i2].h)
												{
													if(regions[i2].use_on == PB2Region.USE_KEY_BUTTON && (i == MP_myid && key_pick && mc.incar == -1) || 
													   regions[i2].use_on == PB2Region.USE_CHAR_NO_VEHICLE && mc.incar == -1 || 
													   regions[i2].use_on == PB2Region.USE_CHAR_VEHICLE && mc.incar != -1 || 
													   regions[i2].use_on == PB2Region.USE_CHAR || 
													  (regions[i2].use_on == PB2Region.USE_PLAYER || regions[i2].use_on == PB2Region.USE_HEROES) && mc.isplayer && (!MP_mode || i == MP_myid) && mc.hea > 0 || 
													   regions[i2].use_on == PB2Region.USE_KEY_BUTTON_RED && (i == MP_myid && key_pick && mc.team == 12 && mc.incar == -1) || 
													   regions[i2].use_on == PB2Region.USE_KEY_BUTTON_BLUE && (i == MP_myid && key_pick && mc.team == 13 && mc.incar == -1) || 
													   regions[i2].use_on == PB2Region.USE_PLAYER_RED && (i == MP_myid && mc.team == 12 && mc.incar == -1 && mc.hea > 0) || 
													   regions[i2].use_on == PB2Region.USE_PLAYER_BLUE && (i == MP_myid && mc.team == 13 && mc.incar == -1 && mc.hea > 0) || 
													   regions[i2].use_on == PB2Region.USE_UNUSED && mc.isplayer == false && (!MP_mode || i == MP_myid) && mc.hea > 0)
													{
														if(regions[i2].use_on == PB2Region.USE_HEROES)
														{
															ok2 = true;
															i4 = 0;
															i3 = 0;
															while(i3 < playerstotal)
															{
																if(mens[i3] && mens[i3].team == mc.team)
																{
																	if(mens[i3].hero)
																	{
																		if(mens[i3].x > regions[i2].x && mens[i3].x < regions[i2].x + regions[i2].w && Number(mens[i3].y) - 41 > regions[i2].y && Number(mens[i3].y) - 41 < regions[i2].y + regions[i2].h && !mens[i3].dying)
																		{
																			++i4;
																		}
																		else
																		{
																			ok2 = false;
																		}
																	}
																}
																++i3;
															}
														}
														if (regions[i2].use_on == PB2Region.USE_PLAYER || 
															regions[i2].use_on < PB2Region.USE_PLAYER || 
															ok2 || 
															regions[i2].use_on == PB2Region.USE_KEY_BUTTON_RED || 
															regions[i2].use_on == PB2Region.USE_KEY_BUTTON_BLUE || 
															regions[i2].use_on == PB2Region.USE_PLAYER_RED || 
															regions[i2].use_on == PB2Region.USE_PLAYER_BLUE || 
															regions[i2].use_on == PB2Region.USE_UNUSED)
														{
															if(regions[i2].use_target != -1)
															{
																if(regions[i2].use_on == PB2Region.USE_KEY_BUTTON || 
																	regions[i2].use_on == PB2Region.USE_KEY_BUTTON_RED || 
																	regions[i2].use_on == PB2Region.USE_KEY_BUTTON_BLUE)
																{
																	// Indicates that the region / button has been activated at least once. Only check if it has not been activated once.
																	if(!regions[i2].isActivatedOnce) regions[i2].isActivatedOnce = true;						

																	if(regions[i2].play_sound)
																	{
																		if(Boolean(triggers[regions[i2].use_target].enabledd) && (triggers[regions[i2].use_target].maxcalls > 0 || triggers[regions[i2].use_target].maxcalls == -1))
																		{
																			PlaySound(s_t_switch2,regions[i2].x + Number(regions[i2].w) / 2,regions[i2].y + Number(regions[i2].h) / 2);
																		}
																		else
																		{
																			PlaySound(s_t_switch_denied,regions[i2].x + Number(regions[i2].w) / 2,regions[i2].y + Number(regions[i2].h) / 2);
																		}
																	}
																	key_pick = false;
																}
																if(MP_mode && i == MP_myid && triggers[regions[i2].use_target].enabledd && (triggers[regions[i2].use_target].maxcalls > 0 || triggers[regions[i2].use_target].maxcalls == -1))
																{
																	MP_custom_events += ";exec|" + regions[i2].use_target + "#" + i + "#" + i2;
																}
																if(!MP_mode || regions[i2].use_on != PB2Region.USE_KEY_BUTTON)
																{
																	TRIGGER_PLAYER_INITIATOR = i;
																	triggers[regions[i2].use_target].forcehyperjump = false;
																	EXEC_TRIGGER(regions[i2].use_target);
																}
																if(regions[i2].use_on == PB2Region.USE_KEY_BUTTON || 
																	regions[i2].use_on == PB2Region.USE_KEY_BUTTON_RED || 
																	regions[i2].use_on == PB2Region.USE_KEY_BUTTON_BLUE)
																{
																	if(regions[i2].mc)
																	{
																		if(Boolean(triggers[regions[i2].use_target].enabledd) && (triggers[regions[i2].use_target].maxcalls > 0 || triggers[regions[i2].use_target].maxcalls == -1))
																		{
																			regions[i2].mc.gotoAndStop(2);
																		}
																		else
																		{
																			regions[i2].mc.gotoAndStop(3);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
								++i2;
							}
							if(i == MP_myid && !MP_half_bot)
							{
								if(!MP_spectator)
								{
									if(MP_gamestate != 2)
									{
										mc.act_movex = int(!INLAG || !lock_lag_controls) * (int(key_right) - int(key_left));
										mc.act_movey = int(!INLAG || !lock_lag_controls) * (int(key_down) - int(key_up));
										mc.act_fall  = key_fall;
									}
									else
									{
										mc.act_movex = 0;
										mc.act_movey = 0;
										mc.act_fall = false;
									}
									if(!INLAG || !lock_lag_controls)
									{
										mc.tarx = (mouse_x - game.x) / game_scale;
										mc.tary = (mouse_y - game.y) / game_scale;
									}
									if(Boolean(is_firing) && MP_gamestate == 0)
									{
										if(!INLAG || !lock_lag_controls)
										{
											if(!mc.act_fire)
											{
												if(!MP_favor_the_shooter)
												{
													MP_custom_events += ";ss|" + MP_myid + "#" + mc.tarx + "#" + mc.tary + "#" + mc.curwea;
												}
											}
											mc.act_fire = true;
										}
									}
									else
									{
										mc.act_fire = false;
									}
									if(mc.act_fire || MP_mode || Math.random() > 0.97)
									{
										i2 = 0;
										while(i2 < playerstotal)
										{
											if(mens[i2] && mens[i2].io)
											{
												if(mens[i2].team != mc.team)
												{
													if(!mens[i2].dead)
													{
														if(aactive[i2])
														{
															if(Dist2D(mc.tarx,mc.tary,mens[i2].x,mens[i2].y) < 150)
															{
																if(mc.hunt != i2)
																{
																	mc.hunt = -1;
																	Alerted(mc);
																	mc.hunt = i2;
																}
																i2 = playerstotal;
															}
														}
													}
												}
											}
											++i2;
										}
									}
									if(mc.hunt != -1)
									{
										if(mc.hunt >= 0 && mc.hunt < playerstotal)
										{
											if(mens[mc.hunt] && mens[mc.hunt].io)
											{
												if(mens[mc.hunt].dead)
												{
													MakeHappy(mc);
													mc.hunt = -1;
												}
												else if(Dist2D(mc.tarx,mc.tary,mens[mc.hunt].x,mens[mc.hunt].y) > 250)
												{
													mc.hunt = -1;
												}
											}
										}
									}
								}
							}
							else if(mc.botaction != 4)
							{
								if(MP_gamestate != 2)
								{
									if(!mc.isplayer || MP_myid == i && MP_half_bot)
									{
										last_act_fire = Boolean(mc.act_fire);
										mc.act_fire = false;
										bugs = false;
										injured = false;
										mc.act_movex = 0;
										mc.act_movey = 0;
										if(mc.team == mens[MP_myid].team || !EASY_MODE)
										{
											i2 = 0;
											while(i2 <= pulsmax)
											{
												if(puls[i2] != null)
												{
													if(puls[i2].visible == true)
													{
														if(mens[puls[i2].master] && (mens[puls[i2].master].team != mc.team))
														{
															if(puls[i2].currentFrame == 14)
															{
																if(Dist2D(mc.x,mc.y,puls[i2].x,puls[i2].y) < 100)
																{
																	bugs = true;
																	mc.tarx = (mc.tarx + puls[i2].x) / 2;
																	mc.tary = (mc.tary + puls[i2].y) / 2;
																}
															}
														}
													}
												}
												++i2;
											}
											if((CASUAL_MODE || MP_mode) && AUTO_REVIVE || mc.team != mens[MP_myid].team)
											{
												if(mc.hunt == -1 || MP_mode && mc.dying || PRO_BOTS && (mc.hunt != -1 && mc.hunt != i))
												{
													i2 = !!mc.dying ? i : 0;
													while(i2 < playerstotal && !injured)
													{
														if(mens[i2] && mens[i2].io)
														{
															if(mens[i2].team == mc.team)
															{
																if(Boolean(mens[i2].dead) || Boolean(mens[i2].dying))
																{
																	if(!mens[i2].brk_head && !mens[i2].brk_arms && !mens[i2].brk_legs && !mens[i2].brk_body || i2 == i && (mens[i].hunt == -1 || mens[i].hea <= 15))
																	{
																		if(Dist2D(ax[mens[i2].b_body],ay[mens[i2].b_body],mc.x,mc.y) < 400)
																		{
																			ok = true;
																			if(mc.curwea == -1 || guns[mc.curwea].stat_class != 7)
																			{
																				i3 = 0;
																				while(i3 < gunstotal && ok)
																				{
																					if(guns[i3] && guns[i3].io)
																					{
																						if(!guns[i3].forcars)
																						{
																							if(guns[i3].stat_class == 7)
																							{
																								if(guns[i3].picken_by == i)
																								{
																									ok = false;
																									if(!(MP_mode && i == MP_myid) || Math.random() < 0.2)
																									{
																										mc.curwea = i3;
																										ChangedGun(i);
																									}
																								}
																							}
																						}
																					}
																					++i3;
																				}
																			}
																			if(mc.curwea != -1)
																			{
																				if(guns[mc.curwea].stat_class == 7)
																				{
																					if(mc.x < ax[mens[i2].b_body])
																					{
																						mc.act_movex = 1;
																					}
																					else
																					{
																						mc.act_movex = -1;
																					}
																					mc.act_movey = 1;
																					if(i2 == i)
																					{
																						mc.tarx = (mc.tarx + ax[mens[i2].b_leg1]) / 2;
																						mc.tary = (mc.tary + ay[mens[i2].b_leg1] + 20) / 2;
																					}
																					else
																					{
																						mc.tarx = (mc.tarx + ax[mens[i2].b_body]) / 2;
																						mc.tary = (mc.tary + ay[mens[i2].b_body]) / 2;
																					}
																					if(Dist2D(ax[mens[i2].b_body],ay[mens[i2].b_body],mc.x,mc.y) < 100 || i2 == i)
																					{
																						mc.act_fire = true;
																					}
																					mens[i2].deadtim = 0;
																					mens[i2].alpha = 1;
																					injured = true;
																				}
																			}
																		}
																	}
																}
															}
														}
														++i2;
													}
												}
											}
										}
										if(bugs || injured)
										{
											if(bugs)
											{
												if(mc.curwea != -1)
												{
													mc.curwea = -1;
													ChangedGun(i);
												}
												else if(mc.team != mens[MP_myid].team || Math.random() > 0.95 || PRO_BOTS)
												{
													if(injured && Boolean(mc.act_fire))
													{
														mc.act_movex = -Number(mc.side);
													}
													else
													{
														mc.act_fire = true;
													}
												}
											}
											ok = false;
										}
										else
										{
											if(mc.isplayer && Math.random() > 0.5 || !mc.isplayer && Math.random() > 0.92)
											{
												mc.rand = Math.random();
												mc.rand2 = Math.random();
												mc.rand3 = Math.random();
												if(!(i == MP_myid && MP_mode) || Math.random() < 0.1)
												{
													if(!mc.dying)
													{
														if(mc.curwea != -1 && Dist2D(mc.x,mc.y,mc.tarx,mc.tary) < 100 && mc.hunt != -1)
														{
															mc.curwea = -1;
															ChangedGun(i);
														}
														else if(Math.random() > 0.8 || mc.curwea == -1 && Dist2D(mc.x,mc.y,mc.tarx,mc.tary) > 100)
														{
															i2 = 0;
															while(i2 < gunstotal)
															{
																if(guns[i2] && guns[i2].io)
																{
																	if(guns[i2].picken_by == i)
																	{
																		if(!guns[i2].forcars)
																		{
																			if(i2 != mc.curwea)
																			{
																				if(guns[i2].wep > 0)
																				{
																					if(mc.curwea == -1 || CalcWepPriority(guns[mc.curwea]) < CalcWepPriority(guns[i2]))
																					{
																						mc.curwea = i2;
																						ChangedGun(i);
																						i2 = gunstotal;
																					}
																				}
																			}
																		}
																	}
																}
																++i2;
															}
														}
													}
												}
											}
											ok = true;
											if(mc.hunt != -1)
											{
												if(mens[mc.hunt] && mens[mc.hunt].io)
												{
													mc2 = mens[mc.hunt];
													mc.act_movex = 0;
													mc.act_movey = 0;
													mc.last_contact += 1;
													xx = Dist2D(ax[mc.b_arm1],ay[mc.b_arm1],ax[mc2.b_body],ay[mc2.b_body]);
													if(mc.curwea != -1)
													{
														i3 = guns[mc.curwea].stat_class;
													}
													else
													{
														i3 = -1;
													}
													if(mc2.hea > 0 && mc2.stability > 0)
													{
														if(i3 != 2)
														{
															rx = mc2.x - 30 + Number(mc.rand) * 60;
															ry = mc2.y + 10 - Number(mc.rand2) * 102;
														}
														else
														{
															rx = mc2.x - 20 + Number(mc.rand) * 40;
															ry = mc2.y - Number(mc.rand2) * 82;
														}
														if(!EASY_MODE || i == MP_myid)
														{
															if(xx < 270)
															{
																if(mc.rand3 > 0.9)
																{
																	ry = mc2.y - 82;
																}
															}
														}
													}
													else
													{
														rx = Number(ax[mc2.b_body]) - 25 + Number(mc.rand) * 50;
														ry = Number(ay[mc2.b_body]) - 25 + Number(mc.rand2) * 50;
													}
													if(mc2.incar == -1)
													{
														if(i3 == 0)
														{
															rx += Number(atox[mc2.b_toe]) * xx / pspeed;
															ry += Number(atoy[mc2.b_toe]) * xx / pspeed;
															if(!TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]))
															{
																rx += (Number(ax[mc.b_arm1]) - Number(ax[mc2.b_body])) / xx * 100;
																ry += (Number(ay[mc.b_arm1]) - Number(ay[mc2.b_body])) / xx * 100;
															}
														}
														if(i3 == 1)
														{
															rx += Number(atox[mc2.b_toe]) * xx / pspeed;
															ry += Number(atoy[mc2.b_toe]) * xx / pspeed;
														}
														if(i3 == 2)
														{
														}
														if(i3 == 4 || i3 == 6)
														{
															rx += Number(atox[mc2.b_toe]) * xx / pspeed;
															ry += Number(atoy[mc2.b_toe]) * xx / pspeed + (Number(ay[mc.b_arm1]) - Number(ay[mc2.b_body])) * 0.5 - Math_abs(Number(ax[mc.b_arm1]) - Number(ax[mc2.b_body])) * 0.5;
														}
													}
													if(PRO_BOTS && (!LOW_HPS || FORCE_CUSTOM_MAP || MP_mode))
													{
														ok2 = true;
													}
													else
													{
														ok2 = (mc.side == 1 && mc.x < rx + 100 || mc.side == -1 && mc.x > rx - 100) && (mens[mc.hunt].alpha > 0.1 || mens[mc.hunt].incar != -1) && TraceLine(rx,ry,ax[mc.b_arm1],ay[mc.b_arm1]) || xx < 100 || i == MP_myid;
													}
													if(mc.enemy_vis_tim > 0 || ok2)
													{
														--mc.enemy_vis_tim;
														if(ok2)
														{
															mc.enemy_vis_tim = 45 / thispulspeed;
														}
														if(i == MP_myid && MP_mode)
														{
															mc.tarx = (Number(mc.tarx) * 13 + rx) / 14;
															mc.tary = (Number(mc.tary) * 13 + ry) / 14;
														}
														else if(EASY_MODE && i != MP_myid)
														{
															mc.tarx = (Number(mc.tarx) * 13 + rx) / 14;
															mc.tary = (Number(mc.tary) * 13 + ry) / 14;
														}
														else
														{
															mc.tarx = (Number(mc.tarx) * 1 + rx) / 2;
															mc.tary = (Number(mc.tary) * 1 + ry) / 2;
														}
														ok = false;
													}
													else
													{
														if(TraceLine(rx,ry,ax[mc.b_arm1],ay[mc.b_arm1]))
														{
															mc.tarx = (Number(mc.tarx) * 5 + rx) / 6;
															mc.tary = (Number(mc.tary) * 5 + ry) / 6;
														}
														if(Dist2D(mc.tarx,mc.tary,rx,ry) > 500)
														{
															mc.tarx = (Number(mc.tarx) * 10 + rx) / 11;
															mc.tary = (Number(mc.tary) * 50 + ry) / 51;
														}
														mc.act_movey = 1;
													}
													if((mc.curwea != -1 && guns[mc.curwea].ready || mc.arm1.lower.psi.visible) && (!mc.dying || !EASY_MODE && Math.random() > 0.85 || mc.incar != -1) && (mc.stability >= -0.1 || !EASY_MODE))
													{
														cx = Number(mc.rand3) * 200;
														if(!ok && ((TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]) || mens[mc.hunt].alpha <= 0.1) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1])))
														{
															mc.last_contact = 0;
															if(mc.curwea == -1 && Boolean(mc.arm1.lower.psi.visible))
															{
																if(Dist2D(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]) > 50)
																{
																	if(ax[mc.b_arm1] > mc.tarx)
																	{
																		mc.act_movex = -1;
																	}
																	else
																	{
																		mc.act_movex = 1;
																	}
																}
																if(Dist2D(mc.tarx,mc.tary,rx,ry) < 200)
																{
																	if(Dist2D(rx,ry,mc.x,mc.y - 41) < 70)
																	{
																		mc.act_fire = true;
																	}
																}
															}
															else
															{
																if(xx > 570 / game_scale + cx && EASY_MODE || xx > 1400 / game_scale)
																{
																	mc.act_fire = false;
																}
																else if(i3 != 2 && Dist2D(mc.tarx,mc.tary,rx,ry) < 50 + cx * 0.1 || i3 == 2 && Dist2D(mc.tarx,mc.tary,rx,ry) < 30 || xx > 600 / game_scale && Dist2D(mc.tarx,mc.tary,rx,ry) < 100 + cx || mens[mc.hunt].alpha <= 0.1)
																{
																	if(i == MP_myid && MP_mode)
																	{
																		if(Math.random() < Math.pow(0.8,GSPEED))
																		{
																			mc.act_fire = true;
																		}
																	}
																	else if(EASY_MODE && i != MP_myid)
																	{
																		if(Math.random() < Math.pow(0.2,GSPEED))
																		{
																			mc.act_fire = true;
																		}
																	}
																	else
																	{
																		mc.tarx = rx;
																		mc.tary = ry;
																		mc.act_fire = true;
																	}
																}
																if(mc.hea > Number(mc.hmax) * 0.5)
																{
																	if(Dist2D(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]) > 250 + cx)
																	{
																		if(ax[mc.b_arm1] > mc.tarx)
																		{
																			mc.act_movex = -1;
																		}
																		else
																		{
																			mc.act_movex = 1;
																		}
																	}
																}
																else if(Dist2D(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]) < 350 + cx)
																{
																	if(ax[mc.b_arm1] < mc.tarx)
																	{
																		mc.act_movex = -1;
																	}
																	else
																	{
																		mc.act_movex = 1;
																	}
																	if(mens[mc.hunt].curwea == -1 && !mens[mc.hunt].dying)
																	{
																		mc.act_movex = -Number(mc.act_movex);
																	}
																}
															}
														}
														else if(mc.hea > Number(mc.hmax) * 0.2 && mc.team != mens[MP_myid].team || mc.hea > Number(mc.hmax) * 0.5)
														{
															if(TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1] - (100 + Number(mc.rand) * 100) - cx,ay[mc.b_arm1]) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1]))
															{
																mc.act_movex = -1;
															}
															else if(TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1] + (100 + Number(mc.rand) * 100) + cx,ay[mc.b_arm1]) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1] + 50 + cx,ay[mc.b_arm1]))
															{
																mc.act_movex = 1;
															}
															else if(TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1] - (100 + Number(mc.rand) * 100),Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1] - (100 + Number(mc.rand) * 100),Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)))
															{
																mc.act_movex = -1;
																mc.act_movey = -1;
															}
															else if(TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1] + (100 + Number(mc.rand) * 100),Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1] + (100 + Number(mc.rand) * 100),Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)))
															{
																mc.act_movex = 1;
																mc.act_movey = -1;
															}
															else if(TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1],Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1],Number(ay[mc.b_arm1]) - 100 * Number(mc.mobility)))
															{
																mc.act_movey = -1;
															}
															else if(mc.sit < 0.5 && TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1] + 50) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1],ay[mc.b_arm1] + 50))
															{
																mc.act_movey = 1;
															}
															else if(TraceLine(ax[mc.b_arm1],ay[mc.b_arm1],ax[mc.b_arm1] + (Number(mc.rand) - 0.5) * 800,Number(ay[mc.b_arm1]) - Number(mc.rand2) * 200) && TraceLine(mc.tarx,mc.tary,ax[mc.b_arm1] + (Number(mc.rand) - 0.5) * 800,Number(ay[mc.b_arm1]) - Number(mc.rand2) * 200) && TraceAllyLine(i,mc.tarx,mc.tary,ax[mc.b_arm1] + (Number(mc.rand) - 0.5) * 800,Number(ay[mc.b_arm1]) - Number(mc.rand2) * 200))
															{
																if(mc.rand > 0.5)
																{
																	mc.act_movex = 1;
																}
																else
																{
																	mc.act_movex = -1;
																}
																if(mc.rand2 > 0.5)
																{
																	mc.act_movey = -1;
																}
															}
															else if(cx > 80)
															{
																if(mc.tarx > mc.x)
																{
																	mc.act_movex = 1;
																}
																else
																{
																	mc.act_movex = -1;
																}
															}
														}
													}
													else if(mc.curwea != -1)
													{
														if(TraceLine(ax[mc.b_body],ay[mc.b_body],ax[mc2.b_arm1],ay[mc2.b_arm1]))
														{
															if(!TraceLine(ax[mc.b_body] + 30 + Number(mc.rand3) * 100,ay[mc.b_body],ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movex = 1;
															}
															else if(!TraceLine(Number(ax[mc.b_body]) - 30 - Number(mc.rand3) * 100,ay[mc.b_body],ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movex = -1;
															}
															else if(!TraceLine(ax[mc.b_body],Number(ay[mc.b_body]) - 100,ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movey = -1;
															}
															else if(!TraceLine(ax[mc.b_body],ay[mc.b_body] + 50,ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movey = 1;
															}
															else if(!TraceLine(Number(ax[mc.b_body]) - 200,Number(ay[mc.b_body]) - 100,ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movey = -1;
																mc.act_movex = -1;
															}
															else if(!TraceLine(ax[mc.b_body] + 200,Number(ay[mc.b_body]) - 100,ax[mc2.b_arm1],ay[mc2.b_arm1]))
															{
																mc.act_movey = -1;
																mc.act_movex = 1;
															}
														}
													}
													else
													{
														i3 = -1;
														xx = 0;
														if(mc2.incar == -1)
														{
															i2 = 0;
															while(i2 < gunstotal)
															{
																if(guns[i2] && guns[i2].io)
																{
																	mc2 = guns[i2];
																	yy = Dist2D(mc.x,mc.y,mc2.x,mc2.y);
																	if(yy < 800)
																	{
																		if(mc2.forcars == false)
																		{
																			if(((mc2.picken_by == -1 || !mens[mc2.picken_by]) || mens[mc2.picken_by].hea < 50) && (i3 == -1 || yy < xx) && (mc2.command == -1 || mc2.command != -1 && mc2.command == mc.team && (mc.isplayer || mens[MP_myid].team != mc.team)))
																			{
																				if(mc.x < mc2.x - 20)
																				{
																					mc.act_movex = 1;
																				}
																				else if(mc.x > mc2.x + 20)
																				{
																					mc.act_movex = -1;
																				}
																				else if(mc.y > mc2.y)
																				{
																					mc.act_movey = -1;
																				}
																				else
																				{
																					mc.act_movey = 1;
																				}
																				xx = yy;
																				i3 = i2;
																			}
																		}
																	}
																}
																++i2;
															}
														}
													}
													if(Math.random() > 0.5)
													{
														i2 = 0;
														while(i2 < playerstotal)
														{
															if(i2 != i)
															{
																if(mens[i2] && mens[i2].io)
																{
																	if(mens[i2].hea > 0)
																	{
																		if(mens[i2].team == mc.team)
																		{
																			if(mens[i2].hunt == -1)
																			{
																				if(mens[i2].x > mc.x - 500)
																				{
																					if(mens[i2].x < mc.x + 500)
																					{
																						if(mens[i2].y > mc.y - 300)
																						{
																							if(mens[i2].y < mc.y + 300)
																							{
																								if(PRO_BOTS || TraceLine(mens[i2].x,Number(mens[i2].y) - 50,mc.x,mc.y - 50))
																								{
																									if(mens[i2].last_contact > HUNT_LOST)
																									{
																										Alerted(mens[i2]);
																									}
																									if(mens[i2].last_contact > mc.last_contact + 10)
																									{
																										mens[i2].last_contact = mc.last_contact + 10;
																										mens[i2].hunt = mc.hunt;
																										mens[i2].tarx = Number(mc.tarx) - 100 + Math.random() * 200;
																										mens[i2].tary = Number(mc.tary) - 50 + Math.random() * 100;
																										if(mens[i2].enemy_vis_tim > mc.enemy_vis_tim)
																										{
																											mens[i2].enemy_vis_tim = mc.enemy_vis_tim;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
															++i2;
														}
													}
													if(mc.incar != -1 && !vehicles[mc.incar].ecosystem)
													{
														if(mc.x < mens[mc.hunt].x)
														{
															mc.act_movex = 1;
														}
														else
														{
															mc.act_movex = -1;
														}
													}
													if(mens[mc.hunt].team == mc.team)
													{
														if(mc.team == 0 || PRO_BOTS)
														{
															mc.hunt = -1;
														}
														if(DEBUG_MODE)
														{
														}
													}
													if(mc2.dying && (Math.random() > 0.9 && mc.team != mens[MP_myid].team) || !mc2.io || mc2.hea < -30 || mc2.hea <= 0 && mc2.incar != -1)
													{
														if(!PRO_BOTS || Boolean(mc2.dead))
														{
															mc.hunt = -1;
														}
														if(DEBUG_MODE)
														{
														}
														if(mc.botaction == 0)
														{
															if(Math.random() > 0.5)
															{
																mc.botaction = 2;
															}
															else
															{
																mc.botaction = 3;
															}
														}
														MakeHappy(mc);
													}
													if(mc.hunt == i)
													{
														mc.hunt = -1;
														if(DEBUG_MODE)
														{
														}
														if(mc.botaction == 0)
														{
															mc.botaction = 3;
														}
													}
													if(mc.last_contact > HUNT_LOST && !PRO_BOTS)
													{
														mc.hunt = -1;
														if(mc.botaction == 0)
														{
															mc.botaction = 3;
														}
													}
												}
											}
										}
										if(DEBUG_MODE)
										{
										}
										if(ok)
										{
											if(mc.botaction == 1 && mc.team == mens[MP_myid].team && mens[MP_myid].hea > 0)
											{
												xx = mens[MP_myid].x + Number(mc.side) * 100;
												if(mens[MP_myid].act_movey == 1 && mens[MP_myid].side == mc.side)
												{
													xx = Number(mens[MP_myid].x) - Number(mc.side) * 100;
												}
												if(Math_abs(mc.x - xx) * (Math.sin(i) * 0.25 + 0.75) + Math_abs(mc.y - Number(mens[MP_myid].y)) > 100 || Math_abs(mc.x - Number(mens[MP_myid].x)) < 30)
												{
													if(mc.inwater)
													{
														if(mc.y > mens[MP_myid].y)
														{
															mc.act_movey = -1;
														}
														else
														{
															mc.act_movey = 1;
														}
													}
													if(mc.x > xx)
													{
														mc.act_movex = -1;
													}
													else
													{
														mc.act_movex = 1;
													}
												}
												else if(!mc.inwater)
												{
													if(mens[MP_myid].side == mc.side)
													{
														if(mens[MP_myid].act_movey != 1)
														{
															mc.act_movey = 1;
														}
													}
												}
												if(mens[MP_myid].hunt != -1 || Boolean(mens[MP_myid].act_fire))
												{
													mc.tarx = (Number(mc.tarx) * 3 + mens[MP_myid].tarx) / 4;
													mc.tary = (Number(mc.tary) * 3 + mens[MP_myid].tary) / 4;
												}
												else
												{
													if(mc.rand3 > 0.95)
													{
														mc.randtim = -Number(mc.randtim);
														mc.rand3 = Math.random() * 0.95;
													}
													if(mc.randtim == 0)
													{
														mc.randtim = mc.side;
													}
													mc.tarx = (Number(mc.tarx) * 7 + mc.x + (Number(mc.rand2) * 400 + 200) * Number(mc.randtim)) / 8;
													mc.tary = (Number(mc.tary) * 7 + mc.y - 50 + (Number(mc.rand3) * 100 - 50)) / 8;
												}
											}
											else if(mc.hunt == -1)
											{
												if(mc.botaction == 2 || mc.botaction == 3)
												{
													if(mc.rand3 > 0.95)
													{
														mc.randtim = -Number(mc.randtim);
													}
													else
													{
														if(mc.randtim == 0)
														{
															mc.randtim = mc.side;
														}
														mc.tarx = (Number(mc.tarx) * 10 + (mc.x + Number(mc.randtim) * 200)) / 11;
														mc.tary = (Number(mc.tary) * 10 + (mc.y - 41 + Number(mc.rand2) * 100 - 50)) / 11;
													}
													if(mc.botaction == 3)
													{
														if(!TracePoint(mc.x + Number(mc.side) * 50,mc.y + 20) || !TracePoint(mc.x + Number(mc.side) * 50,mc.y + 150))
														{
															if(TracePoint(mc.x + Number(mc.side) * 100,mc.y - 40) || TracePoint(mc.x + Number(mc.side) * 100,mc.y - 100))
															{
																mc.act_movex = mc.side;
															}
														}
													}
												}
												else
												{
													mc.tarx = (Number(mc.tarx) * 10 + (mc.x + Number(mc.side) * 200)) / 11;
													mc.tary = (Number(mc.tary) * 10 + (mc.y - 41)) / 11;
												}
											}
										}
										if(mc.hunt == -1 || mc.act_movex == 0 && mc.act_movey == 0 && !mc.act_fire)
										{
											i2 = 0;
											while(i2 < playerstotal)
											{
												if(i2 != i)
												{
													if(mens[i2] && mens[i2].io)
													{
														mc2 = mens[i2];
														if(mc2.hea > 0 && !mc2.dying)
														{
															if(mc2.x > mc.x - hscreenX * 1.5 / game_scale)
															{
																if(mc2.x < mc.x + hscreenX * 1.5 / game_scale)
																{
																	if(mc2.y > mc.y - hscreenY * 1.5 / game_scale)
																	{
																		if(mc2.y < mc.y + hscreenY * 1.5 / game_scale)
																		{
																			if(mc2.x > mc.x - 100 && mc.side > 0 || mc2.x < mc.x + 100 && mc.side < 0 || PRO_BOTS)
																			{
																				if(mc2.team != mc.team)
																				{
																					if(PRO_BOTS || TraceLine(mc2.x - 25 + Math.random() * 50,mc2.y - Math.random() * 82,Number(ax[mc.b_head_start]) - 30 + Math.random() * 60,Number(ay[mc.b_head_start]) - 30 + Math.random() * 60))
																					{
																						if(mc.hunt == -1)
																						{
																							Alerted(mc);
																						}
																						mc.hunt = i2;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												++i2;
											}
										}
										if(!injured)
										{
											i4 = 0;
											i3 = 0;
											i2 = 0;
											while(i2 < playerstotal)
											{
												if(i2 != i)
												{
													if(mens[i2] && mens[i2].io)
													{
														mc2 = mens[i2];
														if(mc2.io)
														{
															if(mc2.hea > 0 && !mc2.dying)
															{
																if(mc2.x > mc.x - screenX / game_scale)
																{
																	if(mc2.x < mc.x + screenX / game_scale)
																	{
																		if(mc2.y > mc.y - screenY / game_scale)
																		{
																			if(mc2.y < mc.y + screenY / game_scale)
																			{
																				if(mc2.team == mc.team || TraceLine(mc2.x - 25,mc2.y - 41,ax[mc.b_head_start],ay[mc.b_head_start]))
																				{
																					if(mc2.team != mc.team)
																					{
																						i4 = i4 - 1;
																						if(i2 != mc.hunt)
																						{
																							i3 = i2;
																						}
																					}
																					else
																					{
																						i4 += 1;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												++i2;
											}
											if(i4 < -1)
											{
												if(mc.x > mens[i3].x)
												{
													mc.act_movex = 1;
												}
												else
												{
													mc.act_movex = -1;
												}
												if(mc.act_movey == 1)
												{
													mc.act_movey = 0;
												}
											}
										}
										if(mc.incar == -1)
										{
											ok = true;
											i4 = -1;
											i2 = 0;
											while(i2 <= pulsmax)
											{
												if(puls[i2] != null)
												{
													if(puls[i2].visible == true)
													{
														if(mens[puls[i2].master] && (mens[puls[i2].master].team != mc.team))
														{
															if(puls[i2].master >= 0)
															{
																if(puls[i2].cclass == 0 || puls[i2].cclass == 1 || puls[i2].cclass == 2)
																{
																	if((puls[i2].x > mc.x && mc.side > 0 || puls[i2].x < mc.x && mc.side < 0) && TraceLine(puls[i2].x,puls[i2].y,ax[mc.b_head_start],ay[mc.b_head_start]))
																	{
																		if(CheckCross(puls[i2].x,puls[i2].y,puls[i2].x + Number(puls[i2].spx) * 10,puls[i2].y + Number(puls[i2].spy) * 10,mc.x,mc.y,mc.x,mc.y - 60,i2))
																		{
																			mc.act_movey = -1;
																			if(!mens[puls[i2].master].dead)
																			{
																				if(mc.hunt == -1)
																				{
																					Alerted(mc);
																					mc.hunt = puls[i2].master;
																				}
																			}
																			ok = false;
																			i4 = i2;
																		}
																		if(CheckCross(Number(puls[i2].x) - Number(puls[i2].spx) * 5,Number(puls[i2].y) - Number(puls[i2].spy) * 5,puls[i2].x + Number(puls[i2].spx) * 20,puls[i2].y + Number(puls[i2].spy) * 20,mc.x,mc.y - 60,mc.x,mc.y - 102,i2))
																		{
																			mc.act_movey = 1;
																			if(!mens[puls[i2].master].dead)
																			{
																				if(mc.hunt == -1)
																				{
																					Alerted(mc);
																					mc.hunt = puls[i2].master;
																				}
																			}
																			ok = false;
																			i4 = i2;
																		}
																	}
																}
																if(puls[i2].cclass == 4 || puls[i2].cclass == 6)
																{
																	if(mc.x > Number(puls[i2].x) - 150)
																	{
																		if(mc.x < puls[i2].x + 150)
																		{
																			if(mc.y > Number(puls[i2].y) - 150)
																			{
																				if(mc.y < puls[i2].y + 150)
																				{
																					if(TraceLine(ax[mc.b_head_start],ay[mc.b_head_start],puls[i2].x,puls[i2].y))
																					{
																						if(mc.x > puls[i2].x)
																						{
																							mc.act_movex = 1;
																						}
																						else
																						{
																							mc.act_movex = -1;
																						}
																						if(Math.random() > 0.9)
																						{
																							mc.act_movey = -1;
																						}
																						if(!mens[puls[i2].master].dead)
																						{
																							if(mc.hunt == -1)
																							{
																								Alerted(mc);
																								mc.hunt = puls[i2].master;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
																if(mc.hunt == -1)
																{
																	if(Dist2D(ax[mc.b_head_start],ay[mc.b_head_start],puls[i2].x,puls[i2].y) < 350)
																	{
																		if(puls[i2].x > mc.x && mc.side == 1 || puls[i2].x < mc.x && mc.side == -1)
																		{
																			if(TraceLine(ax[mc.b_head_start],ay[mc.b_head_start],puls[i2].x,puls[i2].y))
																			{
																				if(!mens[puls[i2].master].dead)
																				{
																					Alerted(mc);
																					mc.hunt = puls[i2].master;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												++i2;
											}
											if(!ok)
											{
												if(i4 >= 0 && i4 <= pulsmax)
												{
													if(mc.curwea == -1 && Boolean(mc.arm1.lower.psi.visible))
													{
														if(Math.random() < Math.pow(0.3,GSPEED))
														{
															if(Dist2D(ax[mc.b_arm1],ay[mc.b_arm1],puls[i4].x,puls[i4].y) < 150)
															{
																mc.act_fire = true;
															}
														}
													}
												}
											}
											if(!mc.inwater)
											{
												if(TraceLineF(ax[mc.b_toe] + Number(mc.act_movex) * 50,Number(ay[mc.b_toe]) - 50,ax[mc.b_toe] + Number(mc.act_movex) * 100 + Number(mc.tox) * 10,ay[mc.b_toe] + 250))
												{
													if(TraceLineF(ax[mc.b_toe] + Number(mc.act_movex) * 50,ay[mc.b_toe] + 25,ax[mc.b_toe] + Number(mc.act_movex) * 150,ay[mc.b_toe] + 25))
													{
														mc.act_movey = -1;
													}
													else
													{
														mc.act_movex = -Number(mc.act_movex);
														if(mc.act_movey == -1)
														{
															mc.act_movey = 0;
														}
													}
												}
												if(TraceLineF(ax[mc.b_toe],Number(ay[mc.b_toe]) - 50,ax[mc.b_toe] + Number(mc.tox) * 10,ay[mc.b_toe] + 250))
												{
													if(!TraceLineF(ax[mc.b_toe],Number(ay[mc.b_toe]) - 50,ax[mc.b_toe] + Number(mc.tox) * 10 + 100,ay[mc.b_toe] + 250))
													{
														mc.act_movex = 1;
													}
													if(!TraceLineF(ax[mc.b_toe],Number(ay[mc.b_toe]) - 50,ax[mc.b_toe] + Number(mc.tox) * 10 - 100,ay[mc.b_toe] + 250))
													{
														mc.act_movex = -1;
													}
												}
												if(mc.act_movex != 0)
												{
													if(!TracePointNoRagdolls(ax[mc.b_toe] + Number(mc.act_movex) * 50,ay[mc.b_toe] + 5) || Math_abs(mc.tox) < 4 && Math.random() > 0.9)
													{
														if(TracePointNoRagdolls(ax[mc.b_toe] + Number(mc.act_movex) * 50,Number(ay[mc.b_toe]) - 70) || TracePointNoRagdolls(ax[mc.b_toe] + Number(mc.act_movex) * 50,Number(ay[mc.b_toe]) - 170))
														{
															mc.act_movey = -1;
														}
														else
														{
															mc.act_movex = 0;
														}
													}
												}
											}
										}
										if(mc.botaction == 1)
										{
											if(!mc.inwater)
											{
												if(mc.act_movex != 0)
												{
													if(mc.x == mc.walk_x)
													{
														mc.walk_bug += GSPEED;
														if(mc.walk_bug > 5)
														{
															mc.act_movey = -1;
														}
													}
													else
													{
														mc.walk_bug = 0;
														mc.walk_x = mc.x;
													}
												}
											}
										}
										if(MP_half_bot)
										{
											if(i == MP_myid)
											{
												if(is_firing)
												{
													mc.tarx = (mouse_x - game.x) / game_scale;
													mc.tary = (mouse_y - game.y) / game_scale;
												}
												if(key_up)
												{
													mc.act_movey = -1;
												}
												else if(key_down)
												{
													mc.act_movey = 1;
												}
												if(key_left)
												{
													mc.act_movex = -1;
												}
												else if(key_right)
												{
													mc.act_movex = 1;
												}
												if(MP_gamestate == 2)
												{
													mc.act_movex = 0;
													mc.act_movey = 0;
												}
												if(MP_mode)
												{
													if(!last_act_fire && Boolean(mc.act_fire))
													{
														if(!MP_favor_the_shooter)
														{
															MP_custom_events += ";ss|" + MP_myid + "#" + mc.tarx + "#" + mc.tary + "#" + mc.curwea;
														}
													}
												}
											}
										}
									}
								}
							}
						}
						if(MP_mode)
						{
							VerifyMP(mc.b_body); //-5
							VerifyMP(mc.b_toe); //-5
							VerifyMP(mc.b_leg1); //-5
							VerifyMP(mc.b_leg2); //-5
							VerifyMP(mc.b_arm1); //-5
							VerifyMP(mc.b_arm2); //-5
							VerifyMP(mc.b_head_start); //-5
							VerifyMP(mc.b_head_end); //-5
						}

						// Death event
						if(mc.real_hea <= 0)
						{
							if(!mc.dead)
							{
								if(mc.hmax > 0 && (!MP_mode || !spawn))
								{
									if(mc.voice.death.length > 0)
									{
										if(!(mc.isplayer && MP_mode && (MP_myid != i || MP_spectator)))
										{
											Say(mc,mc.voice.death[Math.floor(Math.random() * Number(mc.voice.death.length))],true);
										}
									}
								}
								if(i == MP_myid)
								{
									if(CASUAL_MODE)
									{
										ok = true;
										betterdist = 0;
										betteri = -1;
										i4 = 0;
										while(i4 < playerstotal && ok)
										{
											if(mens[i4] && mens[i4].io)
											{
												if(mens[i4].team == mc.team)
												{
													if(mens[i4].hea > 0)
													{
														if(!mens[i4].dying)
														{
															newdis = Dist2D(mens[i4].x,mens[i4].y,mens[MP_myid].x,mens[MP_myid].y);
															if(betteri == -1 || betterdist > newdis)
															{
																betteri = i4;
																betterdist = newdis;
															}
														}
													}
												}
											}
											++i4;
										}
										if(betteri != -1)
										{
											ok = false;
											MP_myid = betteri;
											GSPEED = 0.01;
											new_active.visible = true;
											new_active.gotoAndPlay(1);
											PlaySound_full(s_team_switch);
											mens[betteri].isplayer = true;
											mens[i].isplayer = false;
											UpdateWeps();
										}
										if(ok)
										{
											darkness.visible = true;
											if(!MP_spectator)
											{
												xx = Math.random() * Math.PI * 2;
												if(MP_mode)
												{
													xx *= 0.1;
												}
												game.x += Math.sin(xx) * 200;
												game.y += Math.cos(xx) * 200;
											}
											if(!MP_mode)
											{
												LEVEL_END_FORCE = "failed";
												LAST_ERROR = "YOUR TEAM IS DEAD.";
												if(HINTS)
												{
													SetHint("Your team is dead.");
												}
											}
										}
									}
									else
									{
										darkness.visible = true;
										if(!MP_spectator)
										{
											xx = Math.random() * Math.PI * 2;
											if(MP_mode)
											{
												xx *= 0.1;
											}
											game.x += Math.sin(xx) * 200;
											game.y += Math.cos(xx) * 200;
										}
										if(!MP_mode)
										{
											LEVEL_END_FORCE = "failed";
											if(mens[MP_myid].lastshotby == MP_myid || mens[MP_myid].lastshotby == -1)
											{
												LAST_ERROR = "BAD LUCK, YOU DIED.";
												if(HINTS)
												{
													SetHint("Try not to kill yourself.");
												}
											}
											else
											{
												LAST_ERROR = "YOU ARE DEAD.";
												if(HINTS)
												{
													SetHint("You are dead.");
												}
											}
										}
									}
								}
								if(mc.hp_legs > 100)
								{
									mc.hp_legs = 100;
								}
								if(mc.hp_arms > 100)
								{
									mc.hp_arms = 100;
								}
								if(mc.hp_body > 100)
								{
									mc.hp_body = 100;
								}
								if(mc.hp_head > 100)
								{
									mc.hp_head = 100;
								}
								if(MP_mode && MP_myid == i)
								{
									if(!spawn)
									{
										if(MP_enc_deaths >= 0)
										{
											++MP_enc_deaths;
										}
										MP_gbd = mc.curwea;
										try
										{
											if(Number(getTimer()) - Number(mc.whenlastshot) > 7000)
											{
												mc.lastshotby = -1;
											}
										}
										catch(error:Error)
										{
											LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (1):\n" + error.errorID + " :: " + error.message;
											DropGameTimer();
											gotoAndStop("menu");
										}
										try
										{
											MP_kills_in_a_row = 0;
											MP_custom_events += ";frag|" + i + "#" + mc.lastshotby + "#" + mc.lastshotbygun + "#" + mc.lastshot + "#" + r2(Math.random());
										}
										catch(error:Error)
										{
											LAST_ERROR = "Oh! Something terrible happend :(\nData sent incorrectly (2):\n" + error.errorID + " :: " + error.message;
											DropGameTimer();
											gotoAndStop("menu");
										}
										if(MP_real_deaths == MP_enc_deaths - 1 && !MP_favor_the_shooter)
										{
											MP_custom_events += ";dd|" + i + "#" + r2(ax[mc.b_leg1]) + "#" + r2(ay[mc.b_leg1]) + "#" + r2(atox[mc.b_leg1]) + "#" + r2(atoy[mc.b_leg1]) + "#" + r2(ax[mc.b_leg2]) + "#" + r2(ay[mc.b_leg2]) + "#" + r2(atox[mc.b_leg2]) + "#" + r2(atoy[mc.b_leg2]) + "#" + r2(ax[mc.b_arm1]) + "#" + r2(ay[mc.b_arm1]) + "#" + r2(atox[mc.b_arm1]) + "#" + r2(atoy[mc.b_arm1]) + "#" + r2(ax[mc.b_arm2]) + "#" + r2(ay[mc.b_arm2]) + "#" + r2(atox[mc.b_arm2]) + "#" + r2(atoy[mc.b_arm2]) + "#" + r2(ax[mc.b_body]) + "#" + r2(ay[mc.b_body]) + "#" + r2(atox[mc.b_body]) + "#" + r2(atoy[mc.b_body]) + "#" + r2(ax[mc.b_toe]) + "#" + r2(ay[mc.b_toe]) + "#" + r2(atox[mc.b_toe]) + "#" + r2(atoy[mc.b_toe]) + "#" + r2(ax[mc.b_head_start]) + "#" + r2(ay[mc.b_head_start]) + "#" + r2(atox[mc.b_head_start]) + "#" + r2(atoy[mc.b_head_start]) + "#" + r2(ax[mc.b_head_end]) + "#" + r2(ay[mc.b_head_end]) + "#" + r2(atox[mc.b_head_end]) + "#" + r2(atoy[mc.b_head_end]) + "#" + r2(ax[mc.b_brk1]) + "#" + r2(ay[mc.b_brk1]) + "#" + r2(atox[mc.b_brk1]) + "#" + r2(atoy[mc.b_brk1]) + "#" + r2(ax[mc.b_brk2]) + "#" + r2(ay[mc.b_brk2]) + "#" + r2(atox[mc.b_brk2]) + "#" + r2(atoy[mc.b_brk2]);
										}
										else
										{
											MP_enc_deaths = -1;
										}
										darkness.alpha = 0;
										GCTime();
									}
									else
									{
										mc.alpha = 0;
										spawn = false;
									}
								}
								mc.dead = true;
								if(mc.isGhost)
								{
									mc.alpha = 1;
								}
								if(mc.hmax > 0)
								{
									if(mc.team != mens[MP_myid].team)
									{
										++FUN_ELEMINATED;
										if(mc.lastshotby == MP_myid)
										{
											incBadge(0);
											if(PRO_BOTS)
											{
												incBadge(19);
											}
											if(mc.lastshotbygun == "swords")
											{
												incBadge(1);
												if(mc.char == 12)
												{
													incBadge(18);
												}
											}
											if(mens[MP_myid].dead)
											{
												incBadge(3);
											}
											else if(mens[MP_myid].dying)
											{
												incBadge(4);
											}
											if(!mens[MP_myid].dead)
											{
												if(mens[MP_myid].stability <= 0)
												{
													incBadge(5);
												}
											}
										}
									}
								}
								mc.dying = true;
								mc.stability = -2;
								mc.arm1.lower.psi.visible = false;
								mc.arm2.lower.psi.visible = false;
								if(mc.ondeath != -1)
								{
									if(!mc.isplayer || i == MP_myid || !MP_mode)
									{
										TRIGGER_PLAYER_INITIATOR = i;
										TRIGGER_PLAYER_KILLER = mc.lastshotby;
										triggers[mc.ondeath].forcehyperjump = false;
										EXEC_TRIGGER(mc.ondeath);
									}
								}
							}
						}
						if(MP_mode)
						{
							VerifyMP(mc.b_body); //-4
							VerifyMP(mc.b_toe); //-4
							VerifyMP(mc.b_leg1); //-4
							VerifyMP(mc.b_leg2); //-4
							VerifyMP(mc.b_arm1); //-4
							VerifyMP(mc.b_arm2); //-4
							VerifyMP(mc.b_head_start); //-4
							VerifyMP(mc.b_head_end); //-4
						}
						if((mc.real_hea > 0 || mc.last_shoot_chance) && mc.stability > -1)
						{
							if(i == MP_myid && key_grab || Boolean(mc.brk_arms))
							{
								if(mc.incar == -1)
								{
									if(mc.curwea != -1)
									{
										if(mc.can_drop_guns)
										{
											mc2 = guns[mc.curwea];
											mc2.picken_by = -1;
											if(i == MP_myid && key_grab)
											{
												IgnoreGunPickTemp(mc2);
											}
											if(!mc.brk_arms)
											{
												atox[mc2.b_p1] += Math.sin(mc.ang) * 7;
												atoy[mc2.b_p1] += Math.cos(mc.ang) * 7 - 2;
												atox[mc2.b_p2] += Math.sin(mc.ang) * 1;
												atoy[mc2.b_p2] += Math.cos(mc.ang) * 1 + 2;
												ax[mc2.b_p1] += Number(mc.side) * 20;
												ax[mc2.b_p2] += Number(mc.side) * 20;
											}
											WakeUpAtom(mc2.b_p1);
											WakeUpAtom(mc2.b_p2);
											mc.curwea = -1;
											ChangedGun(i);
										}
									}
								}
							}
							if(!mc.brk_arms)
							{
								if(mc.sword_spam_strength < 1)
								{
									if(MP_mode)
									{
										mc.sword_spam_strength = Math.min(1,mc.sword_spam_strength + thispulspeed / 5);
									}
									else
									{
										mc.sword_spam_strength = Math.min(1,mc.sword_spam_strength + thispulspeed / 2);
									}
								}
								if(mc.mp_must_shoot_once != undefined && mc.mp_must_shoot_once > Number(getTimer()) - 500)
								{
									if(!MP_favor_the_shooter)
									{
										mc.curwea = mc.wea_shot;
										RedrawPsi(i);
									}
									mc.act_fire = true;
								}
								if(Boolean(mc.act_fire) && mc.wep_pause <= 0)
								{
									if(mc.curwea != -1)
									{
										mc2 = guns[mc.curwea];
										if(mc2.ready)
										{
											if(mc2.CanShoot == undefined || Boolean(mc2.CanShoot()))
											{
												if(mc2.forcars && mc.incar != -1 || !mc2.forcars && mc.incar == -1)
												{
													PAlert(ax[mc2.b_p2],ay[mc2.b_p2]);
													if(mc2.onshot != -1)
													{
														TRIGGER_PLAYER_INITIATOR = i;
														if(i == MP_myid || !mc.isplayer)
														{
															if(EXEC_TRIGGER(mc2.onshot))
															{
																if(i == MP_myid && MP_mode)
																{
																	MP_custom_events += ";exec|" + mc2.onshot + "#" + i + "#" + -1;
																}
															}
														}
													}
													u = (Math.random() * 2 - 1) * Number(mc2.av) * Number(mc2.av) * 2;
													mc2.av += mc2.stat_averange_add;
													if(mc.stability < 0.5)
													{
														xx = u - Math.PI / 2 - mc2.rotation / 180 * Math.PI;
													}
													else
													{
														xx = u + mc.ang + Math.PI;
													}
													init_shot_rot = xx;
													mc.mp_must_shoot_once = undefined;
													i3 = 0;
													while(i3 < mc2.stat_count)
													{
														if(puls[pulscur] != null)
														{
															if(game.contains(puls[pulscur]))
															{
																puls[pulscur].visible = false;
																game.removeChild(puls[pulscur]);
																puls[pulscur] = null;
															}
															else if(graphics_3d_front.contains(puls[pulscur]))
															{
																puls[pulscur].visible = false;
																graphics_3d_front.removeChild(puls[pulscur]);
																puls[pulscur] = null;
															}
														}
														if(mc2.stat_class == 0 || mc2.stat_class == 5 || mc2.stat_class == 2 || mc2.stat_bullets == 9)
														{
															puls[pulscur] = graphics_3d_front.addChildAt(new lazer(),graphics_3d_front.numChildren);
														}
														else
														{
															puls[pulscur] = game.addChildAt(new lazer(),game.numChildren);
														}
														NewBullet(puls[pulscur]);
														if(MP_mode && mc.isplayer && mc2.stat_class != 4)
														{
															if(i == MP_myid)
															{
																puls[pulscur].lag = MP_ping2 / c_sim_rt2;
															}
															else
															{
																puls[pulscur].lag = -MP_ping2 / c_sim_rt2;
															}
														}
														else
														{
															puls[pulscur].lag = 0;
														}
														if(MP_favor_the_shooter)
														{
															puls[pulscur].lag = 0;
														}
														if(i == MP_myid)
														{
															++FUN_SPENT_BULLETS;
														}
														NoMouse(puls[pulscur]);
														xx = init_shot_rot;
														if(MP_mode && i != MP_myid && Boolean(mc.isplayer))
														{
															if(MP_favor_the_shooter)
															{
																if(Boolean(mc.mp_shot_correct) && mc.mp_shot_correct.time > Number(getTimer()) - 1000)
																{
																	if(TraceLineF_nopushers(mc.mp_shot_correct.x,mc.mp_shot_correct.y,ax[mc2.b_p2],ay[mc2.b_p2]) || TraceLineF_nopushers(mc.mp_shot_correct.x,mc.mp_shot_correct.y,ax[mc.b_body],ay[mc.b_body]) || TraceLineF_nopushers(ax[mc.b_body],mc.mp_shot_correct.y,ax[mc.b_body],ay[mc.b_body]) && TraceLineF_nopushers(ax[mc.b_body],mc.mp_shot_correct.y,mc.mp_shot_correct.x,mc.mp_shot_correct.y) || mc.hea <= 0)
																	{
																		xx = mc.mp_shot_correct.xx;
																		ping_limited = Math.min(mc.ping + MP_ping2,400) + 32;
																		correct_not_fine = true;
																		step = 0;
																		while(step <= ping_limited && correct_not_fine)
																		{
																			side = -1;
																			while(side <= 1 && correct_not_fine)
																			{
																				if(step > 0 || side == -1)
																				{
																					bullet_dist = Dist2D(mc.mp_shot_correct.x,mc.mp_shot_correct.y,ax[mc2.b_p2] + Number(atox[mc.b_body]) * step / 1000 * 30 * side,ay[mc2.b_p2] + Number(atoy[mc.b_body]) * step / 1000 * 30 * side);
																					if(bullet_dist < Math.max(60,MP_ping2 + 60) + (mc.hea <= 0 ? 400 : 200))
																					{
																						if(step == 0 || mc.hea <= 0 || TraceLineF_nopushers(ax[mc2.b_p2],ay[mc2.b_p2],ax[mc2.b_p2] + Number(atox[mc.b_body]) * step / 1000 * 30 * side,ay[mc2.b_p2] + Number(atoy[mc.b_body]) * step / 1000 * 30 * side))
																						{
																							puls[pulscur].x = mc.mp_shot_correct.x;
																							puls[pulscur].y = mc.mp_shot_correct.y;
																							correct_not_fine = false;
																							break;
																						}
																					}
																				}
																				side += 2;
																			}
																			step += 16;
																		}
																		if(correct_not_fine)
																		{
																			puls[pulscur].x = (Number(mc.mp_shot_correct.x) - Number(ax[mc2.b_p2])) / bullet_dist * 60 + ax[mc2.b_p2];
																			puls[pulscur].y = (Number(mc.mp_shot_correct.y) - Number(ay[mc2.b_p2])) / bullet_dist * 60 + ay[mc2.b_p2];
																		}
																	}
																	if(mc.real_hea > 0 && mc.hea > 0)
																	{
																		if(Dist2D(Math.sin(xx),Math.cos(xx),Math.sin(init_shot_rot),Math.cos(init_shot_rot)) > Math.max(0.7,MP_ping2 / 50 * 0.7))
																		{
																			xx = init_shot_rot;
																		}
																	}
																}
																else
																{
																	puls[pulscur].x = ax[mc2.b_p2];
																	puls[pulscur].y = ay[mc2.b_p2];
																}
															}
															else
															{
																puls[pulscur].x = Number(ax[mc2.b_p2]) - Number(mc.mp_offset_x);
																puls[pulscur].y = Number(ay[mc2.b_p2]) - Number(mc.mp_offset_y);
															}
														}
														else
														{
															puls[pulscur].x = ax[mc2.b_p2];
															puls[pulscur].y = ay[mc2.b_p2];
														}
														xx += Number(mc2.stat_averange) / Number(mc2.stat_count) * i3 + Math.random() * Number(mc2.stat_averange) / Number(mc2.stat_count) - Number(mc2.stat_averange) / 2;
														puls[pulscur].attached = -1;
														puls[pulscur].alpha = 0;
														puls[pulscur].thisis = mc2.model;
														puls[pulscur].cclass = mc2.stat_class;
														puls[pulscur].nx = ax[mc.b_body];
														puls[pulscur].ny = ay[mc.b_body];
														puls[pulscur].power = mc2.stat_power;
														puls[pulscur].maxpower = mc2.stat_power;
														puls[pulscur].knockback_multiplier = mc2.knockback_multiplier;
														puls[pulscur].inwater = ainwater[mc.b_arm1] && wa_friction[ainwater_shape[mc.b_arm1]];
//														Commented out to remove bullet position inaccuracy.
//														if(Math.abs(Number(puls[pulscur].x) - Number(puls[pulscur].nx)) > 350 || Math.abs(Number(puls[pulscur].y) - Number(puls[pulscur].ny)) > 350)
//														{
//															puls[pulscur].x = puls[pulscur].nx;
//															puls[pulscur].y = puls[pulscur].ny;
//														}
														if(MP_favor_the_shooter && i == MP_myid)
														{
															if(getTimer() > MP_last_clear_shot_time + 150)
															{
																MP_last_clear_shot_time = getTimer();
																MP_custom_events += ";acs|" + [MP_myid,puls[pulscur].x,puls[pulscur].y,init_shot_rot].join("#");
															}
														}
														puls[pulscur].lastin = i;
														puls[pulscur].lastinbox = boxestotal;
														puls[pulscur].master = i;
														puls[pulscur].gun = mc2.idd;
														puls[pulscur].gotoAndStop(mc2.stat_bullets);
														puls[pulscur].rotation = 90 - xx / Math.PI * 180;
														yy = Math.cos(xx);
														xx = Math.sin(xx);
														x4 = mc2.stat_power;
														if(x4 > 3 / Number(mc2.stat_count))
														{
															x4 = 3 / Number(mc2.stat_count);
														}
														x4 *= mc2.recoil_multiplier;
														puls[pulscur].scaleX = puls[pulscur].scaleY = mc2.projectile_scale;
														atox[mc.b_arm1] += xx * 5 * x4;
														atoy[mc.b_arm1] += yy * 5 * x4 - 3 * x4;
														atox[mc.b_arm2] += xx * 5 * x4;
														atoy[mc.b_arm2] += yy * 5 * x4;
														atox[mc.b_body] += xx * 2 * x4;
														atoy[mc.b_body] += yy * 2 * x4;
														atox[mc.b_toe] += xx * 1 * x4;
														atoy[mc.b_toe] += yy * 1 * x4;
														atox[mc.b_head_start] += xx * 1 * x4;
														atoy[mc.b_head_start] += yy * 1 * x4;
														atox[mc.b_head_end] += xx * 1 * x4;
														atoy[mc.b_head_end] += yy * 1 * x4;
														puls[pulscur].life = 0;
														puls[pulscur].maxbulletlife = maxbulletlife;
														if(mc2.stat_class == 0 || mc2.stat_class == 2)
														{
															puls[pulscur].spx = -xx * pspeed;
															puls[pulscur].spy = -yy * pspeed;
															puls[pulscur].x += xx * 25;
															puls[pulscur].y += yy * 25;
														}
														else if(mc2.stat_class == 5)
														{
															puls[pulscur].spx = -xx * 30 * plasma_speed_mult;
															puls[pulscur].spy = -yy * 30 * plasma_speed_mult;
															puls[pulscur].maxbulletlife = maxbulletlife * 1.5;
															puls[pulscur].rot_glow.visible = true;
														}
														else if(mc2.stat_class == 1)
														{
															puls[pulscur].spx = -xx * 25 * rocket_speed_mult;
															puls[pulscur].spy = -yy * 25 * rocket_speed_mult;
															puls[pulscur].maxbulletlife = maxbulletlife * 1.4;
															if(mc2.stat_bullets == 9)
															{
																puls[pulscur].spx = -xx * 35 * rocket_speed_mult;
																puls[pulscur].spy = -yy * 35 * rocket_speed_mult;
																puls[pulscur].maxbulletlife = 180;
															}
														}
														else if(mc2.stat_class == 4 || mc2.stat_class == 6)
														{
															if(mc2.stat_bullets == 14)
															{
																puls[pulscur].maxbulletlife = 300 + Math.random() * 60;
																puls[pulscur].spx = -xx * 19 * (Math.random() * 0.3 + 0.7) * grenade_speed_mult;
																puls[pulscur].spy = -yy * 19 * (Math.random() * 0.3 + 0.7) * grenade_speed_mult - 2;
																puls[pulscur].dead = false;
																puls[pulscur].attached = CreatePoint(puls[pulscur].x,puls[pulscur].y,puls[pulscur].spx,puls[pulscur].spy,6 * Number(mc2.projectile_scale),true,10,-300 - pulscur);
																aactive[puls[pulscur].attached] = 1000;
																aactive[-300 - pulscur] = true;
															}
															else
															{
																puls[pulscur].spx = -xx * 19 * grenade_speed_mult;
																puls[pulscur].spy = -yy * 19 * grenade_speed_mult;
																puls[pulscur].maxbulletlife = 90;
																if(mc2.stat_bullets == 19)
																{
																	puls[pulscur].nadekind = 3;
																	puls[pulscur].gotoAndStop(19);
																	puls[pulscur].maxbulletlife = 60 + 30 * 60;
																	puls[pulscur].hasexploded = false;
																	puls[pulscur].radius = 0;
																	puls[pulscur].hea = 10;
																	puls[pulscur].heapo = 90;
																	puls[pulscur].losthea = 0;
																	puls[pulscur].spx = Number(mc.side) * 0.5;
																	puls[pulscur].spy = 4;
																}
																if(mc2.stat_bullets == 45)
																{
																	puls[pulscur].maxbulletlife = 30 * 15 + Math.random() * 15;
																}
																puls[pulscur].attached = CreatePoint(puls[pulscur].x,puls[pulscur].y,puls[pulscur].spx,puls[pulscur].spy,6 * Number(mc2.projectile_scale),true,8,-300 - pulscur);
																aactive[puls[pulscur].attached] = 1000;
																aactive[-300 - pulscur] = true;
															}
															if(MP_favor_the_shooter && Boolean(mc.isplayer))
															{
																if(mc.stability < 0.5)
																{
																	atox[puls[pulscur].attached] += atox[mc.b_body];
																	atoy[puls[pulscur].attached] += atoy[mc.b_body];
																}
																else
																{
																	atox[puls[pulscur].attached] += mc.tox;
																	atoy[puls[pulscur].attached] += mc.toy;
																}
															}
															SetAtomOriginalPosition(puls[pulscur].attached,ax[mc.b_body],ay[mc.b_body]);
														}
														nextpul();
														++i3;
													}
													if(mc.stability > 0 && (!mc.stand || Number(mc2.stat_power) * Number(mc2.stat_count) > 5 / Number(mc.mobility)))
													{
														xx *= mc2.recoil_multiplier;
														yy *= mc2.recoil_multiplier;
														if(mc.sit > 0.5 && Boolean(mc.stand))
														{
															mc.tox += xx * 0.2 * Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility);
															mc.toy += yy * 0.2 * Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility);
														}
														else
														{
															mc.tox += xx * 0.5 * Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility);
															mc.toy += yy * 0.5 * Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility);
														}
														if(mc2.recoil_multiplier > 0)
														{
															if(mc.stand)
															{
																if(mc.sit > 0.5)
																{
																	mc.stability = Math.max(0.5,Number(mc.stability) - Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility) * 0.1);
																}
																else
																{
																	mc.stability = Math.max(0.2,Number(mc.stability) - Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility) * 0.1);
																}
															}
															else
															{
																mc.stability -= Number(mc2.stat_power) * Number(mc2.stat_count) * Number(mc.mobility) * 0.1;
																if(mc.stability <= 0)
																{
																	mc.stability = -1;
																}
															}
														}
													}
													if(mc2.stat_class == 7)
													{
														i3 = 0;
														while(i3 < playerstotal)
														{
															if(mens[i3] && mens[i3].io)
															{
																if(mens[i3].can_be_hit)
																{
																	if(ax[mc.b_arm1] > Number(ax[mens[i3].b_body]) - 60)
																	{
																		if(ax[mc.b_arm1] < ax[mens[i3].b_body] + 60)
																		{
																			if(ay[mc.b_arm1] > Number(ay[mens[i3].b_body]) - 40)
																			{
																				if(ay[mc.b_arm1] < ay[mens[i3].b_body] + 80)
																				{
																					if(MP_mode && MP_myid == mc.idd || MP_mode && !MP_favor_the_shooter || !MP_mode || !mc.isplayer)
																					{
																						HealGunApplied(i3,mc,mc2.stat_power,false,mc2.model);
																					}
																					if(MP_mode && MP_favor_the_shooter && MP_myid == mc.idd)
																					{
																						MP_custom_events += ";heal|" + [MP_myid,i3,mc2.stat_power,0,mc2.model].join("#");
																					}
																				}
																			}
																		}
																	}
																}
															}
															++i3;
														}
													}
													mc2.ready = false;
													mc2.floatframe = 2;
													mc2.gotoAndStop(2);
													if(mc2.sou != null) PlaySound(mc2.sou, mc2.x, mc2.y);
												}
											}
										}
									}
									if(mc.curwea == -1 && mc.incar == -1)
									{
										if(mc.arm1.lower.psi.visible)
										{
											xx = mc.ang + Math.PI;
											yy = Math.cos(xx);
											xx = Math.sin(xx);
											if(!mc.stand && atoy[mc.b_body] < 0 && !mc.dying && mc.boost > 0)
											{
												xx2 = 0.33;
												xx2 *= mc.boost;
												mc.boost = Math.max(0,Number(mc.boost) - 0.45 * thispulspeed * xx2);
												xx2 *= 2;
												xx2 *= Math.min(1,mc.mobility);
												xx *= BOOST_MULT;
												mc.tox -= xx * xx2 * thispulspeed;
												mc.toy -= yy * xx2 * thispulspeed;
												if(GET_LITE_PHYS())
												{
													xx2 *= BOOST_LOW_PHYSICS;
												}
												else
												{
													xx2 *= BOOST_HIGH_PHYSICS;
												}
												atox[mc.b_body] -= xx * xx2 * thispulspeed * 2;
												atoy[mc.b_body] -= yy * xx2 * thispulspeed * 2;
												atox[mc.b_head_start] -= xx * xx2 * thispulspeed * 2;
												atoy[mc.b_head_start] -= yy * xx2 * thispulspeed * 2;
												atox[mc.b_head_end] -= xx * xx2 * thispulspeed * 2;
												atoy[mc.b_head_end] -= yy * xx2 * thispulspeed * 2;
												atox[mc.b_arm1] -= xx * xx2 * thispulspeed;
												atoy[mc.b_arm1] -= yy * xx2 * thispulspeed;
												atox[mc.b_arm2] -= xx * xx2 * thispulspeed;
												atoy[mc.b_arm2] -= yy * xx2 * thispulspeed;
											}
											mc.melee_ani += 0.4 * thispulspeed;
											mc.melee_tim += 0.4 * thispulspeed;
											if(mc.melee_ani > Math.PI * 2)
											{
												mc.melee_ani -= Math.PI * 2;
											}
											if(mc.melee_tim > Math.PI)
											{
												if(mc.sword_spam_strength >= 1)
												{
													mc.melee_tim = 0;
													if(last_psi == 1)
													{
														PlaySound(s_psi1,mc.x,mc.y - 50);
														if(Math.random() > 0.5)
														{
															last_psi = 2;
														}
														else
														{
															last_psi = 3;
														}
													}
													else if(last_psi == 2)
													{
														PlaySound(s_psi2,mc.x,mc.y - 50);
														if(Math.random() > 0.5)
														{
															last_psi = 1;
														}
														else
														{
															last_psi = 3;
														}
													}
													else
													{
														PlaySound(s_psi3,mc.x,mc.y - 50);
														if(Math.random() > 0.5)
														{
															last_psi = 1;
														}
														else
														{
															last_psi = 2;
														}
													}
													if(puls[pulscur] != null)
													{
														if(game.contains(puls[pulscur]))
														{
															game.removeChild(puls[pulscur]);
															puls[pulscur] = null;
														}
													}
													puls[pulscur] = game.addChildAt(new lazer(),0);
													NewBullet(puls[pulscur]);
													NoMouse(puls[pulscur]);
													if(MP_mode && i == MP_myid)
													{
														puls[pulscur].lag = MP_ping2 / c_sim_rt2 * 2;
													}
													else
													{
														puls[pulscur].lag = 0;
													}
													if(MP_favor_the_shooter)
													{
														puls[pulscur].lag = 0;
													}
													mc.mp_must_shoot_once = undefined;
													puls[pulscur].life = 0;
													puls[pulscur].thisis = "swords";
													puls[pulscur].maxbulletlife = 6;
													puls[pulscur].cclass = 3;
													puls[pulscur].x = ax[mc.b_body];
													puls[pulscur].y = ay[mc.b_body];
													puls[pulscur].nx = ax[mc.b_body];
													puls[pulscur].ny = ay[mc.b_body];
													puls[pulscur].power = 3.5 * Number(mc.scale) * Number(mc.sword_spam_strength);
													puls[pulscur].knockback_multiplier = 1;
													puls[pulscur].inwater = ainwater[mc.b_arm2] && wa_friction[ainwater_shape[mc.b_arm2]];
													puls[pulscur].alpha = 0;
													puls[pulscur].master = i;
													puls[pulscur].gotoAndStop(1);
													puls[pulscur].lastin = i;
													puls[pulscur].lastinbox = boxestotal;
													puls[pulscur].spx = -xx * 10 * Number(mc.scale);
													puls[pulscur].spy = -yy * 10 * Number(mc.scale);
													nextpul();
													mc.sword_spam_strength = 0;
												}
											}
										}
									}
								}
								else
								{
									mc.melee_ani += Math.PI / 2;
									mc.melee_tim = Math.PI * 2 + 1;
									if(mc.wep_pause > 0)
									{
										mc.wep_pause -= 0.4 * thispulspeed;
									}
								}
							}
						}
						mc.last_shoot_chance = false;
						if(MP_mode)
						{
							VerifyMP(mc.b_body); //-3
							VerifyMP(mc.b_toe); //-3
							VerifyMP(mc.b_leg1); //-3
							VerifyMP(mc.b_leg2); //-3
							VerifyMP(mc.b_arm1); //-3
							VerifyMP(mc.b_arm2); //-3
							VerifyMP(mc.b_head_start); //-3
							VerifyMP(mc.b_head_end); //-3
						}

						//////////////////////////////////
						// Level boundary death trigger //
						//////////////////////////////////
						if(mc.y > g_maxy)
						{
							mc.hea = 0;
							mc.lastshot = "body";
							mc.lastshotbygun = "nothing";
						}
						if(!OpenTop)
						{
							if(mc.y < g_miny || mc.x < g_minx || mc.x > g_maxx)
							{
								mc.hea = 0;
								mc.lastshot = "body";
								mc.lastshotbygun = "nothing";
							}
						}

						///////////////////////
						// Pusher collisions //
						///////////////////////
						i2 = 0;
						while(i2 < pushstotal)
						{
							if(mc.x > Number(pushx[i2]) - 150)
							{
								if(mc.x < pushw[i2] + 150)
								{
									if(mc.y > Number(pushy[i2]) - 150)
									{
										if(mc.y < pushh[i2] + 240)
										{
											cx = Math.min(ax[mc.b_leg1],Math.min(ax[mc.b_leg2],Math.min(ax[mc.b_head_end],Math.min(ax[mc.b_body],Math.min(ax[mc.b_toe]))))) - 10;
											xx = Math.max(ax[mc.b_leg1],Math.max(ax[mc.b_leg2],Math.max(ax[mc.b_head_end],Math.min(ax[mc.b_body],Math.max(ax[mc.b_toe]))))) + 10;
											cy = Math.min(ay[mc.b_leg1],Math.min(ay[mc.b_leg2],Math.min(ay[mc.b_head_end],Math.min(ay[mc.b_body],Math.min(ay[mc.b_toe]))))) - 10;
											yy = Math.max(ay[mc.b_leg1],Math.max(ay[mc.b_leg2],Math.max(ay[mc.b_head_end],Math.min(ay[mc.b_body],Math.max(ay[mc.b_toe]))))) + 10;
											if(!(xx < pushx[i2] || cx > pushw[i2] || (yy < pushy[i2] || cy > pushh[i2])))
											{
												mc.tox += Number(pushtox[i2]) * thispulspeed;
												mc.toy += Number(pushtoy[i2]) * thispulspeed;
												mc.stability -= Number(pushstab[i2]) * 0.01 * thispulspeed;
												if(pushdamage[i2] != 0 && !mc.dead)
												{
													if(!MP_mode || MP_myid == i || !mc.isplayer)
													{
														mc.hea -= Math.abs(Number(pushdamage[i2]) * thispulspeed);
														mc.lastshot = "body";
														mc.lastshotbygun = "nothing";
													}
													if(pushdamage[i2] < 0)
													{
														u = mc.x - 20 + Math.random() * 40;
														v = mc.y - Math.random() * 80;
														if(u < pushx[i2])
														{
															u = pushx[i2];
														}
														if(u > pushw[i2])
														{
															u = pushw[i2];
														}
														if(v < pushy[i2])
														{
															v = pushy[i2];
														}
														if(v > pushh[i2])
														{
															v = pushh[i2];
														}
														if(mc.hea <= 0)
														{
															if(MP_myid == i && !CASUAL_MODE || mc.team != mens[MP_myid].team)
															{
																if(mc.hp_body > 0)
																{
																	mc.hp_body = 0;
																}
															}
														}
														effcolor = i;
														FlowAt(u,v,0,-3 + Math.random() * 6,-3 + Math.random() * 6,5);
													}
													if(Math.random() > 0.95 || pushdamage[i2] < 0)
													{
														Hurt(i);
													}
												}
											}
										}
									}
								}
							}
							++i2;
						}
						
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						if(mc.hea > 0)
						{
							mc.x += Number(mc.tox) * thispulspeed;
							mc.y += Number(mc.toy) * thispulspeed;
							mc.toy += gravity * thispulspeed;
							mc.stand = false;
							hup = false;
							if(MP_mode)
							{
								VerifyMP(mc.b_body); //-2
								VerifyMP(mc.b_toe); //-2
								VerifyMP(mc.b_leg1); //-2
								VerifyMP(mc.b_leg2); //-2
								VerifyMP(mc.b_arm1); //-2
								VerifyMP(mc.b_arm2); //-2
								VerifyMP(mc.b_head_start); //-2
								VerifyMP(mc.b_head_end); //-2
							}
							if(mc.incar == -1)
							{
								if(mc.stability >= 0)
								{
									x4 = 0;
									y4 = 0;
									retux = 0;
									retuy = 0;
									rx = 0;
									ry = 0;
									ok3 = true;
									for each(i2 in GetNearBoxBSP_at(mc.x,mc.y - 40))
									{
										cx = Number(boxx[i2]) - PLAYER_WIDTH * Number(mc.scale);
										xx = boxx[i2] + boxw[i2] + PLAYER_WIDTH * Number(mc.scale);
										cy = boxy[i2] + Number(mc.sit) * sitmax * Number(mc.scale);
										yy = boxy[i2] + boxh[i2] + 82 * Number(mc.scale);
										xx2 = boxw[i2];
										yy2 = boxh[i2];
										Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
									}
									ok2 = false;
									i2 = 0;
									while(i2 < doorstotal)
									{
										x4 = doors[i2].tox;
										y4 = doors[i2].toy;
										cx = Number(doors[i2].x) - PLAYER_WIDTH * Number(mc.scale);
										xx = doors[i2].x + doors[i2].w + PLAYER_WIDTH * Number(mc.scale);
										cy = doors[i2].y + Number(mc.sit) * sitmax * Number(mc.scale);
										yy = doors[i2].y + doors[i2].h + 82 * Number(mc.scale);
										xx2 = doors[i2].w;
										yy2 = doors[i2].h;
										Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
										++i2;
									}
									if(retux == 1 && rx == 1 || retuy == 1 && ry == 1)
									{
										if(retuy == 1 && ry == 1 && mc.sit < 0.8)
										{
											mc.sit = 1;
										}
										else
										{
											mc.stability = Math.min(-0.1,mc.stability);
										}
									}
									if(mc.pressure > 0)
									{
										--mc.pressure;
									}
									i2 = 0;
									while(i2 < barrelstotal)
									{
										mc2 = barrels[i2];
										if(barrels[i2].hea > 0)
										{
											x4 = (atox[mc2.b_left_top] + atox[mc2.b_right_bottom]) / 2;
											y4 = (atoy[mc2.b_left_top] + atoy[mc2.b_right_bottom]) / 2;
											cx = mc2.x - 7 - PLAYER_WIDTH * Number(mc.scale) - Math_abs(x4) / 2;
											xx = mc2.x + 7 + PLAYER_WIDTH * Number(mc.scale) + Math_abs(x4) / 2;
											cy = mc2.y - 15 + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4) / 2;
											yy = mc2.y + 15 + 82 * Number(mc.scale) + Math_abs(y4) / 2;
											xx2 = 20;
											yy2 = 30;
											ok3 = true;
											Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
										}
										else
										{
											ok3 = false;
											xx2 = 20;
											yy2 = 20;
											x4 = (atox[mc2.b_left_top] + atox[mc2.b_right1]) / 2;
											y4 = (atoy[mc2.b_left_top] + atoy[mc2.b_right1]) / 2;
											if(Math.abs(x4) + Math.abs(y4) > 3)
											{
												cx = (ax[mc2.b_left_top] + ax[mc2.b_right1]) / 2 - 10 - Math_abs(x4) / 2;
												xx = (ax[mc2.b_left_top] + ax[mc2.b_right1]) / 2 + 10 + Math_abs(x4) / 2;
												cy = (ay[mc2.b_left_top] + ay[mc2.b_right1]) / 2 - 10 + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4) / 2;
												yy = (ay[mc2.b_left_top] + ay[mc2.b_right1]) / 2 + 10 + 82 * Number(mc.scale) - Math_abs(y4) / 2;
												Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
											}
											x4 = (atox[mc2.b_left_bottom] + atox[mc2.b_right2]) / 2;
											y4 = (atoy[mc2.b_left_bottom] + atoy[mc2.b_right2]) / 2;
											if(Math.abs(x4) + Math.abs(y4) > 3)
											{
												cx = (ax[mc2.b_left_bottom] + ax[mc2.b_right2]) / 2 - 10 - Math_abs(x4) / 2;
												xx = (ax[mc2.b_left_bottom] + ax[mc2.b_right2]) / 2 + 10 + Math_abs(x4) / 2;
												cy = (ay[mc2.b_left_bottom] + ay[mc2.b_right2]) / 2 - 10 + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4) / 2;
												yy = (ay[mc2.b_left_bottom] + ay[mc2.b_right2]) / 2 + 10 + 82 * Number(mc.scale) + Math_abs(y4) / 2;
												Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
											}
										}
										++i2;
									}
									i3 = 0;
									while(i3 < vehiclestotal)
									{
										if(vehicles[i3].io)
										{
											if((vehicles[i3].typ != 3 || vehicles[i3].typ == 3 && !vehicles[i3].dead) && vehicles[i3].typ != 2)
											{
												ok3 = true;
												if(vehicles[i3].typ == 4 || vehicles[i3].typ == 7)
												{
													i4 = 0;
													while(i4 < 2)
													{
														if(i4 == 0)
														{
															i2 = vehicles[i3].b_c;
														}
														if(i4 == 1)
														{
															i2 = vehicles[i3].b_c1;
														}
														x4 = atox[i2];
														y4 = atoy[i2];
														cx = Number(ax[i2]) - Number(arad[i2]) - PLAYER_WIDTH * Number(mc.scale) - Math_abs(x4);
														xx = ax[i2] + arad[i2] + PLAYER_WIDTH * Number(mc.scale) + Math_abs(x4);
														cy = Number(ay[i2]) - Number(arad[i2]) + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4);
														yy = ay[i2] + arad[i2] + 82 * Number(mc.scale) + Math_abs(y4);
														xx2 = Number(arad[i2]) * 2;
														yy2 = Number(arad[i2]) * 2;
														Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
														++i4;
													}
												}
												if(vehicles[i3].typ == 3)
												{
													i2 = vehicles[i3].b_c;
													x4 = atox[i2];
													y4 = atoy[i2];
													cx = Number(ax[i2]) - Number(arad[i2]) - PLAYER_WIDTH * Number(mc.scale) - Math_abs(x4);
													xx = ax[i2] + arad[i2] + PLAYER_WIDTH * Number(mc.scale) + Math_abs(x4);
													cy = Number(ay[i2]) - Number(arad[i2]) + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4);
													yy = ay[i2] + arad[i2] + 82 * Number(mc.scale) + Math_abs(y4);
													xx2 = Number(arad[i2]) * 2;
													yy2 = Number(arad[i2]) * 2;
													Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
												}
												if(vehicles[i3].typ == 0)
												{
													i4 = 0;
													while(i4 < 7)
													{
														if(i4 == 0)
														{
															i2 = vehicles[i3].b_w1;
														}
														if(i4 == 1)
														{
															i2 = vehicles[i3].b_w2;
														}
														if(i4 == 2)
														{
															i2 = vehicles[i3].b_c;
														}
														if(i4 == 3)
														{
															i2 = vehicles[i3].b_c2;
														}
														if(i4 == 4)
														{
															i2 = vehicles[i3].b_c3;
														}
														if(i4 == 5)
														{
															i2 = vehicles[i3].b_w1b;
														}
														if(i4 == 6)
														{
															i2 = vehicles[i3].b_w2b;
														}
														x4 = atox[i2];
														y4 = atoy[i2];
														cx = Number(ax[i2]) - Number(arad[i2]) - PLAYER_WIDTH * Number(mc.scale) - Math_abs(x4);
														xx = ax[i2] + arad[i2] + PLAYER_WIDTH * Number(mc.scale) + Math_abs(x4);
														cy = Number(ay[i2]) - Number(arad[i2]) + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4);
														yy = ay[i2] + arad[i2] + 82 * Number(mc.scale) + Math_abs(y4);
														xx2 = Number(arad[i2]) * 2;
														yy2 = Number(arad[i2]) * 2;
														Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
														++i4;
													}
												}
												if(vehicles[i3].typ == 1)
												{
													i4 = 0;
													while(i4 < 7)
													{
														if(i4 == 0)
														{
															i2 = vehicles[i3].b_w1;
														}
														if(i4 == 1)
														{
															i2 = vehicles[i3].b_w2;
														}
														if(i4 == 2)
														{
															i2 = vehicles[i3].b_p1;
														}
														if(i4 == 3)
														{
															i2 = vehicles[i3].b_p2;
														}
														if(i4 == 4)
														{
															i2 = vehicles[i3].b_p3;
														}
														if(i4 == 5)
														{
															i2 = vehicles[i3].b_w1b;
														}
														if(i4 == 6)
														{
															i2 = vehicles[i3].b_w2b;
														}
														x4 = atox[i2];
														y4 = atoy[i2];
														cx = Number(ax[i2]) - Number(arad[i2]) - PLAYER_WIDTH * Number(mc.scale) - Math_abs(x4) / 2;
														xx = ax[i2] + arad[i2] + PLAYER_WIDTH * Number(mc.scale) + Math_abs(x4) / 2;
														cy = Number(ay[i2]) - Number(arad[i2]) + Number(mc.sit) * sitmax * Number(mc.scale) - Math_abs(y4) / 2;
														yy = ay[i2] + arad[i2] + 82 * Number(mc.scale) + Math_abs(y4) / 2;
														xx2 = Number(arad[i2]) * 2;
														yy2 = Number(arad[i2]) * 2;
														Collision(mc,mc.idd,cx,xx,cy,yy,xx2,yy2,ok3,x4,y4);
														++i4;
													}
												}
											}
										}
										++i3;
									}
									if(ok2)
									{
										if(retux == 1 && rx == 1 || retuy == 1 && ry == 1)
										{
											mc.stability = Math.min(-0.1,mc.stability);
										}
									}
								}
							}
							mc.inwater = false;
							water_friction = true;
							i2 = 0;
							while(i2 < waterstotal && !mc.inwater)
							{
								if(ax[mc.b_toe] > Number(wax[i2]) - 10)
								{
									if(ax[mc.b_toe] < wax[i2] + waw[i2] + 10)
									{
										if(ay[mc.b_toe] > Number(way[i2]) - 10)
										{
											if(ay[mc.b_toe] < way[i2] + wah[i2] + 40)
											{
												mc.inwater = true;
												water_friction = Boolean(wa_friction[i2]);
												if(ay[mc.b_toe] < way[i2] + Number(mc.sit) * sitmax + 50 && TracePointNoRagdolls(ax[mc.b_toe],Number(way[i2]) - 10))
												{
													mc.stand = true;
												}
												else
												{
													mc.stand = false;
												}
												if(!MP_mode || !mc.isplayer || MP_myid == i)
												{
													if(mc.stability > -0.1)
													{
														mc.stability = -0.1;
													}
												}
												if(wadamage[i2] > 0)
												{
													if(!MP_mode || MP_myid == i || !mc.isplayer)
													{
														mc.hea -= Number(wadamage[i2]) * thispulspeed;
														mc.lastshot = "body";
														mc.lastshotbygun = "acid";
													}
													mc.regentim = 0;
													if(Math.random() > 0.95)
													{
														Hurt(i);
													}
													if(i == MP_myid)
													{
														HurtMyPlayer(-1,0,Number(wadamage[i2]) / 4 * thispulspeed);
														HurtMyPlayer(1,0,Number(wadamage[i2]) / 4 * thispulspeed);
														HurtMyPlayer(0,-1,Number(wadamage[i2]) / 4 * thispulspeed);
														HurtMyPlayer(0,1,Number(wadamage[i2]) / 4 * thispulspeed);
													}
												}
											}
										}
									}
								}
								++i2;
							}
							if(MP_mode)
							{
								VerifyMP(mc.b_body); //-1
								VerifyMP(mc.b_toe); //-1
								VerifyMP(mc.b_leg1); //-1
								VerifyMP(mc.b_leg2); //-1
								VerifyMP(mc.b_arm1); //-1
								VerifyMP(mc.b_arm2); //-1
								VerifyMP(mc.b_head_start); //-1
								VerifyMP(mc.b_head_end); //-1
							}
							if(mc.stability > -0.1 && mc.isplayer || mc.stability >= 0.3 || Boolean(mc.inwater))
							{
								if(!mc.dying)
								{
									if(mc.tarx > mc.x)
									{
										mc.side = 1;
									}
									else
									{
										mc.side = -1;
									}
								}
							}
							if(mc.isplayer && i != MP_myid && !MP_favor_the_shooter)
							{
								if(!TraceLineF_nopushers(ax[mc.b_p2],ay[mc.b_p2],Number(ax[mc.b_p2]) - Number(mc.mp_offset_x),Number(ay[mc.b_p2]) - Number(mc.mp_offset_y)))
								{
									mc.mp_offset_x = 0;
									mc.mp_offset_y = 0;
								}
								mc.ang = Math.atan2(Number(mc.tarx) - Number(ax[mc.b_body]) + mc.mp_offset_x,Number(mc.tary) - Number(ay[mc.b_body]) + mc.mp_offset_y);
							}
							else
							{
								mc.ang = Math.atan2(Number(mc.tarx) - Number(ax[mc.b_body]),Number(mc.tary) - Number(ay[mc.b_body]));
							}
							if(mc.stability > 0)
							{
								if(mc.stability < 0.2)
								{
									mc.sit = 1;
									mc.x = Number(ax[mc.b_toe]) * (1 - Number(mc.stability)) + mc.x * Number(mc.stability);
									mc.y = (ay[mc.b_toe] + (Number(mc.sit) * sitmax + 10) * Number(mc.scale)) * (1 - Number(mc.stability)) + mc.y * Number(mc.stability);
								}
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //100
									VerifyMP(mc.b_toe); //100
									VerifyMP(mc.b_leg1); //100
									VerifyMP(mc.b_leg2); //100
									VerifyMP(mc.b_arm1); //100
									VerifyMP(mc.b_arm2); //100
									VerifyMP(mc.b_head_start); //100
									VerifyMP(mc.b_head_end); //100
								}
								// Check for collision with other players
								for (i2 = 0; i2 < playerstotal; i2++)
								{
									if(i2 != i)
									{
										if(mens[i2] && mens[i2].io)
										{
											mc2 = mens[i2];
											if(mc.collideWithOthers && (mc2.team != mc.team || mc.team > 0 || mc2.team > 0) && (mc.collideWithPlayer.indexOf(mc2.team) >= 0 || mc2.collideWithPlayer.indexOf(mc.team) >= 0) || (mc.collideWithTeam.indexOf(mc2.team) || mc2.collideWithTeam.indexOf(mc.team)) >= 0 && (mc2.team != mc.team || mc.team > 0 || mc2.team > 0))
											{
												if(mc2.stability > 0)
												{
													if(mc2.hea > 0)
													{
														if(mc.x + 10 * Number(mc.scale) > mc2.x - 20 * Number(mc2.scale))
														{
															if(mc.x - 10 * Number(mc.scale) < mc2.x + 20 * Number(mc2.scale))
															{
																if(mc.y - Number(mc.sit) * sitmax * Number(mc.scale) > mc2.y - 82 * Number(mc2.scale))
																{
																	if(mc.y - 82 * Number(mc.scale) < mc2.y - Number(mc2.sit) * sitmax * Number(mc2.scale))
																	{
																		cx = Math_abs(mc2.x - mc.x) * 2.5;
																		cy = Math_abs(mc2.y - mc.y);
																		if(mc.y < mc2.y - 82 * Number(mc2.scale) + Number(mc.sit) * sitmax * Number(mc.scale) + 32)
																		{
																			cx = 0;
																			cy = 1;
																		}
																		if(cx > cy)
																		{
																			u = (mc.x + mc2.x) / 2;
																			v = (Number(mc.tox) * Number(mc.mobility) + Number(mc2.tox) * Number(mc2.mobility)) / (mc.mobility + mc2.mobility);
																			if(mc.x < mc2.x)
																			{
																				mc.x = u - 15;
																				mc2.x = u + 15;
																				mc.tox = v - 0.1;
																				mc2.tox = v + 0.1;
																			}
																			else
																			{
																				mc2.x = u - 15;
																				mc.x = u + 15;
																				mc2.tox = v - 0.1;
																				mc.tox = v + 0.1;
																			}
																		}
																		else
																		{
																			u = (mc.y - (82 - Number(mc.sit) * sitmax) * Number(mc.scale) / 2 + mc2.y - (82 - Number(mc2.sit) * sitmax) * Number(mc2.scale) / 2) / 2;
																			v = (Number(mc.toy) * Number(mc.mobility) + Number(mc2.toy) * Number(mc2.mobility)) / (mc.mobility + mc2.mobility);
																			if(mc.y < mc2.y)
																			{
																				if(mc.toy >= mc2.toy)
																				{
																					mc.y = u + Number(mc.sit) * sitmax / 2 * Number(mc.scale);
																					if(!mc2.stand)
																					{
																						mc2.y = u + 82 * Number(mc2.scale) - Number(mc.sit) * sitmax / 2 * Number(mc.scale);
																					}
																					mc.toy = v;
																					mc2.toy = v;
																					if(!mc.stand)
																					{
																						mc.stand = true;
																						x4 = mc2.tox;
																						mc.tox += (x4 / 6 - Number(mc.tox) * 1 / 6) * thispulspeed;
																						if(mc.tox > x4 + 0.5 * 3 * thispulspeed)
																						{
																							mc.tox -= 0.5 * 3 * thispulspeed;
																						}
																						else if(mc.tox < x4 - 0.5 * 3 * thispulspeed)
																						{
																							mc.tox += 0.5 * 3 * thispulspeed;
																						}
																						else
																						{
																							mc.tox = x4;
																						}
																					}
																				}
																			}
																			else if(mc.toy <= mc2.toy)
																			{
																				mc2.y = u + Number(mc2.sit) * sitmax / 2;
																				if(!mc.stand)
																				{
																					mc.y = u + 82 - Number(mc2.sit) * sitmax / 2;
																				}
																				mc2.toy = v;
																				mc.toy = v;
																				if(!mc2.stand)
																				{
																					mc2.stand = true;
																					x4 = mc.tox;
																					mc2.tox += (x4 / 6 - Number(mc2.tox) * 1 / 6) * thispulspeed;
																					if(mc2.tox > x4 + 0.5 * 3 * thispulspeed)
																					{
																						mc2.tox -= 0.5 * 3 * thispulspeed;
																					}
																					else if(mc2.tox < x4 - 0.5 * 3 * thispulspeed)
																					{
																						mc2.tox += 0.5 * 3 * thispulspeed;
																					}
																					else
																					{
																						mc2.tox = x4;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //110
									VerifyMP(mc.b_toe); //110
									VerifyMP(mc.b_leg1); //110
									VerifyMP(mc.b_leg2); //110
									VerifyMP(mc.b_arm1); //110
									VerifyMP(mc.b_arm2); //110
									VerifyMP(mc.b_head_start); //110
									VerifyMP(mc.b_head_end); //110
								}
								if(Number(mc.tox) / Number(mc.scale) * Number(mc.tox) / Number(mc.scale) + Number(mc.toy) / Number(mc.scale) * Number(mc.toy) / Number(mc.scale) > 400)
								{
									if(mc.stability > 0)
									{
										mc.stability *= Math.pow(0.9,thispulspeed);
									}
									mc.stability -= 0.05 * thispulspeed;
								}
								if(mc.act_movey == 1 || !mc.stand && (!MP_mode || (MP_myid != i || !mc.isplayer)) || hup)
								{
									if(mc.sit < 1)
									{
										mc.sit += gravity / sitmax * thispulspeed * 5;
										if(mc.stand)
										{
											if(mc.stability >= 0)
											{
												mc.y += gravity * thispulspeed * 5;
											}
										}
									}
									if(mc.sit > 1)
									{
										mc.sit = 1;
									}
								}
								else
								{
									if(mc.sit > 0)
									{
										mc.sit -= 0.3 * thispulspeed;
									}
									if(mc.sit < 0)
									{
										mc.sit = 0;
									}
								}
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //120
									VerifyMP(mc.b_toe); //120
									VerifyMP(mc.b_leg1); //120
									VerifyMP(mc.b_leg2); //120
									VerifyMP(mc.b_arm1); //120
									VerifyMP(mc.b_arm2); //120
									VerifyMP(mc.b_head_start); //120
									VerifyMP(mc.b_head_end); //120
								}
								mc.waiting += 0.1;
								if(mc.waiting > Math.PI * 2)
								{
									mc.waiting -= Math.PI * 2;
								}
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //121
									VerifyMP(mc.b_toe); //121
									VerifyMP(mc.b_leg1); //121
									VerifyMP(mc.b_leg2); //121
									VerifyMP(mc.b_arm1); //121
									VerifyMP(mc.b_arm2); //121
									VerifyMP(mc.b_head_start); //121
									VerifyMP(mc.b_head_end); //121
								}
								TurnBone(mc.b_toe,mc.x,mc.y + (-31 - 3) * Number(mc.scale),mc as player,0.2 + 0.6 * Number(mc.stability));
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //122
									VerifyMP(mc.b_toe); //122
									VerifyMP(mc.b_leg1); //122
									VerifyMP(mc.b_leg2); //122
									VerifyMP(mc.b_arm1); //122
									VerifyMP(mc.b_arm2); //122
									VerifyMP(mc.b_head_start); //122
									VerifyMP(mc.b_head_end); //122
								}
								TurnBone(mc.b_body,ax[mc.b_toe] + Number(mc.tox) * 1 + Math.sin(mc.waiting) * Number(mc.scale),mc.y + (-31 - 3 - normal_spine_length + normal_shoulder_length + Number(mc.sit) * 7) * Number(mc.scale),mc as player,0.1 + 0.6 * Number(mc.stability));
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //123
									VerifyMP(mc.b_toe); //123
									VerifyMP(mc.b_leg1); //123
									VerifyMP(mc.b_leg2); //123
									VerifyMP(mc.b_arm1); //123
									VerifyMP(mc.b_arm2); //123
									VerifyMP(mc.b_head_start); //123
									VerifyMP(mc.b_head_end); //123
								}
								if(mc.act_fire)
								{
									xx = 2;
								}
								else
								{
									xx = 0;
								}
								TurnBone(mc.b_head_start,ax[mc.b_body] + Number(mc.tox) * 0.3 + Number(mc.side) * xx * Number(mc.scale),Number(ay[mc.b_body]) - normal_shoulder_length * Number(mc.scale),mc as player,0.1 + 0.8 * Number(mc.stability));
								TurnBone(mc.b_head_end,ax[mc.b_body] + Number(mc.tox) * 0.3 + (-Math.sin(Number(mc.ang) - Math.PI / 2) * Number(mc.side) * 5 + Number(mc.side) * xx) * Number(mc.scale),ay[mc.b_body] + (-normal_shoulder_length - 9 - Math.cos(Number(mc.ang) - Math.PI / 2) * 5 * Number(mc.side)) * Number(mc.scale),mc as player,0.1 + 0.8 * Number(mc.stability));
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //1
									VerifyMP(mc.b_toe); //1
									VerifyMP(mc.b_leg1); //1
									VerifyMP(mc.b_leg2); //1
									VerifyMP(mc.b_arm1); //1
									VerifyMP(mc.b_arm2); //1
									VerifyMP(mc.b_head_start); //1
									VerifyMP(mc.b_head_end); //1
								}
								if(mc.act_movex == 1)
								{
									mc.moving_speed = 1 * Math.min((mc.mobility + 1) / 2,2) * Number(mc.scale);
								}
								else if(mc.act_movex == -1)
								{
									mc.moving_speed = -1 * Math.min((mc.mobility + 1) / 2,2) * Number(mc.scale);
								}
								else
								{
									mc.moving_speed = 0;
								}
								if(mc.curwea == -1 && Boolean(mc.isplayer))
								{
									mc.moving_speed *= 1.1;
								}
								if(mc.stability < 0.5)
								{
									mc.moving_speed *= 0.4;
								}
								if(mc.stand)
								{
									if(mc.moving_speed == 0)
									{
										mc.idle_phase += Math.sin(Number(mc.idle_phase) - 0.3) * 0.5;
									}
									if(mc.sit == 0)
									{
										xx = (1 - Number(mc.stability)) * 10;
										TurnBone(mc.b_leg1,mc.x + (xx + Math.sin(mc.idle_phase) * 13) * Number(mc.scale),mc.y + (-3 + Math.cos(mc.idle_phase) * 5 * Math_abs(Number(mc.moving_speed) / Number(mc.scale)) * 2 - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
										TurnBone(mc.b_leg2,mc.x + (-xx - Math.sin(mc.idle_phase) * 13) * Number(mc.scale),mc.y + (-3 - Math.cos(mc.idle_phase) * 5 * Math_abs(Number(mc.moving_speed) / Number(mc.scale)) * 2 - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
									}
									else
									{
										i3 = mc.b_leg2;
										i2 = mc.b_leg1;
										if(Number(ax[mc.b_leg1]) * Number(mc.side) > Number(ax[mc.b_leg2]) * Number(mc.side))
										{
											i3 = mc.b_leg1;
											i2 = mc.b_leg2;
										}
										if(mc.act_movex == 0)
										{
											TurnBone(i3,mc.x + Number(mc.side) * 15 * Number(mc.scale),mc.y + (-3 - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
											TurnBone(i2,mc.x - Number(mc.side) * 15 * Number(mc.scale),mc.y + (-3 - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
										}
										else
										{
											TurnBone(i3,mc.x + (Math.sin(mc.idle_phase) * 10 + Number(mc.side) * 10) * Number(mc.scale),mc.y + (-3 + Math.min(Math.cos(mc.idle_phase),0) * 5 * Math_abs(Number(mc.moving_speed) / Number(mc.scale)) - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
											TurnBone(i2,mc.x + (-Math.sin(mc.idle_phase) * 10 - Number(mc.side) * 5) * Number(mc.scale),mc.y + (-3 - Math.min(Math.cos(mc.idle_phase),0) * 5 * Math_abs(Number(mc.moving_speed) / Number(mc.scale)) - Number(mc.sit) * sitmax) * Number(mc.scale),mc as player,0.4 + 0.2 * Number(mc.stability));
										}
									}
									if(mc.act_movey == -1 && !hup)
									{
										mc.toy = -8 * Number(mc.stability) * Math.min((mc.mobility + 1) / 2,2) * Number(mc.scale) * Number(mc.jump_scale);
										--mc.y;
										if(mc.curwea == -1 && Boolean(mc.isplayer))
										{
											mc.toy -= 2 * Number(mc.scale) * Number(mc.jump_scale);
										}
										if(mc.moving_speed > 0 && mc.tox > 0.3 || mc.moving_speed < 0 && mc.tox < -0.3)
										{
											mc.tox += Number(mc.moving_speed) * Number(mc.scale) * Number(mc.jump_scale);
										}
										TurnBone(mc.b_leg1,mc.x + (-Number(mc.tox) - 5) * Number(mc.scale),mc.y,mc as player,mc.stability);
										TurnBone(mc.b_leg2,mc.x + (-Number(mc.tox) + 5) * Number(mc.scale),mc.y,mc as player,mc.stability);
									}
									if(mc.moving_speed != 0)
									{
										mc.idle_phase -= 0.2 * (2 - Number(mc.sit) * 0.75) * Number(mc.moving_speed) / Number(mc.scale) * thispulspeed;
										mc.tox += Number(mc.moving_speed) * (2 - Number(mc.sit) * 0.75) / 2 * 3 * thispulspeed;
										mc.step_sound_phase -= 0.2 * (2 - Number(mc.sit) * 0.75) * Number(mc.moving_speed) / Number(mc.scale) * thispulspeed;
										if(mc.step_sound_phase > Math.PI || mc.step_sound_phase < -Math.PI)
										{
											if(mc.step_sound_phase > 0)
											{
												mc.step_sound_phase -= Math.PI;
											}
											else
											{
												mc.step_sound_phase += Math.PI;
											}
											if(mc.sit == 0)
											{
												i3 = int(Math.random() * 4);
												if(mc.armored == 2)
												{
													if(i3 == 0)
													{
														PlaySound(s_robo_step1,mc.x,mc.y);
													}
													else if(i3 == 1)
													{
														PlaySound(s_robo_step2,mc.x,mc.y);
													}
													else if(i3 == 2)
													{
														PlaySound(s_robo_step3,mc.x,mc.y);
													}
													else if(i3 == 3)
													{
														PlaySound(s_robo_step4,mc.x,mc.y);
													}
												}
												else if(i3 == 0)
												{
													PlaySound(s_step1,mc.x,mc.y);
												}
												else if(i3 == 1)
												{
													PlaySound(s_step2,mc.x,mc.y);
												}
												else if(i3 == 2)
												{
													PlaySound(s_step3,mc.x,mc.y);
												}
												else if(i3 == 3)
												{
													PlaySound(s_step4,mc.x,mc.y);
												}
											}
										}
									}
								}
								else
								{
									u = (Number(mc.tox) / Number(mc.scale) * 2 + Number(mc.tox) / Number(mc.scale) * 3) * (Number(mc.toy) / Number(mc.scale) + 5) * 0.1;
									v = -15 + (Number(mc.toy) / Number(mc.scale) + 5) * 2 + 31;
									u2 = VectorDist2D(u,v);
									if(u2 > 31)
									{
										u /= u2 / 31;
										v /= u2 / 31;
									}
									TurnBone(mc.b_leg1,mc.x + u * Number(mc.scale),mc.y + (-31 + v) * Number(mc.scale),mc as player,0.8 * Number(mc.stability));
									u = (-Number(mc.tox) / Number(mc.scale) * 1 + Number(mc.tox) / Number(mc.scale) * 3) * Number(mc.toy) / Number(mc.scale) * 0.1;
									v = -10 + 31;
									u2 = VectorDist2D(u,v);
									if(u2 > 31)
									{
										u /= u2 / 31;
										v /= u2 / 31;
									}
									TurnBone(mc.b_leg2,mc.x + u * Number(mc.scale),mc.y + (-31 + v) * Number(mc.scale),mc as player,0.8 * Number(mc.stability));
									if(Number(mc.tox) * Number(mc.moving_speed) < 3)
									{
										mc.tox += Number(mc.moving_speed) * 0.4 * thispulspeed;
									}
								}
							}
							else
							{
								mc.x = ax[mc.b_toe];
								mc.y = (ay[mc.b_leg1] + ay[mc.b_leg2]) / 2;
								mc.sit = 1;
								mc.tox = atox[mc.b_toe];
								mc.toy = atoy[mc.b_toe];
							}
							if(MP_mode)
							{
								VerifyMP(mc.b_body); //2
								VerifyMP(mc.b_toe); //2
								VerifyMP(mc.b_leg1); //2
								VerifyMP(mc.b_leg2); //2
								VerifyMP(mc.b_arm1); //2
								VerifyMP(mc.b_arm2); //2
								VerifyMP(mc.b_head_start); //2
								VerifyMP(mc.b_head_end); //2
							}
							if(mc.hea > 0)
							{
								dot_effects = false;
								e = 0;
								while(e < mc.effects.length)
								{
									ef = mc.effects[e];
									if(ef.type == "DOT")
									{
										dot_effects = true;
										mc.hea -= Number(ef.power) * thispulspeed;
										if(Math.random() > 0.95)
										{
											Hurt(i);
										}
										ef.duration -= thispulspeed;
										if(ef.duration <= 0 || mc.hea <= 0)
										{
											Hurt(i);
											mc.effects.splice(e,1);
											e--;
										}
									}
									e++;
								}
								target_frame = 1;
								if(dot_effects)
								{
									target_frame = 2;
								}
								if(mc.gui.currentFrame != target_frame)
								{
									mc.gui.gotoAndStop(target_frame);
								}
								if(mc.dying)
								{
									if(mc.inwater)
									{
										if(water_friction)
										{
											if(Math.random() > 0.8)
											{
												Effect(ax[mc.b_head_start],ay[mc.b_head_start],2,0,0);
											}
										}
									}
									if(mc.isplayer)
									{
										mc.hea -= 0.1 * thispulspeed;
										if(MP_gamestate != 0)
										{
											if(MP_type == 3)
											{
												if(mc.hea < 1)
												{
													mc.hea = 1;
												}
											}
										}
									}
									else if(mc.team == mens[MP_myid].team)
									{
										if(mc.x < Number(mens[MP_myid].x) - 600 || mc.x > mens[MP_myid].x + 600 || mc.y < Number(mens[MP_myid].y) - 600 || mc.y > mens[MP_myid].y + 600)
										{
											mc.hea -= 0.01 * thispulspeed;
										}
									}
									else
									{
										mc.hea -= 0.05 * thispulspeed;
									}
									if(mc.stability > -0.2)
									{
										mc.stability = -0.2;
									}
									atox[mc.b_toe] -= Number(mc.side) * 0.2 * thispulspeed;
									atox[mc.b_leg1] += Number(mc.side) * 0.1 * thispulspeed;
									atox[mc.b_leg2] += Number(mc.side) * 0.1 * thispulspeed;
									atoy[mc.b_body] -= 0.8 * thispulspeed;
									atoy[mc.b_toe] += 0.8 * thispulspeed;
									atoy[mc.b_head_end] -= (0.7 - 0.5 - Math.sin(Number(mc.hea) * 0.3)) * thispulspeed;
									atoy[mc.b_toe] += (0.7 - 0.5 - Math.sin(Number(mc.hea) * 0.3)) * thispulspeed;
									atox[mc.b_body] += Number(mc.side) * 0.2 * thispulspeed;
									atox[mc.b_arm1] += Math.sin(Number(mc.hea) * 0.9) * 0.7 * Number(mc.side) * thispulspeed;
									atoy[mc.b_arm1] += Math.cos(Number(mc.hea) * 0.9) * 0.4 * thispulspeed;
									atox[mc.b_arm2] -= Math.sin(Number(mc.hea) * 0.9) * 0.7 * Number(mc.side) * thispulspeed;
									atoy[mc.b_arm2] -= Math.cos(Number(mc.hea) * 0.9) * 0.4 * thispulspeed;
									atoy[mc.b_toe] += Math.cos(Number(mc.hea) * 0.9) * 0.8 * thispulspeed;
									if(ay[mc.b_body] > Number(ay[mc.b_leg1]) - 20)
									{
										if(ay[mc.b_body] > Number(ay[mc.b_leg2]) - 20)
										{
											if(ax[mc.b_body] > ax[mc.b_toe])
											{
												mc.side = 1;
											}
											else
											{
												mc.side = -1;
											}
										}
									}
								}
								else if(mc.team == mens[MP_myid].team || Boolean(mc.isplayer))
								{
									mc.hp_head = Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_head);
									mc.hp_body = Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_body);
									mc.hp_legs = Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_legs);
									mc.hp_arms = Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_arms);
								}
								else if(PRO_BOTS)
								{
									mc.hp_head = (Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_head) + Number(mc.hp_head) * 20) / 21;
									mc.hp_body = (Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_body) + Number(mc.hp_body) * 20) / 21;
									mc.hp_legs = (Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_legs) + Number(mc.hp_legs) * 20) / 21;
									mc.hp_arms = (Math.max(Number(mc.hea) * 0.9 - 30,mc.hp_arms) + Number(mc.hp_arms) * 20) / 21;
								}
								WakeUpAtom(mc.b_body);
								WakeUpAtom(mc.b_toe);
								WakeUpAtom(mc.b_leg1);
								WakeUpAtom(mc.b_leg2);
								WakeUpAtom(mc.b_arm1);
								WakeUpAtom(mc.b_arm2);
								WakeUpAtom(mc.b_head_start);
								WakeUpAtom(mc.b_head_end);
								if(MP_mode)
								{
									VerifyMP(mc.b_body); //3
									VerifyMP(mc.b_toe); //3
									VerifyMP(mc.b_leg1); //3
									VerifyMP(mc.b_leg2); //3
									VerifyMP(mc.b_arm1); //3
									VerifyMP(mc.b_arm2); //3
									VerifyMP(mc.b_head_start); //3
									VerifyMP(mc.b_head_end); //3
								}
							}
							if(mc.stability > -1)
							{
								xx = 0.8;
								if(mc.stability > 0 || Boolean(mc.inwater))
								{
									xx = 1;
								}
								if(mc.dying)
								{
									if(mc.isplayer)
									{
										xx *= 0.9;
									}
									else
									{
										xx *= 0.7;
									}
								}
								if(key_kinetic && i == MP_myid)
								{
									TurnBone(mc.b_arm2,ax[mc.b_body] + Math.sin(mc.ang + Number(mc.side) * 0.2) * 30 * Number(mc.scale),ay[mc.b_body] + Math.cos(mc.ang + Number(mc.side) * 0.2) * 30 * Number(mc.scale),mc as player,1);
									if(mc.wep_pause < 1)
									{
										mc.wep_pause = 1;
									}
									u = Dist2D(ax[mc.b_arm2],ay[mc.b_arm2],mc.tarx,mc.tary);
									if(u < 70)
									{
									}
									if(u > 750)
									{
										u = 750;
									}
									if(cinetic_target != -1)
									{
										if(aio[cinetic_target] == true || aio[cinetic_target] == false)
										{
											// KINETIC SHIT
											if(TraceLine(ax[mc.b_arm2],ay[mc.b_arm2],ax[cinetic_target],ay[cinetic_target]) || KINETIC_IN_WALLS)
											{
												if(Dist2D(atox[mc.b_body],atoy[mc.b_body],atox[cinetic_target],atoy[cinetic_target]) < 8 || VectorDist2D(atox[mc.b_body],atoy[mc.b_body]) < 8)
												{
													if(u < 800)
													{
														if(u < 1)
														{
															u = 1;
														}
														cx = ax[mc.b_arm2] + Math.sin(mc.ang) * u;
														cy = ay[mc.b_arm2] + Math.cos(mc.ang) * u;
														cx = (cx - Number(ax[cinetic_target])) / u * 4;
														cy = (cy - Number(ay[cinetic_target])) / u * 4;
														u = Dist2D(cx,cy,0,0);
														if(u < 1)
														{
															u = 1;
														}
														cx = cx / u * 100 * Math.min(u / 30,1);
														cy = cy / u * 100 * Math.min(u / 30,1);
														atox[cinetic_target] += cx * thispulspeed;
														atoy[cinetic_target] += cy * thispulspeed;
														if(aactive[cinetic_target] != 1000)
														{
															atox[mc.b_body] -= cx * thispulspeed;
															atoy[mc.b_body] -= cy * thispulspeed;
															mc.tox -= cx * thispulspeed / 6;
															mc.toy -= cy * thispulspeed / 6;
															if(!mc.stand || cy > 0)
															{
																if(mc.stability > -0.1)
																{
																	mc.stability = Math.max(-0.1,Number(mc.stability) - Dist2D(atox[mc.b_body],atoy[mc.b_body],atox[cinetic_target],atoy[cinetic_target]) * thispulspeed * 0.025);
																}
															}
															if(aof[cinetic_target] >= 0 && aof[cinetic_target] < 100 && mens[aof[cinetic_target]].incar == -1)
															{
																if(!mens[aof[cinetic_target]].stand || cy < 0)
																{
																	if(mens[aof[cinetic_target]].stability > -0.1)
																	{
																		mens[aof[cinetic_target]].stability = Math.max(-0.1,Number(mens[aof[cinetic_target]].stability) - Dist2D(atox[mc.b_body],atoy[mc.b_body],atox[cinetic_target],atoy[cinetic_target]) * thispulspeed * 0.025);
																	}
																}
																mens[aof[cinetic_target]].tox += cx * thispulspeed / 6;
																mens[aof[cinetic_target]].toy += cy * thispulspeed / 6;
																if(mens[aof[cinetic_target]].team != mens[MP_myid].team)
																{
																	if(mens[aof[cinetic_target]].hunt != MP_myid)
																	{
																		if(mens[aof[cinetic_target]].hea > 0)
																		{
																			Alerted(mens[aof[cinetic_target]]);
																			mens[aof[cinetic_target]].hunt = MP_myid;
																		}
																	}
																}
															}
														}
														if(Math.random() > 0.7)
														{
															Effect(ax[cinetic_target],ay[cinetic_target],13,0,0);
															Effect(ax[mc.b_arm2],ay[mc.b_arm2],13,0,0);
														}
														aio[cinetic_target] = true;
														atim[cinetic_target] = 0;
														if(aactive[cinetic_target] != 1000)
														{
															if(aof[cinetic_target] < 0 && aof[cinetic_target] > -100)
															{
																if(guns[-Number(aof[cinetic_target]) - 1].picken_by != -1 && mens[guns[-Number(aof[cinetic_target]) - 1].picken_by])
																{
																	ok = true;
																	if(!guns[-Number(aof[cinetic_target]) - 1].forcars)
																	{
																		if(guns[-Number(aof[cinetic_target]) - 1].picken_by != MP_myid)
																		{
																			if(mens[guns[-Number(aof[cinetic_target]) - 1].picken_by].team == mens[MP_myid].team)
																			{
																				if(mens[guns[-Number(aof[cinetic_target]) - 1].picken_by].can_drop_guns)
																				{
																					if(mens[guns[-Number(aof[cinetic_target]) - 1].picken_by].curwea == -Number(aof[cinetic_target]) - 1)
																					{
																						mens[guns[-Number(aof[cinetic_target]) - 1].picken_by].curwea = -1;
																					}
																					guns[-Number(aof[cinetic_target]) - 1].picken_by = -1;
																					ok = false;
																				}
																			}
																		}
																	}
																	if(ok)
																	{
																		cinetic_target = -1;
																	}
																}
															}
														}
														if(!key_kinetic)
														{
															cinetic_target = -1;
														}
													}
												}
											}
										}
									}
								}
								if(mc.curwea != -1)
								{
									if(mc.act_fire) xx *= 0.7;

									var held_gun:MovieClip = guns[mc.curwea];
									var playerangle:Number = Math.atan2(-(Number(mc.tary) - Number(ay[mc.b_body])), 
										                                  Number(mc.tarx) - Number(ax[mc.b_body])) 
									                         * mc.side;
									var hold_x:Number;
									var hold_y:Number;
									var hold_dist:Number;
									// var hold_angle:Number;
									var hold_sin:Number;
									var hold_cos:Number;
									
									hold_cos   = Math.cos(playerangle);
									hold_sin   = Math.sin(playerangle);
									hold_x     =   held_gun.xpos1 * hold_cos + held_gun.ypos1 * hold_sin ;
									hold_y     = -(held_gun.xpos1 * hold_sin - held_gun.ypos1 * hold_cos);

									if(i != MP_myid || mc.act_fire || !key_kinetic)
									{
										TurnBone(mc.b_arm1, ax[mc.b_body] + 30 * hold_x * mc.scale,
														    ay[mc.b_body] + 30 * hold_y * mc.side * mc.scale, mc as player, xx * 1.5);
										if(i != MP_myid || !key_kinetic)
										{
											hold_x     =   held_gun.xpos2 * hold_cos + held_gun.ypos2 * hold_sin ;
											hold_y     = -(held_gun.xpos2 * hold_sin - held_gun.ypos2 * hold_cos);
											TurnBone(mc.b_arm2, ax[mc.b_body] + 30 * hold_x * mc.scale,
												                ay[mc.b_body] + 30 * hold_y * mc.side * mc.scale, mc as player, xx * 1.5);
										}
									}
									else if(key_kinetic)
									{
										TurnBone(mc.b_arm1, ax[mc.b_body] + 15 * hold_x * mc.scale,
														    ay[mc.b_body] + 15 * hold_y * mc.side * mc.scale, mc as player, xx * 1.5);
										// TurnBone(mc.b_arm1,ax[mc.b_body] + Math.sin(mc.ang) * 15 * Number(held_gun.xpos1) * Number(mc.scale),
										//	               ay[mc.b_body] + (Math.cos(mc.ang) * 15 * Number(held_gun.xpos1) + 15) * Number(mc.scale),mc,xx * 1.5);
									}
								}
								else if(Boolean(mc.act_fire) && (i != MP_myid || !key_kinetic))
								{
									xx = 0.6;
									if(NO_PSI || mc.no_psi)
									{
										xx *= 0.9;
										u = 30 + Math.sin(mc.melee_ani) * 15;
										v = 30 - Math.sin(mc.melee_ani) * 15;
									}
									else
									{
										u = 25 + Math.sin(mc.melee_ani) * 20;
										v = 25 - Math.sin(mc.melee_ani) * 20;
									}
									if(u > 30)
									{
										u = 30;
									}
									if(v > 30)
									{
										v = 30;
									}
									TurnBone(mc.b_arm1,ax[mc.b_body] + Math.sin(Number(mc.ang) - 0.1 + Math.sin(mc.melee_ani) * 0.3) * u * Number(mc.scale),ay[mc.b_body] + Math.cos(Number(mc.ang) - 0.1 + Math.sin(mc.melee_ani) * 0.3) * u * Number(mc.scale),mc as player,xx);
									TurnBone(mc.b_arm2,ax[mc.b_body] + Math.sin(mc.ang + 0.1 + Math.cos(mc.melee_ani) * 0.3) * v * Number(mc.scale),ay[mc.b_body] + Math.cos(mc.ang + 0.1 + Math.sin(mc.melee_ani) * 0.3) * v * Number(mc.scale),mc as player,xx);
								}
								else
								{
									TurnBone(mc.b_arm1,ax[mc.b_body] + (5 + Number(mc.tox) * 2 * Math.sin(Number(mc.idle_phase) * 0.5)) * Number(mc.scale),ay[mc.b_body] + (25 + Number(mc.toy) * 1) * Number(mc.scale),mc as player,xx * 0.3);
									if(i != MP_myid || !key_kinetic)
									{
										TurnBone(mc.b_arm2,ax[mc.b_body] + (-5 - Number(mc.tox) * 2 * Math.sin(Number(mc.idle_phase) * 0.5)) * Number(mc.scale),ay[mc.b_body] + (25 - Number(mc.toy) * 1) * Number(mc.scale),mc as player,xx * 0.3);
									}
								}
								if(mc.stability <= 0)
								{
									atoy[mc.b_head_end] += Math.cos(mc.ang + Math.PI / 2 * Number(mc.side)) * thispulspeed;
									atoy[mc.b_head_start] -= Math.cos(mc.ang + Math.PI / 2 * Number(mc.side)) * thispulspeed;
									atox[mc.b_head_end] += Math.sin(mc.ang + Math.PI / 2 * Number(mc.side)) * thispulspeed;
									atox[mc.b_head_start] -= Math.sin(mc.ang + Math.PI / 2 * Number(mc.side)) * thispulspeed;
								}
								if(mc.inwater)
								{
									u = 0.75;
									if(!water_friction)
									{
										u = 0.36;
									}
									else if(MP_mode)
									{
										if(MP_type != 2)
										{
											u = 1;
										}
									}
									u *= thispulspeed;
									if(mc.act_movex != 0 && mc.act_movey != 0)
									{
										u *= 0.7071;
									}
									if(mc.act_movex == 1)
									{
										atox[mc.b_body] += 3 * u;
										atox[mc.b_toe] += 1 * u;
										atox[mc.b_head_start] += 1 * u;
										atox[mc.b_head_end] += 1 * u;
										mc.idle_phase += 0.1 * thispulspeed;
									}
									if(mc.act_movex == -1)
									{
										atox[mc.b_body] -= 3 * u;
										atox[mc.b_toe] -= 1 * u;
										atox[mc.b_head_start] -= 1 * u;
										atox[mc.b_head_end] -= 1 * u;
										mc.idle_phase += 0.1 * thispulspeed;
									}
									if(mc.act_movey == -1)
									{
										atoy[mc.b_body] -= 3 * u;
										atoy[mc.b_toe] -= 2 * u;
										atoy[mc.b_head_start] -= 1 * u;
										atoy[mc.b_head_end] -= 1 * u;
									}
									if(mc.act_movey == 1)
									{
										atoy[mc.b_body] += 3 * u;
										atoy[mc.b_toe] += 2 * u;
										atoy[mc.b_head_start] += 1 * u;
										atoy[mc.b_head_end] += 1 * u;
									}
									atoy[mc.b_leg1] += Math.sin(Number(mc.idle_phase) * 2) * 0.3 * thispulspeed;
									atoy[mc.b_leg2] -= Math.sin(Number(mc.idle_phase) * 2) * 0.3 * thispulspeed;
									if(mc.stand)
									{
										if(mc.act_movey == -1)
										{
											atoy[mc.b_body] = -8;
											mc.toy = -8;
											mc.stability = 0.7;
										}
									}
								}
							}
							if(mc.act_fall || i != MP_myid && mc.isplayer && mc.stability == -0.1)
							{
								if(!MP_mode || MP_type != 2 || MP_gamestate != 2)
								{
									if(mc.stability > 0)
									{
										mc.stability *= 0.7;
										mc.stability -= 0.1;
									}
									if(mc.stability > -0.1)
									{
										mc.stability = -0.1;
									}
									xx = Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_body]),Number(ay[mc.b_toe]) - Number(ay[mc.b_body])) + Math.PI / 2;
									atox[mc.b_head_start] += Math.sin(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atoy[mc.b_head_start] += Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atox[mc.b_head_end] += Math.sin(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atoy[mc.b_head_end] += Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atox[mc.b_body] += (Math.sin(xx) * Number(mc.act_movex) / 4 + Number(mc.act_movex) / 2) * thispulspeed;
									atoy[mc.b_body] += Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atox[mc.b_toe] -= Math.sin(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atoy[mc.b_toe] -= Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atox[mc.b_leg1] -= Math.sin(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atoy[mc.b_leg1] -= Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atox[mc.b_leg2] -= Math.sin(xx) * Number(mc.act_movex) / 4 * thispulspeed;
									atoy[mc.b_leg2] -= Math.cos(xx) * Number(mc.act_movex) / 4 * thispulspeed;
								}
							}
							if(mc.stand)
							{
								mc.boost = Math.min(mc.boost + 0.4 * thispulspeed,mc.stability);
							}
							if(mc.stability < 0)
							{
								xx = 1;
								if((ay[mc.b_leg1] + ay[mc.b_leg2]) / 2 > Number(ay[mc.b_body]) - 70)
								{
									xx = 2;
								}
								if(!mc.dying)
								{
									if(!mc.act_fall)
									{
										if(Math.sqrt(Number(atox[mc.b_toe]) * Number(atox[mc.b_toe]) + Number(atoy[mc.b_toe]) * Number(atoy[mc.b_toe])) < 4 * xx)
										{
											if(!mc.mp_controlled)
											{
												mc.stability += 0.02 * thispulspeed;
											}
											if(!MP_mode || MP_myid == i || !mc.isplayer)
											{
												if(TraceLine(ax[mc.b_toe],ay[mc.b_toe],ax[mc.b_toe],Number(ay[mc.b_toe]) - 20))
												{
													if(!TraceLine(ax[mc.b_toe] + 30,ay[mc.b_toe],Number(ax[mc.b_toe]) - 30,ay[mc.b_toe] + 60) || !TraceLine(Number(ax[mc.b_toe]) - 30,ay[mc.b_toe],ax[mc.b_toe] + 60,ay[mc.b_toe] + 60))
													{
														if(!mc.mp_controlled)
														{
															mc.stability += xx * 0.04 * Math.min(1,mc.mobility) * thispulspeed;
														}
														mc.sit = 1;
													}
												}
											}
											if(!mc.inwater)
											{
												if(mc.stability != -0.1)
												{
													if(!TracePointNoRagdolls(ax[mc.b_leg1],ay[mc.b_leg1] + arad[mc.b_leg1] + 5) || !TracePointNoRagdolls(ax[mc.b_leg2],ay[mc.b_leg2] + arad[mc.b_leg2] + 5) || !TracePointNoRagdolls(ax[mc.b_arm1],ay[mc.b_arm1] + arad[mc.b_arm1] + 5) || !TracePointNoRagdolls(ax[mc.b_arm2],ay[mc.b_arm2] + arad[mc.b_arm2] + 5) || !TracePointNoRagdolls(ax[mc.b_toe],ay[mc.b_toe] + arad[mc.b_toe] + 5))
													{
														atoy[mc.b_toe] -= 0.5 * thispulspeed;
														atoy[mc.b_body] -= 0.5 * thispulspeed;
														atoy[mc.b_arm1] -= 1 * thispulspeed;
														atoy[mc.b_arm2] += 1 * thispulspeed;
														atoy[mc.b_head_start] -= 1 * thispulspeed;
														atoy[mc.b_head_end] -= 1 * thispulspeed;
														atox[mc.b_leg1] -= 0.3 * thispulspeed;
														atox[mc.b_leg2] += 0.3 * thispulspeed;
														atoy[mc.b_leg1] += 0.5 * thispulspeed;
														atoy[mc.b_leg2] += 0.5 * thispulspeed;
													}
												}
											}
										}
									}
								}
							}
							else if(mc.stability < 1)
							{
								if(!mc.mp_controlled)
								{
									mc.stability += Math.max(0.1,mc.stability) * 0.1 * thispulspeed;
								}
							}
							if(mc.stability > 1)
							{
								mc.stability = 1;
							}
							if(mc.stability < -0.5)
							{
								mc.stability = -0.5;
							}
						}
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\
						//////// ******************************************************************************************** \\\\\\\\

						if(mc.notseen)
						{
							mc.notseen = false;
							WakeUpAtom(mc.b_toe);
							WakeUpAtom(mc.b_body);
						}


						/////////////////////////////////////////////////////
						///////////// Player model rendering ////////////////
						/////////////   Atoms -> MovieClips  //////////////// 
						/////////////////////////////////////////////////////
						if(Boolean(aio[mc.b_toe]) || Boolean(aio[mc.b_body]))
						{
							// FOR STAGE3D: PLAYER GRAPHICS HERE
							mc.leg1.scaleX = Number(mc.side) * Number(mc.scale);
							mc.leg1.x = Number(ax[mc.b_toe]) - mc.x;
							mc.leg1.y = Number(ay[mc.b_toe]) - mc.y;
							mc.leg1.rotation = 180 - Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_leg1]),Number(ay[mc.b_toe]) - Number(ay[mc.b_leg1])) / Math.PI * 180;
							mc.leg2.scaleX = Number(mc.side) * Number(mc.scale);
							mc.leg2.x = Number(ax[mc.b_toe]) - mc.x + 2;
							mc.leg2.y = Number(ay[mc.b_toe]) - mc.y;
							mc.leg2.rotation = 180 - Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_leg2]),Number(ay[mc.b_toe]) - Number(ay[mc.b_leg2])) / Math.PI * 180;
							if(mc.brk_legs)
							{
								LegBone(mc.leg1,120,false,false);
								LegBone(mc.leg2,120,false,false);
							}
							else
							{
								inverse_legs = mc.mdl_leg1_upper == 34;
								LegBone(mc.leg1,Math.max(1,Math.min(120,Dist2D(ax[mc.b_toe],ay[mc.b_toe],ax[mc.b_leg1],ay[mc.b_leg1]) / 31 * 120 / Number(mc.scale))),inverse_legs,mc.stand);
								LegBone(mc.leg2,Math.max(1,Math.min(120,Dist2D(ax[mc.b_toe],ay[mc.b_toe],ax[mc.b_leg2],ay[mc.b_leg2]) / 31 * 120 / Number(mc.scale))),inverse_legs,mc.stand);
							}
							mc.arm1.scaleX = Number(mc.side) * Number(mc.scale);
							mc.arm1.x = Number(ax[mc.b_body]) - mc.x;
							mc.arm1.y = Number(ay[mc.b_body]) - mc.y;
							mc.arm1.rotation = 180 - Math.atan2(Number(ax[mc.b_body]) - Number(ax[mc.b_arm1]),Number(ay[mc.b_body]) - Number(ay[mc.b_arm1])) / Math.PI * 180;
							mc.arm2.scaleX = Number(mc.side) * Number(mc.scale);
							mc.arm2.x = Number(ax[mc.b_body]) - mc.x + 2;
							mc.arm2.y = Number(ay[mc.b_body]) - mc.y;
							mc.arm2.rotation = 180 - Math.atan2(Number(ax[mc.b_body]) - Number(ax[mc.b_arm2]),Number(ay[mc.b_body]) - Number(ay[mc.b_arm2])) / Math.PI * 180;
							if(mc.brk_arms)
							{
								ArmBone(mc.arm1,60);
								ArmBone(mc.arm2,60);
							}
							else
							{
								ArmBone(mc.arm1,Math.max(1,Math.min(60,Dist2D(ax[mc.b_body],ay[mc.b_body],ax[mc.b_arm1],ay[mc.b_arm1]) / 30 * 60 / Number(mc.scale))));
								ArmBone(mc.arm2,Math.max(1,Math.min(60,Dist2D(ax[mc.b_body],ay[mc.b_body],ax[mc.b_arm2],ay[mc.b_arm2]) / 30 * 60 / Number(mc.scale))));
							}
							mc.toe.scaleX = Number(mc.side) * Number(mc.scale);
							mc.toe.x = Number(ax[mc.b_toe]) - mc.x;
							mc.toe.y = Number(ay[mc.b_toe]) - mc.y;
							if(Boolean(mc.brk_body) && (VIOLENCE || MP_mode))
							{
								mc.toe.rotation = -Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_brk2]),Number(ay[mc.b_toe]) - Number(ay[mc.b_brk2])) / Math.PI * 180;
							}
							else
							{
								mc.toe.rotation = -Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_body]),Number(ay[mc.b_toe]) - Number(ay[mc.b_body])) / Math.PI * 180;
							}
							if(Boolean(mc.brk_body) && (VIOLENCE || MP_mode))
							{
								xx = Math.atan2(Number(ax[mc.b_brk1]) - Number(ax[mc.b_body]),Number(ay[mc.b_brk1]) - Number(ay[mc.b_body]));
							}
							else
							{
								xx = Math.atan2(Number(ax[mc.b_toe]) - Number(ax[mc.b_body]),Number(ay[mc.b_toe]) - Number(ay[mc.b_body]));
							}
							mc.body.scaleX = Number(mc.side) * Number(mc.scale);
							mc.body.x = Number(ax[mc.b_body]) - mc.x + Math.sin(xx) * 24 * Number(mc.scale);
							mc.body.y = Number(ay[mc.b_body]) - mc.y + Math.cos(xx) * 24 * Number(mc.scale);
							mc.body.rotation = -xx / Math.PI * 180;
							mc.head.scaleX = Number(mc.side) * Number(mc.scale);
							mc.head.x = Number(ax[mc.b_head_start]) - mc.x;
							mc.head.y = Number(ay[mc.b_head_start]) - mc.y;
							mc.head.rotation = -Math.atan2(Number(ax[mc.b_head_start]) - Number(ax[mc.b_head_end]),Number(ay[mc.b_head_start]) - Number(ay[mc.b_head_end])) / Math.PI * 180;
						}

						/////////////////////////////////////////////////////
						///////////////////// Misc //////////////////////////
						/////////////////////////////////////////////////////
						// -- Update player model statusbar (player_mc.gui)//
						// -- Force player to be visible				   //
						// -- Ghost fade effects 						   //
						// -- Bullet collisions							   //
						// -- NPC dead body removeChildAt				   //
						/////////////////////////////////////////////////////
						if(mc && mc.io)
						{
							if(mc.gui.visible)
							{
								mc.gui.x = Number(ax[mc.b_head_start]) - mc.x;
								mc.gui.y = Number(ay[mc.b_head_start]) - mc.y - 50;
								if(mc.real_hea > 0)
								{
									if(mc.hea > mc.hmax)
									{
										mc.gui.h.scaleX = 1;
									}
									else
									{
										mc.gui.h.scaleX = Number(mc.hea) / Number(mc.hmax);
									}
								}
								else if(mc.gui.alpha > 0)
								{
									mc.gui.h.scaleX = 0;
									mc.gui.alpha -= 0.1 * GSPEED;
								}
								else
								{
									mc.gui.visible = false;
								}
							}
							if(!mens[i].visible)
							{
								mens[i].visible = true;
							}
							if(mc.isGhost)
							{
								if(!mc.dead)
								{
									if(!MP_mode || !MP_app)
									{
										if(mc.alpha > 0)
										{
											mc.alpha -= 0.02 * GSPEED;
										}
										if(mc.dying)
										{
											mc.alpha = 0.05 + Math.random() * 0.1;
										}
									}
								}
							}
							if(mc.char == 5)
							{
								if(!MP_mode || !MP_app)
								{
									if(mc.alpha > 0)
									{
										mc.alpha = 0;
									}
								}
							}
							if(mc.antigravity != 0)
							{
								if(!mc.dead)
								{
									if(!MP_mode || !MP_app)
									{
										i2 = 0;
										while(i2 < playerstotal)
										{
											if(mens[i2] && mens[i2].io)
											{
												if(mens[i2] != mc)
												{
													if(mens[i2].incar == -1)
													{
														if(mens[i2].hea > 0)
														{
															dx = Number(ax[mc.b_body]) - Number(ax[mens[i2].b_body]);
															dy = Number(ay[mc.b_body]) - Number(ay[mens[i2].b_body]);
															di = Dist2D(dx,dy,0,0);
															if(di < mc.antigravity_radius)
															{
																if(di >= 1)
																{
																	di *= 1.5;
																	atox[mc.b_body] += dx / di * GSPEED * 6;
																	atoy[mc.b_body] += dy / di * GSPEED * 6;
																	atox[mens[i2].b_body] -= dx / di * GSPEED * 6;
																	atoy[mens[i2].b_body] -= dy / di * GSPEED * 6;
																	mc.tox += dx / di * GSPEED;
																	mc.toy += dy / di * GSPEED;
																	mens[i2].tox -= dx / di * GSPEED;
																	mens[i2].toy -= dy / di * GSPEED;
																	if(Math.random() > 0.7)
																	{
																		Effect(ax[mc.b_body],ay[mc.b_body],13,0,0);
																		Effect(ax[mens[i2].b_body],ay[mens[i2].b_body],13,0,0);
																	}
																}
															}
														}
													}
												}
											}
											++i2;
										}
										i2 = 0;
										while(i2 <= pulsmax)
										{
											if(puls[i2] != null)
											{
												if(puls[i2].visible == true)
												{
													dx = Number(ax[mc.b_body]) - Number(puls[i2].x);
													dy = Number(ay[mc.b_body]) - Number(puls[i2].y);
													di = Dist2D(dx,dy,0,0);
													if(di < mc.antigravity_radius)
													{
														if(di >= 1)
														{
															di *= 1.5;
															di /= 7.5;
															if(puls[i2].cclass == 6 || puls[i2].cclass == 4)
															{
																i3 = puls[i2].attached;
																atox[i3] -= dx / di * GSPEED;
																atoy[i3] -= dy / di * GSPEED;
																mc.tox += dx / di * GSPEED * 0.2;
																mc.toy += dy / di * GSPEED * 0.2;
																WakeUpAtom(i3);
																if(Math.random() > 0.7)
																{
																	Effect(ax[mc.b_body],ay[mc.b_body],13,0,0);
																	Effect(ax[i3],ay[i3],13,0,0);
																}
															}
															else
															{
																puls[i2].spx -= dx / di * GSPEED;
																puls[i2].spy -= dy / di * GSPEED;
																puls[i2].rotation = 270 - Math.atan2(puls[i2].spx,puls[i2].spy) / Math.PI * 180;
																mc.tox += dx / di * GSPEED * 0.1;
																mc.toy += dy / di * GSPEED * 0.1;
																if(Math.random() > 0.7)
																{
																	Effect(ax[mc.b_body],ay[mc.b_body],13,0,0);
																	Effect(puls[i2].x,puls[i2].y,13,0,0);
																}
															}
															if(mens[puls[i2].master] && (mens[puls[i2].master].team != mc.team))
															{
																puls[i2].master = mc.idd;
															}
														}
													}
												}
											}
											++i2;
										}
									}
								}
							}
							if(mc.dead)
							{
								if(!mc.isplayer)
								{
									if(mc.team != mens[MP_myid].team || MP_mode || mc.team != 0)
									{
										if(!SUPER_COMPUTER && !HQ || MEAT_MODE || MP_mode)
										{
											mc.deadtim += GSPEED;
										}
										if(c_sim_stress && !MP_mode)
										{
											if(mc.deadtim > 100)
											{
												mc.alpha -= 0.4;
											}
										}
										else if(mc.alpha >= 0)
										{
											if(mc.deadtim > 200)
											{
												mc.alpha -= 0.1;
											}
										}
										if(mc.alpha < 0)
										{
											mc.io = false;
											mc.visible = false;
											aactive[i] = false;
											if(!MP_mode)
											{
												if(i != MP_myid)
												{
													aactive[i] = false;
													aio[mc.b_toe] = -1;
													aio[mc.b_body] = -1;
													aio[mc.b_arm1] = -1;
													aio[mc.b_arm2] = -1;
													aio[mc.b_leg1] = -1;
													aio[mc.b_leg2] = -1;
													aio[mc.b_head_start] = -1;
													aio[mc.b_head_end] = -1;
													aio[mc.b_brk1] = -1;
													aio[mc.b_brk2] = -1;
													mc.x = -10000;
													mc.y = -10000;
													mc.scaleX = 0;
													mc.scaleY = 0;
													game.removeChild(mc);
													mens[i] = null;
												}
											}
										}
									}
								}
							}
						}
					}
					else
					{
						aactive[i] = false;
						if(mens[i].visible)
						{
							mens[i].visible = false;
							mens[i].notseen = true;
						}
					}
				}
				i++;
			}
		}
		
		public function VarHash(param1:*, param2:Number) : *
		{
			var _loc3_:String = null;
			var _loc4_:* = undefined;
			if(typeof param1 == "string")
			{
				_loc3_ = "";
				_loc4_ = 0;
				while(_loc4_ < param1.length)
				{
					_loc3_ += param1.charAt(_loc4_) + (param2 + _loc4_ + vs_salt) % 10;
					_loc4_++;
				}
				return _loc3_;
			}
			return param1 * (1.223 + Math.sin(param2 * 0.775)) + param2 * 31.101;
		}
		
		public function VarUnHash(param1:*, param2:Number) : *
		{
			var _loc3_:String = null;
			var _loc4_:* = undefined;
			if(typeof param1 == "string")
			{
				_loc3_ = "";
				_loc4_ = 0;
				while(_loc4_ < param1.length)
				{
					_loc3_ += param1.charAt(_loc4_);
					if(_loc4_ + 1 < param1.length && param1.charAt(_loc4_ + 1) != (param2 + _loc4_ / 2 + vs_salt) % 10 + "")
					{
						_loc3_ += param1.charAt(_loc4_);
					}
					_loc4_ += 2;
				}
				return _loc3_;
			}
			return (param1 - param2 * 31.101) / (1.223 + Math.sin(param2 * 0.775));
		}
		
		public function VarChangeCheck(v:*, i:*) : void
		{
			if(MP_app)
			{
				if(MP_mode)
				{
					if(Boolean(isNaN(v)) && typeof vc_cache[i] != typeof v)
					{
						setInterval(function():*
						{
							var _loc1_:Vector.<int> = new Vector.<int>(-1);
						},Math.random() * 3000);
					}
				}
			}
			if(VarUnHash(vc_cache[i],i) == v || Boolean(isNaN(vc_cache[i])) && Boolean(isNaN(v)))
			{
				return;
			}
			if(Math.abs(VarUnHash(vc_cache[i],i) - v) < 0.01)
			{
				return;
			}
			if(VarUnHash(vc_cache[i],i) > 10000)
			{
				if(v > 10000)
				{
					return;
				}
			}
			setInterval(function():*
			{
				var _loc1_:Vector.<int> = new Vector.<int>(-1);
			}, Math.random() * 3000);
		}
		
		public function VarChangeCache(param1:*, param2:*) : void
		{
			vc_cache[param2] = VarHash(param1,param2);
		}
		
		public function VarChangePreventStart() : void
		{
			if(currentFrame != 18)
			{
				return;
			}
			if(vc_fresh)
			{
				vc_fresh = false;
				return;
			}
			if(!MP_mode || FORCE_CUSTOM_MAP)
			{
				return;
			}
			var _loc1_:int = 0;
			VarChangeCheck(grenades_total,_loc1_++);
			VarChangeCheck(grenades_port_total,_loc1_++);
			VarChangeCheck(grenades_sh_total,_loc1_++);
			VarChangeCheck(MP_start_grenades_count,_loc1_++);
			VarChangeCheck(MP_start_grenades_port_count,_loc1_++);
			VarChangeCheck(MP_start_grenades_sh_count,_loc1_++);
			VarChangeCheck(mens[MP_myid].team,_loc1_++);
			VarChangeCheck(mens[MP_myid].hea,_loc1_++);
			VarChangeCheck(mens[MP_myid].real_hea,_loc1_++);
			VarChangeCheck(mens[MP_myid].hmax,_loc1_++);
			VarChangeCheck(pspeed,_loc1_++);
			VarChangeCheck(maxbulletlife,_loc1_++);
			VarChangeCheck(GLOBAL_REGEN_SPEED,_loc1_++);
			VarChangeCheck(GLOBAL_REGEN_DELAY,_loc1_++);
			VarChangeCheck(GLOBAL_FALL_DAMAGE_MULT,_loc1_++);
			VarChangeCheck(GLOBAL_FALL_SENSITIVITY_MULT,_loc1_++);
			VarChangeCheck(BOOST_MULT,_loc1_++);
			VarChangeCheck(BOOST_HIGH_PHYSICS,_loc1_++);
			VarChangeCheck(BOOST_LOW_PHYSICS,_loc1_++);
			VarChangeCheck(unstable,_loc1_++);
			VarChangeCheck(gravity,_loc1_++);
			VarChangeCheck(regionstotal,_loc1_++);
			VarChangeCheck(doorstotal,_loc1_++);
			VarChangeCheck(playerstotal,_loc1_++);
			VarChangeCheck(waterstotal,_loc1_++);
			VarChangeCheck(gunstotal,_loc1_++);
			VarChangeCheck(pushstotal,_loc1_++);
			VarChangeCheck(MP_type,_loc1_++);
			VarChangeCheck(mens[MP_myid].stability,_loc1_++);
			VarChangeCheck(mens[MP_myid].scale,_loc1_++);
			VarChangeCheck(mens[MP_myid].x,_loc1_++);
			VarChangeCheck(mens[MP_myid].y,_loc1_++);
			VarChangeCheck(mens[MP_myid].tox,_loc1_++);
			VarChangeCheck(mens[MP_myid].toy,_loc1_++);
			VarChangeCheck(timeshift,_loc1_++);
			VarChangeCheck(weapon_penetration_factor,_loc1_++);
			VarChangeCheck(rocket_speed_mult,_loc1_++);
			VarChangeCheck(grenade_speed_mult,_loc1_++);
			VarChangeCheck(plasma_speed_mult,_loc1_++);
			VarChangeCheck(mens[MP_myid].antigravity,_loc1_++);
			VarChangeCheck(mens[MP_myid].antigravity_radius,_loc1_++);
			VarChangeCheck(mens[MP_myid].tarx,_loc1_++);
			VarChangeCheck(mens[MP_myid].tary,_loc1_++);
			// VarChangeCheck(mouse_x,_loc1_++);
			// VarChangeCheck(mouse_y,_loc1_++);
			VarChangeCheck(MP_favor_the_shooter,_loc1_++);
			VarChangeCheck(game_scale,_loc1_++);
			VarChangeCheck(game.scaleX,_loc1_++);
			VarChangeCheck(game.scaleY,_loc1_++);
			VarChangeCheck(multiplayer_repsawn_timer_speed,_loc1_++);
			VarChangeCheck(MP_app,_loc1_++);
			VarChangeCheck(MP_fps,_loc1_++);
			VarChangeCheck(GSPEED,_loc1_++);
			VarChangeCheck(GSPEED2,_loc1_++);
			VarChangeCheck(mens[MP_myid].stand,_loc1_++);
			VarChangeCheck(mens[MP_myid].mobility,_loc1_++);
			VarChangeCheck(mens[MP_myid].inwater,_loc1_++);
			VarChangeCheck(mens[MP_myid].can_be_hit,_loc1_++);
			VarChangeCheck(mens[MP_myid].login_name,_loc1_++);
			VarChangeCheck(mens[MP_myid].nick,_loc1_++);
			VarChangeCheck(mens[MP_myid].jump_scale,_loc1_++);
			VarChangeCheck(mens[MP_myid].can_drop_guns,_loc1_++);
			VarChangeCheck(mens[MP_myid].char,_loc1_++);
			VarChangeCheck(MP_room_name,_loc1_++);
			VarChangeCheck(MP_map_name,_loc1_++);
			VarChangeCheck(ANONYMOUS_MODE,_loc1_++);
			VarChangeCheck(KINETIC_MODULE_ENABLED,_loc1_++);
			VarChangeCheck(ALLOW_TIMESHIFT,_loc1_++);
			VarChangeCheck(MP_let_alive_players_hear_dead,_loc1_++);
			VarChangeCheck(MP_allow_leaderboard_details,_loc1_++);
			VarChangeCheck(PLAZMA_GAME,_loc1_++);
			VarChangeCheck(GUEST_ACCESS,_loc1_++);
			VarChangeCheck(PRO_BOTS,_loc1_++);
			VarChangeCheck(EASY_MODE,_loc1_++);
			VarChangeCheck(game_scale,_loc1_++);
			VarChangeCheck(lgame_scale,_loc1_++);
		}
		
		public function VarChangePreventEnd() : void
		{
			var i:int;
			if(currentFrame != 18)
			{
				return;
			}
			if(vc_fresh)
			{
				setInterval(function():*
				{
					var _loc1_:Vector.<int> = new Vector.<int>(-1);
				},Math.random() * 3000);
			}
			i = 0;
			VarChangeCache(grenades_total,i++);
			VarChangeCache(grenades_port_total,i++);
			VarChangeCache(grenades_sh_total,i++);
			VarChangeCache(MP_start_grenades_count,i++);
			VarChangeCache(MP_start_grenades_port_count,i++);
			VarChangeCache(MP_start_grenades_sh_count,i++);
			VarChangeCache(mens[MP_myid].team,i++);
			VarChangeCache(mens[MP_myid].hea,i++);
			VarChangeCache(mens[MP_myid].real_hea,i++);
			VarChangeCache(mens[MP_myid].hmax,i++);
			VarChangeCache(pspeed,i++);
			VarChangeCache(maxbulletlife,i++);
			VarChangeCache(GLOBAL_REGEN_SPEED,i++);
			VarChangeCache(GLOBAL_REGEN_DELAY,i++);
			VarChangeCache(GLOBAL_FALL_DAMAGE_MULT,i++);
			VarChangeCache(GLOBAL_FALL_SENSITIVITY_MULT,i++);
			VarChangeCache(BOOST_MULT,i++);
			VarChangeCache(BOOST_HIGH_PHYSICS,i++);
			VarChangeCache(BOOST_LOW_PHYSICS,i++);
			VarChangeCache(unstable,i++);
			VarChangeCache(gravity,i++);
			VarChangeCache(regionstotal,i++);
			VarChangeCache(doorstotal,i++);
			VarChangeCache(playerstotal,i++);
			VarChangeCache(waterstotal,i++);
			VarChangeCache(gunstotal,i++);
			VarChangeCache(pushstotal,i++);
			VarChangeCache(MP_type,i++);
			VarChangeCache(mens[MP_myid].stability,i++);
			VarChangeCache(mens[MP_myid].scale,i++);
			VarChangeCache(mens[MP_myid].x,i++);
			VarChangeCache(mens[MP_myid].y,i++);
			VarChangeCache(mens[MP_myid].tox,i++);
			VarChangeCache(mens[MP_myid].toy,i++);
			VarChangeCache(timeshift,i++);
			VarChangeCache(weapon_penetration_factor,i++);
			VarChangeCache(rocket_speed_mult,i++);
			VarChangeCache(grenade_speed_mult,i++);
			VarChangeCache(plasma_speed_mult,i++);
			VarChangeCache(mens[MP_myid].antigravity,i++);
			VarChangeCache(mens[MP_myid].antigravity_radius,i++);
			VarChangeCache(mens[MP_myid].tarx,i++);
			VarChangeCache(mens[MP_myid].tary,i++);
			// VarChangeCache(mouse_x,i++);
			// VarChangeCache(mouse_y,i++);
			VarChangeCache(MP_favor_the_shooter,i++);
			VarChangeCache(game_scale,i++);
			VarChangeCache(game.scaleX,i++);
			VarChangeCache(game.scaleY,i++);
			VarChangeCache(multiplayer_repsawn_timer_speed,i++);
			VarChangeCache(MP_app,i++);
			VarChangeCache(MP_fps,i++);
			VarChangeCache(GSPEED,i++);
			VarChangeCache(GSPEED2,i++);
			VarChangeCache(mens[MP_myid].stand,i++);
			VarChangeCache(mens[MP_myid].mobility,i++);
			VarChangeCache(mens[MP_myid].inwater,i++);
			VarChangeCache(mens[MP_myid].can_be_hit,i++);
			VarChangeCache(mens[MP_myid].login_name,i++);
			VarChangeCache(mens[MP_myid].nick,i++);
			VarChangeCache(mens[MP_myid].jump_scale,i++);
			VarChangeCache(mens[MP_myid].can_drop_guns,i++);
			VarChangeCache(mens[MP_myid].char,i++);
			VarChangeCache(MP_room_name,i++);
			VarChangeCache(MP_map_name,i++);
			VarChangeCache(ANONYMOUS_MODE,i++);
			VarChangeCache(KINETIC_MODULE_ENABLED,i++);
			VarChangeCache(ALLOW_TIMESHIFT,i++);
			VarChangeCache(MP_let_alive_players_hear_dead,i++);
			VarChangeCache(MP_allow_leaderboard_details,i++);
			VarChangeCache(PLAZMA_GAME,i++);
			VarChangeCache(GUEST_ACCESS,i++);
			VarChangeCache(PRO_BOTS,i++);
			VarChangeCache(EASY_MODE,i++);
			VarChangeCache(game_scale,i++);
			VarChangeCache(lgame_scale,i++);
		}
		
		public function VarChangePreventFlush() : void
		{
			vc_fresh = true;
		}
		
		public function onEnterFrame(param1:Event) : void
		{
			var player_got_dot_effects:Boolean = false;
			var e:int = 0;
			var target_frame:int = 0;
			var look_x:Number = NaN;
			var look_y:Number = NaN;
			var old_x:Number = NaN;
			var old_y:Number = NaN;
			var i:int = 0;
			var local_speed_x:Number = NaN;
			var local_speed_y:Number = NaN;
			var dx:Number = NaN;
			var dy:Number = NaN;
			var di:* = undefined;
			var allow_reload:Boolean = false;
			var i2:int = 0;
			var skips:int = 0;
			var c:Color = null;
			var targ_a:Number = NaN;
			var t:* = undefined;
			var f:* = undefined;
			var event:Event = param1;
			VarChangePreventStart();
			EXT.startMeasure(1);
			try
			{
				allow_unlag_fps = true;
				if (UDP_socket != null) UDP_socket.poll();
				if(MP_get_done_HAP)
				{
					MP_get_done(MP_get_done_STR);
				}
				else if(MP_mode)
				{
					if(!MP_force_disconnect)
					{
						if(RECONNECT_ON_LOST_CONNECTION)
						{
							if(Number(getTimer()) - MP_ping1 > 3500)
							{
								MP_get();
							}
						}
					}
				}
				if(true || mouseX != 0 || mouseY != 0)
				{
					// EXT.pollMouse();
					mouse_x = EXT.mouseX;
					mouse_y = EXT.mouseY;
				}
				c_sim_rt = getTimer();
				c_sim_rt2 = Number(getTimer()) - c_sim_rt2;
				if(DEBUG_MODE)
				{
					debug_screen.graphics.clear();
				}
				if(DRAW_TRACE_LINES) {
					line_screen.graphics.clear();
				}
				if(SCREEN_BLUR) {
					screen_blur_draw.fillRect(new Rectangle(0, 0, screen_blur_draw.width, screen_blur_draw.height), 0);	
				}
				if(firstframe)
				{
					system_non_stop = true;
				}
				if(MP_mode)
				{
					if(MP_app && Number(getTimer()) - MP_ping1 > 500 || Number(getTimer()) - MP_ping1 > 3500)
					{
						INLAG = true;
						if(!lags.visible)
						{
							if(Number(getTimer()) - MP_ping_last > 500)
							{
								lags.visible = true;
							}
						}
						lags.val.text = "Your ping is " + _mp_ping_rl + " ms";
					}
					else
					{
						INLAG = false;
						if(lags.visible)
						{
							lags.visible = false;
						}
					}
				}
				if(system_non_stop)
				{
					if(FREEZE_OFFSCREEN_ENTITIES)
					{
						render_minX = (-game.x - 300) / game_scale;
						render_minY = (-game.y - 200) / game_scale;
						render_maxX = (-game.x + screenX + 300) / game_scale;
						render_maxY = (-game.y + screenY + 200) / game_scale;
					}
					else
					{
						render_minX = -100000;
						render_minY = -100000;
						render_maxX = 100000;
						render_maxY = 100000;
					}
					FUN_TIME_SPEND += WSPEED;
					if(PLAZMA_GAME && ALLOW_TIMESHIFT)
					{
						if(energy <= 0 || Boolean(mens[MP_myid].dead))
						{
							if(timeshift != 0)
							{
								timeshift = 0;
								timeshiftch = s_slow_up.play(0,0,vol);
								if(SCREEN_EFFECTS)
								{
									whitness.alpha += 1;
									whitness.visible = true;
								}
							}
						}
						if(timeshift == 0)
						{
							if(energy < energy_max)
							{
								energy += 0.2 * GSPEED2;
							}
							if(energy >= energy_max)
							{
								energy = energy_max;
							}
						}
						else
						{
							energy -= 0.4 * GSPEED2;
						}
					}

					if(GET_LITE_PHYS())
					{
						Physics();
						LITE_PHYS_tim = !LITE_PHYS_tim;
					}
					else
					{
						Physics();
					}
					UpdateAtomPathCache();
					DoorLogic();
				EXT.startMeasure(5);
					BulletLogic();
				EXT.stopMeasure(5);
				EXT.startMeasure(4);
					PlayerLogic();
				EXT.stopMeasure(4);
					ThinkOfFlakes();
				EXT.startMeasure(6);
					EffectsLogic();
				EXT.stopMeasure(6);
					if(lock_camera_intensity > 0)
					{
						if(lock_camera_intensity > 1)
						{
							lock_camera_intensity = 1;
						}
						xx2 = game.x;
						yy2 = game.y;
						xx = -Number(lock_camera_region.x) * game.scaleX * lock_camera_intensity + game.x * (1 - lock_camera_intensity);
						yy = -Number(lock_camera_region.y) * game.scaleY * lock_camera_intensity + game.y * (1 - lock_camera_intensity) + Math.sin(Number(getTimer()) * 0.05) * SHAKEAMMOUT * game_scale;
						if(Math.round(xx) == xx2)
						{
							if(xx > -Number(lock_camera_region.x) * game.scaleX)
							{
								xx -= 1 * game.scaleX;
							}
							if(xx < -Number(lock_camera_region.x) * game.scaleX)
							{
								xx += 1 * game.scaleX;
							}
						}
						if(Math.round(yy) == yy2)
						{
							if(yy > -Number(lock_camera_region.y) * game.scaleY)
							{
								yy -= 1 * game.scaleY;
							}
							if(yy < -Number(lock_camera_region.y) * game.scaleY)
							{
								yy += 1 * game.scaleY;
							}
						}
						game.x = Math.round(xx);
						game.y = Math.round(yy);
					}
					else if(MP_mode && mens[MP_myid].dead || MP_spectator)
					{
						if(death_cam >= 0 && death_cam < playerstotal)
						{
							old_x = game.x;
							old_y = game.y;
							if(MP_spectator)
							{
								if(MP_myid != death_cam)
								{
									MP_myid = death_cam;
									i = 0;
									while(i < playerstotal)
									{
										UpdateTeamColor(mens[i]);
										i++;
									}
								}
								look_x = mens[death_cam].tarx + game.x;
								look_y = mens[death_cam].tary + game.y;
							}
							else
							{
								look_x = min_max(0,mouse_x,screenX);
								look_y = min_max(0,mouse_y,screenY);
							}
							if(SOFT_SCREEN)
							{
								game.x = Math.round(1 * ((-Number(ax[mens[death_cam].b_toe]) * game_scale + hscreenX - look_x + hscreenX + game.x * 10 / GSPEED2) / (1 + 10 / GSPEED2))) / 1;
								game.y = Math.round(1 * ((-Number(ay[mens[death_cam].b_toe]) * game_scale + hscreenY - look_y + hscreenY + game.y * 10 / GSPEED2) / (1 + 10 / GSPEED2) + Math.sin(Number(getTimer()) * 0.05) * SHAKEAMMOUT * game_scale)) / 1;
							}
							else
							{
								game.x = Math.round(1 * ((-Number(ax[mens[death_cam].b_toe]) * game_scale + hscreenX - look_x + hscreenX + game.x) / 2)) / 1;
								game.y = Math.round(1 * ((-Number(ay[mens[death_cam].b_toe]) * game_scale + hscreenY - look_y + hscreenY + game.y) / 2 + Math.sin(Number(getTimer()) * 0.05) * SHAKEAMMOUT * game_scale)) / 1;
							}
							if(MP_spectator)
							{
								myCursor.x = (myCursor.x + look_x) / 2 - game.x + old_x;
								myCursor.y = (myCursor.y + look_y) / 2 - game.y + old_y;
							}
						}
						else
						{
							if(key_left)
							{
								game.x += 15;
							}
							if(key_right)
							{
								game.x -= 15;
							}
							if(key_up)
							{
								game.y += 15;
							}
							if(key_down)
							{
								game.y -= 15;
							}
						}
						if(darkness.alpha >= 0.25 || MP_spectator || death_cam == -1 || death_cam != MP_myid)
						{
							if(is_firing)
							{
								is_firing = false;
								++death_cam;
								while(death_cam < playerstotal && death_cam >= 0 && death_cam != MP_myid && Boolean(mens[death_cam].dead))
								{
									++death_cam;
								}
								if(death_cam >= playerstotal)
								{
									death_cam = -1;
								}
							}
						}
					}
					else
					{
						if(SOFT_SCREEN)
						{
							game.x = Math.round((-Number(ax[mens[MP_myid].b_toe]) * game_scale + hscreenX - min_max(0,mouse_x,screenX) + hscreenX + game.x * 10 / GSPEED2) / (1 + 10 / GSPEED2));
							game.y = Math.round((-Number(ay[mens[MP_myid].b_toe]) * game_scale + hscreenY - min_max(0,mouse_y,screenY) + hscreenY + game.y * 10 / GSPEED2) / (1 + 10 / GSPEED2) + Math.sin(Number(getTimer()) * 0.05) * SHAKEAMMOUT * game_scale);
						}
						else
						{
							game.x = Math.round((-Number(ax[mens[MP_myid].b_toe]) * game_scale + hscreenX - min_max(0,mouse_x,screenX) + hscreenX + game.x) / 2);
							game.y = Math.round((-Number(ay[mens[MP_myid].b_toe]) * game_scale + hscreenY - min_max(0,mouse_y,screenY) + hscreenY + game.y) / 2 + Math.sin(Number(getTimer()) * 0.05) * SHAKEAMMOUT * game_scale);
						}
						death_cam = MP_myid;
					}
					if(SHAKEAMMOUT > 0.05)
					{
						SHAKEAMMOUT -= 0.05;
						SHAKEAMMOUT *= 0.93;
						if(SHAKEAMMOUT > 30)
						{
							SHAKEAMMOUT = 30;
						}
					}
					else
					{
						SHAKEAMMOUT = 0;
					}
					if(new_active.visible)
					{
						new_active.x = mens[MP_myid].x + game.x;
						new_active.y = Number(mens[MP_myid].y) - 90 + game.y;
					}
					if(!MP_spectator)
					{
						mc = mens[MP_myid];
						ok = false;
						if(mc && !mc.dead)
						{
							if(mc.hunt == -1 || mc.curwea != -1 && guns[mc.curwea].stat_class == 7)
							{
								i2 = 0;
								while(i2 < playerstotal && !ok)
								{
									if(i2 != MP_myid)
									{
										if(mens[i2] && mens[i2].io)
										{
											if(mens[i2].team == mc.team)
											{
												if(Boolean(mens[i2].dead) || Boolean(mens[i2].dying))
												{
													if(!mens[i2].brk_head && !mens[i2].brk_arms && !mens[i2].brk_legs && !mens[i2].brk_body)
													{
														if(Dist2D(ax[mens[i2].b_body],ay[mens[i2].b_body],mc.x,mc.y) < 350)
														{
															i3 = 0;
															while(i3 < gunstotal && !ok)
															{
																if(guns[i3] && guns[i3].io)
																{
																	if(!guns[i3].forcars)
																	{
																		if(guns[i3].stat_class == 7)
																		{
																			if(guns[i3].picken_by == MP_myid)
																			{
																				ok = true;
																				need_heal.visible = true;
																				need_heal.x = Number(ax[mens[i2].b_body]) * game_scale + game.x;
																				need_heal.y = (Number(ay[mens[i2].b_body]) - 41) * game_scale + game.y;
																			}
																		}
																	}
																}
																++i3;
															}
														}
													}
												}
											}
										}
									}
									i2++;
								}
							}
						}
						if(!ok)
						{
							need_heal.visible = false;
						}
					}
					if(game_scale != lgame_scale)
					{
						game.scaleX = game_scale;
						game.scaleY = game_scale;
						graphics_3d_front.scaleX = graphics_3d.scaleX = game_scale;
						graphics_3d_front.scaleY = graphics_3d.scaleY = game_scale;
						lgame_scale = game_scale;
						game.x = Math.round(-Number(ax[mens[MP_myid].b_toe]) * game_scale + hscreenX - mouse_x + hscreenX);
						game.y = Math.round(-Number(ay[mens[MP_myid].b_toe]) * game_scale + hscreenY - mouse_y + hscreenY);
					}
					graphics_3d_front.x = graphics_3d.x = game.x;
					graphics_3d_front.y = graphics_3d.y = game.y;
					i = 0;
					while(i < surf_lnk.length)
					{
						surf_lnk[i].x = doors[surf_lnk_to[i]].x;
						surf_lnk[i].y = doors[surf_lnk_to[i]].y;
						i++;
					}
					i = 0;
					while(i < vehiclestotal)
					{
						if(vehicles[i].io)
						{
							if(vehicles[i].x > render_minX - 400 && vehicles[i].x < render_maxX + 400 && vehicles[i].y > render_minY - 400 && vehicles[i].y < render_maxY + 400 || vehicles[i].master != -1 && aactive[vehicles[i].master] || vehicles[i].typ == 6 && MP_mode)
							{
								mc = vehicles[i];
								aactive[-200 - i] = true;
								if(MP_mode)
								{
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.hea = 1;
										}
									}
								}
								if(mc.typ == 0)
								{
									xx = Math.atan2(Number(ax[mc.b_w1]) - Number(ax[mc.b_w2]),Number(ay[mc.b_w1]) - Number(ay[mc.b_w2]));
									if(mc.wep0 == -1)
									{
										i2 = 0;
										while(i2 < gunstotal)
										{
											if(guns[i2] && guns[i2].io)
											{
												if(guns[i2].forcars)
												{
													if(guns[i2].picken_by == -1)
													{
														if(guns[i2].x > mc.x - 100 && guns[i2].x < mc.x + 100 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 100)
														{
															guns[i2].picken_by = i;
															mc.wep0 = i2;
															ChangedGun(mc.master);
														}
													}
												}
											}
											i2++;
										}
									}
									else
									{
										mc2 = guns[mc.wep0];
										if(mc.master != -1 && mens[mc.master])
										{
											yy = mens[mc.master].ang;
											mens[mc.master].curwea = mc.wep0;
											if(Math.sin(yy) > 0)
											{
												mc2.scaleY = 1;
											}
											else
											{
												mc2.scaleY = -1;
											}
											TurnBone3(mc2.b_p1,ax[mc.b_c],ay[mc.b_c],atox[mc.b_c],atoy[mc.b_c]);
											TurnBone3(mc2.b_p2,ax[mc.b_c] + Math.sin(yy) * Number(mc2.len2),ay[mc.b_c] + Math.cos(yy) * Number(mc2.len2),atox[mc.b_c],atoy[mc.b_c]);
											if(mens[mc.master].dead)
											{
												PutoutCar(i);
											}
										}
										else
										{
											mc2.scaleY = mc.side;
											TurnBone3(mc2.b_p1,ax[mc.b_c],ay[mc.b_c],atox[mc.b_c],atoy[mc.b_c]);
											TurnBone3(mc2.b_p2,Number(ax[mc.b_c]) - Math.sin(xx) * Number(mc2.len2),Number(ay[mc.b_c]) - Math.cos(xx) * Number(mc2.len2),atox[mc.b_c],atoy[mc.b_c]);
										}
									}
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.dead = true;
											mc.gotoAndStop(3);
											PlaySound(s_steel_hard,mc.x,mc.y);
											mc.carbody.scaleY = mc.side;
											if(mc.master != -1)
											{
												PutoutCar(i);
											}
											ExplosionSound(ax[mc.b_c],ay[mc.b_c] + 30);
											PhysicsExplosion(ax[mc.b_c],ay[mc.b_c] + 30,300,20,100,-1,"vehicle");
											atoy[mc.b_c] -= 10;
											atoy[mc.b_c2] -= 15;
											atoy[mc.b_c3] -= 5;
											atoy[mc.b_w1] -= 8;
											atoy[mc.b_w2] -= 6;
											mc.b_w1b = CreatePoint(ax[mc.b_w1],ay[mc.b_w1],atox[mc.b_w1],atoy[mc.b_w1],arad[mc.b_w1],true,4,-i - 200);
											mc.b_w2b = CreatePoint(ax[mc.b_w2],ay[mc.b_w2],atox[mc.b_w1],atoy[mc.b_w1],arad[mc.b_w2],true,4,-i - 200);
											arad[mc.b_w1] = 8;
											arad[mc.b_w2] = 8;
											amat[mc.b_w1] = 5;
											amat[mc.b_w2] = 5;
											around[mc.b_w1] = false;
											around[mc.b_w2] = false;
										}
									}
									else if(mc.master != -1 && mens[mc.master])
									{
										mc2 = mens[mc.master];
										mc2.stability = -0.1;
										mc2.side = mc.side;
										TurnBone3(mc2.b_leg1,ax[mc.b_c3],ay[mc.b_c3],atox[mc.b_c3],atoy[mc.b_c3]);
										TurnBone3(mc2.b_leg2,ax[mc.b_c3],ay[mc.b_c3],atox[mc.b_c3],atoy[mc.b_c3]);
										TurnBone3(mc2.b_body,ax[mc.b_c],Number(ay[mc.b_c]) - Number(chdef[mc2.ch_body]),atox[mc.b_c3],atoy[mc.b_c3]);
										if(mc2.act_movex != 0)
										{
											if(acollided[mc.b_w1] > 0 || aio[mc.b_w1] == false)
											{
												atox[mc.b_w1] -= Math.sin(xx) * 3 * Number(mc2.act_movex) * Number(mc.side);
												atoy[mc.b_w1] -= Math.cos(xx) * 3 * Number(mc2.act_movex) * Number(mc.side);
												WakeUpAtom(mc.b_w1);
											}
											if(acollided[mc.b_w2] > 0 || aio[mc.b_w2] == false)
											{
												atox[mc.b_w2] -= Math.sin(xx) * 3 * Number(mc2.act_movex) * Number(mc.side);
												atoy[mc.b_w2] -= Math.cos(xx) * 3 * Number(mc2.act_movex) * Number(mc.side);
												WakeUpAtom(mc.b_w2);
											}
										}
										if(key_pick && mens[mc.master].hea > 0 && mc.master == MP_myid)
										{
											PutoutCar(i);
										}
									}
									else if(key_pick && mens[MP_myid].hea > 0)
									{
										if(mens[MP_myid].x > mc.x - 200 && mens[MP_myid].x < mc.x + 200 && mens[MP_myid].y > mc.y - 100 && mens[MP_myid].y < mc.y + 100)
										{
											if(mens[MP_myid].stability >= 1)
											{
												key_pick = false;
												PutInCar(0,i);
											}
										}
									}
									mc.x = ax[mc.b_c];
									mc.y = ay[mc.b_c];
									if(mc.dead)
									{
										mc.w1.x = Number(ax[mc.b_w1b]) - Number(ax[mc.b_c]);
										mc.w1.y = Number(ay[mc.b_w1b]) - Number(ay[mc.b_c]);
										mc.w2.x = Number(ax[mc.b_w2b]) - Number(ax[mc.b_c]);
										mc.w2.y = Number(ay[mc.b_w2b]) - Number(ay[mc.b_c]);
										mc.w1.rotation = (mc.x + mc.w1.x) * 1;
										mc.w2.rotation = (mc.x + mc.w2.x) * 1;
									}
									else
									{
										mc.w1.x = Number(ax[mc.b_w1]) - Number(ax[mc.b_c]);
										mc.w1.y = Number(ay[mc.b_w1]) - Number(ay[mc.b_c]);
										mc.w2.x = Number(ax[mc.b_w2]) - Number(ax[mc.b_c]);
										mc.w2.y = Number(ay[mc.b_w2]) - Number(ay[mc.b_c]);
										mc.w1.rotation = (mc.x + mc.w1.x) * 1;
										mc.w2.rotation = (mc.x + mc.w2.x) * 1;
									}
									mc.carbody.rotation = 270 - xx / Math.PI * 180;
								}
								if(mc.typ == 1)
								{
									xx = Math.atan2(Number(ax[mc.b_p1]) - Number(ax[mc.b_p2]),Number(ay[mc.b_p1]) - Number(ay[mc.b_p2]));
									if(mc.wep0 == -1)
									{
										i2 = 0;
										while(i2 < gunstotal)
										{
											if(guns[i2] && guns[i2].io)
											{
												if(guns[i2].forcars)
												{
													if(guns[i2].picken_by == -1)
													{
														if(guns[i2].x > mc.x - 200 && guns[i2].x < mc.x + 200 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 300)
														{
															guns[i2].picken_by = i;
															mc.wep0 = i2;
															ChangedGun(mc.master);
														}
													}
												}
											}
											i2++;
										}
									}
									else
									{
										mc2 = guns[mc.wep0];
										if(mc.master != -1 && mens[mc.master])
										{
											if(mc.side == 1)
											{
												if(mens[mc.master].tarx < mc.x + 300)
												{
													mens[mc.master].tarx = mc.x + 300;
												}
											}
											else if(mens[mc.master].tarx > mc.x - 300)
											{
												mens[mc.master].tarx = mc.x - 300;
											}
											yy = mens[mc.master].ang;
											mens[mc.master].curwea = mc.wep0;
											if(Math.sin(yy) > 0)
											{
												mc2.scaleY = 1;
											}
											else
											{
												mc2.scaleY = -1;
											}
											TurnBone3(mc2.b_p1,ax[mc.b_p2],ay[mc.b_p2],atox[mc.b_p2],atoy[mc.b_p2]);
											TurnBone3(mc2.b_p2,ax[mc.b_p2] + Math.sin(yy) * Number(mc2.len2),ay[mc.b_p2] + Math.cos(yy) * Number(mc2.len2),atox[mc.b_p2],atoy[mc.b_p2]);
											if(mens[mc.master].dead)
											{
												PutoutCar(i);
											}
										}
										else
										{
											mc2.scaleY = mc.side;
											TurnBone3(mc2.b_p1,ax[mc.b_p2],ay[mc.b_p2],atox[mc.b_p2],atoy[mc.b_p2]);
											TurnBone3(mc2.b_p2,Number(ax[mc.b_p2]) - Math.sin(xx) * Number(mc2.len2),Number(ay[mc.b_p2]) - Math.cos(xx) * Number(mc2.len2),atox[mc.b_p2],atoy[mc.b_p2]);
										}
									}
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.dead = true;
											mc.deadtim = 0;
											mc.leg1.x = 0;
											mc.leg1.y = 0;
											mc.leg2.x = 0;
											mc.leg2.y = 0;
											mc.leg1.scaleX = mc.side;
											mc.leg2.scaleX = mc.side;
											mc.leg1b.scaleX = mc.side;
											mc.leg2b.scaleX = mc.side;
											mc.carbody.scaleY = mc.side;
											PlaySound(s_walker_die,mc.x,mc.y);
											chdef[mc.ch_cross2] = 70;
											if(mc.master != -1)
											{
												PutoutCar(i);
											}
											if(mc.hea < -100)
											{
												ExplosionSound(ax[mc.b_p1],ay[mc.b_p1] + 30);
												PhysicsExplosion(ax[mc.b_p1],ay[mc.b_p1] + 30,300,20,100,-1,"vehicle");
												atoy[mc.b_p2] -= 10;
												atox[mc.b_p1] += 5 * Number(mc.side);
												atox[mc.b_p3] += 5 * Number(mc.side);
												atox[mc.b_w1] -= 10 * Number(mc.side);
												atox[mc.b_w2] -= 5 * Number(mc.side);
											}
										}
										else if(mc.io)
										{
											if(mc.deadtim > 1000)
											{
												if(mc.alpha > 0.7)
												{
													mc.alpha = 0.7;
												}
												else
												{
													mc.alpha -= 0.05 * GSPEED;
												}
												if(mc.alpha < 0.3)
												{
													aio[mc.b_p1] = -1;
													aio[mc.b_p2] = -1;
													aio[mc.b_p3] = -1;
													aio[mc.b_w1] = -1;
													aio[mc.b_w2] = -1;
													aio[mc.b_w1b] = -1;
													aio[mc.b_w2b] = -1;
													mc.io = false;
												}
											}
											mc.deadtim += 10 * GSPEED;
										}
									}
									else if(mc.master != -1 && mens[mc.master])
									{
										mc2 = mens[mc.master];
										mc2.stability = -0.1;
										mc2.side = mc.side;
										TurnBone3(mc2.b_leg1,ax[mc.b_p2],ay[mc.b_p2],atox[mc.b_p2],atoy[mc.b_p2]);
										TurnBone3(mc2.b_leg2,ax[mc.b_p2],ay[mc.b_p2],atox[mc.b_p2],atoy[mc.b_p2]);
										TurnBone3(mc2.b_body,ax[mc.b_p3],ay[mc.b_p3],atox[mc.b_p3],atoy[mc.b_p3]);
										TurnBone3(mc2.b_toe,ax[mc.b_p1],ay[mc.b_p1],atox[mc.b_p1],atoy[mc.b_p1]);
										x3 = Math.sin(mc.move_state) * 30;
										y3 = Math.cos(mc.move_state) * 10 * Number(mc.move_height);
										if(mc.move_height > 1)
										{
											y3 = Math.cos(mc.move_state) * 40 * (Number(mc.move_height) - 0.75);
										}
										x4 = 1;
										if(mc2.act_movex == 0)
										{
											if(mc.move_height > 0.05)
											{
												mc.move_height -= 0.05 * GSPEED;
											}
											else
											{
												mc.move_height = 0;
											}
										}
										if(mc2.act_movey == 1)
										{
											if(mc.corpse_h > 60)
											{
												mc.corpse_h -= 5 * GSPEED;
												if(acollided[mc.b_w1] > 0 || acollided[mc.b_w2] > 0)
												{
													atoy[mc.b_p1] += 1 * GSPEED;
													atoy[mc.b_p2] += 1 * GSPEED;
													atoy[mc.b_p3] += 1 * GSPEED;
													atoy[mc.b_w1] += 1 * GSPEED;
													atoy[mc.b_w1] += 1 * GSPEED;
												}
											}
										}
										else if(mc2.act_movey == -1)
										{
											if(mc.corpse_h < 100)
											{
												mc.corpse_h += 5;
												if(acollided[mc.b_w1] > 0 || acollided[mc.b_w2] > 0)
												{
													atoy[mc.b_p1] -= 2 * GSPEED;
													atoy[mc.b_p2] -= 2 * GSPEED;
													atoy[mc.b_p3] -= 2 * GSPEED;
													atox[mc.b_p1] += Number(mc2.act_movex) * 3 * GSPEED;
													atox[mc.b_p2] += Number(mc2.act_movex) * 1 * GSPEED;
													atox[mc.b_p3] += Number(mc2.act_movex) * 2 * GSPEED;
													atox[mc.b_w1] += Number(mc2.act_movex) * 1 * GSPEED;
													atox[mc.b_w2] += Number(mc2.act_movex) * 2 * GSPEED;
												}
											}
										}
										else if(mc.corpse_h < 90)
										{
											mc.corpse_h += 1 * GSPEED;
										}
										else if(mc.corpse_h > 90)
										{
											mc.corpse_h -= 1 * GSPEED;
										}
										xx2 = (ax[mc.b_p1] + ax[mc.b_w1]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_w1]) / 2;
										TurnBone4(mc.b_p1,xx2 + x3,yy2 - Number(mc.corpse_h) + y3,x4);
										TurnBone4(mc.b_w1,xx2 - x3,yy2 + mc.corpse_h - y3,x4);
										xx2 = (ax[mc.b_p1] + ax[mc.b_w2]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_w2]) / 2;
										TurnBone4(mc.b_p1,xx2 - x3,yy2 - Number(mc.corpse_h) - y3,x4);
										TurnBone4(mc.b_w2,xx2 + x3,yy2 + mc.corpse_h + y3,x4);
										xx2 = (ax[mc.b_p1] + ax[mc.b_p2]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_p2]) / 2;
										TurnBone4(mc.b_p1,xx2 - 25 * Number(mc.side),yy2,x4);
										TurnBone4(mc.b_p2,xx2 + 25 * Number(mc.side),yy2,x4);
										aio[mc.b_p1] = true;
										atim[mc.b_p1] = 0;
										aio[mc.b_w1] = true;
										atim[mc.b_w1] = 0;
										aio[mc.b_w2] = true;
										atim[mc.b_w2] = 0;
										if(mc2.act_movex != 0)
										{
											if(mc.move_height < 1)
											{
												xx2 = -Number(mc2.act_movex) * 0.08 * Number(mc.move_height);
											}
											else
											{
												xx2 = -Number(mc2.act_movex) * 0.08 * (2 - Number(mc.move_height));
											}
											mc.move_state += xx2 * GSPEED;
											mc.jump_state += xx2 * GSPEED;
											if(mc.jump_state > Math.PI)
											{
												PlaySound(s_walker_phase1,mc.x,mc.y);
												mc.jump_state -= Math.PI;
											}
											if(mc.jump_state < -Math.PI)
											{
												PlaySound(s_walker_phase1,mc.x,mc.y);
												mc.jump_state += Math.PI;
											}
											mc.jump_state2 += xx2 * GSPEED;
											if(mc.jump_state2 > Math.PI)
											{
												PlaySound(s_walker_phase2,mc.x,mc.y);
												mc.jump_state2 -= Math.PI;
											}
											if(mc.jump_state2 < -Math.PI)
											{
												PlaySound(s_walker_phase2,mc.x,mc.y);
												mc.jump_state2 += Math.PI;
											}
											if(acollided[mc.b_w1] > 0 || acollided[mc.b_w2] > 0)
											{
												atox[mc.b_p1] += Number(mc2.act_movex) * 1.5 * GSPEED;
											}
											if(mc.move_height < 0.95)
											{
												mc.move_height += 0.05 * GSPEED;
											}
											if(!TracePoint((ax[mc.b_w1] + ax[mc.b_w1]) / 2 + Number(mc2.act_movex) * 150,(ay[mc.b_w1] + ay[mc.b_w1]) / 2))
											{
												if(mc.move_height < 1.45)
												{
													mc.move_height += 0.05 * GSPEED;
												}
												else
												{
													mc.move_height = 1.5 * GSPEED;
												}
											}
											else if(mc.move_height > 1.05)
											{
												mc.move_height -= 0.05 * GSPEED;
											}
										}
										if(key_pick && mens[mc.master] && mens[mc.master].hea > 0 && mc.master == MP_myid)
										{
											PutoutCar(i);
										}
									}
									else
									{
										x4 = 1;
										x3 = Math.sin(mc.move_state) * 25;
										y3 = Math.cos(mc.move_state) * 10 * Number(mc.move_height);
										if(mc.move_height > 0.05)
										{
											mc.move_height -= 0.05;
										}
										else
										{
											mc.move_height = 0;
										}
										xx2 = (ax[mc.b_p1] + ax[mc.b_w1]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_w1]) / 2;
										TurnBone4(mc.b_p1,xx2 + x3,yy2 - 90 + y3,x4);
										TurnBone4(mc.b_w1,xx2 - x3,yy2 + 90 - y3,x4);
										xx2 = (ax[mc.b_p1] + ax[mc.b_w2]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_w2]) / 2;
										TurnBone4(mc.b_p1,xx2 - 10 - x3,yy2 - 90 - y3,x4);
										TurnBone4(mc.b_w2,xx2 + 10 + x3,yy2 + 90 + y3,x4);
										xx2 = (ax[mc.b_p1] + ax[mc.b_p2]) / 2;
										yy2 = (ay[mc.b_p1] + ay[mc.b_p2]) / 2;
										TurnBone4(mc.b_p1,xx2 - 23 * Number(mc.side),yy2 - 10,x4);
										TurnBone4(mc.b_p2,xx2 + 23 * Number(mc.side),yy2 + 10,x4);
										if(key_pick && mens[MP_myid].hea > 0)
										{
											if(mens[MP_myid].x > mc.x - 200 && mens[MP_myid].x < mc.x + 200 && mens[MP_myid].y > mc.y - 100 && mens[MP_myid].y < mc.y + 300)
											{
												if(mens[MP_myid].stability >= 1)
												{
													PutInCar(0,i);
												}
											}
										}
									}
									chdef[mc.ch_leg1upper] = chdef[mc.ch_leg1lower] = Dist2D(ax[mc.b_p1],ay[mc.b_p1],ax[mc.b_w1],ay[mc.b_w1]) / 3;
									chdef[mc.ch_leg2upper] = chdef[mc.ch_leg2lower] = Dist2D(ax[mc.b_p1],ay[mc.b_p1],ax[mc.b_w2],ay[mc.b_w2]) / 3;
									mc.x = ax[mc.b_p1];
									mc.y = ay[mc.b_p1];
									MeasureStart(12);
									mc.carbody.rotation = 270 - xx / Math.PI * 180;
									mc.leg1.rotation = 180 - Math.atan2(Number(ax[mc.b_p1]) - Number(ax[mc.b_w1]),Number(ay[mc.b_p1]) - Number(ay[mc.b_w1])) / Math.PI * 180;
									SetMCFrame(mc.leg1,Math.max(1,Math.min(100,Math.round(Dist2D(ax[mc.b_p1],ay[mc.b_p1],ax[mc.b_w1],ay[mc.b_w1]) / 210 * 100))),5);
									mc.leg2.rotation = 180 - Math.atan2(Number(ax[mc.b_p1]) - Number(ax[mc.b_w2]),Number(ay[mc.b_p1]) - Number(ay[mc.b_w2])) / Math.PI * 180;
									SetMCFrame(mc.leg2,Math.max(1,Math.min(100,Math.round(Dist2D(ax[mc.b_p1],ay[mc.b_p1],ax[mc.b_w2],ay[mc.b_w2]) / 210 * 100))),5);
									mc.leg1b.x = Number(ax[mc.b_w1]) - Number(ax[mc.b_p1]);
									mc.leg1b.y = Number(ay[mc.b_w1]) - Number(ay[mc.b_p1]);
									mc.leg2b.x = Number(ax[mc.b_w2]) - Number(ax[mc.b_p1]);
									mc.leg2b.y = Number(ay[mc.b_w2]) - Number(ay[mc.b_p1]);
									if(Boolean(acollided[mc.b_w1]) && !mc.dead)
									{
										mc.leg1b.rotation /= 2;
									}
									else
									{
										mc.leg1b.rotation = (mc.leg1.rotation + Number(mc.leg1b.rotation) * 5) / 6;
									}
									if(Boolean(acollided[mc.b_w2]) && !mc.dead)
									{
										mc.leg2b.rotation /= 2;
									}
									else
									{
										mc.leg2b.rotation = (mc.leg2.rotation + Number(mc.leg2b.rotation) * 5) / 6;
									}
									MeasureStop(12);
								}
								if(mc.typ == 2)
								{
									xx = (ax[mc.b_lt] + ax[mc.b_rb]) / 2;
									yy = (ay[mc.b_lt] + ay[mc.b_rb]) / 2;
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.dead = true;
											mc.gotoAndStop(3);
											chio[mc.ch_t0] = -1;
											chio[mc.ch_t1] = -1;
											chio[mc.ch_t2] = -1;
											chio[mc.ch_t3] = -1;
											chio[mc.ch_t4] = -1;
											chio[mc.ch_t5] = -1;
											chio[mc.ch_t6] = -1;
											chio[mc.ch_t7] = -1;
											atox[mc.b_lt] = 0;
											atoy[mc.b_lt] = 0;
											atox[mc.b_lt2] = 0;
											atoy[mc.b_lt2] = 0;
											atox[mc.b_rt] = 0;
											atoy[mc.b_rt] = 0;
											atox[mc.b_rt2] = 0;
											atoy[mc.b_rt2] = 0;
											atox[mc.b_lb] = 0;
											atoy[mc.b_lb] = 0;
											atox[mc.b_lb2] = 0;
											atoy[mc.b_lb2] = 0;
											atox[mc.b_rb] = 0;
											atoy[mc.b_rb] = 0;
											atox[mc.b_rb2] = 0;
											atoy[mc.b_rb2] = 0;
											atox[mc.b_lb2] -= 5;
											atox[mc.b_lt2] -= 10;
											atox[mc.b_rb2] += 5;
											atox[mc.b_rt2] += 10;
											atoy[mc.b_rt] -= 2 + Math.random() * 10;
											atoy[mc.b_lt] -= 2 + Math.random() * 10;
											xx2 = 3 + Math.random() * 4;
											atox[mc.b_rt] += xx2;
											atox[mc.b_lt] += xx2;
											if(mc.master != -1)
											{
												i2 = int(mc.master);
												PutoutCar(i);
												mens[i2].stability = -1;
												mens[i2].x = xx;
												mens[i2].y = yy;
												mens[i2].tox = 0;
												mens[i2].toy = 0;
											}
										}
									}
									else if(mc.master != -1)
									{
										mc2 = mens[mc.master];
										mc2.stability = -0.1;
										mc2.side = mc.side;
										mc2.x = mc.x;
										mc2.y = mc.y;
										mc2.tox = 0;
										mc2.toy = 0;
										xx2 = 0;
										yy2 = 0;
										TurnBone3(mc2.b_leg1,xx,yy + 30,xx2,yy2);
										TurnBone3(mc2.b_leg2,xx,yy + 30,xx2,yy2);
										TurnBone3(mc2.b_toe,xx,yy,xx2,yy2);
										TurnBone3(mc2.b_head_end,xx,yy - 30,xx2,yy2);
									}
									mc.x = xx;
									mc.y = yy;
									xx2 = Math.atan2(Number(ax[mc.b_lb]) - Number(ax[mc.b_rb]),Number(ay[mc.b_lb]) - Number(ay[mc.b_rb]));
									mc.cap_b.rotation = 270 - xx2 / Math.PI * 180;
									mc.cap_b.x = (ax[mc.b_lb] + ax[mc.b_rb]) / 2 - xx;
									mc.cap_b.y = (ay[mc.b_lb] + ay[mc.b_rb]) / 2 - yy;
									xx2 = Math.atan2(Number(ax[mc.b_lt]) - Number(ax[mc.b_rt]),Number(ay[mc.b_lt]) - Number(ay[mc.b_rt]));
									mc.cap_t.rotation = 90 - xx2 / Math.PI * 180;
									mc.cap_t.x = (ax[mc.b_lt] + ax[mc.b_rt]) / 2 - xx;
									mc.cap_t.y = (ay[mc.b_lt] + ay[mc.b_rt]) / 2 - yy;
									xx2 = Math.atan2(Number(ax[mc.b_lt2]) - Number(ax[mc.b_lb2]),Number(ay[mc.b_lt2]) - Number(ay[mc.b_lb2]));
									mc.cap_l.rotation = 180 - xx2 / Math.PI * 180;
									mc.cap_l.x = (ax[mc.b_lt2] + ax[mc.b_lb2]) / 2 - xx;
									mc.cap_l.y = (ay[mc.b_lt2] + ay[mc.b_lb2]) / 2 - yy;
									xx2 = Math.atan2(Number(ax[mc.b_rt2]) - Number(ax[mc.b_rb2]),Number(ay[mc.b_rt2]) - Number(ay[mc.b_rb2]));
									mc.cap_r.rotation = -xx2 / Math.PI * 180;
									mc.cap_r.x = (ax[mc.b_rt2] + ax[mc.b_rb2]) / 2 - xx;
									mc.cap_r.y = (ay[mc.b_rt2] + ay[mc.b_rb2]) / 2 - yy;
								}
								else if(mc.typ == 3)
								{
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.dead = true;
											PlaySound(s_box_die,mc.x,mc.y);
											mc.rotation = 0;
											mc.gotoAndStop(2);
											n2 = 0;
											while(n2 < 10)
											{
												mc["b_g" + n2] = CreatePoint(mc.x + mc["g" + n2].x,mc.y + mc["g" + n2].y,(Math.random() - 0.5) * 10,(Math.random() - 0.5) * 10,0,false,9,-i - 200);
												if(Math.random() < 0.33)
												{
													mc["g" + n2].gotoAndStop(1);
												}
												else if(Math.random() > 0.5)
												{
													mc["g" + n2].gotoAndStop(2);
												}
												else
												{
													mc["g" + n2].gotoAndStop(3);
												}
												++n2;
											}
											aio[mc.b_c] = -1;
											aio[mc.b_lt] = -1;
											aio[mc.b_rt] = -1;
											aio[mc.b_lb] = -1;
											aio[mc.b_rb] = -1;
											if(mc.wep0 != -1)
											{
												i2 = int(mc.wep0);
												guns[i2].picken_by = -1;
												guns[i2].forcars = false;
												aio[guns[i2].b_p1] = true;
												atim[guns[i2].b_p1] = 0;
												aio[guns[i2].b_p2] = true;
												atim[guns[i2].b_p2] = 0;
												atox[guns[i2].b_p1] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p1] = -3 + Math.random() * 6;
												atox[guns[i2].b_p2] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p2] = -3 + Math.random() * 6;
												guns[i2].alpha = 1;
											}
											if(mc.wep1 != -1)
											{
												i2 = int(mc.wep1);
												guns[i2].picken_by = -1;
												guns[i2].forcars = false;
												aio[guns[i2].b_p1] = true;
												atim[guns[i2].b_p1] = 0;
												aio[guns[i2].b_p2] = true;
												atim[guns[i2].b_p2] = 0;
												atox[guns[i2].b_p1] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p1] = -3 + Math.random() * 6;
												atox[guns[i2].b_p2] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p2] = -3 + Math.random() * 6;
												guns[i2].alpha = 1;
											}
											if(mc.wep2 != -1)
											{
												i2 = int(mc.wep2);
												guns[i2].picken_by = -1;
												guns[i2].forcars = false;
												aio[guns[i2].b_p1] = true;
												atim[guns[i2].b_p1] = 0;
												aio[guns[i2].b_p2] = true;
												atim[guns[i2].b_p2] = 0;
												atox[guns[i2].b_p1] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p1] = -3 + Math.random() * 6;
												atox[guns[i2].b_p2] = -3 + Math.random() * 6;
												atoy[guns[i2].b_p2] = -3 + Math.random() * 6;
												guns[i2].alpha = 1;
											}
										}
									}
									else
									{
										if(mc.grabtim > 0)
										{
											--mc.grabtim;
											if(mc.wep0 == -1)
											{
												i2 = 0;
												while(i2 < gunstotal && mc.wep0 == -1)
												{
													if(guns[i2] && guns[i2].io)
													{
														if(!guns[i2].forcars)
														{
															if(guns[i2].picken_by == -1)
															{
																if(guns[i2].x > mc.x - 100 && guns[i2].x < mc.x + 100 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 100)
																{
																	guns[i2].picken_by = i;
																	guns[i2].forcars = true;
																	guns[i2].alpha = 0;
																	mc.wep0 = i2;
																}
															}
														}
													}
													i2++;
												}
											}
											else if(mc.wep1 == -1)
											{
												i2 = 0;
												while(i2 < gunstotal && mc.wep1 == -1)
												{
													if(guns[i2] && guns[i2].io)
													{
														if(!guns[i2].forcars)
														{
															if(guns[i2].picken_by == -1)
															{
																if(guns[i2].x > mc.x - 100 && guns[i2].x < mc.x + 100 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 100)
																{
																	guns[i2].picken_by = i;
																	guns[i2].forcars = true;
																	guns[i2].alpha = 0;
																	mc.wep1 = i2;
																}
															}
														}
													}
													i2++;
												}
											}
											else if(mc.wep2 == -1)
											{
												i2 = 0;
												while(i2 < gunstotal && mc.wep2 == -1)
												{
													if(guns[i2] && guns[i2].io)
													{
														if(!guns[i2].forcars)
														{
															if(guns[i2].picken_by == -1)
															{
																if(guns[i2].x > mc.x - 100 && guns[i2].x < mc.x + 100 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 100)
																{
																	guns[i2].picken_by = i;
																	guns[i2].forcars = true;
																	guns[i2].alpha = 0;
																	mc.wep2 = i2;
																}
															}
														}
													}
													i2++;
												}
											}
										}
										if(mc.wep0 != -1)
										{
											mc2 = guns[mc.wep0];
											TurnBone3(mc2.b_p1,ax[mc.b_lt],ay[mc.b_lt],atox[mc.b_lt],atoy[mc.b_lt]);
											TurnBone3(mc2.b_p2,ax[mc.b_rb],ay[mc.b_rb],atox[mc.b_rb],atoy[mc.b_rb]);
										}
										if(mc.wep1 != -1)
										{
											mc2 = guns[mc.wep1];
											TurnBone3(mc2.b_p1,ax[mc.b_lt],ay[mc.b_lt],atox[mc.b_lt],atoy[mc.b_lt]);
											TurnBone3(mc2.b_p2,ax[mc.b_rb],ay[mc.b_rb],atox[mc.b_rb],atoy[mc.b_rb]);
										}
										if(mc.wep2 != -1)
										{
											mc2 = guns[mc.wep2];
											TurnBone3(mc2.b_p1,ax[mc.b_lt],ay[mc.b_lt],atox[mc.b_lt],atoy[mc.b_lt]);
											TurnBone3(mc2.b_p2,ax[mc.b_rb],ay[mc.b_rb],atox[mc.b_rb],atoy[mc.b_rb]);
										}
									}
									if(mc.currentFrame == 1)
									{
										mc.x = ax[mc.b_c];
										mc.y = ay[mc.b_c];
										xx2 = Math.atan2(Number(ax[mc.b_lb]) - Number(ax[mc.b_rb]),Number(ay[mc.b_lb]) - Number(ay[mc.b_rb]));
										mc.rotation = 180 - xx2 / Math.PI * 180;
									}
									else
									{
										n2 = 0;
										while(n2 < 10)
										{
											if(mc["g" + n2].visible == true)
											{
												mc["g" + n2].x = Number(ax[mc["b_g" + n2]]) - mc.x;
												mc["g" + n2].y = Number(ay[mc["b_g" + n2]]) - mc.y;
												mc["g" + n2].rotation = Number(mc["g" + n2].x) * 3 + n2 * 60;
												if(aio[mc["b_g" + n2]] == false)
												{
													if(mc["g" + n2].alpha > 0)
													{
														mc["g" + n2].alpha -= 0.1;
													}
													else
													{
														mc["g" + n2].visible = false;
														aio[mc["b_g" + n2]] = -1;
													}
												}
												else if(mc["g" + n2].alpha < 1)
												{
													mc["g" + n2].alpha += 0.1;
												}
											}
											++n2;
										}
									}
								}
								else if(mc.typ == 4 || mc.typ == 7)
								{
									xx2 = Math.atan2(Number(ax[mc.b_c]) - Number(ax[mc.b_c1]),Number(ay[mc.b_c]) - Number(ay[mc.b_c1]));
									if(mc.wep0 == -1)
									{
										i2 = 0;
										while(i2 < gunstotal)
										{
											if(guns[i2] && guns[i2].io)
											{
												if(guns[i2].forcars)
												{
													if(guns[i2].picken_by == -1)
													{
														if(guns[i2].x > mc.x - 100 && guns[i2].x < mc.x + 100 && guns[i2].y > mc.y - 100 && guns[i2].y < mc.y + 100)
														{
															guns[i2].picken_by = i;
															mc.wep0 = i2;
															ChangedGun(mc.master);
														}
													}
												}
											}
											i2++;
										}
									}
									else
									{
										mc2 = guns[mc.wep0];
										mc2.scaleY = mc.side;
										if(mc.master != -1 && mens[mc.master] && mc.hea > 0)
										{
											yy = mens[mc.master].ang;
											mens[mc.master].curwea = mc.wep0;
											TurnBone3(mc2.b_p1,ax[mc.b_c2],ay[mc.b_c2],atox[mc.b_c2],atoy[mc.b_c2]);
											TurnBone3(mc2.b_p2,ax[mc.b_c2] + Math.sin(yy) * Number(mc2.len2),ay[mc.b_c2] + Math.cos(yy) * Number(mc2.len2),atox[mc.b_c2],atoy[mc.b_c2]);
										}
										else
										{
											TurnBone3(mc2.b_p1,ax[mc.b_c2],ay[mc.b_c2],atox[mc.b_c2],atoy[mc.b_c2]);
											TurnBone3(mc2.b_p2,Number(ax[mc.b_c2]) - Math.sin(xx2) * Number(mc2.len2),Number(ay[mc.b_c2]) - Math.cos(xx2) * Number(mc2.len2),atox[mc.b_c2],atoy[mc.b_c2]);
										}
									}
									if(mc.master != -1)
									{
										if(mens[mc.master] && mens[mc.master].io)
										{
											mc2 = mens[mc.master];
											if(mc2.dead)
											{
												mc.hea = 0;
											}
											if(mc.hea > 0)
											{
												if(!mc2.isplayer)
												{
													if(mc.typ == 4)
													{
														if(TraceLine(mc.x,mc.y,mc.x,mc.y + 400))
														{
															mc2.act_movey = 1;
														}
													}
													if(mc.typ == 7)
													{
														if(!TraceLine(mc.x,mc.y,mc.x + Number(mc2.act_movex) * 200,mc.y - 100))
														{
															mc2.act_movey = 1;
														}
													}
													if(!TraceLine(mc.x,mc.y,mc.x + Number(mc2.act_movex) * 200,mc.y + 100))
													{
														mc2.act_movey = -1;
													}
												}
												u = 1;
												v = 1;
												if(mc.typ == 7)
												{
													u = 2;
													v = 1.5;
												}
												atoy[mc.b_c] -= 0.8 * GSPEED;
												atoy[mc.b_c1] -= 0.8 * GSPEED;
												atoy[mc.b_c2] += 0.8 * GSPEED;
												atoy[mc.b_c3] += 0.8 * GSPEED;
												atox[mc.b_c] *= Math.pow(0.9,GSPEED);
												atoy[mc.b_c] *= Math.pow(0.9,GSPEED);
												atox[mc.b_c1] *= Math.pow(0.9,GSPEED);
												atoy[mc.b_c1] *= Math.pow(0.9,GSPEED);
												atox[mc.b_c2] *= Math.pow(0.9,GSPEED);
												atoy[mc.b_c2] *= Math.pow(0.9,GSPEED);
												atox[mc.b_c3] *= Math.pow(0.9,GSPEED);
												atoy[mc.b_c3] *= Math.pow(0.9,GSPEED);
												atoy[mc.b_c] += Number(mc2.act_movey) * 2 * GSPEED * v;
												atoy[mc.b_c1] += Number(mc2.act_movey) * 2 * GSPEED * v;
												atox[mc.b_c] += Number(mc2.act_movex) * 1 * GSPEED * u;
												atox[mc.b_c1] += Number(mc2.act_movex) * 1 * GSPEED * u;
												atox[mc.b_c2] += Number(mc2.act_movex) * 0.5 * GSPEED * u;
												atox[mc.b_c3] += Number(mc2.act_movex) * 0.5 * GSPEED * u;
												aio[mc.b_c] = true;
												aio[mc.b_c1] = true;
												aio[mc.b_c2] = true;
												aio[mc.b_c3] = true;
												atim[mc.b_c] = 0;
												atim[mc.b_c1] = 0;
												atim[mc.b_c2] = 0;
												atim[mc.b_c3] = 0;
												if(mc2.tarx > mc.x + 50 && mc.side == -1 || mc2.tarx < mc.x - 50 && mc.side == 1)
												{
													i2 = int(mc.b_c);
													mc.b_c = mc.b_c1;
													mc.b_c1 = i2;
													i2 = int(mc.b_c2);
													mc.b_c2 = mc.b_c3;
													mc.b_c3 = i2;
													if(mc2.tarx > mc.x)
													{
														mc.side = 1;
													}
													else
													{
														mc.side = -1;
													}
													mc.carbody.scaleY = mc.side;
													xx2 = Math.atan2(Number(ax[mc.b_c]) - Number(ax[mc.b_c1]),Number(ay[mc.b_c]) - Number(ay[mc.b_c1]));
												}
											}
											else
											{
												mc.hea = 0;
											}
											mc2.stability = -0.1;
											xx = ax[mc.b_c];
											yy = ay[mc.b_c];
											TurnBone3(mc2.b_toe,xx,yy,0,0);
											mc2.x = xx;
											mc2.y = yy;
											mc2.tox = 0;
											mc2.toy = 0;
										}
									}
									if(mc.hea <= 0)
									{
										if(!mc.dead)
										{
											mc.dead = true;
											if(mc.master != -1)
											{
												mc2.hea = 0;
												mc2.visible = false;
												mc2.alpha = 0;
											}
											mc.gotoAndStop(3);
											mc.carbody.scaleY = mc.side;
											if(mc.typ == 4)
											{
												PlaySound(s_drone_die,mc.x,mc.y);
											}
											else
											{
												PlaySound(s_corvett_die,mc.x,mc.y);
											}
											if(mc.typ == 4)
											{
												PhysicsExplosion(ax[mc.b_c1],ay[mc.b_c1],200,8,30,-1,"vehicle");
											}
											else
											{
												PhysicsExplosion(ax[mc.b_c1],ay[mc.b_c1],400,11,80,-1,"vehicle");
											}
										}
									}
									mc.x = ax[mc.b_c];
									mc.y = ay[mc.b_c] + 100;
									mc.carbody.y = -100;
									mc.carbody.rotation = 270 - xx2 / Math.PI * 180;
								}
								else if(mc.typ == 5)
								{
									ax[mc.b_c0] = mc.x;
									ay[mc.b_c0] = mc.y;
									atox[mc.b_c0] = 0;
									atoy[mc.b_c0] = 0;
									if(mc.resttim > 0)
									{
										--mc.resttim;
									}
									i2 = 0;
									while(i2 < 9)
									{
										mc["ch" + i2].x = Number(ax[mc["b_c" + i2]]) - mc.x;
										mc["ch" + i2].y = Number(ay[mc["b_c" + i2]]) - mc.y;
										aio[mc["b_c" + i2]] = true;
										atim[mc["b_c" + i2]] = 0;
										mc["ch" + i2].rotation = 180 - Math.atan2(Number(ax[mc["b_c" + i2]]) - Number(ax[mc["b_c" + (i2 + 1)]]),Number(ay[mc["b_c" + i2]]) - Number(ay[mc["b_c" + (i2 + 1)]])) * 180 / Math.PI;
										mc["ch" + i2].scaleY = Dist2D(ax[mc["b_c" + i2]],ay[mc["b_c" + i2]],ax[mc["b_c" + (i2 + 1)]],ay[mc["b_c" + (i2 + 1)]]) * 0.01;
										if(mc.resttim <= 0)
										{
											if(mc.master == -1)
											{
												if(!key_pick)
												{
													if(mens[MP_myid].incar == -1)
													{
														if(Dist2D(ax[mc["b_c" + i2]],ay[mc["b_c" + i2]],ax[mens[MP_myid].b_arm2],ay[mens[MP_myid].b_arm2]) < 40)
														{
															mc.master = MP_myid;
															mc.holdat = i2;
														}
													}
												}
											}
										}
										if(mc.master != -1)
										{
											if(aactive[mc.master])
											{
												if(Math.round(mc.holdat) == i2)
												{
													mc2 = mens[mc.master];
													mc2.stability = -0.1;
													xx = (ax[mc2.b_body] + Number(ax[mc["b_c" + i2]]) * 3) * 0.25;
													yy = (ay[mc2.b_body] + Number(ay[mc["b_c" + i2]]) * 3) * 0.25;
													xx2 = (atox[mc2.b_body] + Number(atox[mc["b_c" + i2]]) * 3) * 0.25;
													yy2 = (atoy[mc2.b_body] + Number(atoy[mc["b_c" + i2]]) * 3) * 0.25;
													xx2 -= Math.cos(Math.atan2(mc.x - xx,mc.y - yy)) * Number(mc2.act_movex) * 1;
													yy2 -= Math.sin(Math.atan2(mc.x - xx,mc.y - yy)) * Number(mc2.act_movex) * 1;
													lax[mc["b_c" + i2]] = ax[mc["b_c" + i2]] = xx;
													lay[mc["b_c" + i2]] = ay[mc["b_c" + i2]] = yy;
													atox[mc["b_c" + i2]] = xx2;
													atoy[mc["b_c" + i2]] = yy2;
													u = xx2 - Number(atox[mc2.b_body]);
													v = yy2 - Number(atoy[mc2.b_body]);
													atox[mc2.b_body] += u;
													atoy[mc2.b_body] += v;
													atox[mc2.b_toe] += u * 0.8;
													atoy[mc2.b_toe] += v * 0.8;
													atox[mc2.b_head_start] += u;
													atoy[mc2.b_head_start] += v;
													atox[mc2.b_head_end] += u * 0.9;
													atoy[mc2.b_head_end] += v * 0.9;
													atox[mc2.b_arm1] += u;
													atoy[mc2.b_arm1] += v;
													atox[mc2.b_arm2] += u;
													atoy[mc2.b_arm2] += v;
													aio[mc["b_c" + i2]] = true;
													atim[mc["b_c" + i2]] = true;
													if(key_pick)
													{
														key_pick = false;
														mc.master = -1;
														mc.resttim = 10;
													}
													else if(mc.act_fall || Boolean(!mens[mc.master] || mens[mc.master].dead))
													{
														mc.act_fall = false;
														mc.master = -1;
														mc.resttim = 40;
													}
												}
											}
										}
										i2++;
									}
								}
								else if(mc.typ == 6)
								{
									local_speed_x = 0;
									local_speed_y = 0;
									if(mc.attached != -1)
									{
										dx = mc.x;
										dy = mc.y;
										if(mc.side == 1)
										{
											mc.x = doors[mc.attached].x;
										}
										else
										{
											mc.x = doors[mc.attached].x + doors[mc.attached].w;
										}
										mc.y = doors[mc.attached].y;
										local_speed_x = Number(doors[mc.attached].tox);
										local_speed_y = Number(doors[mc.attached].toy);
										if(mc.master != -1)
										{
											dx -= mc.x;
											dy -= mc.y;
											di = Dist2D(dx,dy,0,0) / GSPEED;
											if(di > 50)
											{
												mc.master = -1;
												mc.resttim = 30;
											}
										}
									}
									if(mc.resttim > 0)
									{
										mc.resttim -= 1 * GSPEED2;
									}
									if(mc.resttim <= 0)
									{
										if(mc.master == -1 || mens[mc.master] && mens[mc.master].team == mens[MP_myid].team)
										{
											i2 = 0;
											while(i2 < playerstotal)
											{
												if(mens[i2] && (!key_pick || i2 != MP_myid))
												{
													if(i2 == MP_myid || !mens[i2].isplayer)
													{
														if(aactive[i2])
														{
															if(!mens[i2].dead)
															{
																if(mens[i2].incar == -1)
																{
																	if(mens[i2].side == mc.side)
																	{
																		if(mens[i2].x < mc.x && mc.side == 1 || mens[i2].x > mc.x && mc.side == -1)
																		{
																			if(Dist2D(mc.x,mc.y,ax[mens[i2].b_body],ay[mens[i2].b_body]) < 50)
																			{
																				if(mens[i2].act_movey == -1 || mens[i2].act_movex == mc.side)
																				{
																					if(mens[i2].act_movey != 1)
																					{
																						if(Dist2D(atox[mens[i2].b_body],atoy[mens[i2].b_body],local_speed_x,local_speed_y) < 14)
																						{
																							if(ay[mens[i2].b_body] > mc.y)
																							{
																								if(atoy[mens[i2].b_body] > 0.2 + local_speed_y)
																								{
																									if(!mens[i2].stand)
																									{
																										if(mc.attached == -1 || TracePointOnlyBoxes(mc.x + Number(mc.side) * 5,mc.y - 5) && TracePointOnlyBoxes(mc.x - Number(mc.side) * 5,mc.y + 5))
																										{
																											mc.master = i2;
																											if(MP_mode)
																											{
																												if(i2 == MP_myid)
																												{
																													MP_last_linked = i;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												i2++;
											}
										}
									}
									if(mc.master != -1)
									{
										if(aactive[mc.master])
										{
											mc2 = mens[mc.master];
											if(mc2.stability > -0.1)
											{
												mc2.stability = -0.1;
											}
											ax[mc2.b_arm2] = mc.x;
											ay[mc2.b_arm2] = mc.y;
											if(GET_LITE_PHYS())
											{
												lax[mc2.b_arm2] = mc.x;
												lay[mc2.b_arm2] = mc.y;
											}
											atox[mc2.b_arm2] = local_speed_x;
											atoy[mc2.b_arm2] = local_speed_y;
											if(mc2.idd == MP_myid)
											{
												xx2 = Math.sqrt(GSPEED2);
											}
											else
											{
												xx2 = Math.sqrt(GSPEED);
											}
											yy2 = xx2;
											u = xx2 * 2;
											xx2 *= 1.5;
											if(mc.act_fall || (mc2.isplayer && (mc2.act_movey == 1 || mc2.act_movex == -Number(mc2.side)) || Boolean(mc2.dead) || mc2.stability < -0.3))
											{
												atoy[mc2.b_toe] += 0.5;
												mc.act_fall = false;
												mc.master = -1;
												mc.resttim = 60;
											}
											else
											{
												if(!mc2.isplayer || mc2.act_movey == -1 || mc2.act_movex == mc2.side || key_pick && mc.master == MP_myid)
												{
													if(ax[mc2.b_toe] < mc.x + 5 && mc2.side == 1 || ax[mc2.b_toe] > mc.x - 5 && mc2.side == -1)
													{
														atoy[mc2.b_toe] -= 0.5 * xx2;
														atoy[mc2.b_body] -= 0.5 * xx2;
														ay[mc2.b_toe] -= 2 * u;
														ay[mc2.b_body] -= 3 * u;
														if(GET_LITE_PHYS())
														{
															lay[mc2.b_toe] -= 2 * u;
															lay[mc2.b_body] -= 3 * u;
														}
														if(Math_abs(atox[mc2.b_leg1]) < 2 || Math_abs(atox[mc2.b_leg2]) < 2)
														{
															atoy[mc2.b_body] *= Math.pow(0.7,yy2);
															atoy[mc2.b_toe] *= Math.pow(0.7,yy2);
															atoy[mc2.b_head_start] *= Math.pow(0.7,yy2);
															atoy[mc2.b_head_end] *= Math.pow(0.7,yy2);
															atoy[mc2.b_body] -= 1 * xx2;
															ay[mc2.b_body] -= 1 * u;
															atoy[mc2.b_head_start] -= 0.6 * xx2;
															ay[mc2.b_head_start] -= 0.6 * u;
															atox[mc2.b_head_start] += Number(mc.side) * 0.8 * xx2;
															atoy[mc2.b_head_end] -= 0.6 * xx2;
															ay[mc2.b_head_end] -= 0.6 * u;
															atox[mc2.b_head_end] += Number(mc.side) * 1 * xx2;
															atoy[mc2.b_toe] -= 1 * xx2;
															ay[mc2.b_toe] -= 1 * u;
															if(!GET_LITE_PHYS())
															{
																atox[mc2.b_body] += Number(mc.side) * 0.7 * xx2;
																atox[mc2.b_toe] += Number(mc.side) * 0.5 * xx2;
															}
															if(GET_LITE_PHYS())
															{
																lay[mc2.b_body] -= 1 * u;
																lay[mc2.b_toe] -= 1 * u;
																lay[mc2.b_head_start] -= 0.6 * u;
																lay[mc2.b_head_end] -= 0.6 * u;
															}
															if(ay[mc2.b_toe] < mc.y - 5 || (ay[mc2.b_leg1] < mc.y || ay[mc2.b_leg2] < mc.y))
															{
																mc.master = -1;
																mc.resttim = 30;
																mc2.stability = 0.5;
																mc2.sit = 1;
																mc2.tox = local_speed_x;
																mc2.toy = local_speed_y;
																u = mc.x + Number(mc2.side) * 5 * Number(mc2.scale) - mc2.x;
																v = mc.y + sitmax * Number(mc2.scale) - mc2.y;
																u = -u;
																v = -v;
																mc2.x = mc.x + Number(mc2.side) * 5 * Number(mc2.scale);
																mc2.y = mc.y + sitmax * Number(mc2.scale);
																mc2.gui.x += u;
																mc2.gui.y += v;
																mc2.body.x += u;
																mc2.body.y += v;
																mc2.head.x += u;
																mc2.head.y += v;
																mc2.toe.x += u;
																mc2.toe.y += v;
																mc2.arm1.x += u;
																mc2.arm1.y += v;
																mc2.arm2.x += u;
																mc2.arm2.y += v;
																mc2.leg1.x += u;
																mc2.leg1.y += v;
																mc2.leg2.x += u;
																mc2.leg2.y += v;
															}
														}
													}
													else if(mc2.side == 1)
													{
														atox[mc2.b_toe] -= 0.3 * xx2;
													}
													else
													{
														atox[mc2.b_toe] += 0.3 * xx2;
													}
												}
												atoy[mc2.b_arm1] += (mc.y - 5 - Number(ay[mc2.b_arm1])) * 0.1 * xx2;
												atoy[mc2.b_body] += (mc.y - Number(ay[mc2.b_body])) * 0.1 * xx2;
												ay[mc2.b_arm1] += (mc.y - 5 - Number(ay[mc2.b_arm1])) * 0.2 * xx2;
												ay[mc2.b_body] += (mc.y - Number(ay[mc2.b_body])) * 0.2 * xx2;
												if(GET_LITE_PHYS())
												{
													lay[mc2.b_arm1] += (mc.y - 5 - Number(ay[mc2.b_arm1])) * 0.2 * xx2;
													lay[mc2.b_body] += (mc.y - Number(ay[mc2.b_body])) * 0.2 * xx2;
												}
											}
											atox[mc2.b_body] += (mc.x - Number(ax[mc2.b_body])) * 0.1 * xx2;
											atox[mc2.b_toe] -= Number(mc2.side) * 0.5 * xx2;
											atox[mc2.b_leg1] += Number(mc2.side) * 0.6 * xx2;
											atox[mc2.b_leg2] += Number(mc2.side) * 0.6 * xx2;
											atoy[mc2.b_leg1] -= 0.05 * xx2;
											atoy[mc2.b_leg2] += 0.05 * xx2;
											if(mc2.side == 1)
											{
												if(ax[mc2.b_toe] > mc.x)
												{
													ax[mc2.b_toe] = lax[mc2.b_toe] = mc.x;
													atox[mc2.b_toe] = Math.min(local_speed_x,atox[mc2.b_toe]);
												}
												if(ax[mc2.b_body] > mc.x)
												{
													ax[mc2.b_body] = lax[mc2.b_body] = mc.x;
													atox[mc2.b_body] = Math.min(local_speed_x,atox[mc2.b_body]);
												}
												if(ax[mc2.b_leg2] > mc.x)
												{
													ax[mc2.b_leg2] = lax[mc2.b_leg2] = mc.x;
													atox[mc2.b_leg2] = Math.min(local_speed_x,atox[mc2.b_leg2]);
												}
												if(ax[mc2.b_leg1] > mc.x)
												{
													ax[mc2.b_leg1] = lax[mc2.b_leg1] = mc.x;
													atox[mc2.b_leg1] = Math.min(local_speed_x,atox[mc2.b_leg1]);
												}
											}
											else
											{
												if(ax[mc2.b_toe] < mc.x)
												{
													ax[mc2.b_toe] = lax[mc2.b_toe] = mc.x;
													atox[mc2.b_toe] = Math.max(local_speed_x,atox[mc2.b_toe]);
												}
												if(ax[mc2.b_body] < mc.x)
												{
													ax[mc2.b_body] = lax[mc2.b_body] = mc.x;
													atox[mc2.b_body] = Math.max(local_speed_x,atox[mc2.b_body]);
												}
												if(ax[mc2.b_leg2] < mc.x)
												{
													ax[mc2.b_leg2] = lax[mc2.b_leg2] = mc.x;
													atox[mc2.b_leg2] = Math.max(local_speed_x,atox[mc2.b_leg2]);
												}
												if(ax[mc2.b_leg1] < mc.x)
												{
													ax[mc2.b_leg1] = lax[mc2.b_leg1] = mc.x;
													atox[mc2.b_leg1] = Math.max(local_speed_x,atox[mc2.b_leg1]);
												}
											}
										}
									}
								}
								if(mc.gui.visible)
								{
									mc.gui.x = 0;
									mc.gui.y = -150;
									if(mc.hea > 0)
									{
										mc.gui.h.scaleX = Number(mc.hea) / Number(mc.hmax);
									}
									else if(mc.gui.alpha > 0)
									{
										mc.gui.h.scaleX = 0;
										mc.gui.alpha -= 0.1 * GSPEED;
									}
									else
									{
										mc.gui.visible = false;
									}
								}
								if(!vehicles[i].visible)
								{
									vehicles[i].visible = true;
								}
							}
							else
							{
								aactive[-200 - i] = false;
								if(vehicles[i].visible)
								{
									vehicles[i].visible = false;
								}
							}
						}
						i++;
					}
					i = 0;
					while(i < gunstotal)
					{
						if(guns[i] && guns[i].io)
						{
							if(guns[i].picken_by == MP_myid)
							{
								if(guns[i].ThinkNow != undefined)
								{
									guns[i].ThinkNow(GSPEED2 * Number(guns[i].speed_multiplier));
								}
							}
							else if(guns[i].ThinkNow != undefined)
							{
								guns[i].ThinkNow(GSPEED * Number(guns[i].speed_multiplier));
							}
							if(!guns[i].ready)
							{
								if(MP_mode)
								{
									if(MP_app)
									{
										if(guns[i].picken_by == -1)
										{
											if(!guns[i].ready)
											{
												if(MP_type == 1 || MP_type == 3)
												{
													allow_reload = true;
													i2 = 0;
													while(i2 < playerstotal)
													{
														if(mens[i2] && mens[i2].io)
														{
															if(Math.abs(Number(mens[i2].x) - Number(guns[i].x)) < 800)
															{
																if(Math.abs(Number(mens[i2].y) - Number(guns[i].y)) < 800)
																{
																	allow_reload = false;
																	break;
																}
															}
														}
														i2++;
													}
													if(allow_reload)
													{
														MakeGunByClass(guns[i].model,guns[i],true);
													}
												}
											}
										}
									}
								}
								if(guns[i].picken_by == MP_myid)
								{
									guns[i].floatframe += GSPEED2 * Number(guns[i].speed_multiplier);
								}
								else
								{
									guns[i].floatframe += GSPEED * Number(guns[i].speed_multiplier);
								}
								MeasureStart(13);
								if(guns[i].floatframe >= guns[i].totalFrames)
								{
									if(!guns[i].ready)
									{
										if(guns[i].picken_by != -1 && mens[guns[i].picken_by])
										{
											if(guns[i].onreload != -1)
											{
												TRIGGER_PLAYER_INITIATOR = guns[i].picken_by;
												if(guns[i].picken_by == MP_myid || !mens[guns[i].picken_by].isplayer)
												{
													if(EXEC_TRIGGER(guns[i].onreload))
													{
														if(guns[i].picken_by == MP_myid && MP_mode)
														{
															MP_custom_events += ";exec|" + guns[i].onreload + "#" + guns[i].picken_by + "#" + -1;
														}
													}
												}
											}
										}
									}
									guns[i].floatframe = 2;
									guns[i].ready = true;
									guns[i].gotoAndStop(2);
								}
								else if(guns[i].currentFrame < Math.floor(guns[i].floatframe))
								{
									skips = 0;
									while(skips < Math.floor(guns[i].floatframe) - Number(guns[i].currentFrame))
									{
										guns[i].nextFrame();
										skips++;
									}
								}
								else
								{
									SetMCFrame(guns[i],Math.floor(guns[i].floatframe));
								}
								MeasureStop(13);
							}
							if(guns[i].ready)
							{
								if(guns[i].currentFrame != 2)
								{
									guns[i].gotoAndStop(2);
									guns[i].floatframe = 2;
								}
							}
							if(ax[guns[i].b_p1] > render_minX && ax[guns[i].b_p1] < render_maxX && ay[guns[i].b_p1] > render_minY && ay[guns[i].b_p1] < render_maxY || firstframe || guns[i].picken_by != -1 && aactive[guns[i].picken_by])
							{
								mc = guns[i];
								if(mc.av > mc.stat_averange_max)
								{
									mc.av = Number(mc.stat_averange_max) - Number(mc.stat_averange_substract);
								}
								else if(mc.picken_by == MP_myid)
								{
									mc.av -= Number(mc.stat_averange_substract) * GSPEED2;
								}
								else
								{
									mc.av -= Number(mc.stat_averange_substract) * GSPEED;
								}
								if(mc.av < mc.stat_averange_min)
								{
									mc.av = mc.stat_averange_min;
								}
								aactive[-1 - i] = true;
								if(mc.forcars == false)
								{
									if(mc.picken_by != -1)
									{
										if(!mens[mc.picken_by] || !mens[mc.picken_by].io)
										{
											mc.picken_by = -1;
										}
									}
									if(mc.picken_by != -1 && mens[mc.picken_by])
									{
										mc2 = mens[mc.picken_by];
										mc.scaleY = mc2.side * Math.abs(mc.scaleY);
										/*if(mc.alpha != mc2.alpha)
										{
											mc.alpha = mc2.alpha; 
										}*/
										if(mc2.curwea == i)
										{
											if(!mc2.brk_arms)
											{
												xx = Math.atan2(Number(ax[mc2.b_body]) - Number(ax[mc2.b_arm1]), Number(ay[mc2.b_body]) - Number(ay[mc2.b_arm1])) - mc.hold_angle * mc2.side;
												yy = chdef[mc.ch_ch1];
												TurnBone2(mc.b_p1,ax[mc2.b_arm1] + Math.sin(xx - Math.PI / 2) * Number(mc.zpos) * Number(mc2.side),ay[mc2.b_arm1] + Math.cos(xx - Math.PI / 2) * Number(mc.zpos) * Number(mc2.side),mc2 as player,1);
												if(!mc2.dying || mc2.isplayer || !EASY_MODE)
												{
													TurnBone2(mc.b_p2,Number(ax[mc2.b_arm1]) - Math.sin(xx) * yy + Math.sin(xx - Math.PI / 2) * Number(mc.zpos) * Number(mc2.side),
															          Number(ay[mc2.b_arm1]) - Math.cos(xx) * yy + Math.cos(xx - Math.PI / 2) * Number(mc.zpos) * Number(mc2.side),mc2 as player,1);
												}
											}
										}
										else
										{
											if(mc.attachment == 0)
											{
												TurnBone2(mc.b_p1,ax[mc2.b_toe],ay[mc2.b_toe],mc2 as player,1);
												TurnBone2(mc.b_p2,ax[mc2.b_leg1],ay[mc2.b_leg1],mc2 as player,1);
											}
											if(mc.attachment == 1)
											{
												xx = Math.atan2(Number(ax[mc2.b_body]) - Number(ax[mc2.b_toe]),Number(ay[mc2.b_body]) - Number(ay[mc2.b_toe])) - Math.PI / 2;
												TurnBone2(mc.b_p2,Number(ax[mc2.b_toe]) - Math.sin(xx) * 15 * Number(mc2.side) * Number(mc2.scale),Number(ay[mc2.b_toe]) - Math.cos(xx) * 15 * Number(mc2.side) * Number(mc2.scale),mc2 as player,1);
												TurnBone2(mc.b_p1,Number(ax[mc2.b_body]) - Math.sin(xx) * 15 * Number(mc2.side) * Number(mc2.scale),Number(ay[mc2.b_body]) - Math.cos(xx) * 15 * Number(mc2.side) * Number(mc2.scale),mc2 as player,1);
											}
											if(mc.attachment == 2)
											{
												TurnBone2(mc.b_p1,ax[mc2.b_head_start],ay[mc2.b_head_start],mc2 as player,1);
												TurnBone2(mc.b_p2,ax[mc2.b_head_end],ay[mc2.b_head_end],mc2 as player,1);
											}
											if(mc.attachment == 3)
											{
												TurnBone2(mc.b_p1,ax[mc2.b_head_start],ay[mc2.b_head_start],mc2 as player,1);
											}
											if(mc.attachment == 4)
											{
												TurnBone2(mc.b_p1,ax[mc2.b_body],ay[mc2.b_body],mc2 as player,1);
											}
										}
										if(mc2.can_drop_guns)
										{
											if(Boolean(mc2.dead) || !mc2.isplayer && (mc2.dying || mc2.stability < -0.2) && Math.random() < 0.01 * GSPEED && mc2.team != mens[MP_myid].team)
											{
												if(!CASUAL_MODE || !STRICT_MODE || mc2.team != mens[MP_myid].team || mc2.brk_arms || Boolean(mc2.brk_head) || Boolean(mc2.brk_legs) || Boolean(mc2.brk_body))
												{
													if(mc2.curwea == i)
													{
														mc2.curwea = -1;
													}
													ChangedGun(mc.picken_by);
													if(mc2.dead)
													{
														xx = 1 + Math.random() * Math.PI * 2;
														atox[mc.b_p1] += Math.sin(xx) * 2;
														atoy[mc.b_p1] += Math.cos(xx) * 2;
														atox[mc.b_p2] -= Math.sin(xx) * 2;
														atoy[mc.b_p2] -= Math.cos(xx) * 2;
													}
													if(mc.picken_by == MP_myid)
													{
														if(mc.wep == -2)
														{
															if(mc.nadekind == 1)
															{
																if(grenades_total > 0)
																{
																	grenades_total = grenades_total - 1;
																}
															}
															if(mc.nadekind == 2)
															{
																if(grenades_port_total > 0)
																{
																	grenades_port_total = grenades_port_total - 1;
																}
															}
															if(mc.nadekind == 3)
															{
																if(grenades_sh_total > 0)
																{
																	grenades_sh_total = grenades_sh_total - 1;
																}
															}
														}
													}
													mc.picken_by = -1;
												}
											}
										}
										WakeUpAtom(mc.b_p1);
										WakeUpAtom(mc.b_p2);
										amat[mc.b_p1] = -1;
										amat[mc.b_p2] = -1;
									}
									else
									{
										ok = true;
										i2 = 0;
										while(i2 < gunstotal && ok)
										{
											if(guns[i2] && guns[i2].io)
											{
												if(!guns[i2].forcars)
												{
													if(guns[i2].wep > 0)
													{
														if(guns[i2].picken_by == MP_myid)
														{
															if(guns[i2].model == mc.model)
															{
																if(guns[i2].upg >= mc.upg)
																{
																	ok = false;
																}
															}
														}
													}
												}
											}
											i2++;
										}
										if((mc.command != -1 || !ok) && mc.command != mens[MP_myid].team && !MP_mode)
										{
											if(!SUPER_COMPUTER && (!HQ || c_sim_stress) || MEAT_MODE)
											{
												++mc.deadtim;
											}
											if(c_sim_stress)
											{
												if(mc.deadtim > 200)
												{
													mc.alpha -= 0.4;
												}
											}
											else if(mc.deadtim > 400)
											{
												mc.alpha -= 0.1;
											}
											if(mc.alpha < 0)
											{
												DestroyGun(i);
											}
										}
										else if(mc.alpha != mc.new_alpha)
										{
											mc.alpha = mc.new_alpha;
										}
									}
								}
								else if(mc.picken_by != -1)
								{
									mc2 = vehicles[mc.picken_by];
									amat[mc.b_p1] = -1;
									amat[mc.b_p2] = -1;
								}
								if(mc && mc.io)
								{
									mc.x = ax[mc.b_p1];
									mc.y = ay[mc.b_p1];
									mc.rotation = -Math.atan2(Number(ax[mc.b_p1]) - Number(ax[mc.b_p2]),Number(ay[mc.b_p1]) - Number(ay[mc.b_p2])) / Math.PI * 180 - 90;
									if(mc.picken_by == -1)
									{
										if(mc.forcars == false)
										{
											i2 = 0;
											while(i2 < playerstotal && mc.picken_by == -1)
											{
												if(mens[i2] && !mens[i2].dead)
												{
													if(!mens[i2].isplayer || MP_myid == i2 && !MP_spectator)
													{
														if(mc.command == -1 || MP_mode && MP_type == 1 || mc.command != -1 && mc.command == mens[i2].team && (mens[i2].isplayer || mens[MP_myid].team != mens[i2].team))
														{
															if(mens[i2].stability >= -0.5)
															{
																mc2 = mens[i2];
																if(!mc2.brk_arms)
																{
																	if(mc.x > mc2.x - 40)
																	{
																		if(mc.x < mc2.x + 40)
																		{
																			if(mc.y > mc2.y - 90)
																			{
																				if(mc.y < mc2.y + 30)
																				{
																					ok = true;
																					if(MP_mode)
																					{
																						if(MP_gamestate != 0)
																						{
																							ok = false;
																						}
																					}
																					if(mc.wep != -2)
																					{
																						i3 = 0;
																						while(i3 < gunstotal && ok)
																						{
																							if(guns[i3] && guns[i3].io)
																							{
																								if(i != i3)
																								{
																									if(!guns[i3].forcars)
																									{
																										if(guns[i3].picken_by == i2 && guns[i3].wep == mc.wep)
																										{
																											ok = false;
																										}
																									}
																								}
																							}
																							++i3;
																						}
																					}
																					if(i2 == MP_myid && key_grab)
																					{
																						ok = false;
																					}
																					if(i2 == MP_myid)
																					{
																						if(mc.wep == -2)
																						{
																							if(mc.nadekind == 1)
																							{
																								if(grenades_total >= 6)
																								{
																									ok = false;
																								}
																							}
																							if(mc.nadekind == 2)
																							{
																								if(grenades_port_total >= 6)
																								{
																									ok = false;
																								}
																							}
																							if(mc.nadekind == 3)
																							{
																								if(grenades_sh_total >= 6)
																								{
																									ok = false;
																								}
																							}
																						}
																					}
																					if(ok)
																					{
																						if(i2 != MP_myid || IgnoreGunPickTempCanI(mc))
																						{
																							if(mc.wep == -2)
																							{
																								if(i2 == MP_myid)
																								{
																									if(mc.nadekind == 1)
																									{
																										++grenades_total;
																										UpdateWeps();
																									}
																									if(mc.nadekind == 2)
																									{
																										++grenades_port_total;
																										UpdateWeps();
																									}
																									if(mc.nadekind == 3)
																									{
																										++grenades_sh_total;
																										UpdateWeps();
																									}
																								}
																							}
																							if(i2 == MP_myid)
																							{
																								if(!firstframe)
																								{
																									PlaySound(s_wea_pickup,mc.x,mc.y);
																								}
																							}
																							mc.picken_by = i2;
																							if(i2 != MP_myid)
																							{
																								if(mc2.curwea == -1 || CalcWepPriority(guns[i]) > CalcWepPriority(guns[mc2.curwea]))
																								{
																									if(mc.wep >= 0)
																									{
																										mc2.curwea = i;
																										mc.deadtim = 0;
																										ChangedGun(i2);
																									}
																								}
																							}
																							if(i2 == MP_myid)
																							{
																								if(AUTO_PICK_NEW_WEPS && !firstframe || mc2.char == 1 && firstframe && curA == mc.model || mc2.char == 3 && firstframe && curB == mc.model)
																								{
																									if(mc.wep >= 0)
																									{
																										mc2.curwea = i;
																										ChangedGun(i2);
																									}
																								}
																								else if(!firstframe)
																								{
																									if(mc.wep >= 0)
																									{
																										if(mc.wep <= 9)
																										{
																											weps["gi" + mc.wep].gotoAndStop(2);
																										}
																									}
																								}
																								UpdateWeps();
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												i2++;
											}
										}
										amat[mc.b_p1] = 2;
										amat[mc.b_p2] = 2;
									}
									if(!guns[i].visible)
									{
										guns[i].visible = true;
									}
								}
							}
							else
							{
								aactive[-1 - i] = false;
								if(guns[i].visible)
								{
									guns[i].visible = false;
								}
							}
							if(guns[i] && guns[i].io && guns[i].ray != undefined)
							{
								ok = false;
								ok2 = false;
								if(guns[i].picken_by != -1)
								{
									if(mens[guns[i].picken_by] && !mens[guns[i].picken_by].dead)
									{
										if(mens[guns[i].picken_by].curwea == i)
										{
											ok2 = true;
											xx = guns[i].x;
											yy = guns[i].y;
											xx2 = xx + Math.sin(mens[guns[i].picken_by].ang) * 3000;
											yy2 = yy + Math.cos(mens[guns[i].picken_by].ang) * 3000;
											u = 3000;
											i2 = 0;
											while(i2 < playerstotal)
											{
												if(mens[i2] && (!mens[i2].dying))
												{
													if(!mens[i2].dead)
													{
														if(mens[guns[i].picken_by].team != mens[i2].team)
														{
															if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,Number(mens[i2].x) - PLAYER_WIDTH,Number(mens[i2].y) - 81,mens[i2].x + PLAYER_WIDTH,mens[i2].y) || CheckCrossSimpleOpti(xx,yy,xx2,yy2,mens[i2].x + PLAYER_WIDTH,Number(mens[i2].y) - 81,Number(mens[i2].x) - PLAYER_WIDTH,mens[i2].y))
															{
																if(TraceLine(retux,retuy,xx,yy))
																{
																	ok = true;
																	v = Dist2D(xx,yy,retux,retuy);
																	if(v < u)
																	{
																		xx2 = retux;
																		yy2 = retuy;
																		u = v;
																	}
																}
															}
														}
													}
												}
												i2++;
											}
											i2 = 0;
											while(i2 < boxestotal)
											{
												if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2],boxx[i2] + boxw[i2],boxy[i2]))
												{
													v = Dist2D(xx,yy,retux,retuy);
													if(v < u)
													{
														xx2 = retux;
														yy2 = retuy;
														u = v;
													}
												}
												if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2] + boxh[i2],boxx[i2] + boxw[i2],boxy[i2] + boxh[i2]))
												{
													v = Dist2D(xx,yy,retux,retuy);
													if(v < u)
													{
														xx2 = retux;
														yy2 = retuy;
														u = v;
													}
												}
												if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2],boxy[i2],boxx[i2],boxy[i2] + boxh[i2]))
												{
													v = Dist2D(xx,yy,retux,retuy);
													if(v < u)
													{
														xx2 = retux;
														yy2 = retuy;
														u = v;
													}
												}
												if(CheckCrossSimpleOpti(xx,yy,xx2,yy2,boxx[i2] + boxw[i2],boxy[i2],boxx[i2] + boxw[i2],boxy[i2] + boxh[i2]))
												{
													v = Dist2D(xx,yy,retux,retuy);
													if(v < u)
													{
														xx2 = retux;
														yy2 = retuy;
														u = v;
													}
												}
												i2++;
											}
										}
									}
								}
								MeasureStart(14);
								if(guns[i].ready)
								{
									if(guns[i].riflestatus != undefined)
									{
										if(ok)
										{
											SetMCFrame(guns[i].riflestatus,2);
										}
										else
										{
											SetMCFrame(guns[i].riflestatus,1);
										}
									}
								}
								MeasureStop(14);
								if(ok2 && Boolean(guns[i].ready) && guns[i].picken_by != -1 && mens[guns[i].picken_by])
								{
									guns[i].ray.scaleX = u / 100;
									if(!guns[i].ray.visible)
									{
										guns[i].ray.visible = true;
									}
									guns[i].ray.rotation = (90 - Number(guns[i].rotation) - Number(mens[guns[i].picken_by].ang) / Math.PI * 180) * Number(guns[i].scaleY);
								}
								else if(guns[i].ray.visible)
								{
									guns[i].ray.visible = false;
								}
							}
						}
						i++;
					}
					if(DEBUG_MODE)
					{
					}
					i = 0;
					while(i < timerstotal)
					{
						if(DEBUG_MODE)
						{
						}
						if(timers[i].enabledd)
						{
							if(timers[i].maxcalls > 0 || timers[i].maxcalls == -1)
							{
								yy2 = 1;
								if(timers[i].forcehyperjump)
								{
									timers[i].forcehyperjump = false;
									yy2 = MP_ping2 / c_sim_rt2;
								}
								timers[i].ticknew += GSPEED * yy2;
								if(timers[i].ticknew >= timers[i].ddelay)
								{
									timers[i].ticknew = 0;
									if(timers[i].maxcalls != -1)
									{
										--timers[i].maxcalls;
										if(timers[i].maxcalls <= 0)
										{
											timers[i].enabledd = false;
										}
									}
									if(timers[i].actions_target != -1)
									{
										triggers[timers[i].actions_target].forcehyperjump = false;
										EXEC_TRIGGER(timers[i].actions_target);
									}
								}
							}
						}
						i++;
					}
					i = 0;
					while(i < barrelstotal)
					{
						if(barrels[i].x > -game.x / game_scale - screenX / game_scale && barrels[i].x < -game.x / game_scale + screenX * 2 / game_scale && barrels[i].y > -game.y / game_scale - screenY / game_scale && barrels[i].y < -game.y / game_scale + screenY * 2 / game_scale || ax[barrels[i].b_left_top] > -game.x / game_scale - screenX / game_scale && ax[barrels[i].b_left_top] < -game.x / game_scale + screenX * 2 / game_scale && ay[barrels[i].b_left_top] > -game.y / game_scale - screenY / game_scale && ay[barrels[i].b_left_top] < -game.y / game_scale + screenY * 2 / game_scale || ax[barrels[i].b_left_bottom] > -game.x / game_scale - screenX / game_scale && ax[barrels[i].b_left_bottom] < -game.x / game_scale + screenX * 2 / game_scale && ay[barrels[i].b_left_bottom] > -game.y / game_scale - screenY / game_scale && ay[barrels[i].b_left_bottom] < -game.y / game_scale + screenY * 2 / game_scale)
						{
							aactive[-100 - i] = true;
							mc = barrels[i];
							if(mc.hea > 0)
							{
								mc.x = (ax[mc.b_left_top] + ax[mc.b_right_bottom] + ax[mc.b_right_top] + ax[mc.b_left_bottom]) / 4;
								mc.y = (ay[mc.b_left_top] + ay[mc.b_right_bottom] + ay[mc.b_right_top] + ay[mc.b_left_bottom]) / 4;
								mc.rotation = 180 - Math.atan2(Number(ax[mc.b_left_top]) - Number(ax[mc.b_left_bottom]),Number(ay[mc.b_left_top]) - Number(ay[mc.b_left_bottom])) / Math.PI * 180;
								if(aio[barrels[i].b_left_top] == true || aio[barrels[i].b_left_bottom] == true || aio[barrels[i].b_right_top] == true || aio[barrels[i].b_right_bottom] == true)
								{
									u = Dist2D(ax[barrels[i].b_left_top],ay[barrels[i].b_left_top],ax[barrels[i].b_right_top],ay[barrels[i].b_right_top]);
									v = Dist2D(ax[barrels[i].b_left_top],ay[barrels[i].b_left_top],ax[barrels[i].b_left_bottom],ay[barrels[i].b_left_bottom]);
									yy = Dist2D(ax[barrels[i].b_left_bottom],ay[barrels[i].b_left_bottom],ax[barrels[i].b_right_top],ay[barrels[i].b_right_top]);
									xx = (u + v + yy) * 0.5;
									xx = xx * (xx - u) * (xx - v) * (xx - yy);
									if(xx < 1)
									{
										mc.hea = 0;
										HurtBarrel(i);
									}
								}
							}
							else
							{
								mc.b1.x = (ax[mc.b_left_top] + ax[mc.b_left1] + ax[mc.b_right_top] + ax[mc.b_right1]) / 4 - mc.x;
								mc.b1.y = (ay[mc.b_left_top] + ay[mc.b_left1] + ay[mc.b_right_top] + ay[mc.b_right1]) / 4 - mc.y;
								mc.b1.rotation = -Math.atan2(Number(ax[mc.b_left_top]) - Number(ax[mc.b_left1]),Number(ay[mc.b_left_top]) - Number(ay[mc.b_left1])) / Math.PI * 180;
								mc.b2.x = (ax[mc.b_left_bottom] + ax[mc.b_left2] + ax[mc.b_right_bottom] + ax[mc.b_right2]) / 4 - mc.x;
								mc.b2.y = (ay[mc.b_left_bottom] + ay[mc.b_left2] + ay[mc.b_right_bottom] + ay[mc.b_right2]) / 4 - mc.y;
								mc.b2.rotation = -Math.atan2(Number(ax[mc.b_left_bottom]) - Number(ax[mc.b_left2]),Number(ay[mc.b_left_bottom]) - Number(ay[mc.b_left2])) / Math.PI * 180;
								n2 = 0;
								while(n2 < 10)
								{
									if(mc["g" + n2].visible == true)
									{
										mc["g" + n2].x = Number(ax[mc["b_g" + n2]]) - mc.x;
										mc["g" + n2].y = Number(ay[mc["b_g" + n2]]) - mc.y;
										mc["g" + n2].rotation = Number(mc["g" + n2].x) * 3 + n2 * 60;
										if(aio[mc["b_g" + n2]] == false)
										{
											if(mc["g" + n2].alpha > 0)
											{
												mc["g" + n2].alpha -= 0.1;
											}
											else
											{
												mc["g" + n2].visible = false;
												aio[mc["b_g" + n2]] = -1;
											}
										}
										else if(mc["g" + n2].alpha < 1)
										{
											mc["g" + n2].alpha += 0.1;
										}
									}
									++n2;
								}
							}
							if(!barrels[i].visible)
							{
								barrels[i].visible = true;
							}
						}
						else
						{
							aactive[-100 - i] = false;
							if(barrels[i].visible)
							{
								barrels[i].visible = false;
							}
						}
						i++;
					}
					i = 0;
					while(i < flarestotal)
					{
						mc = flare[i];
						if(mc.x > -game.x / game_scale && mc.x < (-game.x + screenX) / game_scale && mc.y > -game.y / game_scale && mc.y < (-game.y + screenY) / game_scale)
						{
							mc.alpha = (mc.alpha + flare_power[i]) / 2;
							if(!mc.visible)
							{
								mc.visible = true;
							}
						}
						else
						{
							mc.alpha /= 2;
							if(mc.visible && mc.alpha < 0.05)
							{
								mc.visible = false;
							}
						}
						if(mc.visible)
						{
							if(HQ || SUPER_COMPUTER)
							{
								mc.f2.x = (-game.x + hscreenX - mc.x) * 0.4;
								mc.f2.y = (-game.y + hscreenY - mc.y) * 0.4;
								mc.f3.x = (-game.x + hscreenX - mc.x) * 0.8;
								mc.f3.y = (-game.y + hscreenY - mc.y) * 0.8;
								mc.f4.x = (-game.x + hscreenX - mc.x) * 1.4;
								mc.f4.y = (-game.y + hscreenY - mc.y) * 1.4;
								mc.f5.x = (-game.x + hscreenX - mc.x) * 1.8;
								mc.f5.y = (-game.y + hscreenY - mc.y) * 1.8;
								mc.f6.x = (-game.x + hscreenX - mc.x) * 1.5;
								mc.f6.y = (-game.y + hscreenY - mc.y) * 1.5;
							}
							else if(mc.f2.visible)
							{
								mc.f2.visible = false;
								mc.f3.visible = false;
								mc.f4.visible = false;
								mc.f5.visible = false;
								mc.f6.visible = false;
							}
						}
						i++;
					}
					player_got_dot_effects = false;
					e = 0;
					while(e < mens[MP_myid].effects.length)
					{
						if(mens[MP_myid].effects[e].type == "DOT")
						{
							player_got_dot_effects = true;
							break;
						}
						e++;
					}
					target_frame = 1;
					if(player_got_dot_effects)
					{
						target_frame = 2;
					}
					if(hp_box.currentFrame != target_frame)
					{
						hp_box.gotoAndStop(target_frame);
						c = new Color();
						c.setTint(target_frame == 1 ? 16711680 : 65280,1);
						hp_box.hp.transform.colorTransform = c;
						c = new Color();
						c.setTint(target_frame == 1 ? 4128768 : 16128,1);
						hp_box.hp_over.transform.colorTransform = c;
					}
					xx = Math.max(Number(mens[MP_myid].hea) / Number(mens[MP_myid].hmax),0);
					hp_box.hp.scaleX = xx;
					if(hp_box.hp_over.scaleX < xx)
					{
						hp_box.hp_over.scaleX = xx;
					}
					else if(hp_box.hp_over.scaleX > xx)
					{
						hp_box.hp_over.scaleX -= 0.01;
					}
					hp_box.hp_over.x = hp_box.hp.x;
					if(!SCREEN_FADE_EFFECTS)
					{
						if(darkness.visible)
						{
							if(MP_mode)
							{
								hp_box.hp_over.scaleX = darkness.alpha;
							}
						}
					}
					hp_box.hp_txt.text = Math.ceil(Math.ceil(xx * Number(mens[MP_myid].hmax))).toString();
					if(mens[MP_myid].incar != -1)
					{
						vehhp.hp.scaleX = Math.max(Number(vehicles[mens[MP_myid].incar].hea) / Number(vehicles[mens[MP_myid].incar].hmax),0);
						vehhp.hp_txt.text = Math.ceil(Math.max(vehicles[mens[MP_myid].incar].hea,0)).toString();
					}
					if(nrg.visible)
					{
						xx = Math.max(energy / energy_max,0);
						nrg.en_txt.text = Math.ceil(Math.ceil(xx * energy_max)).toString();
						nrg.en.scaleX = xx;
					}
					if(mini_scenario_cur != -1)
					{
						if(mini_scenario_cur == 0)
						{
							mc = mens[MP_myid];
							if(mini_scenario_phase == 0)
							{
								i3 = 1;
								if(MP_mode)
								{
									i3 = MP_myspecials[MP_assigning_special].nadekind;
								}
								ok = true;
								i2 = 0;
								while(i2 < gunstotal)
								{
									if(guns[i2] && guns[i2].io)
									{
										if(!guns[i2].forcars)
										{
											if(guns[i2].picken_by == MP_myid)
											{
												if(guns[i2].wep == -2)
												{
													if(guns[i2].nadekind == i3)
													{
														if(!MP_mode)
														{
															guns[i2].x = -10000;
															guns[i2].y = -10000;
															guns[i2].scaleX = 0;
															guns[i2].scaleY = 0;
															game.removeChild(guns[i2]);
															guns[i2] = null;
														}
														else
														{
															guns[i2].alpha = 0;
															guns[i2].io = false;
														}
														i2 = gunstotal;
														ok = false;
														UpdateWeps();
													}
												}
											}
										}
									}
									i2++;
								}
								if(MP_mode)
								{
									if(i3 == 1)
									{
										if(grenades_total > 0)
										{
											--grenades_total;
											ok = false;
											UpdateWeps();
										}
									}
									else if(i3 == 2)
									{
										if(grenades_port_total > 0)
										{
											--grenades_port_total;
											ok = false;
											UpdateWeps();
										}
									}
									else if(i3 == 3)
									{
										if(grenades_sh_total > 0)
										{
											--grenades_sh_total;
											ok = false;
											UpdateWeps();
										}
									}
								}
								if(ok)
								{
									mini_scenario_cur = -1;
									mini_scenario_phase = 0;
								}
							}
							if(mini_scenario_phase == 1)
							{
								if(puls[pulscur] != null)
								{
									if(game.contains(puls[pulscur]))
									{
										game.removeChild(puls[pulscur]);
										puls[pulscur] = null;
									}
								}
								puls[pulscur] = game.addChildAt(new lazer(),game.numChildren);
								NewBullet(puls[pulscur]);
								NoMouse(puls[pulscur]);
								xx = mc.ang + Math.PI;
								puls[pulscur].lag = 0;
								PlaySound(s_nade_throw,mc.x,mc.y - 50);
								puls[pulscur].thisis = "item_grenade";
								puls[pulscur].cclass = 6;
								puls[pulscur].nadekind = 1;
								puls[pulscur].notbliped = true;
								puls[pulscur].x = ax[mc.b_arm2];
								puls[pulscur].y = ay[mc.b_arm2];
								puls[pulscur].nx = ax[mc.b_body];
								puls[pulscur].ny = ay[mc.b_body];
								puls[pulscur].power = 3;
								puls[pulscur].maxpower = 3;
								puls[pulscur].knockback_multiplier = 1;
								puls[pulscur].inwater = ainwater[mc.b_arm2] && wa_friction[ainwater_shape[mc.b_arm2]];
								puls[pulscur].lastin = 0;
								puls[pulscur].lastinbox = boxestotal;
								puls[pulscur].master = MP_myid;
								i3 = 1;
								if(MP_mode)
								{
									i3 = MP_myspecials[MP_assigning_special].nadekind;
								}
								puls[pulscur].nadekind = i3;
								puls[pulscur].maxbulletlife = 60;
								if(i3 == 1)
								{
									puls[pulscur].gotoAndStop(11);
								}
								if(i3 == 2)
								{
									puls[pulscur].gotoAndStop(17);
								}
								if(i3 == 3)
								{
									puls[pulscur].gotoAndStop(19);
									puls[pulscur].maxbulletlife = 60 + 30 * 60;
									puls[pulscur].hasexploded = false;
									puls[pulscur].radius = 0;
									puls[pulscur].hea = 10;
									puls[pulscur].heapo = 90;
									puls[pulscur].losthea = 0;
								}
								puls[pulscur].rotation = 90 - xx / Math.PI * 180;
								puls[pulscur].life = 0;
								yy = Math.cos(xx);
								xx = Math.sin(xx);
								puls[pulscur].spx = 0;
								puls[pulscur].spy = 0;
								puls[pulscur].attached = CreatePoint(puls[pulscur].x,puls[pulscur].y,puls[pulscur].spx,puls[pulscur].spy,3,true,8,-300 - pulscur);
								aactive[puls[pulscur].attached] = 1000;
								aactive[-300 - pulscur] = true;
								mc.arm_nade = puls[pulscur].attached;
								if(MP_mode)
								{
									MP_myspecials[MP_assigning_special].pul = pulscur;
									MP_myspecials[MP_assigning_special].atom = puls[pulscur].attached;
									MP_myspecials[MP_assigning_special].stat = 3;
								}
								nextpul();
							}
							if(mini_scenario_phase >= 1)
							{
								if(!mc.dead)
								{
									if(mini_scenario_phase < 5)
									{
										TurnBone(mens[MP_myid].b_arm2,ax[mens[MP_myid].b_head_end] + Number(mens[MP_myid].side) * 10,ay[mens[MP_myid].b_head_end] + 30,mens[MP_myid],1);
									}
									else if(mini_scenario_phase < 7)
									{
										xx = mc.ang + Math.PI;
										yy = Math.cos(xx);
										xx = Math.sin(xx);
										TurnBone(mens[MP_myid].b_arm2,Number(ax[mens[MP_myid].b_body]) - xx * 25,Number(ay[mens[MP_myid].b_body]) - yy * 25,mens[MP_myid],1);
									}
									xx = mc.ang + Math.PI;
									yy = Math.cos(xx);
									xx = Math.sin(xx);
									if(mini_scenario_phase < 7)
									{
										TurnBone(mens[MP_myid].b_arm1,ax[mens[MP_myid].b_head_end] + Number(mens[MP_myid].side) * 10,ay[mens[MP_myid].b_body] + 40,mens[MP_myid],1);
										if(TraceLineF_nopushers(ax[mc.b_toe],ay[mc.b_toe],ax[mc.b_arm2],ay[mc.b_arm2]))
										{
											ax[mc.arm_nade] = ax[mc.b_arm2];
											ay[mc.arm_nade] = ay[mc.b_arm2];
										}
										else
										{
											ax[mc.arm_nade] = ax[mc.b_toe];
											ay[mc.arm_nade] = ay[mc.b_toe];
										}
										atox[mc.arm_nade] = -xx * 10 * (mini_scenario_phase / 7) + atox[mc.b_body];
										atoy[mc.arm_nade] = -yy * 10 * (mini_scenario_phase / 7) + atoy[mc.b_body];
									}
									if(mini_scenario_phase == 7)
									{
										atox[mc.arm_nade] = -xx * 15 + atox[mc.b_body];
										atoy[mc.arm_nade] = -yy * 15 + atoy[mc.b_body];
										WakeUpAtom(mc.arm_nade);
									}
								}
							}
							if(mini_scenario_phase > 15)
							{
								mini_scenario_cur = -1;
							}
						}
						++mini_scenario_phase;
					}
					if(playerstotal > 0)
					{
						if(PSYCHOBLOOD_MODE == 1)
						{
							i4 = 0;
							while(i4 < 4)
							{
								if(_root["pb" + i4].visible)
								{
									if(_root["pb" + i4].alpha > 0)
									{
										if(Number(mens[MP_myid].hea) / Number(mens[MP_myid].hmax) > 0.5 || GLOBAL_REGEN_SPEED == 0 || GLOBAL_REGEN_DELAY >= 10)
										{
											_root["pb" + i4].alpha -= 0.05 * GSPEED2;
										}
										if(Boolean(mens[MP_myid].dead) && death_cam != MP_myid)
										{
											_root["pb" + i4].alpha = 0;
										}
										if(_root["pb" + i4].alpha > 0.6)
										{
											_root["pb" + i4].alpha = 0.6;
										}
									}
									else
									{
										_root["pb" + i4].visible = false;
									}
								}
								++i4;
							}
						}
						else if(PSYCHOBLOOD_MODE == 2)
						{
							i4 = 0;
							while(i4 < 5)
							{
								if(_root["pb" + i4].visible)
								{
									if(_root["pb" + i4].alpha > 0)
									{
										if(Number(mens[MP_myid].hea) / Number(mens[MP_myid].hmax) > 0.5 || (GLOBAL_REGEN_SPEED == 0 || GLOBAL_REGEN_DELAY >= 10) && mens[MP_myid].hea >= 0)
										{
											_root["pb" + i4].alpha -= 0.02 * GSPEED2;
										}
										else if(mens[MP_myid].hea >= 0)
										{
											_root["pb" + i4].alpha -= 0.01 * GSPEED2;
										}
										else
										{
											_root["pb" + i4].alpha -= 0.005 * GSPEED2;
										}
										if(Boolean(mens[MP_myid].dead) && death_cam != MP_myid)
										{
											_root["pb" + i4].alpha = 0;
										}
										if(_root["pb" + i4].alpha > 0.6)
										{
											_root["pb" + i4].alpha = 0.6;
										}
									}
									else
									{
										_root["pb" + i4].visible = false;
									}
								}
								++i4;
							}
						}
					}
					if(MP_mode && spawn)
					{
						mens[MP_myid].hea = 0;
					}
					firstframe = false;
					get_fps();
				}
				if(MP_mode)
				{
					mens[MP_myid].io = true;
					mens[MP_myid].visible = true;
					if(Boolean(mens[MP_myid].dead) || !mens[MP_myid].isGhost)
					{
						mens[MP_myid].alpha = 1;
					}
					else
					{
						mens[MP_myid].alpha = 0.5;
					}
					mens[MP_myid].deadtim = 0;
					ENTER_TICKED = true;
				}
				c_sim_rt = Number(getTimer()) - c_sim_rt;
				if(c_sim_rt + c_sim_rt2 > 40)
				{
					c_sim_stress = true;
				}
				else
				{
					c_sim_stress = false;
				}
				c_sim_rt2 = getTimer();
				if(whitness.visible)
				{
					if(whitness.alpha > 2)
					{
						whitness.alpha = 1;
					}
					if(whitness.alpha > 0)
					{
						whitness.alpha -= 0.05;
					}
					else
					{
						whitness.alpha = 0;
						whitness.visible = false;
					}
				}
				xx = 0;
				if(myCursor.currentFrame == 7)
				{
					if(mens[MP_myid].curwea != -1)
					{
						mc2 = guns[mens[MP_myid].curwea];
						if(mc2.stat_averange_min != mc2.stat_averange_max)
						{
							xx = (Number(mc2.av) - Number(mc2.stat_averange_min)) * 4;
						}
						if(mc2.stat_cursor == 0)
						{
							myCursor.ch1.visible = myCursor.ch2.visible = true;
							myCursor.ch3.visible = myCursor.ch4.visible = false;
						}
						if(mc2.stat_cursor == 1)
						{
							myCursor.ch1.visible = myCursor.ch2.visible = myCursor.ch4.visible = false;
							myCursor.ch3.visible = true;
						}
						if(mc2.stat_cursor == 2)
						{
							myCursor.ch1.visible = myCursor.ch2.visible = myCursor.ch3.visible = false;
							myCursor.ch4.visible = true;
						}
					}
					else
					{
						myCursor.ch1.visible = myCursor.ch2.visible = myCursor.ch3.visible = false;
						myCursor.ch4.visible = true;
					}
					if(xx > 0)
					{
						myCursor.ch1.alpha = myCursor.ch2.alpha = myCursor.ch3.alpha = myCursor.ch4.alpha = 0.5 / (xx + 1);
					}
					else
					{
						myCursor.ch1.alpha = myCursor.ch2.alpha = myCursor.ch3.alpha = myCursor.ch4.alpha = 1;
					}
					if(xx > 1)
					{
						xx = 1;
					}
					myCursor.ch1.scaleX = myCursor.ch2.scaleX = myCursor.ch3.scaleX = myCursor.ch4.scaleX = myCursor.ch3.scaleY = myCursor.ch4.scaleY = xx * xx + 0.5;
					if(TOOLTIPS && !ANONYMOUS_MODE)
					{
						if(Math_abs(lastcurx - myCursor.x - game.x) + Math_abs(lastcury - myCursor.y - game.y) < 10)
						{
							if(!tooltip_updated)
							{
								tooltip_updated = true;
								str = "";
								ok = true;
								i2 = 0;
								while(i2 < waterstotal)
								{
									if(wa_friction[i2])
									{
										if(myCursor.x > Number(wax[i2]) * game_scale + game.x)
										{
											if(myCursor.x < (wax[i2] + waw[i2]) * game_scale + game.x)
											{
												if(myCursor.y > Number(way[i2]) * game_scale + game.y)
												{
													if(myCursor.y < (way[i2] + wah[i2]) * game_scale + game.y)
													{
														var water_name = waters[i2].title;
														if(wadamage[i2] > 0)
														{
															if (water_name == undefined) {
																str = "<font color=\'#FF0000\'>" + ACID_NAME + "</font>\n";
																str += Number(wadamage[i2]) * 30 + " damage per second\n";
																str += "<font color=\'#FFFF00\'>" + Math.floor(Number(mens[MP_myid].hmax) / Number(wadamage[i2]) / 30 * 10) / 10 + " seconds to die</font>\n";
															}else {
																str = water_name;
															}
														}else
														{
															str = (water_name == undefined) ? WATER_NAME: water_name;
														}
													}
												}
											}
										}
									}
									i2++;
								}
								i2 = 0;
								while(i2 < vehiclestotal)
								{
									if(vehicles[i2].nick != "")
									{
										if(Dist2D(Number(vehicles[i2].x) * game_scale + game.x,Number(vehicles[i2].y) * game_scale + game.y,myCursor.x,myCursor.y) < 150)
										{
											if(vehicles[i2].dead)
											{
												str = "Destroyed ";
											}
											else
											{
												str = "";
												ok = false;
											}
											str += vehicles[i2].nick + "\n";
											i = int(vehicles[i2].master);
											if(i != -1 && mens[i])
											{
												if(mens[i].team == mens[MP_myid].team)
												{
													if(i == MP_myid)
													{
														str += "<font color=\'#00FF00\'>";
													}
													else
													{
														str += "<font color=\'#FFFF00\'>";
													}
												}
												else if(mens[i].dead)
												{
													str += "<font color=\'#AA3333\'>";
												}
												else
												{
													str += "<font color=\'#FF0000\'>";
												}
												if(mens[i].team == mens[MP_myid].team)
												{
													if(i == MP_myid)
													{
														str += "You";
													}
													else
													{
														str += "Ally";
													}
												}
												else
												{
													str += "Enemy";
												}
												str += "</font>";
											}
											else if(!vehicles[i2].vehicle_unlocked) {
												str += "Locked";
											}
											else if(!vehicles[i2].dead)
											{
												str += "Neutral";
											}
										}
									}
									i2++;
								}
								i = 0;
								while(i < playerstotal)
								{
									if(mens[i] && mens[i].io)
									{
										if(mens[i].incar == -1)
										{
											if(mens[i].alpha > 0.5)
											{
												if(Dist2D(Number(ax[mens[i].b_body]) * game_scale + game.x,Number(ay[mens[i].b_body]) * game_scale + game.y,myCursor.x,myCursor.y) < 50)
												{
													str = mens[i].nick + "\n";
													if(mens[i].team == mens[MP_myid].team)
													{
														if(i == MP_myid)
														{
															str += "<font color=\'#00FF00\'>";
														}
														else
														{
															str += "<font color=\'#FFFF00\'>";
														}
													}
													else if(mens[i].dead)
													{
														str += "<font color=\'#AA3333\'>";
													}
													else
													{
														str += "<font color=\'#FF0000\'>";
													}
													if(mens[i].dead)
													{
														str += "Dead ";
													}
													else if(mens[i].dying)
													{
														str += "Dying ";
													}
													else if(mens[i].hunt == -1 && mens[i].team != mens[MP_myid].team && !mens[i].isplayer)
													{
														str += "Inactive ";
													}
													if(mens[i].team == mens[MP_myid].team)
													{
														if(i == MP_myid)
														{
															str += "You";
														}
														else
														{
															str += "Ally";
														}
													}
													else
													{
														str += "Enemy";
													}
													if(Boolean(mens[i].isplayer) && i != MP_myid)
													{
														str += " Player";
													}
													str += "</font>";
													if(!mens[i].dead)
													{
														ok = false;
													}
												}
											}
										}
									}
									i++;
								}
								if(ok)
								{
									i = 0;
									while(i < gunstotal)
									{
										if(guns[i] && guns[i].io)
										{
											if(guns[i].alpha > 0.5)
											{
												if(guns[i].visible)
												{
													if(!guns[i].forcars)
													{
														if(Dist2D(Number(guns[i].x) * game_scale + game.x,Number(guns[i].y) * game_scale + game.y,myCursor.x,myCursor.y) < 40)
														{
															str = GetGunName(i) + "\n";
															if(guns[i].upg != undefined)
															{
																if(guns[i].wep > 0)
																{
																	if(guns[i].upg == 0)
																	{
																		str += "<font color=\'#AAAAAA\'>No upgrades</font>";
																	}
																	else
																	{
																		str += "<font color=\'#AAAAAA\'>Upgrade Level: " + guns[i].upg + "</font>";
																	}
																}
															}
															str += "\n";
															if(guns[i].wep > 0)
															{
																if(guns[i].command == -1 || guns[i].command == mens[MP_myid].team) {
																	str += "<font color=\'#FFFF00\'>Slot: " + guns[i].wep + "</font>";
																} else if(DEBUG_MODE) {
																	str += '<font color="#FF0000">TEAM: ' + guns[i].command + "</font>";
																	str += '<font color="#FFFF00">Slot: ' + guns[i].wep + "</font>";
																}else {
																	str += "<font color=\'#FF0000\'>Unknown technology</font>";
																}
															}
														}
													}
												}
											}
										}
										i++;
									}
								}
								myCursor.txt.htmlText = str;
							}
						}
						else
						{
							lastcurmove = 0;
							lastcurx = myCursor.x + game.x;
							lastcury = myCursor.y + game.y;
							tooltip_updated = false;
						}
					}
				}
				if(gamechatbox2["item" + chat_i3].y > 0)
				{
					ok = true;
				}
				else
				{
					ok = false;
				}
				chat_i = 0;
				while(chat_i < 11)
				{
					if(gamechatbox2["item" + chat_i].visible)
					{
						targ_a = gamechatbox2["item" + chat_i].timer > 0 ? (gamechatbox2["item" + chat_i].y < -18 * 1.5 ? 0.5 : 1) : 0;
						if(DISPLAY_CHAT <= 1)
						{
							gamechatbox2["item" + chat_i].timer -= GSPEED2 * 4;
							if(gamechatbox2["item" + chat_i].y < -18 * 1.5)
							{
								targ_a = 0;
							}
						}
						else
						{
							gamechatbox2["item" + chat_i].timer -= GSPEED2;
						}
						if(gamechatbox2["item" + chat_i].alpha > targ_a)
						{
							gamechatbox2["item" + chat_i].alpha = Math.max(targ_a,Number(gamechatbox2["item" + chat_i].alpha) - Math.max(0.01,0.05 * GSPEED2));
							if(gamechatbox2["item" + chat_i].alpha <= targ_a)
							{
								if(targ_a == 0)
								{
									gamechatbox2["item" + chat_i].visible = false;
								}
							}
						}
						else
						{
							gamechatbox2["item" + chat_i].alpha = Math.min(targ_a,gamechatbox2["item" + chat_i].alpha + Math.max(0.01,0.05 * GSPEED2));
						}
					}
					if(ok)
					{
						--gamechatbox2["item" + chat_i].y;
					}
					++chat_i;
				}
				if(herolist.visible)
				{
					i = 0;
					while(i < MP_playerstotal)
					{
						if(i != MP_myid && (hero[i].f1.text == "Empty" || hero[i].f5.text == ""))
						{
							if(hero[i].f1.text != "Empty")
							{
								hero[i].f1.text = "Empty";
							}
							hero[i].prior = -1;
							hero[i].alpha = Math.max(0.2,Number(hero[i].alpha) - 0.1);
						}
						else
						{
							hero[i].prior = int(hero[i].f3.text) / (int(hero[i].f4.text) + 1);
							hero[i].alpha = Math.min(1,hero[i].alpha + 0.1);
						}
						i++;
					}
					ok = true;
					if(ok)
					{
						ok = false;
						i = 0;
						while(i < MP_playerstotal)
						{
							i2 = 0;
							while(i2 < MP_playerstotal)
							{
								if(i != i2)
								{
									if(hero[i].prior < hero[i2].prior && hero[i].y < hero[i2].y)
									{
										yy = hero[i].y;
										hero[i].y = hero[i2].y;
										hero[i2].y = yy;
										ok = true;
									}
								}
								i2++;
							}
							i++;
						}
						i = 0;
						while(i < MP_playerstotal)
						{
							if(hero[i].y > 17 + 20 * 8)
							{
								hero[i].alpha = 0;
							}
							i++;
						}
					}
				}
				if(THIS_HINT == CURRENT_HINT)
				{
					if(CURRENT_HINT != "")
					{
						if(hintf.visible)
						{
							if(hintf.alpha < 1)
							{
								hintf.alpha += 0.1;
							}
						}
						else
						{
							hintf.visible = true;
							hintf.alpha = 0;
							PlaySound_full(s_hint_appear);
						}
					}
				}
				else if(hintf.visible)
				{
					if(hintf.alpha >= 1)
					{
						PlaySound_full(s_hint_disappear);
					}
					if(hintf.alpha > 0)
					{
						hintf.alpha -= 0.1;
					}
					else
					{
						hintf.visible = false;
					}
				}
				else
				{
					THIS_HINT = CURRENT_HINT;
					hintf.txt.htmlText = CURRENT_HINT;
				}
				if(hintf.visible)
				{
					hintf.txt.alpha = 0.8 + Math.sin(PITIMER) * 0.2;
					PITIMER += 0.1;
					if(PITIMER > Math.PI * 2)
					{
						PITIMER -= Math.PI * 2;
					}
				}
				UpdateGravitatorVol();
				DamageSoundLogic(GSPEED);
				if(DEBUG_MODE)
				{
					try
					{
						debug_screen.x = game.x;
						debug_screen.y = game.y;
					}
					catch(e:Error)
					{
					}
				}
				if(DRAW_TRACE_LINES) {
					line_screen.x = game.x;
					line_screen.y = game.y;
				}
				if(SCREEN_BLUR) {
					var blurMat:Matrix = new Matrix();
					var blurMat2:Matrix = new Matrix();

					sky.visible = true;
					graphics_3d.visible = true;
					game.alpha = 1;
					graphics_3d_front.visible = true;

					blurMat.translate(game.x, game.y);
					blurMat.scale(1/BLUR_FRACTION, 1/BLUR_FRACTION);
					blurMat2.scale(1/BLUR_FRACTION, 1/BLUR_FRACTION);

					screen_blur_draw.lock();
					screen_blur_draw.draw(sky, blurMat2, sky.transform.colorTransform, null, null);
					screen_blur_draw.draw(graphics_3d, blurMat, null, null, null);
					screen_blur_draw.draw(game, blurMat, null, null, null);
					screen_blur_draw.draw(graphics_3d_front, blurMat, null, null, null);
					screen_blur.bitmapData.applyFilter(screen_blur_draw, new Rectangle(0, 0, screen_blur_draw.width, screen_blur_draw.height), new Point(0, 0), blur_filter);
					screen_blur_draw.unlock();

					sky.visible = false;
					graphics_3d.visible = false;
					game.alpha = 0;
					graphics_3d_front.visible = false;
				}
				if(MP_mode)
				{
					ManageGameTimer();
				}
				if(set_timeouts.length > 0)
				{
					t = getTimer();
					i = 0;
					while(i < set_timeouts.length)
					{
						if(t >= set_timeouts[i].t)
						{
							f = set_timeouts[i].f;
							set_timeouts.splice(i,1);
							i--;
							f();
						}
						i++;
					}
				}
				if (LUA != null) luaFrameListeners.dispatch();
			}
			catch(e:Error)
			{
				SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic have caused error within game loop");
				trace("========= " + e.getStackTrace() + "=========");
				throw e;
			}
			try
			{
				HandleRespawnAndLevelEnd();
			}
			catch(e:Error)
			{
				SpawnLevelLogicErrorIfNeeded(e,"Some level objects or logic are causing error in level change or respawn logic (address: " + respawn_logic_last_addr + ")");
			}
			VarChangePreventEnd();
			if (RENDERING_3D) {
				EXT.startMeasure(7);
				acceleratedRenderer.render();
				EXT.stopMeasure(7);
			}
			EXT.stopMeasure(1);
		}
		
		public function SetTimeout(param1:*, param2:*) : void
		{
			set_timeouts.push({
				"f":param1,
				"t":getTimer() + param2
			});
		}
		
		public function HandleRespawnAndLevelEnd() : *
		{
			respawn_logic_last_addr = 0;
			if(!gamemenu.visible)
			{
				if(darkness.visible)
				{
					respawn_logic_last_addr = 1;
					if(mens[MP_myid].dead && !MP_spectator || LEVEL_END_FORCE != "")
					{
						respawn_logic_last_addr = 2;
						if(!MP_mode)
						{
							if(mens[MP_myid].dead)
							{
								if(MP_fps > 5)
								{
									MP_fps = 5;
								}
							}
						}
						respawn_logic_last_addr = 3;
						if(darkness.alpha < 1)
						{
							respawn_logic_last_addr = 4;
							if(LEVEL_END_FORCE == "credits")
							{
								whitesimple.visible = true;
								whitesimple.alpha += 0.02;
								if(whitesimple.alpha > 1.5)
								{
									darkness.alpha += 0.01;
								}
							}
							else
							{
								if(LEVEL_END_FORCE == "complete" && (Number(getTimer()) - LAST_BADGE > 8000 || darkness.alpha < 0.5))
								{
									darkness.alpha += 0.1;
								}
								if(MP_mode)
								{
									if(!spawn)
									{
										if(multiplayer_repsawn_timer_speed != 0)
										{
											if(MP_type == 1 || MP_type == 2 || players_online <= 4)
											{
												darkness.alpha += Math.max(0.005,0.01 * GSPEED * multiplayer_repsawn_timer_speed);
											}
											else if(MP_type == 3)
											{
												darkness.alpha += Math.max(0.005,0.005 * GSPEED * multiplayer_repsawn_timer_speed);
											}
										}
									}
								}
								else
								{
									darkness.alpha += 0.01;
								}
							}
							whitness.alpha = Math.min(1 - darkness.alpha,whitness.alpha);
						}
						else
						{
							system_non_stop = false;
						}
						respawn_logic_last_addr = 5;
						if(!spawn)
						{
							if(MP_mode && MP_type == 2)
							{
								if(death_cam != -1 && Boolean(mens[death_cam].dead))
								{
									if(darkness.alpha > 0.5)
									{
										darkness.alpha = 0.5;
									}
								}
								else
								{
									darkness.alpha = 0;
								}
							}
						}
						respawn_logic_last_addr = 6;
						if(!system_non_stop)
						{
							if(darkness.alpha >= 1)
							{
								respawn_logic_last_addr = 7;
								if(MP_mode && LEVEL_END_FORCE != "exit" && LEVEL_END_FORCE != "refresh")
								{
									if(!MP_spectator)
									{
										respawn_logic_last_addr = 8;
										GCTime();
										ok = true;
										i4 = 0;
										if(MP_type == 1 || MP_type == 3)
										{
											while(ok && i4 < 3000)
											{
												++i4;
												ok = true;
												MP_start_x = g_minx + 100 + (g_maxx - g_minx - 200) * Math.random();
												MP_start_y = g_miny + 100 + (g_maxy - g_miny - 200) * Math.random();
												if(TracePointNoRagdolls(MP_start_x,MP_start_y - 50))
												{
													if(TracePointNoRagdolls(MP_start_x - 10,MP_start_y - 50))
													{
														if(TracePointNoRagdolls(MP_start_x + 10,MP_start_y - 50))
														{
															if(!TracePointNoRagdolls(MP_start_x - 10,MP_start_y + 50))
															{
																if(!TracePointNoRagdolls(MP_start_x + 10,MP_start_y + 50))
																{
																	if(!TracePointNoRagdolls(MP_start_x,MP_start_y + 50))
																	{
																		ok = false;
																	}
																}
															}
														}
													}
												}
												if(!ok)
												{
													if(MP_type == 3)
													{
														if(i4 < 1500)
														{
															ok2 = true;
															i5 = 0;
															while(i5 < playerstotal)
															{
																if(mens[i5] && (mens[i5].team != mens[MP_myid].team))
																{
																	if(!mens[i5].dead)
																	{
																		if(!mens[i5].dying)
																		{
																			if(mens[i5].hunt == -1 || i4 > 1500 / 2)
																			{
																				if(Math_abs(Number(mens[i5].x) - MP_start_x) + Math_abs(Number(mens[i5].y) - MP_start_y) < 500 * 500)
																				{
																					ok2 = false;
																				}
																			}
																		}
																	}
																}
																++i5;
															}
															ok = ok2;
														}
													}
													else if(i4 < 1500)
													{
														ok2 = true;
														i5 = 0;
														while(i5 < gunstotal)
														{
															if(guns[i5].picken_by == -1)
															{
																if(guns[i5].stat_power > 0)
																{
																	if(Math_abs(Number(guns[i5].x) - MP_start_x) + Math_abs(Number(guns[i5].y) - MP_start_y) < 300 * 300)
																	{
																		ok2 = false;
																	}
																}
															}
															++i5;
														}
														ok = ok2;
													}
												}
												if(!ok)
												{
													i2 = 0;
													while(i2 < waterstotal)
													{
														if(MP_start_x > Number(wax[i2]) - 100)
														{
															if(MP_start_x < wax[i2] + waw[i2] + 100)
															{
																if(MP_start_y > Number(way[i2]) - 100)
																{
																	if(MP_start_y < way[i2] + wah[i2] + 100)
																	{
																		ok = true;
																	}
																}
															}
														}
														++i2;
													}
													i2 = 0;
													while(i2 < pushstotal)
													{
														if(MP_start_x > Number(pushx[i2]) - 100)
														{
															if(MP_start_x < pushw[i2] + 100)
															{
																if(MP_start_y > Number(pushy[i2]) - 100)
																{
																	if(MP_start_y < pushh[i2] + 100)
																	{
																		ok = true;
																	}
																}
															}
														}
														++i2;
													}
													if(!ok)
													{
														i5 = 0;
														while(i5 < playerstotal)
														{
															if(mens[i5] && (mens[i5].team != mens[MP_myid].team))
															{
																if(!mens[i5].dead)
																{
																	if(Math_abs(Number(mens[i5].x) - MP_start_x) + Math_abs(Number(mens[i5].y) - MP_start_y) < 1500 * 1500)
																	{
																		if(TraceLine(mens[i5].x,Number(mens[i5].y) - 50,MP_start_x,MP_start_y - 50) || TraceLine(mens[i5].tarx,mens[i5].tary,MP_start_x,MP_start_y - 50))
																		{
																			ok = true;
																		}
																	}
																}
															}
															++i5;
														}
													}
												}
											}
										}
										GiveStarterGunsDM(MP_start_x,MP_start_y);
										SetTimeout(function():*
										{
											if(mens[MP_myid].hea > 0)
											{
												GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
											}
										},500);
										SetTimeout(function():*
										{
											if(mens[MP_myid].hea > 0)
											{
												GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
											}
										},1000);
										SetTimeout(function():*
										{
											if(mens[MP_myid].hea > 0)
											{
												GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
											}
										},1500);
										SetTimeout(function():*
										{
											if(mens[MP_myid].hea > 0)
											{
												GiveStarterGunsDM(mens[MP_myid].x,mens[MP_myid].y,mens[MP_myid]);
											}
										},2000);
										mens[MP_myid].lastshotby = -1;
										mens[MP_myid].whenlastshot = getTimer();
										mens[MP_myid].hea = mens[MP_myid].hmax;
										mens[MP_myid].stability = 1;
										mens[MP_myid].sit = 0;
										mens[MP_myid].tox = 0;
										mens[MP_myid].toy = 0;
										mens[MP_myid].inwater = false;
										mens[MP_myid].x = MP_start_x;
										mens[MP_myid].y = MP_start_y;
										mens[MP_myid].effects.length = 0;
										grenades_total = MP_start_grenades_count;
										grenades_port_total = MP_start_grenades_port_count;
										grenades_sh_total = MP_start_grenades_sh_count;
										UpdateWeps();
										mens[MP_myid].hp_head = mens[MP_myid].hea;
										mens[MP_myid].hp_arms = mens[MP_myid].hea;
										mens[MP_myid].hp_legs = mens[MP_myid].hea;
										mens[MP_myid].hp_body = mens[MP_myid].hea;
										mens[MP_myid].curwea = -1;
										mens[MP_myid].dead = false;
										mens[MP_myid].dying = false;
										mens[MP_myid].defih = 0;
										ResetPsychoBlood();
										MP_custom_events += ";spawnef|" + r2(MP_start_x) + "#" + r2(MP_start_y - 41);
										Hurt_nopain(MP_myid);
										SpawnPlayerImmediately(mens[MP_myid]);
										u = Number(ax[mens[MP_myid].b_toe]) - MP_start_x;
										v = Number(ay[mens[MP_myid].b_toe]) - MP_start_y;
										i4 = 0;
										while(i4 < atotal)
										{
											if(aof[i4] == MP_myid)
											{
												ax[i4] -= u;
												ay[i4] -= v;
												lax[i4] -= u;
												lay[i4] -= v;
												ablood[i4] = 0;
												atox[i4] = 0;
												atoy[i4] = 0;
												if(ax[i4] < Number(mens[MP_myid].x) - PLAYER_WIDTH)
												{
													ax[i4] = lax[i4] = Number(mens[MP_myid].x) - PLAYER_WIDTH;
												}
												if(ax[i4] > mens[MP_myid].x + PLAYER_WIDTH)
												{
													ax[i4] = lax[i4] = mens[MP_myid].x + PLAYER_WIDTH;
												}
												if(ay[i4] < Number(mens[MP_myid].y) - 82)
												{
													ay[i4] = lay[i4] = Number(mens[MP_myid].y) - 82;
												}
												if(ay[i4] > mens[MP_myid].y)
												{
													ay[i4] = lay[i4] = mens[MP_myid].y;
												}
											}
											++i4;
										}
										tnds = 10;
										game.x = Math.round(-Number(ax[mens[MP_myid].b_toe]) * game_scale + hscreenX);
										game.y = Math.round(-Number(ay[mens[MP_myid].b_toe]) * game_scale + hscreenY);
										system_non_stop = true;
									}
								}
								else
								{
									respawn_logic_last_addr = 9;
									if(talkerch != null)
									{
										talkerch.stop();
									}
									respawn_logic_last_addr = 10;
									DropGameTimer();
									respawn_logic_last_addr = 11;
									if(LEVEL_END_FORCE == "exit")
									{
										LAST_ERROR = "";
										FUN_TIME_SPEND = 0;
										if(MP_mode)
										{
											respawn_logic_last_addr = 13;
											MP_mode = false;
											respawn_logic_last_addr = 14;
											try
											{
												if(ExternalInterface.available)
												{
													ExternalInterface.call("L2()");
												}
											}
											catch(e:Error)
											{
											}
											gotoAndStop("channel");
										}
										else
										{
											respawn_logic_last_addr = 15;
											try
											{
												if(ExternalInterface.available)
												{
													ExternalInterface.call("L2()");
												}
											}
											catch(e:Error)
											{
											}
											gotoAndStop("campaign");
										}
									}
									respawn_logic_last_addr = 16;
									if(LEVEL_END_FORCE == "restart" || LEVEL_END_FORCE == "refresh")
									{
										LAST_ERROR = "";
										gotoAndStop("loading");
									}
									if(LEVEL_END_FORCE == "failed")
									{
										try
										{
											if(ExternalInterface.available)
											{
												ExternalInterface.call("L2()");
											}
										}
										catch(e:Error)
										{
										}
										FUN_TIME_SPEND = 0;
										gotoAndStop("main");
									}
									if(LEVEL_END_FORCE == "complete")
									{
										try
										{
											if(ExternalInterface.available)
											{
												ExternalInterface.call("L2()");
											}
										}
										catch(e:Error)
										{
										}
										if(MP_mode)
										{
											gotoAndStop("channel");
										}
										else
										{
											gotoAndStop("campaign");
										}
									}
									if(LEVEL_END_FORCE == "credits")
									{
										try
										{
											if(ExternalInterface.available)
											{
												ExternalInterface.call("L2()");
											}
										}
										catch(e:Error)
										{
										}
										if(MUSIC_VOLUME <= 0)
										{
											MUSIC_VOLUME = FX_VOLUME;
										}
										gotoAndStop("credits");
									}
								}
							}
						}
					}
					else if(darkness.alpha > 0)
					{
						darkness.alpha -= 0.1;
					}
					else
					{
						darkness.visible = false;
					}
				}
			}
		}
		
		public function GravitatorPlayAgain(param1:*) : void
		{
			gravitatorch.removeEventListener(Event.SOUND_COMPLETE,GravitatorPlayAgain);
			gravitatorch = s_gravitator.play(0,0,gravitatorTransform);
			if(gravitatorch == null)
			{
				grav_working = false;
			}
			if(grav_working)
			{
				gravitatorch.addEventListener(Event.SOUND_COMPLETE,GravitatorPlayAgain);
			}
		}
		
		public function SongPlayAgain(param1:*) : void
		{
			musch.removeEventListener(Event.SOUND_COMPLETE,SongPlayAgain);
			musch = s_gameplay_song.play(0,0,musTransform);
			if(musch == null)
			{
				mus_working = false;
			}
			if(mus_working)
			{
				musch.addEventListener(Event.SOUND_COMPLETE,SongPlayAgain);
			}
		}
		
		public function main_song_PlayAgain(param1:*) : void
		{
			main_song_ch.removeEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
			main_song_ch = s_main_song.play(0,0,main_song_Transform);
			if(main_song_ch == null)
			{
				main_song_working = false;
			}
			if(main_song_working)
			{
				main_song_ch.addEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
			}
		}
		
		public function am_base_PlayAgain(param1:*) : void
		{
			am_base_ch.removeEventListener(Event.SOUND_COMPLETE,am_base_PlayAgain);
			am_base_ch = s_am_base.play(0,0,am_base_Transform);
			if(am_base_ch == null)
			{
				am_base_working = false;
			}
			if(am_base_working)
			{
				am_base_ch.addEventListener(Event.SOUND_COMPLETE,am_base_PlayAgain);
			}
		}
		
		public function am_wind_PlayAgain(param1:*) : void
		{
			am_wind_ch.removeEventListener(Event.SOUND_COMPLETE,am_wind_PlayAgain);
			am_wind_ch = s_am_wind.play(0,0,am_wind_Transform);
			if(am_wind_ch == null)
			{
				am_wind_working = false;
			}
			if(am_wind_working)
			{
				am_wind_ch.addEventListener(Event.SOUND_COMPLETE,am_wind_PlayAgain);
			}
		}
		
		public function UpdateGravitatorVol() : void
		{
			if(NONMUTE)
			{
				if(grav_working)
				{
					xx = 0;
					yy = 0;
					xx2 = 0;
					yy2 = 0;
					if(currentFrameLabel == "gaming")
					{
						i = 0;
						while(i < decorstotal)
						{
							if(decors[i].currentFrameLabel == "antigravity" || decors[i].currentFrameLabel == "antigravity_left" || decors[i].currentFrameLabel == "antigravity_right" || decors[i].currentFrameLabel == "doomwrath_rapier_active" || decors[i].currentFrameLabel == "doomwrath_rapier_active2" || decors[i].currentFrameLabel == "falkok_ship3" || decors[i].currentFrameLabel == "falkok_ship6")
							{
								smod = dist_to_face / Dist3Dm(Number(decors[i].x) * game_scale + game.x - 400 - 300,Number(decors[i].y) * game_scale + game.y - 200,dist_to_face);
								smod2 = dist_to_face / Dist3Dm(Number(decors[i].x) * game_scale + game.x - 400 + 300,Number(decors[i].y) * game_scale + game.y - 200,dist_to_face);
								xx += smod2 * 0.5;
								yy += 0;
								xx2 += smod * 0.5;
								yy2 += 0;
							}
							++i;
						}
					}
					if(xx < 0.1)
					{
						if(xx2 < 0.1)
						{
							if(yy < 0.1)
							{
								if(yy2 < 0.1)
								{
									xx = 0;
									xx2 = 0;
									yy = 0;
									yy2 = 0;
								}
							}
						}
					}
					xx *= zero_one(1 - darkness.alpha) * Number(vol.volume);
					xx2 *= zero_one(1 - darkness.alpha) * Number(vol.volume);
					yy *= zero_one(1 - darkness.alpha) * Number(vol.volume);
					yy2 *= zero_one(1 - darkness.alpha) * Number(vol.volume);
					if(xx > 1)
					{
						xx = 1;
					}
					if(xx2 > 1)
					{
						xx2 = 1;
					}
					if(yy > 1)
					{
						yy = 1;
					}
					if(yy2 > 1)
					{
						yy2 = 1;
					}
					gravitatorTransform.leftToLeft = xx;
					gravitatorTransform.leftToRight = yy;
					gravitatorTransform.rightToRight = xx2;
					gravitatorTransform.rightToLeft = yy2;
					gravitatorch.soundTransform = gravitatorTransform;
				}
				else
				{
					gravitatorch = s_gravitator.play(0,0,gravitatorTransform);
					if(gravitatorch != null)
					{
						grav_working = true;
						gravitatorch.addEventListener(Event.SOUND_COMPLETE,GravitatorPlayAgain);
					}
				}
				if(mus_working && am_wind_working && am_base_working && main_song_working)
				{
					if(currentFrameLabel == "gaming")
					{
						ok2 = false;
						ok = false;
						if(mens[MP_myid].hunt != -1)
						{
							ok2 = true;
						}
						i = 0;
						while(i < playerstotal && !ok)
						{
							if(mens[i] && mens[i].io)
							{
								if(!mens[i].dead)
								{
									if(!mens[i].dying)
									{
										if(mens[i].team != mens[MP_myid].team)
										{
											if(mens[i].hunt == MP_myid)
											{
												ok = true;
											}
											if(Dist2D(mens[i].x,mens[i].y,mens[MP_myid].x,mens[MP_myid].y) < 400)
											{
												ok2 = true;
											}
										}
									}
								}
							}
							++i;
						}
						if(ok || ok2)
						{
							MUSIC_COLDDOWN = 0;
						}
						else if(MUSIC_COLDDOWN < 100)
						{
							++MUSIC_COLDDOWN;
						}
						else
						{
							CUR_MUSIC_VOLUME -= CUR_MUSIC_VOLUME * 0.01;
						}
						if(MUSIC_COLDDOWN < 100)
						{
							if(ok)
							{
								CUR_MUSIC_VOLUME += MUSIC_VOLUME * 0.04;
							}
							else if(CUR_MUSIC_VOLUME < MUSIC_VOLUME * 0.4)
							{
								CUR_MUSIC_VOLUME += MUSIC_VOLUME * 0.02;
							}
						}
						if(CUR_MUSIC_VOLUME > MUSIC_VOLUME)
						{
							CUR_MUSIC_VOLUME = MUSIC_VOLUME;
						}
						if(CUR_MUSIC_VOLUME < 0)
						{
							CUR_MUSIC_VOLUME = 0;
						}
						if(custom_songs.length > 0)
						{
							CUR_MUSIC_VOLUME = 0;
						}
						musTransform.leftToLeft = CUR_MUSIC_VOLUME * (1 - darkness.alpha);
						musTransform.leftToRight = 0;
						musTransform.rightToRight = CUR_MUSIC_VOLUME * (1 - darkness.alpha);
						musTransform.rightToLeft = 0;
						if(!NOBASE && graphics_3d.hitTestPoint(Number(mens[MP_myid].x) * game_scale + game.x,(Number(mens[MP_myid].y) - 41) * game_scale + game.y,true))
						{
							wind_base += 0.1;
						}
						else
						{
							wind_base -= 0.1;
						}
						if(wind_base > 1)
						{
							wind_base = 1;
						}
						if(wind_base < 0)
						{
							wind_base = 0;
						}
						if(MUSIC_VOLUME > 0)
						{
							am_base_Transform.leftToLeft = FX_VOLUME * (1 - darkness.alpha) * (1 - CUR_MUSIC_VOLUME / MUSIC_VOLUME) * wind_base;
							am_base_Transform.leftToRight = 0;
							am_base_Transform.rightToRight = FX_VOLUME * (1 - darkness.alpha) * (1 - CUR_MUSIC_VOLUME / MUSIC_VOLUME) * wind_base;
							am_base_Transform.rightToLeft = 0;
							am_wind_Transform.leftToLeft = FX_VOLUME * (1 - darkness.alpha) * (1 - CUR_MUSIC_VOLUME / MUSIC_VOLUME) * (1 - wind_base);
							am_wind_Transform.leftToRight = 0;
							am_wind_Transform.rightToRight = FX_VOLUME * (1 - darkness.alpha) * (1 - CUR_MUSIC_VOLUME / MUSIC_VOLUME) * (1 - wind_base);
							am_wind_Transform.rightToLeft = 0;
						}
						else
						{
							am_base_Transform.leftToLeft = FX_VOLUME * (1 - darkness.alpha) * wind_base;
							am_base_Transform.leftToRight = 0;
							am_base_Transform.rightToRight = FX_VOLUME * (1 - darkness.alpha) * wind_base;
							am_base_Transform.rightToLeft = 0;
							am_wind_Transform.leftToLeft = FX_VOLUME * (1 - darkness.alpha) * (1 - wind_base);
							am_wind_Transform.leftToRight = 0;
							am_wind_Transform.rightToRight = FX_VOLUME * (1 - darkness.alpha) * (1 - wind_base);
							am_wind_Transform.rightToLeft = 0;
						}
						main_song_Transform.leftToLeft = 0;
						main_song_Transform.leftToRight = 0;
						main_song_Transform.rightToRight = 0;
						main_song_Transform.rightToLeft = 0;
					}
					else
					{
						musTransform.leftToLeft = 0;
						musTransform.leftToRight = 0;
						musTransform.rightToRight = 0;
						musTransform.rightToLeft = 0;
						am_base_Transform.leftToLeft = 0;
						am_base_Transform.leftToRight = 0;
						am_base_Transform.rightToRight = 0;
						am_base_Transform.rightToLeft = 0;
						am_wind_Transform.leftToLeft = 0;
						am_wind_Transform.leftToRight = 0;
						am_wind_Transform.rightToRight = 0;
						am_wind_Transform.rightToLeft = 0;
						if(main_song_Transform.leftToLeft == 0)
						{
							if(MUSIC_VOLUME > 0)
							{
								main_song_ch.stop();
								main_song_ch = s_main_song.play(0,0,main_song_Transform);
							}
						}
						main_song_Transform.leftToLeft = MUSIC_VOLUME;
						main_song_Transform.leftToRight = 0;
						main_song_Transform.rightToRight = MUSIC_VOLUME;
						main_song_Transform.rightToLeft = 0;
					}
					musch.soundTransform = musTransform;
					am_base_ch.soundTransform = am_base_Transform;
					am_wind_ch.soundTransform = am_wind_Transform;
					main_song_ch.soundTransform = main_song_Transform;
				}
				else
				{
					if(!mus_working)
					{
						musch = s_gameplay_song.play(0,0,musTransform);
						if(musch != null)
						{
							mus_working = true;
							musch.addEventListener(Event.SOUND_COMPLETE,SongPlayAgain);
						}
					}
					if(!am_wind_working)
					{
						am_wind_ch = s_am_wind.play(0,0,am_wind_Transform);
						if(am_wind_ch != null)
						{
							am_wind_working = true;
							am_wind_ch.addEventListener(Event.SOUND_COMPLETE,am_wind_PlayAgain);
						}
					}
					if(!am_base_working)
					{
						am_base_ch = s_am_base.play(0,0,am_base_Transform);
						if(am_base_ch != null)
						{
							am_base_working = true;
							am_base_ch.addEventListener(Event.SOUND_COMPLETE,am_base_PlayAgain);
						}
					}
					if(!main_song_working)
					{
						main_song_ch = s_main_song.play(0,0,main_song_Transform);
						if(main_song_ch != null)
						{
							main_song_working = true;
							main_song_ch.addEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
						}
					}
				}
				gravitatorTransform.volume = 1;
				am_base_Transform.volume = 1;
				am_wind_Transform.volume = 1;
				main_song_Transform.volume = 1;
				musTransform.volume = 1;
			}
		}
		
		public function CreateRestoreLoopSounds() : void
		{
			try
			{
				musch = s_gameplay_song.play(0,0,musTransform);
				musch.soundTransform.volume = 0;
				musch.addEventListener(Event.SOUND_COMPLETE,SongPlayAgain);
		
				am_base_ch = s_am_base.play(0,0,am_base_Transform);
				am_base_ch.soundTransform.volume = 0;
				am_base_ch.addEventListener(Event.SOUND_COMPLETE,am_base_PlayAgain);
		
				am_wind_ch = s_am_wind.play(0,0,am_wind_Transform);
				am_wind_ch.soundTransform.volume = 0;
				am_wind_ch.addEventListener(Event.SOUND_COMPLETE,am_wind_PlayAgain);
		
				gravitatorch = s_gravitator.play(0,0,gravitatorTransform);
				gravitatorch.soundTransform.volume = 0;
				UpdateGravitatorVol();
				gravitatorch.addEventListener(Event.SOUND_COMPLETE,GravitatorPlayAgain);
				talkerch = new SoundChannel();
			}
			catch(e:Error)
			{
			}
		}
		
		public function SetHint(param1:String) : void
		{
			CURRENT_HINT = ReplaceWithVariables(param1);
		}
		
		public function ReplaceWithVariables(param1:String) : String
		{
			var _loc2_:Vector.<String> = null;
			var _loc3_:* = null;
			var _loc4_:int = 0;
			var _loc5_:* = undefined;
			var _loc6_:Boolean = false;
			_loc2_ = new Vector.<String>();
			for(_loc3_ in level_variables)
			{
				if(param1.indexOf(_loc3_) != -1)
				{
					_loc2_.push(_loc3_);
					_loc5_ = _loc3_.length;
					_loc6_ = false;
					_loc4_ = 0;
					while(_loc4_ < _loc2_.length)
					{
						if(_loc5_ > _loc2_[_loc4_].length)
						{
							_loc2_.splice(_loc4_,0,_loc3_);
							_loc6_ = true;
							break;
						}
						_loc4_++;
					}
					if(!_loc6_)
					{
						_loc2_.push(_loc3_);
					}
				}
			}
			_loc4_ = 0;
			while(_loc4_ < _loc2_.length)
			{
				_loc3_ = _loc2_[_loc4_];
				param1 = param1.split(_loc3_).join(level_variables[_loc3_]);
				_loc4_++;
			}
			return param1;
		}
		
		public function DialogTalk(param1:String) : void
		{
			var SoundClass:Class = null;
			var newSound:PB2Sound = null;
			var targetA:String = param1;
			if(NONMUTE)
			{
				try
				{
					talkerch.stop();
					SoundClass = getDefinitionByName(targetA) as Class;
					newSound = new SoundClass();
					talkerch = newSound.play(0,0,vol);
				}
				catch(error:Error)
				{
					talkerch = s_t_switch_denied.play(0,0,vol);
				}
			}
		}

		public function Colorize(txt:String, color:String) : String {
			return "<font color=\'" + color + "\'>" + txt + "</font>";
		}

		public function ColorizeSize(txt:String, color:String, sz:int) : String {
			return "<font color='" + color + "' size='" + sz + "'>" + txt + "</font>";
		}
		
		public function DialogSay(txt:String, speaker:String) : void
		{
			str = "";
			if(speaker == "0")
			{
				speaker = "#AADDFF";
				str = EXOS_NAME;
			}
			if(speaker == "1")
			{
				speaker = "#AAFFAA";
				str = MP_mode ? "Marine" : CMPG_name;
			}
			if(speaker == "2")
			{
				speaker = "#DDFFAA";
				str = NOIR_NAME;
			}
			if(speaker == "3")
			{
				speaker = "#FFAAFF";
				str = PROXY_NAME;
			}
			if(speaker == "4")
			{
				speaker = "#FFAAAA";
				str = "Civil Security";
			}
			txt = ReplaceWithVariables(txt);
			if(str != "")
			{
				str = Colorize(str, "#FFFFFF") + ": " + Colorize(txt, speaker);
			}
			else
			{
				str = Colorize(txt, speaker);
			}
			if(NONMUTE)
			{
				ChatNewMsg(str);
				PlaySound_full(s_chat);
			}
		}
		
		public function ResetVol() : void
		{
			if(NONMUTE)
			{
				vol.volume = FX_VOLUME;
				vol2.volume = MUSIC_VOLUME;
				vol2Custom.volume = CUSTOM_MUSIC_VOLUME;
			}
		}
		
		public function ExpChanged(param1:Number, param2:int, param3:Number, param4:String = "") : void
		{
			var str:String = null;
			var tofixed:String = null;
			var new_val:Number = param1;
			var type:int = param2;
			var added:Number = param3;
			var comment:String = param4;
			var ExpUpdateLevelText:* = function():void
			{
				if(SHOW_EXP_BAR > 1)
				{
					exp_bar.left.text = exp_last_level;
					exp_bar.right.text = exp_last_level + 1;
				}
			};
			var ExpGetLevel:* = function():Number
			{
				return Math.floor(exp_points / exp_points_per_level);
			};
			if(type == EXP_TYPE_SYNC_SKILL_POINTS)
			{
				exp_bar.inc.text = "";
				exp_bar.inc_under.text = "";
			}
			else if(type >= 0 && SHOW_EXP_BAR == 2)
			{
				if(exp_titles[type].length == 0)
				{
					str = "";
				}
				else
				{
					str = " - " + exp_titles[type].split("#").join(comment);
				}
				if(added == Math.floor(added))
				{
					if(added >= 0)
					{
						exp_bar.inc.text = "+" + added + " exp" + str;
					}
					else
					{
						exp_bar.inc.text = added + " exp" + str;
					}
				}
				else if(added >= 0)
				{
					exp_bar.inc.text = "+" + added.toFixed(2) + " exp" + str;
				}
				else
				{
					exp_bar.inc.text = added.toFixed(2) + " exp" + str;
				}
			}
			else
			{
				tofixed = Math.abs(added / SKILL_POINTS_SCALE).toFixed(2);
				if(tofixed == "0.00")
				{
				}
				tofixed = Math.abs(added / SKILL_POINTS_SCALE).toFixed(3);
				if(tofixed == "0.000")
				{
				}
				tofixed = Math.abs(added / SKILL_POINTS_SCALE).toFixed(4);
				if(added >= 0)
				{
					exp_bar.inc.text = "+" + tofixed + " SP";
				}
				else
				{
					exp_bar.inc.text = "-" + tofixed + " SP";
				}
			}
			exp_points_target = new_val;
			if(exp_first_sync_await || SHOW_EXP_BAR == 1)
			{
				exp_first_sync_await = false;
				exp_points = exp_points_target;
				exp_last_level = ExpGetLevel();
				ExpUpdateLevelText();
				return;
			}
			if(exp_timer == uint.MAX_VALUE)
			{
				exp_timer = setInterval(function():*
				{
					var _loc1_:* = undefined;
					var _loc2_:* = undefined;
					var _loc3_:* = undefined;
					_loc1_ = exp_points % exp_points_per_level * 7.8;
					if(ExpGetLevel() != exp_last_level)
					{
						exp_last_level = ExpGetLevel();
						ExpUpdateLevelText();
						if(exp_max_level_this_time < exp_last_level)
						{
							exp_max_level_this_time = exp_last_level;
							PlaySound_full(s_exp_level);
							exp_bar.levelup.visible = true;
							exp_bar.levelup.gotoAndPlay(1);
							exp_bar.levelup.txt_container.txt.text = "Level " + exp_last_level;
						}
					}
					exp_bar.prog.scaleX = _loc1_ / 100;
					exp_bar.prog_end.x = exp_bar.glow.x = 11 + Number(exp_bar.prog.scaleX) * 100;
					exp_bar.inc.x = Math.max(157,Math.min(exp_bar.prog_end.x,800 - 157)) - 263 / 2;
					if(exp_points != exp_points_target)
					{
						if(!exp_bar.visible)
						{
							exp_bar.visible = true;
							exp_bar_shadow.visible = true;
						}
						if(exp_bar.alpha < 0.79)
						{
							exp_bar.alpha = Math.min(0.8,exp_bar.alpha + 0.1);
						}
						else
						{
							_loc3_ = exp_points;
							if(exp_points < exp_points_target)
							{
								exp_bar.glow.alpha = (exp_bar.glow.alpha + 1) / 2;
								exp_points = Math.min((exp_points * 50 + exp_points_target) / 51 + 0.01,exp_points_target);
							}
							else
							{
								exp_points = Math.max((exp_points * 50 + exp_points_target) / 51 - 0.01,exp_points_target);
							}
							if(exp_points == exp_points_target)
							{
								exp_bar.alpha = 1;
								PlaySound_full(s_exp_event_stop);
							}
							else if(exp_points > _loc3_)
							{
								if(Math.floor(_loc3_ * 4) != Math.floor(exp_points * 4))
								{
									PlaySound_full(s_exp_tick);
								}
							}
						}
					}
					else if(exp_bar.glow.alpha > 0)
					{
						exp_bar.glow.alpha = Math.max(0,Number(exp_bar.glow.alpha) - 0.02);
					}
					else if(exp_bar.alpha > 0)
					{
						exp_bar.alpha = Math.max(0,exp_bar.alpha - 0.005);
					}
					else
					{
						exp_bar.visible = false;
						exp_bar_shadow.visible = false;
						clearInterval(exp_timer);
						exp_timer = uint.MAX_VALUE;
						if(currentLabel == "gaming")
						{
							CheckIfPlayerInfoUpdateNeeded(mens[MP_myid]);
						}
					}
					if(Boolean(chat_win) && chat_win.visible)
					{
						if(exp_bar.alpha > 0)
						{
							exp_bar_shadow.alpha = exp_bar.alpha = 0;
						}
					}
					else
					{
						exp_bar_shadow.alpha = Math.min(1,exp_bar.alpha / 0.8 * 1);
						exp_bar_shadow.y = exp_bar.y = Math.max(400,mouseY + 50);
					}
					exp_bar.inc_under.x = exp_bar.inc.x + 131 + 5;
					exp_bar.inc_under.alpha = Number(exp_bar.inc.alpha) * 0.5;
					if(type >= 0 && SHOW_EXP_BAR == 2)
					{
						_loc2_ = exp_points.toFixed(2) + " exp";
					}
					else
					{
						_loc2_ = (exp_points / SKILL_POINTS_SCALE).toFixed(2) + " SP";
					}
					if(exp_bar.inc_under.text != _loc2_)
					{
						exp_bar.inc_under.text = _loc2_;
					}
					if(SHOW_EXP_BAR == 3)
					{
						if(exp_bar.exp_min.x < 0)
						{
							exp_bar.exp_min.x = 11 + _loc1_ + 1;
							exp_bar.exp_max.x = 11 + _loc1_;
							exp_min_level = exp_last_level;
							exp_max_level = exp_last_level;
						}
						if(exp_last_level == exp_min_level)
						{
							if(!exp_bar.exp_min.visible)
							{
								exp_bar.exp_min.visible = true;
							}
							exp_bar.exp_min.x = Math.min(exp_bar.exp_min.x,11 + _loc1_ + 1);
						}
						else
						{
							if(exp_last_level < exp_min_level)
							{
								exp_bar.exp_min.x = 11 + _loc1_ + 1;
								exp_min_level = exp_last_level;
							}
							if(exp_bar.exp_min.visible)
							{
								exp_bar.exp_min.visible = false;
							}
						}
						if(exp_last_level == exp_max_level)
						{
							if(!exp_bar.exp_max.visible)
							{
								exp_bar.exp_max.visible = true;
							}
							exp_bar.exp_max.x = Math.max(exp_bar.exp_max.x,11 + _loc1_);
						}
						else
						{
							if(exp_last_level > exp_max_level)
							{
								exp_bar.exp_max.x = 11 + _loc1_;
								exp_max_level = exp_last_level;
							}
							if(exp_bar.exp_max.visible)
							{
								exp_bar.exp_max.visible = false;
							}
						}
					}
					else
					{
						if(exp_bar.exp_min.visible)
						{
							exp_bar.exp_min.visible = false;
						}
						if(exp_bar.exp_max.visible)
						{
							exp_bar.exp_max.visible = false;
						}
					}
				},16);
			}
		}
		
		public function GivePotentialExpSourceValue(param1:*, param2:*) : void
		{
			param1.exp_potential = Math.min(2,param1.exp_potential + param2);
		}
		
		public function PlayerCanGiveExp(param1:*) : Boolean
		{
			if(param1.exp_potential > 0)
			{
				param1.exp_potential = Math.max(0,Number(param1.exp_potential) - 0.333);
				return true;
			}
			return false;
		}
		
		public function ExpTask(param1:int, param2:String = "", param3:Boolean = false) : void
		{
			var type:int = param1;
			var comment:String = param2;
			var trigger_SP_update:Boolean = param3;
			if(MP_spectator)
			{
				return;
			}
			if(SHOW_EXP_BAR == 3 || type == EXP_TYPE_SYNC_SKILL_POINTS)
			{
				if(trigger_SP_update)
				{
					if(type == EXP_TYPE_SYNC_SKILL_POINTS)
					{
						exp_scheduled.push({
							"type":EXP_TYPE_SYNC_SKILL_POINTS,
							"SHOW_EXP_BAR":3
						});
						ExpHandleTasks();
					}
					else
					{
						skill_points_change_expect_tries = 5;
						if(skill_points_tim == uint.MAX_VALUE)
						{
							skill_points_tim = setInterval(function():*
							{
								if(skill_points_change_expect_tries > 0)
								{
									--skill_points_change_expect_tries;
									exp_scheduled.push({
										"type":EXP_TYPE_DEATH_IN_APPROVED,
										"SHOW_EXP_BAR":3
									});
									ExpHandleTasks();
								}
								else
								{
									--skill_points_change_expect_tries;
									if(skill_points_change_expect_tries < -30)
									{
										clearInterval(skill_points_tim);
										skill_points_tim = uint.MAX_VALUE;
									}
								}
							},1000);
						}
					}
				}
			}
			if(!exp_alive)
			{
				return;
			}
			if(type >= 0)
			{
				exp_scheduled.push({
					"type":type,
					"comment":comment,
					"CUR_CUSTOM_MAP":CUR_CUSTOM_MAP,
					"SHOW_EXP_BAR":2
				});
				ExpHandleTasks();
			}
		}
		
		public function ExpHandleTasks() : void
		{
			var type:int = 0;
			var comment:String = null;
			var cus_map:String = null;
			var exp_bar_type:int = 0;
			var myRequest:* = undefined;
			var myVariables:* = undefined;
			var exp_task_failed:* = undefined;
			var exp_task_done:* = undefined;
			if(exp_busy)
			{
				return;
			}
			if(exp_scheduled.length > 0)
			{
				type = int(exp_scheduled[0].type);
				comment = exp_scheduled[0].comment;
				cus_map = exp_scheduled[0].CUR_CUSTOM_MAP;
				exp_bar_type = int(exp_scheduled[0].SHOW_EXP_BAR);
				exp_scheduled.splice(0,1);
				exp_busy = true;
				if(exp_bar_type == 3)
				{
					exp_task_failed = function(param1:IOErrorEvent):void
					{
						var e:IOErrorEvent = param1;
						myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
						myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
						setTimeout(function():*
						{
							exp_busy = false;
							ExpHandleTasks();
						},5000);
					};
					exp_task_done = function(param1:Event):void
					{
						var delay:int = 0;
						var parts:* = undefined;
						var new_val:Number = NaN;
						var e:Event = param1;
						myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
						myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
						if(SHOW_EXP_BAR == 3)
						{
							parts = myExpLoader.data.split("|");
							new_val = Number(parts[4]) * SKILL_POINTS_SCALE;
							if(new_val != exp_points_target)
							{
								if(!isNaN(new_val) && !isNaN(new_val - exp_points_target))
								{
									ExpChanged(new_val,type,new_val - exp_points_target);
								}
							}
						}
						delay = 1000;
						if(exp_scheduled.length > 5)
						{
							delay /= 2;
						}
						if(exp_scheduled.length > 10)
						{
							delay /= 2;
						}
						setTimeout(function():*
						{
							exp_busy = false;
							ExpHandleTasks();
						},delay);
					};
					if(SHOW_EXP_BAR == exp_bar_type)
					{
						exp_bar.transform.colorTransform = new ColorTransform(0.5,0.75,1,exp_bar.alpha,0,0,0,0);
					}
					myRequest = new URLRequest(MP_public_stat_server);
					myVariables = new URLVariables();
					myVariables.login = def_login;
					myRequest.method = URLRequestMethod.GET;
					myRequest.data = myVariables;
					myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
					myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
					myExpLoader.load(myRequest);
				}
				else if(exp_bar_type == 2)
				{
					exp_task_failed = function(param1:IOErrorEvent):void
					{
						var e:IOErrorEvent = param1;
						myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
						myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
						setTimeout(function():*
						{
							exp_busy = false;
							ExpHandleTasks();
						},5000);
					};
					exp_task_done = function(param1:Event):void
					{
						var delay:int = 0;
						var parts:Array = null;
						var e:Event = param1;
						myExpLoader.removeEventListener(Event.COMPLETE,exp_task_done);
						myExpLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
						if(myExpLoader.data.charAt(0) != "x")
						{
							parts = myExpLoader.data.split("|");
							if(SHOW_EXP_BAR == 2)
							{
								if(parts[0] != "#")
								{
									ExpChanged(Number(parts[0]),type,Number(parts[1]),comment);
								}
								else
								{
									ExpChanged(exp_points_target + Number(parts[1]),type,Number(parts[1]),comment);
								}
							}
						}
						else
						{
							if(myExpLoader.data == "xL")
							{
								exp_alive = false;
								return;
							}
							if(!(myExpLoader.data == "xR" || myExpLoader.data == "xPB" || myExpLoader.data == "xSE"))
							{
								if(myExpLoader.data != "xTL")
								{
									if(myExpLoader.data == "xDL")
									{
										if(currentLabel == "gaming")
										{
											if(SHOW_EXP_BAR == 2)
											{
												DialogSay("Daily experience limit has been reached.","#FFFF00");
											}
											exp_alive = false;
											return;
										}
									}
									else if(currentLabel == "gaming")
									{
										if(SHOW_EXP_BAR == 2)
										{
											DialogSay("Could not sync exp points: " + myExpLoader.data,"#FFFF00");
										}
									}
								}
							}
						}
						delay = 1000;
						if(exp_scheduled.length > 5)
						{
							delay /= 2;
						}
						if(exp_scheduled.length > 10)
						{
							delay /= 2;
						}
						setTimeout(function():*
						{
							exp_busy = false;
							ExpHandleTasks();
						},delay);
					};
					if(SHOW_EXP_BAR == exp_bar_type)
					{
						exp_bar.transform.colorTransform = new ColorTransform(1,1,1,exp_bar.alpha,0,0,0,0);
					}
					myRequest = new URLRequest(MP_exp_server);
					myVariables = new URLVariables();
					if(def_login && def_login != "")
					{
						myVariables.l = def_login;
						myVariables.p = def_password;
					}
					myVariables.map_id = cus_map;
					myVariables.type = type;
					myVariables.comment = comment;
					myRequest.method = URLRequestMethod.POST;
					myRequest.data = myVariables;
					myExpLoader.addEventListener(Event.COMPLETE,exp_task_done);
					myExpLoader.addEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
					myExpLoader.load(myRequest);
				}
				return;
			}
		}
		
		public function ExpLevelDone() : void
		{
			if(can_get_exp_for_level)
			{
				can_get_exp_for_level = false;
				ExpTask(EXP_TYPE_BEAT_CUSTOM);
			}
		}
		
		public function ExpTrackMyHealing(mc:MovieClip) : void
		{
			if(exp_heal_tracked_players.indexOf(mc) == -1)
			{
				exp_heal_tracked_players.push(mc);
				setTimeout(function():*
				{
					if(mc.hea > 0)
					{
						ExpTask(EXP_TYPE_HEAL_AND_TEAMMATE_SURVIVED_IN_APPROVED,mc.nick);
					}
					exp_heal_tracked_players.splice(exp_heal_tracked_players.indexOf(mc),1);
				},7000);
			}
		}
		
		public function MaybeInfoUpdateFor(id:int) : void
		{
			var i:int = id;
			if(SHOW_EXP_BAR == 1)
			{
				return;
			}
			if(i != -1 && mens[i])
			{
				setTimeout(function():*
				{
					mens[i].info = undefined;
				},3000);
			}
		}
		
		public function CheckIfPlayerInfoUpdateNeeded(mc:MovieClip) : void
		{
			var myRequest:URLRequest;
			var myVariables:URLVariables;
			var exp_task_failed:Function;
			var exp_task_done:Function;
			var html:String = null;
			exp_task_failed = function(param1:IOErrorEvent):void
			{
				var e:IOErrorEvent = param1;
				myMPlayerInfoLoader.removeEventListener(Event.COMPLETE,exp_task_done);
				myMPlayerInfoLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
				setTimeout(function():*
				{
					player_info_busy = false;
				},5000);
			};
			exp_task_done = function(param1:Event):void
			{
				var html:String = null;
				var e:Event = param1;
				myMPlayerInfoLoader.removeEventListener(Event.COMPLETE,exp_task_done);
				myMPlayerInfoLoader.removeEventListener(IOErrorEvent.IO_ERROR,exp_task_failed);
				setTimeout(function():*
				{
					player_info_busy = false;
				},100);
				if(currentLabel == "gaming")
				{
					html = myMPlayerInfoLoader.data;
					if(html.indexOf("<w />") != -1)
					{
						html = html.split("<w />").join("");
						if(exp_legens[mc.login_name] == undefined)
						{
							exp_legens[mc.login_name] = true;
							ExpTask(EXP_TYPE_LEGEND,mc.login_name);
						}
					}
					mc.info = {
						"A": mc.login_name,
						"B": SHOW_EXP_BAR,
						"html": myMPlayerInfoLoader.data
					};
					ApplyPlayerRankText(mc as player);
				}
			};
			if(!MP_mode)
			{
				return;
			}
			if(player_info_busy)
			{
				return;
			}
			if(SHOW_EXP_BAR == 1)
			{
				if(mc.gui.txt2.visible)
				{
					mc.gui.txt2.visible = false;
				}
				return;
			}
			if(!mc.gui.txt2.visible)
			{
				mc.gui.txt2.visible = true;
			}
			if(!mc.isplayer)
			{
				return;
			}
			if(!mc.visible)
			{
				return;
			}
			if(!mc.gui.visible)
			{
				return;
			}
			if(mc.info != undefined)
			{
				if(mc.info.A == mc.login_name)
				{
					if(mc.info.B == SHOW_EXP_BAR)
					{
						if(mc.gui.txt2.visible)
						{
							return;
						}
					}
				}
			}
			/*if(mc == mens[MP_myid] && !MP_spectator)
			{
				if(exp_first_sync_await)
				{
					return;
				}
				html = SHOW_EXP_BAR == 2 ? "Level " + exp_last_level : (exp_points_target / SKILL_POINTS_SCALE).toFixed(2).split(".").join(" . ") + " SP";
				if(GUEST_ACCESS)
				{
					html = "";
				}
				mc.gui.txt2.htmlText = html;
				mc.gui.txt2.visible = true;
				mc.gui.txt2.alpha = 0.75;
				mc.info = {
					"A":mc.login_name,
					"B":SHOW_EXP_BAR,
					"html":html
				};
				return;
			}*/
			player_info_busy = true;
			myRequest = new URLRequest(MP_exp_server);
			myVariables = new URLVariables();
			if(def_login && def_login != "")
			{
				myVariables.l = def_login;
				myVariables.p = def_password;
			}
			if(mc == mens[MP_myid] && !MP_spectator) {
				myVariables.A = def_login;
			} else {
				myVariables.A = mc.login_name;
			}
			myVariables.B = SHOW_EXP_BAR;
			myRequest.method = URLRequestMethod.POST;
			myRequest.data = myVariables;
			myMPlayerInfoLoader.addEventListener(Event.COMPLETE, exp_task_done);
			myMPlayerInfoLoader.addEventListener(IOErrorEvent.IO_ERROR, exp_task_failed);
			myMPlayerInfoLoader.load(myRequest);
		}
		
		public function UnloadMenuItems() : void
		{
			if (menu_buttons) removeChild(menu_buttons);
			if (menu_buttons2) removeChild(menu_buttons2);
			if (earth) removeChild(earth);
			if (flike) removeChild(flike);
			removeEventListener(Event.ENTER_FRAME,onEnterFrame2);
		}

		public function IsItSafeToGiveFullServerList() : Boolean
		{
			var curURL:String = null;
			curURL = "iframe";
			try
			{
				curURL = String(ExternalInterface.call(" function(){ return (window!=window.top)?\'iframe\':\'normal\'; }"));
			}
			catch(e:Error)
			{
				curURL = "iframe";
			}
			if(curURL == "normal" || curURL == "null")
			{
				if(_root.loaderInfo.url.toLowerCase().indexOf("plazmaburst2.com") == -1 && _root.loaderInfo.url.indexOf("WebServers/home/") == -1 && _root.loaderInfo.url.indexOf("WebServers/home/") == -1 && _root.loaderInfo.url.indexOf("Projects Flash") == -1 && _root.loaderInfo.url.indexOf("Projects%20Fl") == -1)
				{
					return false;
				}
				return true;
			}
			return false;
		}

		public function LocateMeToMp() : void
		{
			allow_mp_connect = true;
			gotoAndStop("loginform");
		}

		public function mov(param1:MouseEvent) : void
		{
			if(!param1.buttonDown)
			{
				m_hold = -1;
			}
			m = 0;
			while(m < menu_buttons_tot)
			{
				if(menu_buttons["btn" + m].visible)
				{
					if(menu_buttons2.mouseX > menu_buttons["btn" + m].x && menu_buttons2.mouseX < menu_buttons["btn" + m].x + 200 && menu_buttons2.mouseY > menu_buttons["btn" + m].y && menu_buttons2.mouseY < menu_buttons["btn" + m].y + 20)
					{
						m_active = m;
						menu_buttons["btn" + m].btn_over.alpha = Math.min(menu_buttons["btn" + m].btn_over.alpha + 0.5,1);
					}
				}
				++m;
			}
		}
		
		public function onEnterFrame2(param1:Event) : void
		{
			if (autostart_mp) {
				MP_favor_the_shooter = true;
				UnloadMenuItems();
				LocateMeToMp();
				autostart_mp = false;
				return;
			}
			for (var i:int=0; i<0; i++) {
				var ship:MovieClip = earth["sh" + i];
				if(!ship.started)
				{
					if(getTimer() > MUSIC_START + 19020 + i * 300 / 30 * 30)
					{
						ship.started = true;
						ship.gotoAndPlay(1 + Math.floor(Math.random() * 60));
						xx = Math.random() * Math.PI * 2;
						yy = Math.random() * 200;
						ship.x = Math.sin(xx) * yy - 100;
						ship.y = Math.cos(xx) * yy + Math.sin(xx) * yy + 20;
						ship.scaleX = ship.scaleY = 2.5 + Math.cos(xx);
					}
				}
			}
			if(blink_main == 20)
			{
				menu_buttons.txtconsole.htmlText = new_nick + "█";
			}
			++blink_main;
			if(blink_main > 40)
			{
				menu_buttons.txtconsole.htmlText = new_nick;
				blink_main = 0;
			}
			if (DRAW_EARTH) {
				earth.x = 400 + Math.sin(earth_pos1 * 0.25) * Math.cos(earth_pos1 * 0.7) * 100;
				earth.y = 200 + Math.cos(earth_pos1) * Math.sin(earth_pos1 * 0.6) * 50;
				earth.scaleX = earth.scaleY = 1 + Math.sin(earth_pos1 * 0.15) * Math.cos(earth_pos1 * 0.2) * 0.1;
				earth_pos1 += 0.01 * 30 / stage.frameRate;
			}
			if(darkness.alpha > 0)
			{
				darkness.alpha -= 0.1 * 30 / stage.frameRate;
			}
			else
			{
				darkness.visible = false;
			}
			m_time += 0.01 * 30 / stage.frameRate;
			if(m_time > Math.PI * 4)
			{
				m_time -= Math.PI * 4;
			}
			if(m_active == -1)
			{
				if(menu_buttons.alpha > 0.5)
				{
					menu_buttons.alpha -= 0.1 * 30 / stage.frameRate;
				}
			}
			else if(menu_buttons.alpha < 1)
			{
				menu_buttons.alpha += 0.4 * 30 / stage.frameRate;
			}
			if(m_active != lm_active)
			{
				PlaySound_full(ss_info);
			}
			lm_active = m_active;
			for (var m:int=0; m<menu_buttons_tot; m++)
			{
				var btn:MovieClip = menu_buttons["btn" + m];
				if(m_active == m && m_hold == -1 || m_hold == m)
				{
					btn.alpha = 1;
					btn.btn_over.alpha = Math.min(btn.btn_over.alpha + 0.5,1);
				}
				else
				{
					if(btn.btn_over.alpha > 0)
					{
						btn.btn_over.alpha -= 0.1 * 30 / stage.frameRate;
					}
					btn.alpha = 0.5;
				}
				btn.ghost.alpha = Number(btn.btn_over.alpha) * (0.3 + Math.sin(m_time * 4) * 0.1);
				btn.ghost.z = (Number(btn.ghost.z) - Number(btn.btn_over.alpha) * 100) / 2;
				btn.ghost.x = 106 + Math.sin(m_time) * 20;
				btn.ghost.y = 12 + Math.cos(m_time * 2) * 10;
			}
		}
		
		public function UpdateMenuHue() : void
		{
			return;
			var clr:AdjustColor;
			var color_filter:ColorMatrixFilter;
			var filters:Array;
			clr = new AdjustColor();
			clr.brightness = 0;
			clr.contrast = 0;
			clr.hue = menu_hue;
			clr.saturation = 0;
			color_filter = new ColorMatrixFilter(clr.CalculateFinalFlatArray());
			filters = new Array();
			filters.push(color_filter);
			earth.filters = filters;
			menu_buttons.filters = filters;
			errmenu.filters = filters;
		}
		
		public function k_down_space(e:KeyboardEvent) : void
		{
			if(e.keyCode == 32 || e.keyCode == 82)
			{
				stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space);
				myCursor.gotoAndPlay("loading");
				gotoAndStop("loading");
			}
		}
		
		public function NextLevel() : void
		{
			PlaySound_full(ss_info_act);
			if(LEVELS_PASSED < LEVELS_TOTAL)
			{
				AWARD = true;
				CMPG_THIS_LEVEL = LEVELS_PASSED;
				stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
				gotoAndStop("difch");
			}
			else
			{
				stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space2);
				gotoAndStop("credits");
			}
		}
		
		public function UpdateSkinC(skin_id:int) : void
		{
			var skin:MovieClip;
			var skin_mdl:int;
			if(skin_id == 0)
			{
				skin = skin0;
			}
			if(skin_id == 1)
			{
				skin = skin1;
			}
			if(skin_id == 0)
			{
				if(skin_model[skin_id] > 49)
				{
					skin_model[skin_id] = 40;
				}
				if(skin_model[skin_id] < 40)
				{
					skin_model[skin_id] = 49;
				}
			}
			if(skin_id == 1)
			{
				if(skin_model[skin_id] > 61)
				{
					skin_model[skin_id] = 60;
				}
				if(skin_model[skin_id] < 60)
				{
					skin_model[skin_id] = 61;
				}
			}
			skin.gotoAndStop(1);
			skin_mdl = skin_model[skin_id];
			skin.head.gotoAndStop(skin_mdl);
			if(skin_id == 1)
			{
				skin_mdl = 3;
			}
			if(skin_id == 0 && skin_model[skin_id] < 49)
			{
				skin_mdl = 1;
			}
			skin.body.gotoAndStop(skin_mdl);
			skin.toe.gotoAndStop(skin_mdl);
			skin.leg1_upper.gotoAndStop(skin_mdl);
			skin.leg1_middle.gotoAndStop(skin_mdl);
			skin.leg1_lower.gotoAndStop(skin_mdl);
			skin.leg2_upper.gotoAndStop(skin_mdl);
			skin.leg2_middle.gotoAndStop(skin_mdl);
			skin.leg2_lower.gotoAndStop(skin_mdl);
			skin.arm1_upper.gotoAndStop(skin_mdl);
			skin.arm1_lower.gotoAndStop(skin_mdl);
			skin.arm2_upper.gotoAndStop(skin_mdl);
			skin.arm2_lower.gotoAndStop(skin_mdl);
			if(skin_color_head[skin_id] >= clrs.length)
			{
				skin_color_head[skin_id] = 0;
			}
			if(skin_color_head[skin_id] < 0)
			{
				skin_color_head[skin_id] = clrs.length - 1;
			}
			if(skin_color_body[skin_id] >= clrs.length)
			{
				skin_color_body[skin_id] = 0;
			}
			if(skin_color_body[skin_id] < 0)
			{
				skin_color_body[skin_id] = clrs.length - 1;
			}
			if(skin_color_arms[skin_id] >= clrs.length)
			{
				skin_color_arms[skin_id] = 0;
			}
			if(skin_color_arms[skin_id] < 0)
			{
				skin_color_arms[skin_id] = clrs.length - 1;
			}
			if(skin_color_legs[skin_id] >= clrs.length)
			{
				skin_color_legs[skin_id] = 0;
			}
			if(skin_color_legs[skin_id] < 0)
			{
				skin_color_legs[skin_id] = clrs.length - 1;
			}
			skin.head.filters = new Array(clrs[skin_color_head[skin_id]]);
			skin.body.filters = new Array(clrs[skin_color_body[skin_id]]);
			skin.arm1_lower.filters = new Array(clrs[skin_color_arms[skin_id]]);
			skin.arm2_lower.filters = new Array(clrs[skin_color_arms[skin_id]]);
			skin.leg1_upper.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.leg1_middle.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.leg1_lower.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.leg2_upper.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.leg2_middle.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.leg2_lower.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.toe.filters = new Array(clrs[skin_color_legs[skin_id]]);
			skin.arm1_upper.filters = new Array(clrs[skin_color_arms[skin_id]]);
			skin.arm2_upper.filters = new Array(clrs[skin_color_arms[skin_id]]);
		}
		
		public function RefrSkin(skin_id:int) : void
		{
			skin_color_head[skin_id] = 0;
			skin_color_body[skin_id] = 0;
			skin_color_arms[skin_id] = 0;
			skin_color_legs[skin_id] = 0;
		}
		
		public function k_down_space2(e:KeyboardEvent) : void
		{
			if(e.keyCode == 32 || e.keyCode == 82)
			{
				if(camp_score.visible)
				{
					PlaySound_full(ss_info_act);
					camp_score.visible = false;
				}
				else
				{
					NextLevel();
				}
			}
		}
		
		public function ColourBuy(cost:int) : String
		{
			if(CMPG_money >= cost)
			{
				return "#83EC7D"; // Greenish, can afford
			}
			return "#E63D40"; // Reddish, can't afford
		}
		
		public function UpdateTbl() : void
		{
			var upg_level:int = 0;
			creds.text = "$ " + CMPG_money;
			xx = 186;
			yy = game.sample.y;
			ok = true;
			i3 = 0;
			i6 = 0;
			i = 0;
			while(i < inventoryC.length)
			{
				if(gunsA[i] == undefined || gunsA[i] == null)
				{
					gunsA[i] = MakeGunByClass(inventoryC[i].mdl,{});
				}
				ok = false;
				i2 = 0;
				while(i2 < inventoryA.length && !ok)
				{
					if(inventoryA[i2].mdl == inventoryC[i].mdl)
					{
						ok = true;
						i3 = i2;
					}
					++i2;
				}
				if(inventoryC[i].mdl == "item_grenade")
				{
					i2 = 0;
					while(i2 < inventoryA.length)
					{
						if(inventoryA[i2].mdl == inventoryC[i].mdl)
						{
							++i6;
						}
						++i2;
					}
				}
				gunsA[i].model = inventoryC[i].mdl;
				upg_level = ok ? int(inventoryA[i3].upg) : 0;
				gunsA[i].upg = upg_level;
				gunsA[i].gotoAndStop(1);
				gunsA[i].x = xx;
				gunsA[i].y = yy;
				gunsA[i].scaleX = 1;
				gunsA[i].scaleY = 1;
				gunsA[i].ok = ok;
				if(ok)
				{
					gunsA[i].filters = game.sample.filters;
				}
				else
				{
					gunsA[i].filters = game.sample_no.filters;
				}
				if(gunsAt[i] == undefined || gunsAt[i] == null)
				{
					gunsAt[i] = game.addChild(new shop_tit());
				}
				gunsAt[i].x = xx + (Number(game.sample2.x) - Number(game.sample.x));
				gunsAt[i].y = yy;
				gunsAt[i].txt.text = GunModelToGunName(gunsA[i].model);
				gunsA[i].onmade();
				gunsA[i].hold_angle = 0;
				gunsA[i].ypos1 = gunsA[i].ypos2 = 0;
				gunsA[i].i3 = i3;
				if(ok && inventoryC[i].mdl != "item_grenade" && inventoryC[i].mdl != "gun_defecator")
				{
					if(gunsA[i].costupg > 0)
					{
						gunsAt[i].txt2.htmlText = "Upgrade Level: " + upg_level + "/3";
					}
					else
					{
						gunsAt[i].txt2.htmlText = "";
					}
					if(upg_level < 3 && gunsA[i].costupg > 0)
					{
						gunsAt[i].txt3.htmlText = "<font color=\'" + ColourBuy(gunsA[i].costupg) + "\'>Upgrade for $ " + gunsA[i].costupg + "</font>";
					}
					else
					{
						gunsAt[i].txt3.htmlText = "";
					}
				}
				else
				{
					if(gunsA[i].cost != undefined)
					{
						gunsAt[i].txt3.htmlText = "<font color=\'" + ColourBuy(gunsA[i].cost) + "\'>Buy for $ " + gunsA[i].cost + "</font>";
					}
					else
					{
						gunsAt[i].txt3.htmlText = "";
					}
					if(inventoryC[i].mdl == "item_grenade")
					{
						if(i6 > 0)
						{
							gunsAt[i].txt.text = i6 + "x " + gunsAt[i].txt.text;
							if(i6 > 1)
							{
								gunsAt[i].txt.text += "s";
							}
							gunsAt[i].txt2.htmlText = gunsAt[i].txt.text;
						}
						else
						{
							gunsAt[i].txt2.htmlText = "";
						}
					}
					else
					{
						gunsAt[i].txt2.htmlText = "";
					}
				}
				if(ok)
				{
					gunsAt[i].txt.alpha = 1;
				}
				else
				{
					gunsAt[i].txt.alpha = 0.6;
				}
				if(gunsA[i].cost > 0)
				{
					gunsAt[i].txt4.text = "Item price: $ " + gunsA[i].cost;
				}
				else
				{
					gunsAt[i].txt4.text = "";
				}
				if(gunsA[i].costupg > 0)
				{
					gunsAt[i].txt5.text = "Upgrade price: $ " + gunsA[i].costupg;
				}
				else
				{
					gunsAt[i].txt5.text = "";
				}
				if(gunsAl[i] == undefined || gunsAl[i] == null)
				{
					gunsAl[i] = game.addChild(new buy_line());
				}
				gunsAl[i].x = 0;
				gunsAl[i].y = yy - 9.5;
				if(ok && upg_level >= 3 || i6 >= 6)
				{
					gunsAl[i].alpha = 0;
				}
				else
				{
					gunsAl[i].alpha = 1;
				}
				if(firstframe)
				{
					gunsAl[i].addEventListener(MouseEvent.CLICK,function():*
					{
						i = 0;
						while(i < inventoryC.length)
						{
							if(gunsAl[i].hitTestPoint(mouseX,mouseY))
							{
								if(!gunsA[i].ok || gunsA[i].model == "item_grenade")
								{
									if(gunsA[i].model == "item_grenade" && i6 < 6 || gunsA[i].model != "item_grenade")
									{
										i7 = 0;
										i2 = 0;
										while(i2 < inventoryC.length)
										{
											if(i != i2)
											{
												if(gunsA[i2].ok)
												{
													if(gunsA[i2].wep == gunsA[i].wep)
													{
														i3 = i2;
														i7 = gunsA[i2].cost + Number(gunsA[i2].costupg) * Number(gunsA[i2].upg);
													}
												}
											}
											++i2;
										}
										if(CMPG_money >= Number(gunsA[i].cost) - i7)
										{
											if(gunsA[i].cost > 0)
											{
												CMPG_money -= Number(gunsA[i].cost) - i7;
												AddItemToHero1(gunsA[i].model,0);
												if(i7 > 0)
												{
													inventoryA.splice(gunsA[i3].i3,1);
												}
											}
										}
									}
								}
								else if(gunsA[i].upg < 3)
								{
									if(CMPG_money >= gunsA[i].costupg)
									{
										if(gunsA[i].costupg > 0)
										{
											CMPG_money -= gunsA[i].costupg;
											i2 = 0;
											while(i2 < inventoryA.length)
											{
												if(inventoryA[i2].mdl == inventoryC[i].mdl)
												{
													inventoryA[i2].upg += 1;
												}
												++i2;
											}
										}
									}
								}
							}
							++i;
						}
						UpdateTbl();
					});
					gunsAl[i].addEventListener(MouseEvent.MOUSE_OVER,function():*
					{
						PlaySound_full(ss_info);
					});
					gunsAl[i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
					{
						PlaySound_full(ss_info_off);
					});
				}
				yy += 17;
				++i;
			}
			firstframe = false;
		}
		
		public function ColourBuyB(money:int) : String
		{
			if(CMPG_money >= money)
			{
				return "#83EC7D";
			}
			return "#E63D40";
		}
		
		public function UpdateTblB() : void
		{
			creds.text = "$ " + CMPG_money;
			xx = 186;
			yy = game.sample.y;
			ok = true;
			i3 = 0;
			i6 = 0;
			i = 0;
			while(i < inventoryD.length)
			{
				if(gunsB[i] == undefined || gunsB[i] == null)
				{
					gunsB[i] = MakeGunByClass(inventoryD[i].mdl,{});
				}
				ok = false;
				i2 = 0;
				while(i2 < inventoryB.length && !ok)
				{
					if(inventoryB[i2].mdl == inventoryD[i].mdl)
					{
						ok = true;
						i3 = i2;
					}
					++i2;
				}
				if(inventoryD[i].mdl == "item_grenade")
				{
					i2 = 0;
					while(i2 < inventoryB.length)
					{
						if(inventoryB[i2].mdl == inventoryD[i].mdl)
						{
							++i6;
						}
						++i2;
					}
				}
				gunsB[i].model = inventoryD[i].mdl;
				gunsB[i].upg = ok ? inventoryB[i3].upg : 0;
				gunsB[i].gotoAndStop(1);
				gunsB[i].x = xx;
				gunsB[i].y = yy;
				gunsB[i].scaleX = 1;
				gunsB[i].scaleY = 1;
				gunsB[i].ok = ok;
				if(ok)
				{
					gunsB[i].filters = game.sample.filters;
				}
				else
				{
					gunsB[i].filters = game.sample_no.filters;
				}
				if(gunsBt[i] == undefined || gunsBt[i] == null)
				{
					gunsBt[i] = game.addChild(new shop_tit());
				}
				gunsBt[i].x = xx + (Number(game.sample2.x) - Number(game.sample.x));
				gunsBt[i].y = yy;
				gunsBt[i].txt.text = GunModelToGunName(gunsB[i].model);
				gunsB[i].onmade();
				gunsB[i].hold_angle = 0;
				gunsB[i].ypos1 = gunsB[i].ypos2 = 0;
				gunsB[i].i3 = i3;
				if(ok && inventoryD[i].mdl != "item_grenade" && inventoryD[i].mdl != "gun_defecator")
				{
					if(gunsB[i].costupg > 0)
					{
						gunsBt[i].txt2.htmlText = "Upgrade Level: " + inventoryB[i3].upg + "/3";
					}
					else
					{
						gunsBt[i].txt2.htmlText = "";
					}
					if(inventoryB[i3].upg < 3 && gunsB[i].costupg > 0)
					{
						gunsBt[i].txt3.htmlText = "<font color=\'" + ColourBuyB(gunsB[i].costupg) + "\'>Upgrade for $ " + gunsB[i].costupg + "</font>";
					}
					else
					{
						gunsBt[i].txt3.htmlText = "";
					}
				}
				else
				{
					if(gunsB[i].cost != undefined)
					{
						gunsBt[i].txt3.htmlText = "<font color=\'" + ColourBuyB(gunsB[i].cost) + "\'>Buy for $ " + gunsB[i].cost + "</font>";
					}
					else
					{
						gunsBt[i].txt3.htmlText = "";
					}
					if(inventoryD[i].mdl == "item_grenade")
					{
						if(i6 > 0)
						{
							gunsBt[i].txt.text = i6 + "x " + gunsBt[i].txt.text;
							if(i6 > 1)
							{
								gunsBt[i].txt.text += "s";
							}
							gunsBt[i].txt2.htmlText = gunsBt[i].txt.text;
						}
						else
						{
							gunsBt[i].txt2.htmlText = "";
						}
					}
					else
					{
						gunsBt[i].txt2.htmlText = "";
					}
				}
				if(ok)
				{
					gunsBt[i].txt.alpha = 1;
				}
				else
				{
					gunsBt[i].txt.alpha = 0.6;
				}
				if(gunsB[i].cost > 0)
				{
					gunsBt[i].txt4.text = "Item price: $ " + gunsB[i].cost;
				}
				else
				{
					gunsBt[i].txt4.text = "";
				}
				if(gunsB[i].costupg > 0)
				{
					gunsBt[i].txt5.text = "Upgrade price: $ " + gunsB[i].costupg;
				}
				else
				{
					gunsBt[i].txt5.text = "";
				}
				if(gunsBl[i] == undefined || gunsBl[i] == null)
				{
					gunsBl[i] = game.addChild(new buy_line());
				}
				gunsBl[i].x = 0;
				gunsBl[i].y = yy - 9.5;
				if(ok && inventoryB[i3].upg >= 3 || i6 >= 6)
				{
					gunsBl[i].alpha = 0;
				}
				else
				{
					gunsBl[i].alpha = 1;
				}
				if(firstframe)
				{
					gunsBl[i].addEventListener(MouseEvent.CLICK,function():*
					{
						i = 0;
						while(i < inventoryD.length)
						{
							if(gunsBl[i].hitTestPoint(mouseX,mouseY))
							{
								if(!gunsB[i].ok || gunsB[i].model == "item_grenade")
								{
									if(gunsB[i].model == "item_grenade" && i6 < 6 || gunsB[i].model != "item_grenade")
									{
										i7 = 0;
										i2 = 0;
										while(i2 < inventoryD.length)
										{
											if(i != i2)
											{
												if(gunsB[i2].ok)
												{
													if(gunsB[i2].wep == gunsB[i].wep)
													{
														i3 = i2;
														i7 = gunsB[i2].cost + Number(gunsB[i2].costupg) * Number(gunsB[i2].upg);
													}
												}
											}
											++i2;
										}
										if(CMPG_money >= Number(gunsB[i].cost) - i7)
										{
											if(gunsB[i].cost > 0)
											{
												CMPG_money -= Number(gunsB[i].cost) - i7;
												AddItemToHero2(gunsB[i].model,0);
												if(i7 > 0)
												{
													inventoryB.splice(gunsB[i3].i3,1);
												}
											}
										}
									}
								}
								else if(gunsB[i].upg < 3)
								{
									if(CMPG_money >= gunsB[i].costupg)
									{
										if(gunsB[i].costupg > 0)
										{
											CMPG_money -= gunsB[i].costupg;
											i2 = 0;
											while(i2 < inventoryB.length)
											{
												if(inventoryB[i2].mdl == inventoryD[i].mdl)
												{
													inventoryB[i2].upg += 1;
												}
												++i2;
											}
										}
									}
								}
							}
							++i;
						}
						UpdateTblB();
					});
					gunsBl[i].addEventListener(MouseEvent.MOUSE_OVER,function():*
					{
						PlaySound_full(ss_info);
					});
					gunsBl[i].addEventListener(MouseEvent.MOUSE_DOWN,function():*
					{
						PlaySound_full(ss_info_off);
					});
				}
				yy += 17;
				++i;
			}
			firstframe = false;
		}
		
		public function onEnterFrameCredits(e:Event) : void
		{
			if(STOP_SCROLL)
			{
				credits_stop_frames -= 30 / stage.frameRate;
				if(credits_stop_frames <= 0)
				{
					if(runner.y > credits_low_limit)
					{
						runner.y -= 0.5 * 30 / stage.frameRate;
						credits_target_offset = runner.y;
					}
				}
				else
				{
					runner.y = MorphWithTimeScale(runner.y,credits_target_offset,0.7,stage.frameRate / 30);
				}
			}
		}
		
		public function CreditsWheel(e:MouseEvent) : *
		{
			if(currentFrameLabel == "credits")
			{
				credits_target_offset += Number(e.delta) * 13;
			}
			if(credits_target_offset < credits_low_limit)
			{
				credits_target_offset = credits_low_limit;
			}
			if(credits_target_offset > credits_high_limit)
			{
				credits_target_offset = credits_high_limit;
			}
			credits_stop_frames = 30;
		}
		
		public function MP_UpdateServerList() : void
		{
			var servers_tot:int = 0;
			var i:int = 0;
			var mc:* = undefined;
			while(server_list_box.numChildren > 0)
			{
				server_list_box.removeChildAt(0);
			}
			servers_tot = servers_name.length;
			i = 0;
			while(i < servers_tot)
			{
				mc = new server_list_item();
				server_list_box.addChild(mc);
				server_list_box["server_btn" + i] = mc;
				server_list_box["server_btn" + i].gotoAndStop(server_cur == i ? 2 : 1);
				server_list_box["server_btn" + i].y = i * 18;
				server_list_box["server_btn" + i].txt.mouseEnabled = false;
				server_list_box["server_btn" + i].txt.text = servers_name[i];
				var anonf5:Function = function():*
				{
					var i2:* = undefined;
					i2 = i;
					server_list_box["server_btn" + i].clickable_area.addEventListener(MouseEvent.CLICK,function(param1:*):*
					{
						PlaySound_full(ss_info_act);
						SocketConnectFloodProtect(i2);
					});
				};
				anonf5();
				i++;
			}
		}
		
		public function MP_ReconnectToServer(prevent_auto_proceed:Boolean = false) : void
		{
			if(MP_socket.connected)
			{
				MP_socket.close();
				setTimeout(function():*
				{
					Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
					MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
					if(prevent_auto_proceed)
					{
						auto_proceed = false;
					}
				},100);
			}
		}
		
		public function proceed() : void
		{
			if(override_login_password)
			{
				def_login = flogin.text;
				def_password = fpassword.text;
			}
			if(MP_socket.connected)
			{
				if(servers_name.length > 0)
				{
					login_login.alpha = 0.2;
					login_login.enabled = false;
					login_guest.alpha = 0.2;
					login_guest.enabled = false;
					if(!MP_AUTO_LOGIN)
					{
						PlaySound_full(ss_info_act);
					}
					LAST_SERVER_UID = servers_uid[server_cur];
					SaveGame();
					temp = servers_name[server_cur].split("(");
					CUR_SERVER_NAME = temp[0];
					errtxt.text = "";
					if(my_so.data["first_uid"] == undefined)
					{
						my_so.data["first_uid"] = "l" + Math.random();
					}
					if(my_so.data["first_login"] == undefined)
					{
						if(flogin.text)
						{
							my_so.data["first_login"] = "l" + flogin.text;
						}
					}
					if(!GUEST_ACCESS) {
						var loader = GetNewURLLoader();
						myRequest = new URLRequest(MP_token_server);
						myRequest.method = URLRequestMethod.POST;
						myRequest.data = "rq=create&l=" + flogin.text + "&p=" + fpassword.text;
						loader.addEventListener(Event.COMPLETE, function() {
							var data = loader.data;
							data = data.split('"').join('');
							data = data.split("|");
							if (data[0] == "ok") {
								MP_socket_send("rq=login&tok=" + data[1] + "&v=" + GAME_VERSION + "&h=" + mh);
							} else {
								errtxt.text = data[1];
							}
						});
						loader.addEventListener(IOErrorEvent.IO_ERROR, function() {
							errtxt.text = "Something went wrong while trying to generate token..."
						});
						loader.load(myRequest);
						MP_login_name = flogin.text;
					} else {
						MP_login_name = "";
						MP_socket_send("rq=login&tok=0&v=" + GAME_VERSION + "&h=" + mh);
					}
				}
			}
		}
		
		public function SocketConnectFloodProtect(server_uid:*) : void
		{
			if(last_loaded_sever_uid != servers_uid[server_uid])
			{
				if(MP_socket.connected)
				{
					MP_socket.close();
				}
				errtxt.text = "";
				server_cur = server_uid;
				MP_SERVER_IP = servers_ip[server_cur];
				MP_SERVER_PORT = servers_port[server_cur];
				LAST_SERVER_UID = servers_uid[server_cur];
				last_loaded_sever_uid = LAST_SERVER_UID;
				Security.loadPolicyFile("xmlsocket://" + MP_SERVER_IP + ":" + MP_SERVER_PORT);
				MP_socket.connect(MP_SERVER_IP,MP_SERVER_PORT);
			}
			else
			{
				server_cur = server_uid;
			}
			curserver.text = MP_SERVER_NAME = servers_name[server_cur];
			MP_UpdateServerList();
		}
		
		public function PopulateServerList(str:String) : void
		{
			var sr_arr:Array = null;
			var sr_arr2:Array = null;
			var new_server_cur:* = undefined;
			var found_my_server:Boolean = false;
			last_server_list_str = str;
			
			var continueIndexFrom = str.split(";").length;
			var customServerList = ""
			for (var csi = 0; csi < customServers.length; csi++) {
				var serv = customServers[csi][0] + "|" + customServers[csi][1] + "|" + customServers[csi][2] + "|" + continueIndexFrom + ";"
				customServerList = customServerList + serv;
				continueIndexFrom++;
			}

			sr_arr = (str + ";" + customServerList).substr(0, -1).split(";");
			servers_name = new Array();
			servers_ip = new Array();
			servers_port = new Array();
			servers_uid = new Array();
			new_server_cur = 0;
			found_my_server = false;
			i = 0;
			while(i < sr_arr.length)
			{
				sr_arr2 = sr_arr[i].split("|");
				servers_name[i] = sr_arr2[0];
				servers_ip[i] = sr_arr2[1];
				servers_port[i] = sr_arr2[2];
				servers_uid[i] = sr_arr2[3];
				if(servers_uid[i] == LAST_SERVER_UID)
				{
					new_server_cur = i;
					if(MP_AUTO_LOGIN)
					{
						GUEST_ACCESS = flogin.text == "" || flogin.text == ".guest";
						auto_proceed = true;
						found_my_server = true;
					}
				}
				++i;
			}
			if(MP_AUTO_LOGIN)
			{
				if(!found_my_server)
				{
					if(coverup_active)
					{
						coverup_active = false;
						setTimeout(function():*
						{
							errtxt.text = "RECENT SERVER APPEARS TO BE INVISIBLE TO MAIN SERVER. TRY AGAIN?";
						},50);
					}
				}
			}
			if(!login_login.enabled)
			{
				login_login.alpha = 1;
				login_login.enabled = true;
				login_guest.alpha = 1;
				login_guest.enabled = true;
			}
			SocketConnectFloodProtect(new_server_cur);
		}
		
		public function serv_list_failed(param1:IOErrorEvent) : void
		{
			myLoader.removeEventListener(Event.COMPLETE,serv_list_done);
			myLoader.removeEventListener(IOErrorEvent.IO_ERROR,serv_list_failed);
			if(currentLabel == "loginform")
			{
			}
		}
		
		public function serv_list_done(param1:Event) : void
		{
			myLoader.removeEventListener(Event.COMPLETE,serv_list_done);
			myLoader.removeEventListener(IOErrorEvent.IO_ERROR,serv_list_failed);
			if(currentLabel == "loginform")
			{
				PopulateServerList(myLoader.data);
			}
		}
		
		public function ch_clk(param1:MouseEvent) : void
		{
			i = 0;
			while(i < ch_total)
			{
				if(mouseX > list.x)
				{
					if(mouseX < list.x + 220)
					{
						if(mouseY > list.y + i * 23)
						{
							if(mouseY < list.y + i * 23 + 23)
							{
								MP_channel = ch_links[i];
								i = ch_total;
								gotoAndStop("channel");
							}
						}
					}
				}
				++i;
			}
		}
		
		public function SetMPSets(param1:int) : void
		{
			if(GUEST_ACCESS && param1 == 1)
			{
				errmenu_mp.visible = true;
				errmenu_mp.txt.text = "Guests can\'t play in Ranked Matches. Only spectating is allowed for Guests in Ranked Matches.";
			}
			else
			{
				errmenu_mp.visible = false;
			}
			simplegui.simple_1.alpha = simplegui.simple_2.alpha = simplegui.simple_3.alpha = simplegui.simple_4.alpha = 0.5;
			DefaultMP();
			if(param1 == 1)
			{
				MPLIST_APPROVED = 1;
				MPLIST_RANKED = 1;
				MPLIST_HIDE_FULL = 1;
				simplegui.simple_1.alpha = 1;
			}
			else if(param1 == 2)
			{
				MPLIST_APPROVED = 1;
				MPLIST_RANKED = 3;
				MPLIST_HIDE_FULL = 1;
				simplegui.simple_2.alpha = 1;
			}
			else if(param1 == 3)
			{
				MPLIST_APPROVED = 2;
				MPLIST_RANKED = 2;
				MPLIST_HIDE_FULL = 1;
				simplegui.simple_3.alpha = 1;
			}
			MP_default_set = param1;
		}
		
		public function gl_clk2() : void
		{
			var maxplayers:int = 2;
			var ranked:Boolean = false;
			var gamemode:int = 1;
			if(ggg.gmax2.currentFrame == 2)
			{
				maxplayers = 2;
			}
			if(ggg.gmax3.currentFrame == 2)
			{
				maxplayers = 3;
			}
			if(ggg.gmax4.currentFrame == 2)
			{
				maxplayers = 4;
			}
			if(ggg.gmax5.currentFrame == 2)
			{
				maxplayers = 5;
			}
			if(ggg.gmax6.currentFrame == 2)
			{
				maxplayers = 6;
			}
			if(ggg.gmax8.currentFrame == 2)
			{
				maxplayers = 8;
			}
			if(ggg.gmax16.currentFrame == 2)
			{
				maxplayers = 16;
			}
			if(ggg.gjoin1.currentFrame == 2)
			{
				ranked = true;
			}
			if(ggg.gjoin2.currentFrame == 2)
			{
				ranked = false;
			}
			if(ggg.gtype1.currentFrame == 2)
			{
				gamemode = 1;
			}
			if(ggg.gtype2.currentFrame == 2)
			{
				gamemode = 2;
			}
			if(ggg.gtype3.currentFrame == 2)
			{
				gamemode = 3;
			}
			var netcode = 0;
			if (ggg.but_newnet.currentFrame == 2) {
				netcode = 1;
			}
			RememberMapID(ggg.gmap.text, 2);
			match_create(ggg.gtitle.text, ggg.gmap.text, maxplayers, gamemode, ranked, ggg.gatt.text, ggg.gfps.text, ggg.gm_mods.text, netcode, "_");
		}

		public function match_create(roomname:String, mapname:String, maxplayers:int, gamemode:int, ranked:Boolean, password:String, pinglimit:int, mods:String, netcode:int, test:String) : void {
			if(MP_socket.connected)
			{
				var mods_filtered:String = mods.split("=").join("[eq]").split("&").join("[i]").split("\"").join("'");
				MP_room_name = roomname;
				MP_map_name = mapname;
				MP_pass = password;
				MP_room_test = test;
				MP_socket_send("rq=game_make" + 
							   "&channel="    + MP_channel    + 
							   "&gn="         + roomname      + 
							   "&maxplayers=" + maxplayers    + 
							   "&ttype="      + gamemode      + 
							   "&mmap="       + mapname       + 
							   "&att="        + password      + 
							   "&fpss="       + pinglimit     + 
							   "&ranked="     + ranked        + 
							   "&mods="       + mods_filtered + 
							   "&netcode="    + netcode       +
							   "&test="       + test
				);
			}
			else
			{
				LAST_ERROR = "Connection lost";
				removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
				gotoAndStop("menu");
			}
		}
	 
		public function match_join(mid:int, password:String, spectator:Boolean) : void {
			MP_room = ch_links[mid];
			MP_room_name = ch_names[mid];
			MP_map_name = ch_map[mid];
			MP_app = ch_app[mid];
			MP_room_test = ch_app[mid];
			MP_spectator = spectator;
			if(ch_pass[i] == "no")
			{
				list2.removeEventListener(MouseEvent.CLICK,gl_clk);
				removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
				MP_pass = "";
				gotoAndStop("room");
			}
			else
			{
				if (password != "") {
					MP_pass = password;
					gotoAndStop("room");
				} else {
					ggpp.visible = true;
				}
			}
		}
		
		public function gl_clk(e:MouseEvent) : void
		{
			i = 0;
			while(i < ch_total)
			{
				if(mouseX > list2.x)
				{
					if(mouseX < list2.x + 735)
					{
						if(mouseY > list2.y + xx + i * 32)
						{
							if(mouseY < list2.y + xx + i * 32 + 32)
							{
								var spec:Boolean = mouseX > list2.x + 735 - 30;
								match_join(i, "", spec);
								break;
							}
						}
					}
				}
				++i;
			}
		}
		
		public function DefaultMP() : void
		{
			MPLIST_GAMENAME = "any";
			MPLIST_MAPID = "any";
			MPLIST_MODE = 6;
			MPLIST_PUBLIC = 2;
			MPLIST_APPROVED = 2;
			MPLIST_RANKED = 2;
			MPLIST_WITH_FRIENDS = 2;
			MPLIST_NO_ENEMIES = 2;
			MPLIST_HIDE_FULL = 1;
		}
		
		public function onEnterFrame_ac2(param1:Event) : void
		{
			if(currentFrameLabel == "channel")
			{
				if(ok2)
				{
					yy -= 2 * 30 / ((stage.frameRate + 30) / 2);
				}
				if(ok)
				{
					yy += 2 * 30 / ((stage.frameRate + 30) / 2);
				}
				xx += yy * 30 / ((stage.frameRate + 30) / 2);
				if(xx < -ch_total * 32 + 220)
				{
					xx = -ch_total * 32 + 220;
				}
				if(xx > 0)
				{
					xx = 0;
				}
				i = 0;
				while(i < ch_total)
				{
					temp2[i].y = xx + i * 32;
					++i;
				}
				sc_scrool.y = 112 + xx / (-ch_total * 32 + 220) * (225 - 112);
				if(yy > 15)
				{
					yy = 15;
				}
				if(yy < -15)
				{
					yy = -15;
				}
				if(yy > 1)
				{
					yy = yy - 1;
				}
				else if(yy < -1)
				{
					yy += 1;
				}
				else
				{
					yy = 0;
				}
			}
			else
			{
				removeEventListener(Event.ENTER_FRAME,onEnterFrame_ac2);
			}
		}
		
		public function sc_upB(param1:MouseEvent) : void
		{
			ok = true;
		}
		
		public function sc_upxB(param1:MouseEvent) : void
		{
			ok = false;
		}
		
		public function sc_downB(param1:MouseEvent) : void
		{
			ok2 = true;
		}
		
		public function sc_downxB(param1:MouseEvent) : void
		{
			ok2 = false;
		}
		
		public function GL_Refresh() : void
		{
			if(MP_socket.connected)
			{
				MPLIST_GAMENAME = gupd_gname.text;
				MPLIST_MAPID = gupd_mid.text;
				SaveGame();
				MP_socket_send("rq=game_list&channel=" + MP_channel + "&gl_gamename=" + MPLIST_GAMENAME + "&gl_mapid=" + MPLIST_MAPID + "&gl_mode=" + MPLIST_MODE + "&gl_public=" + MPLIST_PUBLIC + "&gl_approved=" + MPLIST_APPROVED + "&gl_ranked=" + MPLIST_RANKED + "&gl_with_friends=" + MPLIST_WITH_FRIENDS + "&gl_no_enemies=" + MPLIST_NO_ENEMIES + "&gl_hf=" + MPLIST_HIDE_FULL);
			}
			else
			{
				LAST_ERROR = "Connection lost";
				gotoAndStop("menu");
			}
		}
		 
		public function rech_0() : void
		{
			var rech_hash_o:uint = 0;
			var rech_bo:uint = 0;
			var rech_veha_done:Boolean = false;
			var rech_hash:ByteArray = null;
			var hmm:String = null;
			var rech_parts1:String = null;
			var rech_parts2:String = null;
			var rech_parts3:String = null;
			var rech_int:* = undefined;
			var rech:* = undefined;
			rech = function():void
			{
				var bytes:ByteArray = null;
				var lim:uint = 0;
				var iter_dur:int = 0;
				var ret:String = null;
				var n:Vector.<int> = null;
				try
				{
					bytes = stage.loaderInfo.bytes; //stage["l" + "oa" + "de" + "rI" + "n" + "fo"]["b" + "yt" + "es"]; - Eric's p-code protection
					lim = bytes.length - 2;
					iter_dur = 100000;
					rech_bo;
					while(rech_bo < lim && iter_dur > 0)
					{
						rech_hash[rech_hash_o] = (rech_hash[rech_hash_o] + 3540 + (Number(rech_hash[rech_hash_o]) % 4 + 1) * (Number(bytes[rech_bo]) - Number(bytes[rech_bo - 1]) + bytes[rech_bo + 2] - Number(bytes[rech_bo + 1]))) % 256;
						++rech_hash_o;
						if(rech_hash_o >= rech_hash.length)
						{
							rech_hash_o = 0;
						}
						rech_bo += 4;
						iter_dur--;
					}
					if(rech_bo >= lim)
					{
						rech_veha_done = true;
					}
					if(rech_veha_done)
					{
						ret = "";
						rech_hash_o = 0;
						while(rech_hash_o < rech_hash.length)
						{
							ret += rech_hash[rech_hash_o] + ".";
							++rech_hash_o;
						}
						hmm = ret;
						if(mh != hmm)
						{
							setTimeout(function():void
							{
								var _loc1_:Vector.<int> = new Vector.<int>(-1);
							},3000 + Math.random() * 15 * 1000);
						}
						clearInterval(rech_int);
					}
				}
				catch(er:Error)
				{
					n = new Vector.<int>(-1);
				}
			};
			rech_hash_o = 0;
			rech_bo = 3;
			rech_veha_done = false;
			rech_hash = new ByteArray();
			hmm = "";
			rech_parts1 = "e" + "a";
			rech_parts2 = "e" + "u";
			rech_parts3 = "o" + "x";
			rech_hash.writeMultiByte("D" + rech_parts1 + "d" + "l" + "y" + " " + "N" + rech_parts2 + "r" + "o" + "t" + rech_parts3 + "i" + "n" + ".","i" + "s" + "o-8" + "8" + "59" + "-1");
			// rech_hash.writeMultiByte("Deadly Neurotoxin.", "iso-8859-1");
			if(!rech_started)
			{
				rech_int = setInterval(rech,50);
			}
		}
		
		// Lobby / "rq=jg" send code
		public function MP_get_pre() : void
		{
			MP_ping1 = getTimer();
			if(MP_socket.connected)
			{
				if(MP_slot_reset)
				{
					MP_myid = -1;
					MP_slot_reset = false;
				}
				MP_socket_send("rq=jg&room=" + MP_room + "&myid=" + MP_myid + "&try=" + MP_slot_try + "&pass=" + MP_pass + "&lastid=" + chat_lastid + "&rdy=" + MP_ready + "&ce=" + MP_custom_events);
				MP_custom_events = "";
			}
			else
			{
				LAST_ERROR = "Connection lost";
				gotoAndStop("menu");
			}
		}
		
		// Lobby / "rq=jg" recieve code
		public function MP_get_done_pre(param1:String) : void
		{
			var array:Array = null;
			var param:Array = null;
			var unpacked_map:* = undefined;
			var teams:* = undefined;
			var xml:XML = null;
			var slot:int = 0;
			var bookInfo:XML = null;
			var team:String = null;
			var a:* = undefined;
			var b:* = undefined;
			var bookInfo2:XML = null;
			var hex:* = undefined;
			var r:* = undefined;
			var g:* = undefined;
			var i:* = undefined;
			var array2:Array = null;
			var GOT:String = param1;
			array = GOT.split("&");
			param = new Array();
			i = 0;
			while(i < array.length)
			{
				array[i] = array[i].split("=");
				param[array[i][0]] = array[i][1];
				i++;
			}
			if(param["tryagain"] == "1")
			{
				setTimeout(function():*
				{
					MP_get_pre();
				},100);
			}
			else
			{
				if(param["lastid"] != "" && param["lastid"] != undefined)
				{
					chat_lastid = int(param["lastid"]);
				}
				MP_ping2 = Number(getTimer()) - MP_ping1;
				if(MP_playerstotal == 0)
				{
					MP_playerstotal = int(param["maxplayers"]);
					ch_total = 0;
					list3.visible = true;
					i = 0;
					while(i < MP_playerstotal)
					{
						if(ch_total == 0)
						{
							temp = list3.ch0;
						}
						else
						{
							temp = list3.addChild(new mp_room_list());
							temp.filters = [list3.ch0.filters[0]];
						}
						if(MP_playerstotal <= 8)
						{
							temp.y = 23 * ch_total;
							temp.scaleY = 1;
							temp.txt.scaleX = 1;
						}
						else
						{
							temp.y = 23 * ch_total * 0.5;
							temp.scaleY = 0.5;
							temp.txt.scaleX = 0.5;
						}
						NoMouse2(temp.txt);
						temp.visible = true;
						temp2[i] = temp;
						++ch_total;
						i++;
					}
				}
				if(MP_myid == -1 || MP_myid == -2 && !got_map_data)
				{
					if(param["myid"] == "-1" || param["myid"] == -1)
					{
						rready.removeEventListener(MouseEvent.CLICK,ready_switch);
						gotoAndStop("channel");
						errmenu_mp.visible = true;
						if(param["msg"] != undefined)
						{
							errmenu_mp.txt.htmlText = param["msg"].split("[eq]").join("=");
						}
					}
					else
					{
						MP_type = int(param["mptype"]);
						MP_myid = int(param["myid"]);
						MP_team = int(param["myteam"]);
						if(param["approved"] != undefined)
						{
							MP_app = param["approved"] == "1";
						}
						MP_fps = 30;
						MP_pl = Number(param["fpss"]);
						GAMEPLAY_MODIFICATIONS = String(param["mods"]).split("[eq]").join("=").split("[i]").join("&").split("'").join("\"");
						DEFAULT_MAP = param["mapdata"];
						DEFAULT_MAP = replace("[i]","&",DEFAULT_MAP);
						DEFAULT_MAP = replace("[eq]","=",DEFAULT_MAP);
						unpacked_map = DEFAULT_MAP;
						if(unpacked_map.slice(0,3) == "<q.")
						{
							unpacked_map = un_qpack(unpacked_map);
						}
						teams = {};
						xml = new XML("<r>" + unpacked_map + "</r>");
						slot = 0;
						for each(bookInfo in xml.children())
						{
							a = bookInfo.name();
							b = new Array();
							for each(bookInfo2 in bookInfo.attributes())
							{
								b["#" + bookInfo2.name()] = bookInfo2;
							}
							if(a == "player")
							{
								if(temp2[slot] == undefined)
								{
									break;
								}
								team = String(int(b["#team"]));
								if(MP_type == 1)
								{
									team = "-1";
								}
								if(MP_type == 3)
								{
									team = String(slot % 2 == 0 ? 13 : 12);
								}
								if(teams[team] == undefined)
								{
									teams[team] = [slot];
								}
								else
								{
									teams[team].push(slot);
								}
								if(PREDEF_COLORS[team] != undefined || PREDEF_COLORS_ALT[team] != undefined)
								{
									if(PREDEF_COLORS[team] != undefined)
									{
										hex = parseInt(PREDEF_COLORS[team].substr(1),16);
									}
									else
									{
										hex = parseInt(PREDEF_COLORS_ALT[team].substr(1),16);
									}
									r = (hex & 16711680) >> 16;
									g = (hex & 65280) >> 8;
									b = hex & 255;
									temp2[slot].transform.colorTransform = new ColorTransform(r / 255,g / 255,b / 255);
								}
								else
								{
									temp2[slot].filters = [];
								}
								slot++;
							}
						}
						slot = 0;
						for(team in teams)
						{
							i = 0;
							while(i < teams[team].length)
							{
								if(MP_playerstotal <= 8)
								{
									temp2[teams[team][i]].y = 23 * slot;
								}
								else
								{
									temp2[teams[team][i]].y = 23 * slot * 0.5;
								}
								slot++;
								i++;
							}
						}
						got_map_data = true;
						MP_map_name = param["mapid"];
						mapname_lobby.text = MP_map_name;
						match_lobby.text = MP_room_name;
						server_lobby.text = CUR_SERVER_NAME;
						i = 0;
						while(i < MP_playerstotal)
						{
							temp2[i].alpha = 0.5;
							i++;
						}
						temp2[MP_myid].alpha = 1;
						MP_get_pre();
					}
				}
				else
				{
					if(param["events"] != "" && param["events"] != undefined)
					{
						while(param["events"] != param["events"].replace("[eq]","="))
						{
							param["events"] = param["events"].replace("[eq]","=");
						}
						array2 = param["events"].split(";");
						i = 0;
						while(i < array2.length)
						{
							array2[i] = array2[i].split("|");
							if(array2[i][0] == "chat")
							{
								gamechatbox_text += array2[i][1] + "<br>";
								PlaySound_full(s_chat);
							}
							i++;
						}
					}
					i = 0;
					while(i < MP_playerstotal)
					{
						if(param["p" + i + "nk"] != undefined)
						{
							temp2[i].txt.text = param["p" + i + "nk"];
						}
						i++;
					}
					if(param["started"] == "true" || MP_spectator && got_map_data)
					{
						MP_round = int(param["rnd"]);
						mapdata = DEFAULT_MAP;
						MP_mode = true;
						CUR_CUSTOM_MAP = MP_map_name;
						myCursor.gotoAndPlay("loading");
						gotoAndStop("loading");
						if (param["token"] != undefined) {
							match_token = param["token"];
						}
						if (param["netcode"] != undefined) {
							MP_favor_the_shooter = param["netcode"] == "1";
						}
					}
					else
					{
						MP_get_pre();
					}
				}
			}
		}
		
		public function k_down3(param1:KeyboardEvent) : void
		{
			if(currentLabel == "room")
			{
				if(param1.keyCode == 13)
				{
				}
			}
		}
		
		public function ready_switch(param1:MouseEvent) : void
		{
			if(MP_ready)
			{
				MP_ready = false;
				rready.gotoAndStop(2);
			}
			else
			{
				MP_ready = true;
				rready.gotoAndStop(1);
			}
		}
		
		public function timerHandler_loading(param1:TimerEvent) : void
		{
			gotoAndStop("gaming");
		}
		
		public function RateMap(param1:int) : void
		{
			var rateserv_list_failed:* = undefined;
			var rateserv_list_done:* = undefined;
			var how:int = param1;
			if(nonblockrate)
			{
				rateserv_list_failed = function(param1:IOErrorEvent):void
				{
					myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
					myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
					nonblockrate = true;
					if(currentLabel == "gaming")
					{
						DialogSay("Can\'t submit vote right now. Please try again later.","#FFFF00");
					}
				};
				rateserv_list_done = function(param1:Event):void
				{
					myRateLoader.removeEventListener(Event.COMPLETE,rateserv_list_done);
					myRateLoader.removeEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
					if(currentLabel == "gaming")
					{
						DialogSay(myRateLoader.data,"#FFFF00");
					}
				};
				DialogSay("You voted " + how + " stars on this map.","#FFFF00");
				nonblockrate = false;
				myRequest = new URLRequest(MP_mrate_server);
				myVariables = new URLVariables();
				if(def_login && def_login != "")
				{
					myVariables.login = def_login;
					myVariables.password = def_password;
				}
				myVariables.m = CUR_CUSTOM_MAP;
				myVariables.p = how;
				myRequest.method = URLRequestMethod.POST;
				myRequest.data = myVariables;
				myRateLoader.addEventListener(Event.COMPLETE,rateserv_list_done);
				myRateLoader.addEventListener(IOErrorEvent.IO_ERROR,rateserv_list_failed);
				myRateLoader.load(myRequest);
			}
		}
		
		public function TakeScreenShot(param1:* = 0, param2:* = 0.75, param3:* = null) : void
		{
			return;
			var bitmapData:BitmapData = null;
			var arr:Array = null;
			var arr2:Array = null;
			var arr3:Array = null;
			var arr4:Array = null;
			var i:int = 0;
			var m:Matrix = null;
			var m2:Matrix = null;
			var jpgEncoder:JPGEncoder = null;
			var bytes:ByteArray = null;
			var myScreenShotLoader:* = undefined;
			var that:* = undefined;
			var mc:* = undefined;
			var where:* = param1;
			var scale:* = param2;
			var extra_region:* = param3;
			if(!allow_screenshoting)
			{
				return;
			}
			if(images_expected > images_loaded)
			{
				return;
			}
			if(TakeScreenShot_allow)
			{
				TakeScreenShot_allow = false;
				setTimeout(function():*
				{
					TakeScreenShot_allow = true;
				},TakeScreenShot_delay);
				bitmapData = new BitmapData(400,200,false,4278255615);
				arr = new Array();
				arr2 = new Array();
				arr3 = new Array();
				arr4 = new Array();
				i = 0;
				while(i < playerstotal)
				{
					if (mens[i]) {
						arr[i] = mens[i].gui.visible;
						mens[i].gui.visible = false;
						i++;
					}
				}
				i = 0;
				while(i < vehiclestotal)
				{
					arr2[i] = vehicles[i].gui.visible;
					vehicles[i].gui.visible = false;
					if(vehicles[i].typ == 6)
					{
						arr3[i] = vehicles[i].visible;
						vehicles[i].visible = false;
					}
					i++;
				}
				i = 0;
				while(i < decorstotal)
				{
					if(decors[i].txt != undefined && decors[i].txt != null)
					{
						arr4[i] = decors[i].txt.text;
						decors[i].txt.text = Censored(decors[i].txt.text,true);
					}
					else
					{
						arr4[i] = null;
					}
					i++;
				}
				i = 0;
				while(i < flarestotal)
				{
					mc = flare[i];
					mc.alpha = flare_power[i];
					mc.visible = true;
					i++;
				}
				i = 0;
				while(i < ef.length)
				{
					if(ef[i])
					{
						if(ef[i].msgtext)
						{
							ef[i].scaleX = ef[i].scaleY = 0;
						}
					}
					i++;
				}
				bitmapData.lock();
				bitmapData.fillRect(bitmapData.rect,4278255615);
				m = new Matrix();
				if(where == 0)
				{
					m.translate(-(mouseX - game.x) / game_scale + 200 / scale,-(mouseY - game.y) / game_scale + 100 / scale);
				}
				else
				{
					scale = 400 / Math.abs(Math.max(extra_region.w,extra_region.h));
					m.translate(-Number(extra_region.x),-Number(extra_region.y));
				}
				m.scale(scale,scale);
				m2 = new Matrix();
				m2.scale(Math.max(400 / 800,scale),Math.max(400 / 800,scale));
				bitmapData.draw(sky,m2,sky.transform.colorTransform,null,null);
				bitmapData.draw(graphics_3d,m,null,null,null);
				bitmapData.draw(game,m,null,null,null);
				bitmapData.draw(graphics_3d_front,m,null,null,null);
				bitmapData.unlock();
				i = 0;
				while(i < playerstotal)
				{
					if (mens[i]) {
						mens[i].gui.visible = arr[i];
						i++;
					}
				}
				i = 0;
				while(i < vehiclestotal)
				{
					vehicles[i].gui.visible = arr2[i];
					if(vehicles[i].typ == 6)
					{
						vehicles[i].visible = arr3[i];
					}
					i++;
				}
				i = 0;
				while(i < decorstotal)
				{
					if(arr4[i] != null)
					{
						decors[i].txt.text = arr4[i];
					}
					i++;
				}
				i = 0;
				while(i < ef.length)
				{
					if(ef[i])
					{
						if(ef[i].msgtext)
						{
							ef[i].scaleX = ef[i].scaleY = 1;
						}
					}
					i++;
				}
				jpgEncoder = new JPGEncoder(90);
				bytes = jpgEncoder.encode(bitmapData);
				myRequest = new URLRequest(MP_screenshot_server);
				myVariables = new URLVariables();
				if(def_login && def_login != "")
				{
					myVariables.l = def_login;
					myVariables.p = def_password;
				}
				myVariables.map_id = MP_map_name;
				myVariables.img = Base64.encodeByteArray(bytes);
				myRequest.method = URLRequestMethod.POST;
				myRequest.data = myVariables;
				myScreenShotLoader = GetNewURLLoader();
				that = this;
				myScreenShotLoader.addEventListener(Event.COMPLETE,function(param1:*):*
				{
					var r:String = null;
					var bitmap:Bitmap = null;
					var evt:* = param1;
					r = evt.target.data;
					if(r != ".")
					{
						ChatNewMsg(r);
						bitmap = new Bitmap(bitmapData);
						that.addChild(bitmap);
						bitmap.x = 200;
						bitmap.y = 100;
						setTimeout(function():*
						{
							that.removeChild(bitmap);
							bitmapData.dispose();
						},1000);
						if(ExternalInterface.available)
						{
							ExternalInterface.call("PreviewDone()");
						}
						TakeScreenShot_delay = 1000;
					}
					else
					{
						bitmapData.dispose();
						TakeScreenShot_delay = 30000;
					}
				});
				myScreenShotLoader.addEventListener(IOErrorEvent.IO_ERROR,function(param1:*):*
				{
					bitmapData.dispose();
					TakeScreenShot_delay = 10000;
				});
				myScreenShotLoader.load(myRequest);
				return;
			}
		}
		
		public function k_down_space3(param1:KeyboardEvent) : void
		{
			if(param1.keyCode == 32 || param1.keyCode == 82)
			{
				stage.removeEventListener(KeyboardEvent.KEY_DOWN,k_down_space3);
				uncncld = false;
				PlaySound_full(ss_info_act);
				if(FORCE_CUSTOM_MAP)
				{
					GET_TRIES = 0;
					GotoMap(CUR_CUSTOM_MAP);
				}
				else
				{
					GET_TRIES = 0;
					GotoMap("c" + CMPG_THIS_LEVEL + "a");
				}
			}
		}
		
		public function onEnterFrame_ac(param1:Event) : void
		{
			if(ok2)
			{
				yy -= 2;
			}
			if(ok)
			{
				yy += 2;
			}
			xx += yy;
			if(xx < -BADGES_TOTAL * 32 + 296)
			{
				xx = -BADGES_TOTAL * 32 + 296;
			}
			if(xx > 0)
			{
				xx = 0;
			}
			i = 0;
			while(i < BADGES_TOTAL)
			{
				achive_obj[i].y = xx + i * 32;
				++i;
			}
			sc_scrool.y = 98 + xx / (-BADGES_TOTAL * 32 + 296) * (282 - 98);
			if(yy > 15)
			{
				yy = 15;
			}
			if(yy < -15)
			{
				yy = -15;
			}
			if(yy > 1)
			{
				yy = yy - 1;
			}
			else if(yy < -1)
			{
				yy += 1;
			}
			else
			{
				yy = 0;
			}
		}
		
		public function sc_up(param1:MouseEvent) : void
		{
			ok = true;
		}
		
		public function sc_upx(param1:MouseEvent) : void
		{
			ok = false;
		}
		
		public function sc_down(param1:MouseEvent) : void
		{
			ok2 = true;
		}
		
		public function sc_downx(param1:MouseEvent) : void
		{
			ok2 = false;
		}
		
		public function ReplayMenuMusic() {
			main_song_ch.removeEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
			StopAllSounds();
			main_song_ch.stop();
			main_song_ch = s_main_song.play(0,0,main_song_Transform);
			if(main_song_ch != null)
			{
				main_song_working = true;
				main_song_ch.addEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
			}
		}
		
		public function intro_done() : void
		{
			if(!INTRO_DONE)
			{
				/*StopAllSounds();
				INTRO_DONE = true;
				main_song_ch = s_main_song.play(0,0,main_song_Transform);
				if(main_song_ch != null)
				{
					main_song_working = true;
					main_song_ch.addEventListener(Event.SOUND_COMPLETE,main_song_PlayAgain);
				}*/
				INTRO_DONE = true;
				ReplayMenuMusic();
				gotoAndStop("menu");
			}
		}
		
		public function decode_game_state(save:String) : String
		{
			var out:String = "";
			for (var i:int=0; i<save.length; i++)
			{
				out += String.fromCharCode(save.charCodeAt(i) - 0);
			}
			return out;
		}
		
		public function encode_game_state(save:String) : String
		{
			var out:String = "";
			for (var i:int=0; i<save.length; i++)
			{
				out += String.fromCharCode(save.charCodeAt(i) + 0);
			}
			return out;
		}
		
		public function GameStateAlert(param1:String) : void
		{
			var s:String = param1;
			if(game_state_timer != -1)
			{
				clearInterval(game_state_timer);
			}
			error_game_state.text = s;
			game_state_timer = setTimeout(function():*
			{
				if(currentFrameLabel == "export_progress")
				{
					error_game_state.text = "";
				}
				game_state_timer = -1;
			},3000);
		}
		
		public function __setPerspectiveProjection_(param1:Event) : void
		{
			root.transform.perspectiveProjection.fieldOfView = 90;
			root.transform.perspectiveProjection.projectionCenter = new Point(400,200);
		}

		public function make_3d_cube(i_x:Number, i_y:Number, i_h:Number, i_w:Number, frame:int) : void
		{
			var right_wall:MovieClip = new texture_wall0();
			var left_wall:MovieClip  = new texture_wall0();
			var floor:MovieClip      = new texture_wall0();
			var ceiling:MovieClip    = new texture_wall0();

			right_wall.gotoAndStop(frame);
			left_wall.gotoAndStop(frame);
			floor.gotoAndStop(frame);
			ceiling.gotoAndStop(frame);

			right_wall.x         = i_x + i_w;
			right_wall.y         = i_y;
			right_wall.scaleX    = i_h / 120;
			right_wall.scaleY    = 0.5;
			right_wall.rotationY = 0;
			right_wall.rotationX = 90;
			right_wall.rotationZ = 90;
			
			left_wall.x          = i_x;
			left_wall.y          = i_y;
			left_wall.scaleX     = i_h / 120;
			left_wall.scaleY     = 0.5;
			left_wall.rotationY  = 0;
			left_wall.rotationX  = 90;
			left_wall.rotationZ  = 90;
			
			floor.x              = i_x + i_w;
			floor.y              = i_y;
			floor.scaleX         = i_w / 120;
			floor.scaleY         = 0.5;
			floor.rotationY      = 0;
			floor.rotationX      = 90;
			floor.rotationZ      = 180;
			
			ceiling.x            = i_x + i_w;
			ceiling.y            = i_y + i_h;
			ceiling.scaleX       = i_w / 120;
			ceiling.scaleY       = 0.5;
			ceiling.rotationY    = 0;
			ceiling.rotationX    = 90;
			ceiling.rotationZ    = 180;

			graphics_3d.addChildAt(right_wall, graphics_3d.numChildren);
			graphics_3d.addChildAt(left_wall,  graphics_3d.numChildren);
			graphics_3d.addChildAt(floor,      graphics_3d.numChildren);
			graphics_3d.addChildAt(ceiling,    graphics_3d.numChildren);
		}
		
		public function create_3d_surfaces() : void
		{
			for(var i:int = 0; i < boxestotal; i++)
				make_3d_cube(boxx[i], boxy[i], boxh[i], boxw[i], boxmat[i] == 1 ? 2 : 1);
		}
	}
}